{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nvar DataTypes = require(\"../../data-types\");\nvar QueryTypes = require(\"../../query-types\");\nvar _require = require(\"../abstract/query-interface\"),\n  QueryInterface = _require.QueryInterface;\nvar Utils = require(\"../../utils\");\nvar Deferrable = require(\"../../deferrable\");\nvar PostgresQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(PostgresQueryInterface, _QueryInterface);\n  var _super = _createSuper(PostgresQueryInterface);\n  function PostgresQueryInterface() {\n    _classCallCheck(this, PostgresQueryInterface);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PostgresQueryInterface, [{\n    key: \"ensureEnums\",\n    value: function () {\n      var _ensureEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tableName, attributes, options, model) {\n        var _this = this;\n        var keys, keyLen, sql, promises, i, attribute, type, results, enumIdx, addEnumValue, _loop, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              keys = Object.keys(attributes);\n              keyLen = keys.length;\n              sql = \"\";\n              promises = [];\n              i = 0;\n              for (i = 0; i < keyLen; i++) {\n                attribute = attributes[keys[i]];\n                type = attribute.type;\n                if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n                  sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n                  promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n                    plain: true,\n                    raw: true,\n                    type: QueryTypes.SELECT\n                  })));\n                }\n              }\n              _context3.next = 8;\n              return Promise.all(promises);\n            case 8:\n              results = _context3.sent;\n              promises = [];\n              enumIdx = 0;\n              addEnumValue = function addEnumValue(field, value, relativeValue) {\n                var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"before\";\n                var spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;\n                var valueOptions = __spreadValues({}, options);\n                valueOptions.before = null;\n                valueOptions.after = null;\n                switch (position) {\n                  case \"after\":\n                    valueOptions.after = relativeValue;\n                    break;\n                  case \"before\":\n                  default:\n                    valueOptions.before = relativeValue;\n                    break;\n                }\n                promises.splice(spliceStart, 0, function () {\n                  return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n                });\n              };\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var attribute, type, enumType, field, enumVals, vals, lastOldEnumValue, rightestPosition, oldIndex, enumVal, newIdx, newValuesBefore, promisesLength, reverseIdx, remainingEnumValues, _reverseIdx;\n                return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      attribute = attributes[keys[i]];\n                      type = attribute.type;\n                      enumType = type.type || type;\n                      field = attribute.field || keys[i];\n                      if (!(type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM)) {\n                        _context2.next = 36;\n                        break;\n                      }\n                      if (results[enumIdx]) {\n                        _context2.next = 9;\n                        break;\n                      }\n                      promises.push(function () {\n                        return _this.sequelize.query(_this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {\n                          raw: true\n                        }));\n                      });\n                      _context2.next = 36;\n                      break;\n                    case 9:\n                      if (!(!!results[enumIdx] && !!model)) {\n                        _context2.next = 36;\n                        break;\n                      }\n                      enumVals = _this.queryGenerator.fromArray(results[enumIdx].enum_value);\n                      vals = enumType.values;\n                      rightestPosition = -1;\n                      oldIndex = 0;\n                    case 14:\n                      if (!(oldIndex < enumVals.length)) {\n                        _context2.next = 34;\n                        break;\n                      }\n                      enumVal = enumVals[oldIndex];\n                      newIdx = vals.indexOf(enumVal);\n                      lastOldEnumValue = enumVal;\n                      if (!(newIdx === -1)) {\n                        _context2.next = 20;\n                        break;\n                      }\n                      return _context2.abrupt(\"continue\", 31);\n                    case 20:\n                      newValuesBefore = vals.slice(0, newIdx);\n                      promisesLength = promises.length;\n                      reverseIdx = newValuesBefore.length - 1;\n                    case 23:\n                      if (!(reverseIdx >= 0)) {\n                        _context2.next = 30;\n                        break;\n                      }\n                      if (!~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                        _context2.next = 26;\n                        break;\n                      }\n                      return _context2.abrupt(\"break\", 30);\n                    case 26:\n                      addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n                    case 27:\n                      reverseIdx--;\n                      _context2.next = 23;\n                      break;\n                    case 30:\n                      if (newIdx > rightestPosition) {\n                        rightestPosition = newIdx;\n                      }\n                    case 31:\n                      oldIndex++;\n                      _context2.next = 14;\n                      break;\n                    case 34:\n                      if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n                        remainingEnumValues = vals.slice(rightestPosition + 1);\n                        for (_reverseIdx = remainingEnumValues.length - 1; _reverseIdx >= 0; _reverseIdx--) {\n                          addEnumValue(field, remainingEnumValues[_reverseIdx], lastOldEnumValue, \"after\");\n                        }\n                      }\n                      enumIdx++;\n                    case 36:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop);\n              });\n              i = 0;\n            case 14:\n              if (!(i < keyLen)) {\n                _context3.next = 19;\n                break;\n              }\n              return _context3.delegateYield(_loop(), \"t0\", 16);\n            case 16:\n              i++;\n              _context3.next = 14;\n              break;\n            case 19:\n              _context3.next = 21;\n              return promises.reduce( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(promise, asyncFunction) {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.t0 = asyncFunction;\n                        _context.next = 3;\n                        return promise;\n                      case 3:\n                        _context.t1 = _context.sent;\n                        _context.next = 6;\n                        return (0, _context.t0)(_context.t1);\n                      case 6:\n                        return _context.abrupt(\"return\", _context.sent);\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function (_x5, _x6) {\n                  return _ref.apply(this, arguments);\n                };\n              }(), Promise.resolve());\n            case 21:\n              result = _context3.sent;\n              if (!promises.length) {\n                _context3.next = 25;\n                break;\n              }\n              _context3.next = 25;\n              return this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n            case 25:\n              return _context3.abrupt(\"return\", result);\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, this);\n      }));\n      function ensureEnums(_x, _x2, _x3, _x4) {\n        return _ensureEnums.apply(this, arguments);\n      }\n      return ensureEnums;\n    }()\n  }, {\n    key: \"getForeignKeyReferencesForTable\",\n    value: function () {\n      var _getForeignKeyReferencesForTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(table, options) {\n        var queryOptions, query, result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              queryOptions = __spreadProps(__spreadValues({}, options), {\n                type: QueryTypes.FOREIGNKEYS\n              });\n              query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n              _context4.next = 4;\n              return this.sequelize.query(query, queryOptions);\n            case 4:\n              result = _context4.sent;\n              return _context4.abrupt(\"return\", result.map(function (fkMeta) {\n                var _a = Utils.camelizeObjectKeys(fkMeta),\n                  initiallyDeferred = _a.initiallyDeferred,\n                  isDeferrable = _a.isDeferrable,\n                  remaining = __objRest(_a, [\"initiallyDeferred\", \"isDeferrable\"]);\n                return __spreadProps(__spreadValues({}, remaining), {\n                  deferrable: isDeferrable === \"NO\" ? Deferrable.NOT : initiallyDeferred === \"NO\" ? Deferrable.INITIALLY_IMMEDIATE : Deferrable.INITIALLY_DEFERRED\n                });\n              }));\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getForeignKeyReferencesForTable(_x7, _x8) {\n        return _getForeignKeyReferencesForTable.apply(this, arguments);\n      }\n      return getForeignKeyReferencesForTable;\n    }()\n  }, {\n    key: \"dropEnum\",\n    value: function () {\n      var _dropEnum = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(enumName, options) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              options = options || {};\n              return _context5.abrupt(\"return\", this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {\n                raw: true\n              })));\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, this);\n      }));\n      function dropEnum(_x9, _x10) {\n        return _dropEnum.apply(this, arguments);\n      }\n      return dropEnum;\n    }()\n  }, {\n    key: \"dropAllEnums\",\n    value: function () {\n      var _dropAllEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(options) {\n        var _this2 = this;\n        var enums;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              options = options || {};\n              _context6.next = 3;\n              return this.pgListEnums(null, options);\n            case 3:\n              enums = _context6.sent;\n              _context6.next = 6;\n              return Promise.all(enums.map(function (result) {\n                return _this2.sequelize.query(_this2.queryGenerator.pgEnumDrop(null, null, _this2.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {\n                  raw: true\n                }));\n              }));\n            case 6:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, this);\n      }));\n      function dropAllEnums(_x11) {\n        return _dropAllEnums.apply(this, arguments);\n      }\n      return dropAllEnums;\n    }()\n  }, {\n    key: \"pgListEnums\",\n    value: function () {\n      var _pgListEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(tableName, options) {\n        var sql;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              options = options || {};\n              sql = this.queryGenerator.pgListEnums(tableName);\n              return _context7.abrupt(\"return\", this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n                plain: false,\n                raw: true,\n                type: QueryTypes.SELECT\n              })));\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, this);\n      }));\n      function pgListEnums(_x12, _x13) {\n        return _pgListEnums.apply(this, arguments);\n      }\n      return pgListEnums;\n    }()\n  }, {\n    key: \"dropTable\",\n    value: function () {\n      var _dropTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(tableName, options) {\n        var promises, instanceTable, getTableName, keys, keyLen, i, sql;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _get(_getPrototypeOf(PostgresQueryInterface.prototype), \"dropTable\", this).call(this, tableName, options);\n            case 2:\n              promises = [];\n              instanceTable = this.sequelize.modelManager.getModel(tableName, {\n                attribute: \"tableName\"\n              });\n              if (instanceTable) {\n                _context8.next = 6;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 6:\n              getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : \"\".concat(options.schema, \"_\")) + tableName;\n              keys = Object.keys(instanceTable.rawAttributes);\n              keyLen = keys.length;\n              for (i = 0; i < keyLen; i++) {\n                if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n                  sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n                  options.supportsSearchPath = false;\n                  promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n                    raw: true\n                  })));\n                }\n              }\n              _context8.next = 12;\n              return Promise.all(promises);\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, this);\n      }));\n      function dropTable(_x14, _x15) {\n        return _dropTable.apply(this, arguments);\n      }\n      return dropTable;\n    }()\n  }]);\n  return PostgresQueryInterface;\n}(QueryInterface);\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":{"version":3,"names":["DataTypes","require","QueryTypes","_require","QueryInterface","Utils","Deferrable","PostgresQueryInterface","_QueryInterface","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_ensureEnums","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","tableName","attributes","options","model","_this","keys","keyLen","sql","promises","i","attribute","type","results","enumIdx","addEnumValue","_loop","result","wrap","_callee2$","_context3","prev","next","Object","length","ENUM","ARRAY","queryGenerator","pgListEnums","field","push","sequelize","query","__spreadProps","__spreadValues","plain","raw","SELECT","Promise","all","sent","relativeValue","position","undefined","spliceStart","valueOptions","before","after","splice","pgEnumAdd","enumType","enumVals","vals","lastOldEnumValue","rightestPosition","oldIndex","enumVal","newIdx","newValuesBefore","promisesLength","reverseIdx","remainingEnumValues","_reverseIdx","_loop$","_context2","pgEnum","fromArray","enum_value","values","indexOf","abrupt","slice","stop","delegateYield","reduce","_ref","_callee","promise","asyncFunction","_callee$","_context","t0","t1","_x5","_x6","resolve","dialect","connectionManager","_refreshDynamicOIDs","ensureEnums","_x","_x2","_x3","_x4","_getForeignKeyReferencesForTable","_callee3","table","queryOptions","_callee3$","_context4","FOREIGNKEYS","getForeignKeyReferencesQuery","config","database","map","fkMeta","_a","camelizeObjectKeys","initiallyDeferred","isDeferrable","remaining","__objRest","deferrable","NOT","INITIALLY_IMMEDIATE","INITIALLY_DEFERRED","getForeignKeyReferencesForTable","_x7","_x8","_dropEnum","_callee4","enumName","_callee4$","_context5","pgEnumDrop","pgEscapeAndQuote","dropEnum","_x9","_x10","_dropAllEnums","_callee5","_this2","enums","_callee5$","_context6","enum_name","dropAllEnums","_x11","_pgListEnums","_callee6","_callee6$","_context7","_x12","_x13","_dropTable","_callee7","instanceTable","getTableName","_callee7$","_context8","_get","_getPrototypeOf","prototype","call","modelManager","getModel","schema","concat","rawAttributes","supportsSearchPath","dropTable","_x14","_x15","exports"],"sources":["../../../src/dialects/postgres/query-interface.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}