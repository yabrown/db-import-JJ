{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnexpectedTokenError = exports.TokenHandler = exports.RequestTokenHandler = exports.Login7TokenHandler = exports.InitialSqlTokenHandler = exports.AttentionTokenHandler = void 0;\nvar _request = _interopRequireDefault(require(\"../request\"));\nvar _errors = require(\"../errors\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar UnexpectedTokenError = /*#__PURE__*/function (_Error) {\n  _inherits(UnexpectedTokenError, _Error);\n  var _super = _createSuper(UnexpectedTokenError);\n  function UnexpectedTokenError(handler, token) {\n    _classCallCheck(this, UnexpectedTokenError);\n    return _super.call(this, 'Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n  return _createClass(UnexpectedTokenError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.UnexpectedTokenError = UnexpectedTokenError;\nvar TokenHandler = /*#__PURE__*/function () {\n  function TokenHandler() {\n    _classCallCheck(this, TokenHandler);\n  }\n  _createClass(TokenHandler, [{\n    key: \"onInfoMessage\",\n    value: function onInfoMessage(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onErrorMessage\",\n    value: function onErrorMessage(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onSSPI\",\n    value: function onSSPI(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onDatabaseChange\",\n    value: function onDatabaseChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onLanguageChange\",\n    value: function onLanguageChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onCharsetChange\",\n    value: function onCharsetChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onSqlCollationChange\",\n    value: function onSqlCollationChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onRoutingChange\",\n    value: function onRoutingChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onPacketSizeChange\",\n    value: function onPacketSizeChange(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onResetConnection\",\n    value: function onResetConnection(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onBeginTransaction\",\n    value: function onBeginTransaction(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onCommitTransaction\",\n    value: function onCommitTransaction(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onRollbackTransaction\",\n    value: function onRollbackTransaction(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onFedAuthInfo\",\n    value: function onFedAuthInfo(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onFeatureExtAck\",\n    value: function onFeatureExtAck(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onLoginAck\",\n    value: function onLoginAck(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onColMetadata\",\n    value: function onColMetadata(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onOrder\",\n    value: function onOrder(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onRow\",\n    value: function onRow(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onReturnStatus\",\n    value: function onReturnStatus(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onReturnValue\",\n    value: function onReturnValue(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onDoneProc\",\n    value: function onDoneProc(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onDoneInProc\",\n    value: function onDoneInProc(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }, {\n    key: \"onDatabaseMirroringPartner\",\n    value: function onDatabaseMirroringPartner(token) {\n      throw new UnexpectedTokenError(this, token);\n    }\n  }]);\n  return TokenHandler;\n}();\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\nexports.TokenHandler = TokenHandler;\nvar InitialSqlTokenHandler = /*#__PURE__*/function (_TokenHandler) {\n  _inherits(InitialSqlTokenHandler, _TokenHandler);\n  var _super2 = _createSuper(InitialSqlTokenHandler);\n  function InitialSqlTokenHandler(connection) {\n    var _this;\n    _classCallCheck(this, InitialSqlTokenHandler);\n    _this = _super2.call(this);\n    _this.connection = void 0;\n    _this.connection = connection;\n    return _this;\n  }\n  _createClass(InitialSqlTokenHandler, [{\n    key: \"onInfoMessage\",\n    value: function onInfoMessage(token) {\n      this.connection.emit('infoMessage', token);\n    }\n  }, {\n    key: \"onErrorMessage\",\n    value: function onErrorMessage(token) {\n      this.connection.emit('errorMessage', token);\n    }\n  }, {\n    key: \"onDatabaseChange\",\n    value: function onDatabaseChange(token) {\n      this.connection.emit('databaseChange', token.newValue);\n    }\n  }, {\n    key: \"onLanguageChange\",\n    value: function onLanguageChange(token) {\n      this.connection.emit('languageChange', token.newValue);\n    }\n  }, {\n    key: \"onCharsetChange\",\n    value: function onCharsetChange(token) {\n      this.connection.emit('charsetChange', token.newValue);\n    }\n  }, {\n    key: \"onSqlCollationChange\",\n    value: function onSqlCollationChange(token) {\n      this.connection.databaseCollation = token.newValue;\n    }\n  }, {\n    key: \"onPacketSizeChange\",\n    value: function onPacketSizeChange(token) {\n      this.connection.messageIo.packetSize(token.newValue);\n    }\n  }, {\n    key: \"onBeginTransaction\",\n    value: function onBeginTransaction(token) {\n      this.connection.transactionDescriptors.push(token.newValue);\n      this.connection.inTransaction = true;\n    }\n  }, {\n    key: \"onCommitTransaction\",\n    value: function onCommitTransaction(token) {\n      this.connection.transactionDescriptors.length = 1;\n      this.connection.inTransaction = false;\n    }\n  }, {\n    key: \"onRollbackTransaction\",\n    value: function onRollbackTransaction(token) {\n      this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.connection.inTransaction = false;\n      this.connection.emit('rollbackTransaction');\n    }\n  }, {\n    key: \"onColMetadata\",\n    value: function onColMetadata(token) {\n      this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n      this.connection.close();\n    }\n  }, {\n    key: \"onOrder\",\n    value: function onOrder(token) {\n      this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n      this.connection.close();\n    }\n  }, {\n    key: \"onRow\",\n    value: function onRow(token) {\n      this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n      this.connection.close();\n    }\n  }, {\n    key: \"onReturnStatus\",\n    value: function onReturnStatus(token) {// Do nothing\n    }\n  }, {\n    key: \"onReturnValue\",\n    value: function onReturnValue(token) {// Do nothing\n    }\n  }, {\n    key: \"onDoneProc\",\n    value: function onDoneProc(token) {// Do nothing\n    }\n  }, {\n    key: \"onDoneInProc\",\n    value: function onDoneInProc(token) {// Do nothing\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(token) {// Do nothing\n    }\n  }, {\n    key: \"onResetConnection\",\n    value: function onResetConnection(token) {\n      this.connection.emit('resetConnection');\n    }\n  }]);\n  return InitialSqlTokenHandler;\n}(TokenHandler);\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\nexports.InitialSqlTokenHandler = InitialSqlTokenHandler;\nvar Login7TokenHandler = /*#__PURE__*/function (_TokenHandler2) {\n  _inherits(Login7TokenHandler, _TokenHandler2);\n  var _super3 = _createSuper(Login7TokenHandler);\n  function Login7TokenHandler(connection) {\n    var _this2;\n    _classCallCheck(this, Login7TokenHandler);\n    _this2 = _super3.call(this);\n    _this2.connection = void 0;\n    _this2.fedAuthInfoToken = void 0;\n    _this2.routingData = void 0;\n    _this2.loginAckReceived = false;\n    _this2.connection = connection;\n    return _this2;\n  }\n  _createClass(Login7TokenHandler, [{\n    key: \"onInfoMessage\",\n    value: function onInfoMessage(token) {\n      this.connection.emit('infoMessage', token);\n    }\n  }, {\n    key: \"onErrorMessage\",\n    value: function onErrorMessage(token) {\n      this.connection.emit('errorMessage', token);\n      var error = new _errors.ConnectionError(token.message, 'ELOGIN');\n      var isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n      if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n        error.isTransient = true;\n      }\n      this.connection.loginError = error;\n    }\n  }, {\n    key: \"onSSPI\",\n    value: function onSSPI(token) {\n      if (token.ntlmpacket) {\n        this.connection.ntlmpacket = token.ntlmpacket;\n        this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n      }\n    }\n  }, {\n    key: \"onDatabaseChange\",\n    value: function onDatabaseChange(token) {\n      this.connection.emit('databaseChange', token.newValue);\n    }\n  }, {\n    key: \"onLanguageChange\",\n    value: function onLanguageChange(token) {\n      this.connection.emit('languageChange', token.newValue);\n    }\n  }, {\n    key: \"onCharsetChange\",\n    value: function onCharsetChange(token) {\n      this.connection.emit('charsetChange', token.newValue);\n    }\n  }, {\n    key: \"onSqlCollationChange\",\n    value: function onSqlCollationChange(token) {\n      this.connection.databaseCollation = token.newValue;\n    }\n  }, {\n    key: \"onFedAuthInfo\",\n    value: function onFedAuthInfo(token) {\n      this.fedAuthInfoToken = token;\n    }\n  }, {\n    key: \"onFeatureExtAck\",\n    value: function onFeatureExtAck(token) {\n      var authentication = this.connection.config.authentication;\n      if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n        if (token.fedAuth === undefined) {\n          this.connection.loginError = new _errors.ConnectionError('Did not receive Active Directory authentication acknowledgement');\n        } else if (token.fedAuth.length !== 0) {\n          this.connection.loginError = new _errors.ConnectionError(\"Active Directory authentication acknowledgment for \".concat(authentication.type, \" authentication method includes extra data\"));\n        }\n      } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n        this.connection.loginError = new _errors.ConnectionError('Received acknowledgement for unknown feature');\n      } else if (token.fedAuth) {\n        this.connection.loginError = new _errors.ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n      }\n    }\n  }, {\n    key: \"onLoginAck\",\n    value: function onLoginAck(token) {\n      if (!token.tdsVersion) {\n        // unsupported TDS version\n        this.connection.loginError = new _errors.ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n        return;\n      }\n      if (!token.interface) {\n        // unsupported interface\n        this.connection.loginError = new _errors.ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n        return;\n      } // use negotiated version\n\n      this.connection.config.options.tdsVersion = token.tdsVersion;\n      this.loginAckReceived = true;\n    }\n  }, {\n    key: \"onRoutingChange\",\n    value: function onRoutingChange(token) {\n      // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n      var _token$newValue$serve = token.newValue.server.split('\\\\'),\n        _token$newValue$serve2 = _slicedToArray(_token$newValue$serve, 1),\n        server = _token$newValue$serve2[0];\n      this.routingData = {\n        server: server,\n        port: token.newValue.port\n      };\n    }\n  }, {\n    key: \"onDoneInProc\",\n    value: function onDoneInProc(token) {// Do nothing\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(token) {// Do nothing\n    }\n  }, {\n    key: \"onPacketSizeChange\",\n    value: function onPacketSizeChange(token) {\n      this.connection.messageIo.packetSize(token.newValue);\n    }\n  }, {\n    key: \"onDatabaseMirroringPartner\",\n    value: function onDatabaseMirroringPartner(token) {// Do nothing\n    }\n  }]);\n  return Login7TokenHandler;\n}(TokenHandler);\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\nexports.Login7TokenHandler = Login7TokenHandler;\nvar RequestTokenHandler = /*#__PURE__*/function (_TokenHandler3) {\n  _inherits(RequestTokenHandler, _TokenHandler3);\n  var _super4 = _createSuper(RequestTokenHandler);\n  function RequestTokenHandler(connection, request) {\n    var _this3;\n    _classCallCheck(this, RequestTokenHandler);\n    _this3 = _super4.call(this);\n    _this3.connection = void 0;\n    _this3.request = void 0;\n    _this3.errors = void 0;\n    _this3.connection = connection;\n    _this3.request = request;\n    _this3.errors = [];\n    return _this3;\n  }\n  _createClass(RequestTokenHandler, [{\n    key: \"onInfoMessage\",\n    value: function onInfoMessage(token) {\n      this.connection.emit('infoMessage', token);\n    }\n  }, {\n    key: \"onErrorMessage\",\n    value: function onErrorMessage(token) {\n      this.connection.emit('errorMessage', token);\n      if (!this.request.canceled) {\n        var error = new _errors.RequestError(token.message, 'EREQUEST');\n        error.number = token.number;\n        error.state = token.state;\n        error.class = token.class;\n        error.serverName = token.serverName;\n        error.procName = token.procName;\n        error.lineNumber = token.lineNumber;\n        this.errors.push(error);\n        this.request.error = error;\n        if (this.request instanceof _request.default && this.errors.length > 1) {\n          this.request.error = new _esAggregateError.default(this.errors);\n        }\n      }\n    }\n  }, {\n    key: \"onDatabaseChange\",\n    value: function onDatabaseChange(token) {\n      this.connection.emit('databaseChange', token.newValue);\n    }\n  }, {\n    key: \"onLanguageChange\",\n    value: function onLanguageChange(token) {\n      this.connection.emit('languageChange', token.newValue);\n    }\n  }, {\n    key: \"onCharsetChange\",\n    value: function onCharsetChange(token) {\n      this.connection.emit('charsetChange', token.newValue);\n    }\n  }, {\n    key: \"onSqlCollationChange\",\n    value: function onSqlCollationChange(token) {\n      this.connection.databaseCollation = token.newValue;\n    }\n  }, {\n    key: \"onPacketSizeChange\",\n    value: function onPacketSizeChange(token) {\n      this.connection.messageIo.packetSize(token.newValue);\n    }\n  }, {\n    key: \"onBeginTransaction\",\n    value: function onBeginTransaction(token) {\n      this.connection.transactionDescriptors.push(token.newValue);\n      this.connection.inTransaction = true;\n    }\n  }, {\n    key: \"onCommitTransaction\",\n    value: function onCommitTransaction(token) {\n      this.connection.transactionDescriptors.length = 1;\n      this.connection.inTransaction = false;\n    }\n  }, {\n    key: \"onRollbackTransaction\",\n    value: function onRollbackTransaction(token) {\n      this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.connection.inTransaction = false;\n      this.connection.emit('rollbackTransaction');\n    }\n  }, {\n    key: \"onColMetadata\",\n    value: function onColMetadata(token) {\n      if (!this.request.canceled) {\n        if (this.connection.config.options.useColumnNames) {\n          var columns = Object.create(null);\n          for (var j = 0, len = token.columns.length; j < len; j++) {\n            var col = token.columns[j];\n            if (columns[col.colName] == null) {\n              columns[col.colName] = col;\n            }\n          }\n          this.request.emit('columnMetadata', columns);\n        } else {\n          this.request.emit('columnMetadata', token.columns);\n        }\n      }\n    }\n  }, {\n    key: \"onOrder\",\n    value: function onOrder(token) {\n      if (!this.request.canceled) {\n        this.request.emit('order', token.orderColumns);\n      }\n    }\n  }, {\n    key: \"onRow\",\n    value: function onRow(token) {\n      if (!this.request.canceled) {\n        if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n          this.request.rows.push(token.columns);\n        }\n        if (this.connection.config.options.rowCollectionOnDone) {\n          this.request.rst.push(token.columns);\n        }\n        this.request.emit('row', token.columns);\n      }\n    }\n  }, {\n    key: \"onReturnStatus\",\n    value: function onReturnStatus(token) {\n      if (!this.request.canceled) {\n        // Keep value for passing in 'doneProc' event.\n        this.connection.procReturnStatusValue = token.value;\n      }\n    }\n  }, {\n    key: \"onReturnValue\",\n    value: function onReturnValue(token) {\n      if (!this.request.canceled) {\n        this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n      }\n    }\n  }, {\n    key: \"onDoneProc\",\n    value: function onDoneProc(token) {\n      if (!this.request.canceled) {\n        if (token.sqlError && !this.request.error) {\n          // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n          this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n        }\n        this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n        this.connection.procReturnStatusValue = undefined;\n        if (token.rowCount !== undefined) {\n          this.request.rowCount += token.rowCount;\n        }\n        if (this.connection.config.options.rowCollectionOnDone) {\n          this.request.rst = [];\n        }\n      }\n    }\n  }, {\n    key: \"onDoneInProc\",\n    value: function onDoneInProc(token) {\n      if (!this.request.canceled) {\n        this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n        if (token.rowCount !== undefined) {\n          this.request.rowCount += token.rowCount;\n        }\n        if (this.connection.config.options.rowCollectionOnDone) {\n          this.request.rst = [];\n        }\n      }\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(token) {\n      if (!this.request.canceled) {\n        if (token.sqlError && !this.request.error) {\n          // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n          this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n        }\n        this.request.emit('done', token.rowCount, token.more, this.request.rst);\n        if (token.rowCount !== undefined) {\n          this.request.rowCount += token.rowCount;\n        }\n        if (this.connection.config.options.rowCollectionOnDone) {\n          this.request.rst = [];\n        }\n      }\n    }\n  }, {\n    key: \"onResetConnection\",\n    value: function onResetConnection(token) {\n      this.connection.emit('resetConnection');\n    }\n  }]);\n  return RequestTokenHandler;\n}(TokenHandler);\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\nexports.RequestTokenHandler = RequestTokenHandler;\nvar AttentionTokenHandler = /*#__PURE__*/function (_TokenHandler4) {\n  _inherits(AttentionTokenHandler, _TokenHandler4);\n  var _super5 = _createSuper(AttentionTokenHandler);\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  function AttentionTokenHandler(connection, request) {\n    var _this4;\n    _classCallCheck(this, AttentionTokenHandler);\n    _this4 = _super5.call(this);\n    _this4.connection = void 0;\n    _this4.request = void 0;\n    _this4.attentionReceived = void 0;\n    _this4.connection = connection;\n    _this4.request = request;\n    _this4.attentionReceived = false;\n    return _this4;\n  }\n  _createClass(AttentionTokenHandler, [{\n    key: \"onDone\",\n    value: function onDone(token) {\n      if (token.attention) {\n        this.attentionReceived = true;\n      }\n    }\n  }]);\n  return AttentionTokenHandler;\n}(TokenHandler);\nexports.AttentionTokenHandler = AttentionTokenHandler;","map":{"version":3,"names":["_request","_interopRequireDefault","require","_errors","_esAggregateError","UnexpectedTokenError","_Error","_inherits","_super","_createSuper","handler","token","_classCallCheck","call","name","constructor","_createClass","_wrapNativeSuper","Error","TokenHandler","key","value","onInfoMessage","onErrorMessage","onSSPI","onDatabaseChange","onLanguageChange","onCharsetChange","onSqlCollationChange","onRoutingChange","onPacketSizeChange","onResetConnection","onBeginTransaction","onCommitTransaction","onRollbackTransaction","onFedAuthInfo","onFeatureExtAck","onLoginAck","onColMetadata","onOrder","onRow","onReturnStatus","onReturnValue","onDoneProc","onDoneInProc","onDone","onDatabaseMirroringPartner","InitialSqlTokenHandler","_TokenHandler","_super2","connection","_this","emit","newValue","databaseCollation","messageIo","packetSize","transactionDescriptors","push","inTransaction","length","close","Login7TokenHandler","_TokenHandler2","_super3","_this2","fedAuthInfoToken","routingData","loginAckReceived","error","ConnectionError","message","isLoginErrorTransient","transientErrorLookup","isTransientError","number","curTransientRetryCount","config","options","maxRetriesOnTransientErrors","isTransient","loginError","ntlmpacket","ntlmpacketBuffer","authentication","type","fedAuth","undefined","concat","utf8Support","tdsVersion","interface","_token$newValue$serve","server","split","_token$newValue$serve2","_slicedToArray","port","RequestTokenHandler","_TokenHandler3","_super4","request","_this3","errors","canceled","RequestError","state","class","serverName","procName","lineNumber","default","useColumnNames","columns","Object","create","j","len","col","colName","orderColumns","rowCollectionOnRequestCompletion","rows","rowCollectionOnDone","rst","procReturnStatusValue","paramName","metadata","sqlError","rowCount","more","AttentionTokenHandler","_TokenHandler4","_super5","_this4","attentionReceived","attention"],"sources":["../../src/token/handler.ts"],"sourcesContent":["import Connection from '../connection';\nimport Request from '../request';\nimport { ConnectionError, RequestError } from '../errors';\nimport { ColumnMetadata } from './colmetadata-token-parser';\nimport {\n  BeginTransactionEnvChangeToken,\n  CharsetEnvChangeToken,\n  CollationChangeToken,\n  ColMetadataToken,\n  CommitTransactionEnvChangeToken,\n  DatabaseEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  DoneInProcToken,\n  DoneProcToken,\n  DoneToken,\n  ErrorMessageToken,\n  FeatureExtAckToken,\n  FedAuthInfoToken,\n  InfoMessageToken,\n  LanguageEnvChangeToken,\n  LoginAckToken,\n  NBCRowToken,\n  OrderToken,\n  PacketSizeEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  ReturnStatusToken,\n  ReturnValueToken,\n  RollbackTransactionEnvChangeToken,\n  RoutingEnvChangeToken,\n  RowToken,\n  SSPIToken,\n  Token\n} from './token';\nimport BulkLoad from '../bulk-load';\n\nimport AggregateError from 'es-aggregate-error';\n\nexport class UnexpectedTokenError extends Error {\n  constructor(handler: TokenHandler, token: Token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\n\nexport class TokenHandler {\n  onInfoMessage(token: InfoMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSSPI(token: SSPIToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onOrder(token: OrderToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDone(token: DoneToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\nexport class InitialSqlTokenHandler extends TokenHandler {\n  connection: Connection;\n\n  constructor(connection: Connection) {\n    super();\n\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onOrder(token: OrderToken) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    // Do nothing\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    // Do nothing\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    // Do nothing\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\nexport class Login7TokenHandler extends TokenHandler {\n  connection: Connection;\n\n  fedAuthInfoToken: FedAuthInfoToken | undefined;\n  routingData: { server: string, port: number } | undefined;\n\n  loginAckReceived = false;\n\n  constructor(connection: Connection) {\n    super();\n\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    const error = new ConnectionError(token.message, 'ELOGIN');\n\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n\n    this.connection.loginError = error;\n  }\n\n  onSSPI(token: SSPIToken) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    this.fedAuthInfoToken = token;\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    const { authentication } = this.connection.config;\n\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    }\n\n    // use negotiated version\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n\n    this.loginAckReceived = true;\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [ server ] = token.newValue.server.split('\\\\');\n\n    this.routingData = {\n      server, port: token.newValue.port\n    };\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    // Do nothing\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\nexport class RequestTokenHandler extends TokenHandler {\n  connection: Connection;\n  request: Request | BulkLoad;\n  errors: RequestError[];\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    if (!this.request.canceled) {\n      const error = new RequestError(token.message, 'EREQUEST');\n\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof Request && this.errors.length > 1) {\n        this.request.error = new AggregateError(this.errors);\n      }\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns: { [key: string]: ColumnMetadata } = Object.create(null);\n\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n\n  onOrder(token: OrderToken) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows!.push(token.columns);\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst!.push(token.columns);\n      }\n\n      this.request.emit('row', token.columns);\n    }\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n\n      this.connection.procReturnStatusValue = undefined;\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDone(token: DoneToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\nexport class AttentionTokenHandler extends TokenHandler {\n  connection: Connection;\n  request: Request | BulkLoad;\n\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  attentionReceived: boolean;\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n\n    this.attentionReceived = false;\n  }\n\n  onDone(token: DoneToken) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}