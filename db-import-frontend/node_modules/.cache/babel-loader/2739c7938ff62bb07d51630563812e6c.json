{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Sequelize, Model, DataTypes } from 'sequelize';\nimport 'sqlite3';\n\n// connects to DB, creates test model, attempts to sync it. \n// Prints whether or not succeeded\nfunction createTableOther() {\n  return _createTableOther.apply(this, arguments);\n}\nfunction _createTableOther() {\n  _createTableOther = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var sequelize, newTable;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          /*const sequelize = new Sequelize('TempTables', 'abraun', 'j43H^zcf$4d1AS8&', {\n              host: '174.143.110.218',\n              dialect: 'mssql', \n              dialectModule: 'tedious', \n              encrypt: true,\n              dialectOptions: {\n                  requestTimeout: 5000 // timeout = 30 seconds\n              },\n              pool: {\n                  max: 2,\n                  min: 0,\n                  idle: 10000\n              }\n          });*/\n          sequelize = new Sequelize({\n            dialect: 'sqlite',\n            storage: './reg.sqlite'\n          });\n          _context.prev = 1;\n          _context.next = 4;\n          return sequelize.authenticate();\n        case 4:\n          console.log(\"connected successfully\");\n          _context.next = 10;\n          break;\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(\"didn't connect successfully: \", _context.t0);\n        case 10:\n          //AriTestTable as a model\n          newTable = sequelize.define('AriTestTable', {\n            firstField: {\n              type: DataTypes.INTEGER,\n              primaryKey: true\n            },\n            secondField: {\n              type: DataTypes.STRING\n            }\n          }); // Adds the model as table to the database\n          _context.prev = 11;\n          _context.next = 14;\n          return newTable.sync({\n            force: true\n          });\n        case 14:\n          console.log(\"test table synced successfully\");\n          _context.next = 20;\n          break;\n        case 17:\n          _context.prev = 17;\n          _context.t1 = _context[\"catch\"](11);\n          console.error(\"Problem syncing test table: \", _context.t1);\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 7], [11, 17]]);\n  }));\n  return _createTableOther.apply(this, arguments);\n}\nfunction createTable() {\n  var Connection = require('tedious').Connection;\n  var config = {\n    server: \"174.143.110.218\",\n    // or \"localhost\"\n    options: {},\n    authentication: {\n      type: \"default\",\n      options: {\n        userName: \"abraun\",\n        password: \"j43H^zcf$4d1AS8\"\n      }\n    }\n  };\n  var connection = new Connection(config);\n\n  // Setup event handler when the connection is established. \n  connection.on('connect', function (err) {\n    if (err) {\n      console.log('Error: ', err);\n    }\n    // If no error, then good to go...\n  });\n\n  // Initialize the connection.\n  connection.connect();\n}\nfunction basicGet() {}\nexport default {\n  createTable: createTable,\n  basicGet: basicGet\n};","map":{"version":3,"names":["Sequelize","Model","DataTypes","createTableOther","_createTableOther","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sequelize","newTable","wrap","_callee$","_context","prev","next","dialect","storage","authenticate","console","log","t0","define","firstField","type","INTEGER","primaryKey","secondField","STRING","sync","force","t1","error","stop","createTable","Connection","require","config","server","options","authentication","userName","password","connection","on","err","connect","basicGet"],"sources":["/Users/aribraun/Desktop/db-import/src/backend.js"],"sourcesContent":["\nimport { Sequelize, Model, DataTypes } from 'sequelize';\nimport 'sqlite3';\n\n// connects to DB, creates test model, attempts to sync it. \n// Prints whether or not succeeded\nasync function createTableOther(){\n    /*const sequelize = new Sequelize('TempTables', 'abraun', 'j43H^zcf$4d1AS8&', {\n        host: '174.143.110.218',\n        dialect: 'mssql', \n        dialectModule: 'tedious', \n        encrypt: true,\n        dialectOptions: {\n            requestTimeout: 5000 // timeout = 30 seconds\n        },\n        pool: {\n            max: 2,\n            min: 0,\n            idle: 10000\n        }\n    });*/\n    const sequelize = new Sequelize({dialect: 'sqlite', storage: './reg.sqlite'});\n\n    try{\n        await sequelize.authenticate();\n        console.log(\"connected successfully\");\n    }catch(error){\n        console.log(\"didn't connect successfully: \", error)\n    }\n\n    //AriTestTable as a model\n    const newTable = sequelize.define('AriTestTable', {\n        firstField:{\n            type: DataTypes.INTEGER,\n            primaryKey: true,\n        },\n        secondField:{\n            type: DataTypes.STRING,\n        }\n    });\n\n    // Adds the model as table to the database\n    try {\n        await newTable.sync({force: true});\n        console.log(\"test table synced successfully\")\n    }catch(error){\n        console.error(\"Problem syncing test table: \", error);\n    }\n}\n\nfunction createTable(){\n    var Connection = require('tedious').Connection;\n    \n    var config = {\n        server: \"174.143.110.218\", // or \"localhost\"\n        options: {},\n        authentication: {\n          type: \"default\",\n          options: {  \n            userName: \"abraun\",\n            password: \"j43H^zcf$4d1AS8\",\n          }\n        }\n    };\n\n    var connection = new Connection(config);\n\n    // Setup event handler when the connection is established. \n    connection.on('connect', function(err) {\n    if(err) {\n        console.log('Error: ', err)\n    }\n    // If no error, then good to go...\n    \n    });\n\n    // Initialize the connection.\n    connection.connect();\n}\n\nfunction basicGet(){\n    \n}\n\n\nexport default {createTable, basicGet};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}