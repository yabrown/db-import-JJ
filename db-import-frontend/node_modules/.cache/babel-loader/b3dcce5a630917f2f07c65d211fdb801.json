{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _collation = require(\"../collation\");\nvar _token = require(\"./token\");\nvar types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\nfunction readNewAndOldValue(parser, length, type, callback) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      return parser.readBVarChar(function (newValue) {\n        parser.readBVarChar(function (oldValue) {\n          switch (type.name) {\n            case 'PACKET_SIZE':\n              return callback(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)));\n            case 'DATABASE':\n              return callback(new _token.DatabaseEnvChangeToken(newValue, oldValue));\n            case 'LANGUAGE':\n              return callback(new _token.LanguageEnvChangeToken(newValue, oldValue));\n            case 'CHARSET':\n              return callback(new _token.CharsetEnvChangeToken(newValue, oldValue));\n            case 'DATABASE_MIRRORING_PARTNER':\n              return callback(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      return parser.readBVarByte(function (newValue) {\n        parser.readBVarByte(function (oldValue) {\n          switch (type.name) {\n            case 'SQL_COLLATION':\n              {\n                var newCollation = newValue.length ? _collation.Collation.fromBuffer(newValue) : undefined;\n                var oldCollation = oldValue.length ? _collation.Collation.fromBuffer(oldValue) : undefined;\n                return callback(new _token.CollationChangeToken(newCollation, oldCollation));\n              }\n            case 'BEGIN_TXN':\n              return callback(new _token.BeginTransactionEnvChangeToken(newValue, oldValue));\n            case 'COMMIT_TXN':\n              return callback(new _token.CommitTransactionEnvChangeToken(newValue, oldValue));\n            case 'ROLLBACK_TXN':\n              return callback(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue));\n            case 'RESET_CONNECTION':\n              return callback(new _token.ResetConnectionEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n    case 'ROUTING_CHANGE':\n      return parser.readUInt16LE(function (valueLength) {\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        parser.readBuffer(valueLength, function (routePacket) {\n          var protocol = routePacket.readUInt8(0);\n          if (protocol !== 0) {\n            throw new Error('Unknown protocol byte in routing change event');\n          }\n          var port = routePacket.readUInt16LE(1);\n          var serverLen = routePacket.readUInt16LE(3); // 2 bytes per char, starting at offset 5\n\n          var server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n          var newValue = {\n            protocol: protocol,\n            port: port,\n            server: server\n          };\n          parser.readUInt16LE(function (oldValueLength) {\n            parser.readBuffer(oldValueLength, function (oldValue) {\n              callback(new _token.RoutingEnvChangeToken(newValue, oldValue));\n            });\n          });\n        });\n      });\n    default:\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name); // skip unknown bytes\n\n      parser.readBuffer(length - 1, function () {\n        callback(undefined);\n      });\n  }\n}\nfunction envChangeParser(parser, _options, callback) {\n  parser.readUInt16LE(function (length) {\n    parser.readUInt8(function (typeNumber) {\n      var type = types[typeNumber];\n      if (!type) {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber); // skip unknown bytes\n\n        return parser.readBuffer(length - 1, function () {\n          callback(undefined);\n        });\n      }\n      readNewAndOldValue(parser, length, type, function (token) {\n        callback(token);\n      });\n    });\n  });\n}\nvar _default = envChangeParser;\nexports.default = _default;\nmodule.exports = envChangeParser;","map":{"version":3,"names":["_collation","require","_token","types","name","event","readNewAndOldValue","parser","length","type","callback","readBVarChar","newValue","oldValue","PacketSizeEnvChangeToken","parseInt","DatabaseEnvChangeToken","LanguageEnvChangeToken","CharsetEnvChangeToken","DatabaseMirroringPartnerEnvChangeToken","readBVarByte","newCollation","Collation","fromBuffer","undefined","oldCollation","CollationChangeToken","BeginTransactionEnvChangeToken","CommitTransactionEnvChangeToken","RollbackTransactionEnvChangeToken","ResetConnectionEnvChangeToken","readUInt16LE","valueLength","readBuffer","routePacket","protocol","readUInt8","Error","port","serverLen","server","toString","oldValueLength","RoutingEnvChangeToken","console","error","envChangeParser","_options","typeNumber","token","module","exports"],"sources":["../../src/token/env-change-token-parser.ts"],"sourcesContent":["import Parser, { ParserOptions } from './stream-parser';\nimport { Collation } from '../collation';\n\nimport {\n  DatabaseEnvChangeToken,\n  LanguageEnvChangeToken,\n  CharsetEnvChangeToken,\n  PacketSizeEnvChangeToken,\n  BeginTransactionEnvChangeToken,\n  CommitTransactionEnvChangeToken,\n  RollbackTransactionEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  RoutingEnvChangeToken,\n  CollationChangeToken\n} from './token';\n\ntype EnvChangeToken =\n  DatabaseEnvChangeToken |\n  LanguageEnvChangeToken |\n  CharsetEnvChangeToken |\n  PacketSizeEnvChangeToken |\n  BeginTransactionEnvChangeToken |\n  CommitTransactionEnvChangeToken |\n  RollbackTransactionEnvChangeToken |\n  DatabaseMirroringPartnerEnvChangeToken |\n  ResetConnectionEnvChangeToken |\n  RoutingEnvChangeToken |\n  CollationChangeToken;\n\nconst types: { [key: number]: { name: string, event?: string }} = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction readNewAndOldValue(parser: Parser, length: number, type: { name: string, event?: string }, callback: (token: EnvChangeToken | undefined) => void) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      return parser.readBVarChar((newValue) => {\n        parser.readBVarChar((oldValue) => {\n          switch (type.name) {\n            case 'PACKET_SIZE':\n              return callback(new PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)));\n\n            case 'DATABASE':\n              return callback(new DatabaseEnvChangeToken(newValue, oldValue));\n\n            case 'LANGUAGE':\n              return callback(new LanguageEnvChangeToken(newValue, oldValue));\n\n            case 'CHARSET':\n              return callback(new CharsetEnvChangeToken(newValue, oldValue));\n\n            case 'DATABASE_MIRRORING_PARTNER':\n              return callback(new DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      return parser.readBVarByte((newValue) => {\n        parser.readBVarByte((oldValue) => {\n          switch (type.name) {\n            case 'SQL_COLLATION': {\n              const newCollation = newValue.length ? Collation.fromBuffer(newValue) : undefined;\n              const oldCollation = oldValue.length ? Collation.fromBuffer(oldValue) : undefined;\n\n              return callback(new CollationChangeToken(newCollation, oldCollation));\n            }\n\n            case 'BEGIN_TXN':\n              return callback(new BeginTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'COMMIT_TXN':\n              return callback(new CommitTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'ROLLBACK_TXN':\n              return callback(new RollbackTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'RESET_CONNECTION':\n              return callback(new ResetConnectionEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'ROUTING_CHANGE':\n      return parser.readUInt16LE((valueLength) => {\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        parser.readBuffer(valueLength, (routePacket) => {\n          const protocol = routePacket.readUInt8(0);\n\n          if (protocol !== 0) {\n            throw new Error('Unknown protocol byte in routing change event');\n          }\n\n          const port = routePacket.readUInt16LE(1);\n          const serverLen = routePacket.readUInt16LE(3);\n          // 2 bytes per char, starting at offset 5\n          const server = routePacket.toString('ucs2', 5, 5 + (serverLen * 2));\n\n          const newValue = {\n            protocol: protocol,\n            port: port,\n            server: server\n          };\n\n          parser.readUInt16LE((oldValueLength) => {\n            parser.readBuffer(oldValueLength, (oldValue) => {\n              callback(new RoutingEnvChangeToken(newValue, oldValue));\n            });\n          });\n        });\n      });\n\n    default:\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name);\n      // skip unknown bytes\n      parser.readBuffer(length - 1, () => {\n        callback(undefined);\n      });\n  }\n}\n\nfunction envChangeParser(parser: Parser, _options: ParserOptions, callback: (token: EnvChangeToken | undefined) => void) {\n  parser.readUInt16LE((length) => {\n    parser.readUInt8((typeNumber) => {\n      const type = types[typeNumber];\n\n      if (!type) {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber);\n        // skip unknown bytes\n        return parser.readBuffer(length - 1, () => {\n          callback(undefined);\n        });\n      }\n\n      readNewAndOldValue(parser, length, type, (token) => {\n        callback(token);\n      });\n    });\n  });\n}\n\nexport default envChangeParser;\nmodule.exports = envChangeParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}