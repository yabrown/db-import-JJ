{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _defineProperty = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar AbstractQuery = require(\"../abstract/query\");\nvar sequelizeErrors = require(\"../../errors\");\nvar _ = require(\"lodash\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar ER_DUP_ENTRY = 1062;\nvar ER_DEADLOCK = 1213;\nvar ER_ROW_IS_REFERENCED = 1451;\nvar ER_NO_REFERENCED_ROW = 1452;\nvar debug = logger.debugContext(\"sql:snowflake\");\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n  var _super = _createSuper(Query);\n  function Query() {\n    _classCallCheck(this, Query);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Query, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sql, parameters) {\n        var connection, options, showWarnings, complete, results;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.sql = sql;\n              connection = this.connection, options = this.options;\n              showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n              complete = this._logQuery(sql, debug, parameters);\n              if (parameters) {\n                debug(\"parameters(%j)\", parameters);\n              }\n              _context.prev = 5;\n              _context.next = 8;\n              return new Promise(function (resolve, reject) {\n                connection.execute({\n                  sqlText: sql,\n                  binds: parameters,\n                  complete: function complete(err, _stmt, rows) {\n                    if (err) {\n                      reject(err);\n                    } else {\n                      resolve(rows);\n                    }\n                  }\n                });\n              });\n            case 8:\n              results = _context.sent;\n              _context.next = 25;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](5);\n              if (!(options.transaction && _context.t0.errno === ER_DEADLOCK)) {\n                _context.next = 22;\n                break;\n              }\n              _context.prev = 14;\n              _context.next = 17;\n              return options.transaction.rollback();\n            case 17:\n              _context.next = 21;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t1 = _context[\"catch\"](14);\n            case 21:\n              options.transaction.finished = \"rollback\";\n            case 22:\n              _context.t0.sql = sql;\n              _context.t0.parameters = parameters;\n              throw this.formatError(_context.t0);\n            case 25:\n              _context.prev = 25;\n              complete();\n              return _context.finish(25);\n            case 28:\n              if (!(showWarnings && results && results.warningStatus > 0)) {\n                _context.next = 31;\n                break;\n              }\n              _context.next = 31;\n              return this.logWarnings(results);\n            case 31:\n              return _context.abrupt(\"return\", this.formatResults(results));\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[5, 11, 25, 28], [14, 19]]);\n      }));\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data) {\n      var result = this.instance;\n      if (this.isInsertQuery(data)) {\n        this.handleInsertQuery(data);\n        if (!this.instance) {\n          if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n            var startId = data[this.getInsertIdField()];\n            result = [];\n            for (var i = startId; i < startId + data.affectedRows; i++) {\n              result.push(_defineProperty({}, this.model.rawAttributes[this.model.primaryKeyAttribute].field, i));\n            }\n          } else {\n            result = data[this.getInsertIdField()];\n          }\n        }\n      }\n      if (this.isSelectQuery()) {\n        if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n          var sfAttrMap = _.reduce(this.model.rawAttributes, function (m, v, k) {\n            m[k.toUpperCase()] = k;\n            return m;\n          }, {});\n          data = data.map(function (data2) {\n            return _.reduce(data2, function (prev, value, key) {\n              if (value !== void 0 && sfAttrMap[key]) {\n                prev[sfAttrMap[key]] = value;\n                delete prev[key];\n              }\n              return prev;\n            }, data2);\n          });\n        }\n        this.options.fieldMap = _.mapKeys(this.options.fieldMap, function (v, k) {\n          return k.toUpperCase();\n        });\n        return this.handleSelectQuery(data);\n      }\n      if (this.isShowTablesQuery()) {\n        return this.handleShowTablesQuery(data);\n      }\n      if (this.isDescribeQuery()) {\n        result = {};\n        var _iterator = _createForOfIteratorHelper(data),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _result = _step.value;\n            result[_result.Field] = {\n              type: _result.Type.toUpperCase(),\n              allowNull: _result.Null === \"YES\",\n              defaultValue: _result.Default,\n              primaryKey: _result.Key === \"PRI\",\n              autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n              comment: _result.Comment ? _result.Comment : null\n            };\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return result;\n      }\n      if (this.isShowIndexesQuery()) {\n        return this.handleShowIndexesQuery(data);\n      }\n      if (this.isCallQuery()) {\n        return data[0];\n      }\n      if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n        return data[0][\"number of rows updated\"];\n      }\n      if (this.isVersionQuery()) {\n        return data[0].version;\n      }\n      if (this.isForeignKeysQuery()) {\n        return data;\n      }\n      if (this.isUpsertQuery()) {\n        return [result, data.affectedRows === 1];\n      }\n      if (this.isInsertQuery() || this.isUpdateQuery()) {\n        return [result, data.affectedRows];\n      }\n      if (this.isShowConstraintsQuery()) {\n        return data;\n      }\n      if (this.isRawQuery()) {\n        return [data, data];\n      }\n      return result;\n    }\n  }, {\n    key: \"logWarnings\",\n    value: function () {\n      var _logWarnings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(results) {\n        var warningResults, warningMessage, messages, _iterator2, _step2, _warningRow, _iterator3, _step3, _warningResult, _iterator4, _step4, _objectKey;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.run(\"SHOW WARNINGS\");\n            case 2:\n              warningResults = _context2.sent;\n              warningMessage = \"Snowflake Warnings (\".concat(this.connection.uuid || \"default\", \"): \");\n              messages = [];\n              _iterator2 = _createForOfIteratorHelper(warningResults);\n              _context2.prev = 6;\n              _iterator2.s();\n            case 8:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 16;\n                break;\n              }\n              _warningRow = _step2.value;\n              if (!(_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\")) {\n                _context2.next = 12;\n                break;\n              }\n              return _context2.abrupt(\"continue\", 14);\n            case 12:\n              _iterator3 = _createForOfIteratorHelper(_warningRow);\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _warningResult = _step3.value;\n                  if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n                    messages.push(_warningResult.Message);\n                  } else {\n                    _iterator4 = _createForOfIteratorHelper(_warningResult.keys());\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        _objectKey = _step4.value;\n                        messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            case 14:\n              _context2.next = 8;\n              break;\n            case 16:\n              _context2.next = 21;\n              break;\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](6);\n              _iterator2.e(_context2.t0);\n            case 21:\n              _context2.prev = 21;\n              _iterator2.f();\n              return _context2.finish(21);\n            case 24:\n              this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n              return _context2.abrupt(\"return\", results);\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[6, 18, 21, 24]]);\n      }));\n      function logWarnings(_x3) {\n        return _logWarnings.apply(this, arguments);\n      }\n      return logWarnings;\n    }()\n  }, {\n    key: \"formatError\",\n    value: function formatError(err) {\n      var _this = this;\n      var errCode = err.errno || err.code;\n      switch (errCode) {\n        case ER_DUP_ENTRY:\n          {\n            var match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n            var fields = {};\n            var message = \"Validation error\";\n            var values = match ? match[1].split(\"-\") : void 0;\n            var fieldKey = match ? match[2] : void 0;\n            var fieldVal = match ? match[1] : void 0;\n            var uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n            if (uniqueKey) {\n              if (uniqueKey.msg) message = uniqueKey.msg;\n              fields = _.zipObject(uniqueKey.fields, values);\n            } else {\n              fields[fieldKey] = fieldVal;\n            }\n            var errors = [];\n            _.forOwn(fields, function (value, field) {\n              errors.push(new sequelizeErrors.ValidationErrorItem(_this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, _this.instance, \"not_unique\"));\n            });\n            return new sequelizeErrors.UniqueConstraintError({\n              message: message,\n              errors: errors,\n              parent: err,\n              fields: fields\n            });\n          }\n        case ER_ROW_IS_REFERENCED:\n        case ER_NO_REFERENCED_ROW:\n          {\n            var _match2 = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n            var quoteChar = _match2 ? _match2[1] : \"`\";\n            var _fields = _match2 ? _match2[3].split(new RegExp(\"\".concat(quoteChar, \", *\").concat(quoteChar))) : void 0;\n            return new sequelizeErrors.ForeignKeyConstraintError({\n              reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n              table: _match2 ? _match2[4] : void 0,\n              fields: _fields,\n              value: _fields && _fields.length && this.instance && this.instance[_fields[0]] || void 0,\n              index: _match2 ? _match2[2] : void 0,\n              parent: err\n            });\n          }\n        default:\n          return new sequelizeErrors.DatabaseError(err);\n      }\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      data = data.reduce(function (acc, item) {\n        if (!(item.Key_name in acc)) {\n          acc[item.Key_name] = item;\n          item.fields = [];\n        }\n        acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n          attribute: item.Column_name,\n          length: item.Sub_part || void 0,\n          order: item.Collation === \"A\" ? \"ASC\" : void 0\n        };\n        delete item.column_name;\n        return acc;\n      }, {});\n      return _.map(data, function (item) {\n        return {\n          primary: item.Key_name === \"PRIMARY\",\n          fields: item.fields,\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n      });\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam = [];\n      var replacementFunc = function replacementFunc(_match, key, values_) {\n        if (values_[key] !== void 0) {\n          bindParam.push(values_[key]);\n          return \"?\";\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      return [sql, bindParam.length > 0 ? bindParam : void 0];\n    }\n  }]);\n  return Query;\n}(AbstractQuery);\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","_","_require","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","_AbstractQuery","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_run","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sql","parameters","connection","options","showWarnings","complete","results","wrap","_callee$","_context","prev","next","sequelize","_logQuery","Promise","resolve","reject","execute","sqlText","binds","err","_stmt","rows","sent","t0","transaction","errno","rollback","t1","finished","formatError","finish","warningStatus","logWarnings","abrupt","formatResults","stop","run","_x","_x2","data","result","instance","isInsertQuery","handleInsertQuery","constructor","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","push","_defineProperty","field","isSelectQuery","raw","quoteIdentifiers","sfAttrMap","reduce","m","v","k","toUpperCase","map","data2","fieldMap","mapKeys","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_iterator","_createForOfIteratorHelper","_step","s","n","done","_result","Field","type","Type","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","e","f","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","_logWarnings","_callee2","warningResults","warningMessage","messages","_iterator2","_step2","_warningRow","_iterator3","_step3","_warningResult","_iterator4","_step4","_objectKey","_callee2$","_context2","concat","uuid","Symbol","iterator","Message","keys","join","log","_x3","_this","errCode","code","match","message","fields","values","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","length","index","DatabaseError","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","primary","tableName","Table","unique","Non_unique","Index_type","formatBindParameters","dialect","bindParam","replacementFunc","_match","values_","module","exports","default"],"sources":["../../../src/dialects/snowflake/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:snowflake');\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // ignore errors\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      // Snowflake will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data => _.reduce(data, (prev, value, key) => {\n          if ( value !== undefined && sfAttrMap[key] ) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => { return k.toUpperCase(); });\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0]['number of rows updated'];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}