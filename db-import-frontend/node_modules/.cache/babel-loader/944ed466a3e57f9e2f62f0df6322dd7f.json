{"ast":null,"code":"import _classCallCheck from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nvar errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport var RestError = /*#__PURE__*/function (_Error) {\n  _inherits(RestError, _Error);\n  var _super = _createSuper(RestError);\n  function RestError(message) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, RestError);\n    _this = _super.call(this, message);\n    _this.name = \"RestError\";\n    _this.code = options.code;\n    _this.statusCode = options.statusCode;\n    _this.request = options.request;\n    _this.response = options.response;\n    Object.setPrototypeOf(_assertThisInitialized(_this), RestError.prototype);\n    return _this;\n  }\n  /**\n   * Logging method for util.inspect in Node\n   */\n  _createClass(RestError, [{\n    key: custom,\n    value: function value() {\n      return \"RestError: \".concat(this.message, \" \\n \").concat(errorSanitizer.sanitize(this));\n    }\n  }]);\n  return RestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}","map":{"version":3,"names":["isError","custom","Sanitizer","errorSanitizer","RestError","_Error","_inherits","_super","_createSuper","message","_this","options","arguments","length","undefined","_classCallCheck","call","name","code","statusCode","request","response","Object","setPrototypeOf","_assertThisInitialized","prototype","_createClass","key","value","concat","sanitize","_wrapNativeSuper","Error","REQUEST_SEND_ERROR","PARSE_ERROR","isRestError","e"],"sources":["../../src/restError.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isError } from \"@azure/core-util\";\nimport { PipelineRequest, PipelineResponse } from \"./interfaces\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n"],"mappings":";;;;;;AAAA;AACA;AAEA,SAASA,OAAO,QAAQ,kBAAkB;AAE1C,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,IAAMC,cAAc,GAAG,IAAID,SAAS,EAAE;AAwBtC;;;AAGA,WAAaE,SAAU,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EAkCrB,SAAAA,UAAYK,OAAe,EAAgC;IAAA,IAAAC,KAAA;IAAA,IAA9BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;IAAAG,eAAA,OAAAX,SAAA;IACzDM,KAAA,GAAAH,MAAA,CAAAS,IAAA,OAAMP,OAAO;IACbC,KAAA,CAAKO,IAAI,GAAG,WAAW;IACvBP,KAAA,CAAKQ,IAAI,GAAGP,OAAO,CAACO,IAAI;IACxBR,KAAA,CAAKS,UAAU,GAAGR,OAAO,CAACQ,UAAU;IACpCT,KAAA,CAAKU,OAAO,GAAGT,OAAO,CAACS,OAAO;IAC9BV,KAAA,CAAKW,QAAQ,GAAGV,OAAO,CAACU,QAAQ;IAEhCC,MAAM,CAACC,cAAc,CAAAC,sBAAA,CAAAd,KAAA,GAAON,SAAS,CAACqB,SAAS,CAAC;IAAC,OAAAf,KAAA;EACnD;EAEA;;;EAAAgB,YAAA,CAAAtB,SAAA;IAAAuB,GAAA,EAGC1B,MAAM;IAAA2B,KAAA,EAAP,SAAAA,MAAA,EAAQ;MACN,qBAAAC,MAAA,CAAqB,IAAI,CAACpB,OAAO,UAAAoB,MAAA,CAAO1B,cAAc,CAAC2B,QAAQ,CAAC,IAAI,CAAC;IACvE;EAAC;EAAA,OAAA1B,SAAA;AAAA,gBAAA2B,gBAAA,CAlD4BC,KAAK;AAClC;;;;;AAKgB5B,SAAA,CAAA6B,kBAAkB,GAAW,oBAAoB;AACjE;;;;AAIgB7B,SAAA,CAAA8B,WAAW,GAAW,aAAa;AA0CrD;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,CAAU;EACpC,IAAIA,CAAC,YAAYhC,SAAS,EAAE;IAC1B,OAAO,IAAI;;EAEb,OAAOJ,OAAO,CAACoC,CAAC,CAAC,IAAIA,CAAC,CAACnB,IAAI,KAAK,WAAW;AAC7C"},"metadata":{},"sourceType":"module"}