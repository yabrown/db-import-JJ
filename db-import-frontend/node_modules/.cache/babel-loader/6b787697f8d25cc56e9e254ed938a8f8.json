{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SignedHttpRequest = /** @class */function () {\n  function SignedHttpRequest(shrParameters, shrOptions) {\n    var loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n  SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.popTokenGenerator.generateKid(this.shrParameters)];\n          case 1:\n            kid = _a.sent().kid;\n            return [2 /*return*/, kid];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n  SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\n      });\n    });\n  };\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n  SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SignedHttpRequest;\n}();\nexport { SignedHttpRequest };","map":{"version":3,"names":["SignedHttpRequest","shrParameters","shrOptions","loggerOptions","logger","Logger","name","version","cryptoOps","CryptoOps","popTokenGenerator","PopTokenGenerator","prototype","generatePublicKeyThumbprint","generateKid","kid","_a","sent","signRequest","payload","publicKeyThumbprint","claims","signPayload","removeKeys","removeTokenBindingKey"],"sources":["../../src/crypto/SignedHttpRequest.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoOps } from \"./CryptoOps\";\r\nimport { Logger, LoggerOptions, PopTokenGenerator, SignedHttpRequestParameters } from \"@azure/msal-common\";\r\nimport { version, name } from \"../packageMetadata\";\r\n\r\nexport type SignedHttpRequestOptions = {\r\n    loggerOptions: LoggerOptions\r\n};\r\n\r\nexport class SignedHttpRequest {\r\n    private popTokenGenerator: PopTokenGenerator;\r\n    private cryptoOps: CryptoOps;\r\n    private shrParameters: SignedHttpRequestParameters;\r\n    private logger: Logger;\r\n\r\n    constructor(shrParameters: SignedHttpRequestParameters, shrOptions?: SignedHttpRequestOptions) {\r\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\r\n        this.logger = new Logger(loggerOptions, name, version);\r\n        this.cryptoOps = new CryptoOps(this.logger);\r\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\r\n        this.shrParameters = shrParameters;\r\n    }\r\n\r\n    /**\r\n     * Generates and caches a keypair for the given request options.\r\n     * @returns Public key digest, which should be sent to the token issuer.\r\n     */\r\n    async generatePublicKeyThumbprint(): Promise<string> {\r\n        const { kid } = await this.popTokenGenerator.generateKid(this.shrParameters);\r\n\r\n        return kid;\r\n    }\r\n\r\n    /**\r\n     * Generates a signed http request for the given payload with the given key.\r\n     * @param payload Payload to sign (e.g. access token)\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @param claims Additional claims to include/override in the signed JWT \r\n     * @returns Pop token signed with the corresponding private key\r\n     */\r\n    async signRequest(payload: string, publicKeyThumbprint: string, claims?: object): Promise<string> {\r\n        return this.popTokenGenerator.signPayload(\r\n            payload, \r\n            publicKeyThumbprint,\r\n            this.shrParameters, \r\n            claims\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Removes cached keys from browser for given public key thumbprint\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @returns If keys are properly deleted\r\n     */\r\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\r\n        return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;;;EAmBI,SAAAA,kBAAYC,aAA0C,EAAEC,UAAqC;IACzF,IAAMC,aAAa,GAAID,UAAU,IAAIA,UAAU,CAACC,aAAa,IAAK,EAAE;IACpE,IAAI,CAACC,MAAM,GAAG,IAAIC,MAAM,CAACF,aAAa,EAAEG,IAAI,EAAEC,OAAO,CAAC;IACtD,IAAI,CAACC,SAAS,GAAG,IAAIC,SAAS,CAAC,IAAI,CAACL,MAAM,CAAC;IAC3C,IAAI,CAACM,iBAAiB,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACH,SAAS,CAAC;IAC9D,IAAI,CAACP,aAAa,GAAGA,aAAa;;;;;;EAOhCD,iBAAA,CAAAY,SAAA,CAAAC,2BAA2B,GAAjC;;;;;;YACoB,qBAAM,IAAI,CAACH,iBAAiB,CAACI,WAAW,CAAC,IAAI,CAACb,aAAa,CAAC;;YAApEc,GAAG,GAAKC,EAAA,CAAAC,IAAA,EAA4D,CAAAF,GAAjE;YAEX,sBAAOA,GAAG;;;;GACb;;;;;;;;EASKf,iBAAA,CAAAY,SAAA,CAAAM,WAAW,GAAjB,UAAkBC,OAAe,EAAEC,mBAA2B,EAAEC,MAAe;;;QAC3E,sBAAO,IAAI,CAACX,iBAAiB,CAACY,WAAW,CACrCH,OAAO,EACPC,mBAAmB,EACnB,IAAI,CAACnB,aAAa,EAClBoB,MAAM,CACT;;;GACJ;;;;;;EAOKrB,iBAAA,CAAAY,SAAA,CAAAW,UAAU,GAAhB,UAAiBH,mBAA2B;;;;;YACjC,qBAAM,IAAI,CAACZ,SAAS,CAACgB,qBAAqB,CAACJ,mBAAmB,CAAC;;YAAtE,sBAAOJ,EAAA,CAAAC,IAAA,EAA+D;;;;GACzE;EACL,OAAAjB,iBAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module"}