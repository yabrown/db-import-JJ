{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nvar RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nvar AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    var _iterator = _createForOfIteratorHelper(AllRetryAfterHeaders),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var header = _step.value;\n        var retryAfterValue = parseHeaderValueAsNumber(response, header);\n        if (retryAfterValue === 0 || retryAfterValue) {\n          // \"Retry-After\" header ==> seconds\n          // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n          var multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n          return retryAfterValue * multiplyingFactor; // in milli-seconds\n        }\n      }\n      // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n    var date = Date.parse(retryAfterHeader);\n    var diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e) {\n    return undefined;\n  }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry: function retry(_ref) {\n      var response = _ref.response;\n      var retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return {\n          skipStrategy: true\n        };\n      }\n      return {\n        retryAfterInMs: retryAfterInMs\n      };\n    }\n  };\n}","map":{"version":3,"names":["parseHeaderValueAsNumber","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","response","includes","status","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","header","value","retryAfterValue","multiplyingFactor","err","e","f","retryAfterHeader","headers","get","date","Date","parse","diff","now","Number","isFinite","Math","max","isThrottlingRetryResponse","throttlingRetryStrategy","name","retry","_ref","retryAfterInMs","skipStrategy"],"sources":["../../../src/retryStrategies/throttlingRetryStrategy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse } from \"..\";\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\nimport { RetryStrategy } from \"./retryStrategy\";\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response?: PipelineResponse): number | undefined {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e: any) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs,\n      };\n    },\n  };\n}\n"],"mappings":";AAAA;AACA;AAGA,SAASA,wBAAwB,QAAQ,iBAAiB;AAG1D;;;;AAIA,IAAMC,gBAAgB,GAAG,aAAa;AACtC;;;;;;;AAOA,IAAMC,oBAAoB,GAAa,CAAC,gBAAgB,EAAE,qBAAqB,EAAED,gBAAgB,CAAC;AAElG;;;;;;;;;AASA,SAASE,iBAAiBA,CAACC,QAA2B;EACpD,IAAI,EAAEA,QAAQ,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAACE,MAAM,CAAC,CAAC,EAAE,OAAOC,SAAS;EACzE,IAAI;IACF;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CACqBP,oBAAoB;MAAAQ,KAAA;IAAA;MAAzC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA2C;QAAA,IAAhCC,MAAM,GAAAJ,KAAA,CAAAK,KAAA;QACf,IAAMC,eAAe,GAAGhB,wBAAwB,CAACI,QAAQ,EAAEU,MAAM,CAAC;QAClE,IAAIE,eAAe,KAAK,CAAC,IAAIA,eAAe,EAAE;UAC5C;UACA;UACA,IAAMC,iBAAiB,GAAGH,MAAM,KAAKb,gBAAgB,GAAG,IAAI,GAAG,CAAC;UAChE,OAAOe,eAAe,GAAGC,iBAAiB,CAAC,CAAC;;;MAIhD;IAAA,SAAAC,GAAA;MAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;IAAA;MAAAV,SAAA,CAAAY,CAAA;IAAA;IACA,IAAMC,gBAAgB,GAAGjB,QAAQ,CAACkB,OAAO,CAACC,GAAG,CAACtB,gBAAgB,CAAC;IAC/D,IAAI,CAACoB,gBAAgB,EAAE;IAEvB,IAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;IACzC,IAAMM,IAAI,GAAGH,IAAI,GAAGC,IAAI,CAACG,GAAG,EAAE;IAC9B;IACA,OAAOC,MAAM,CAACC,QAAQ,CAACH,IAAI,CAAC,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,IAAI,CAAC,GAAGpB,SAAS;GAC7D,CAAC,OAAOY,CAAM,EAAE;IACf,OAAOZ,SAAS;;AAEpB;AAEA;;;;AAIA,OAAM,SAAU0B,yBAAyBA,CAAC7B,QAA2B;EACnE,OAAOyB,MAAM,CAACC,QAAQ,CAAC3B,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AACrD;AAEA,OAAM,SAAU8B,uBAAuBA,CAAA;EACrC,OAAO;IACLC,IAAI,EAAE,yBAAyB;IAC/BC,KAAK,WAAAA,MAAAC,IAAA,EAAa;MAAA,IAAVjC,QAAQ,GAAAiC,IAAA,CAARjC,QAAQ;MACd,IAAMkC,cAAc,GAAGnC,iBAAiB,CAACC,QAAQ,CAAC;MAClD,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAACQ,cAAc,CAAC,EAAE;QACpC,OAAO;UAAEC,YAAY,EAAE;QAAI,CAAE;;MAE/B,OAAO;QACLD,cAAc,EAAdA;OACD;IACH;GACD;AACH"},"metadata":{},"sourceType":"module"}