{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\nvar _token = require(\"./token\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(function (numberOfTableNameParts) {\n        var tableName = [];\n        var i = 0;\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n          parser.readUsVarChar(function (part) {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n        next(function () {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(function (colName) {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\nfunction readColumn(parser, options, index, callback) {\n  (0, _metadataParser.default)(parser, options, function (metadata) {\n    readTableName(parser, options, metadata, function (tableName) {\n      readColumnName(parser, options, index, metadata, function (colName) {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\nfunction colMetadataParser(_x) {\n  return _colMetadataParser.apply(this, arguments);\n}\nfunction _colMetadataParser() {\n  _colMetadataParser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(parser) {\n    var columnCount, columns, _loop, i;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(parser.buffer.length - parser.position < 2)) {\n            _context2.next = 5;\n            break;\n          }\n          _context2.next = 3;\n          return parser.streamBuffer.waitForChunk();\n        case 3:\n          _context2.next = 0;\n          break;\n        case 5:\n          columnCount = parser.buffer.readUInt16LE(parser.position);\n          parser.position += 2;\n          columns = [];\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var column, next;\n            return _regeneratorRuntime().wrap(function _loop$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  readColumn(parser, parser.options, i, function (c) {\n                    column = c;\n                  });\n                case 1:\n                  if (!parser.suspended) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 4;\n                  return parser.streamBuffer.waitForChunk();\n                case 4:\n                  parser.suspended = false;\n                  next = parser.next;\n                  next();\n                  _context.next = 1;\n                  break;\n                case 9:\n                  columns.push(column);\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _loop);\n          });\n          i = 0;\n        case 10:\n          if (!(i < columnCount)) {\n            _context2.next = 15;\n            break;\n          }\n          return _context2.delegateYield(_loop(), \"t0\", 12);\n        case 12:\n          i++;\n          _context2.next = 10;\n          break;\n        case 15:\n          return _context2.abrupt(\"return\", new _token.ColMetadataToken(columns));\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _colMetadataParser.apply(this, arguments);\n}\nvar _default = colMetadataParser;\nexports.default = _default;\nmodule.exports = colMetadataParser;","map":{"version":3,"names":["_metadataParser","_interopRequireDefault","require","_token","readTableName","parser","options","metadata","callback","type","hasTableName","tdsVersion","readUInt8","numberOfTableNameParts","tableName","i","next","done","readUsVarChar","part","push","undefined","readColumnName","index","readBVarChar","colName","columnNameReplacer","camelCaseColumns","replace","s","toLowerCase","readColumn","default","userType","flags","collation","precision","scale","udtInfo","dataLength","schema","colMetadataParser","_x","_colMetadataParser","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","columnCount","columns","_loop","wrap","_callee$","_context2","prev","buffer","length","position","streamBuffer","waitForChunk","readUInt16LE","column","_loop$","_context","c","suspended","stop","delegateYield","abrupt","ColMetadataToken","module","exports"],"sources":["../../src/token/colmetadata-token-parser.ts"],"sourcesContent":["import metadataParse, { Metadata } from '../metadata-parser';\n\nimport Parser, { ParserOptions } from './stream-parser';\nimport { ColMetadataToken } from './token';\n\nexport interface ColumnMetadata extends Metadata {\n  /**\n   * The column's nameã€‚\n   */\n  colName: string;\n\n  tableName?: string | string[] | undefined;\n}\n\nfunction readTableName(parser: Parser, options: ParserOptions, metadata: Metadata, callback: (tableName?: string | string[]) => void) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8((numberOfTableNameParts) => {\n        const tableName: string[] = [];\n\n        let i = 0;\n        function next(done: () => void) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar((part) => {\n            tableName.push(part);\n\n            i++;\n\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser: Parser, options: ParserOptions, index: number, metadata: Metadata, callback: (colName: string) => void) {\n  parser.readBVarChar((colName) => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function(s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser: Parser, options: ParserOptions, index: number, callback: (column: ColumnMetadata) => void) {\n  metadataParse(parser, options, (metadata) => {\n    readTableName(parser, options, metadata, (tableName) => {\n      readColumnName(parser, options, index, metadata, (colName) => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nasync function colMetadataParser(parser: Parser): Promise<ColMetadataToken> {\n  while (parser.buffer.length - parser.position < 2) {\n    await parser.streamBuffer.waitForChunk();\n  }\n\n  const columnCount = parser.buffer.readUInt16LE(parser.position);\n  parser.position += 2;\n\n  const columns: ColumnMetadata[] = [];\n  for (let i = 0; i < columnCount; i++) {\n    let column: ColumnMetadata;\n\n    readColumn(parser, parser.options, i, (c) => {\n      column = c;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n\n      parser.suspended = false;\n      const next = parser.next!;\n\n      next();\n    }\n\n    columns.push(column!);\n  }\n\n  return new ColMetadataToken(columns);\n}\n\nexport default colMetadataParser;\nmodule.exports = colMetadataParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}