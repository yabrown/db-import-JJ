{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MapperTypeNames } from \"./serializer\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n  var result = new Set();\n  for (var statusCode in operationSpec.responses) {\n    var operationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n  var parameterPath = parameter.parameterPath,\n    mapper = parameter.mapper;\n  var result;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName;\n  }\n  return result;\n}","map":{"version":3,"names":["MapperTypeNames","getStreamingResponseStatusCodes","operationSpec","result","Set","statusCode","responses","operationResponse","bodyMapper","type","name","Stream","add","Number","getPathStringFromParameter","parameter","parameterPath","mapper","Array","isArray","join","serializedName"],"sources":["../../src/interfaceHelpers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationParameter, OperationSpec } from \"./interfaces\";\nimport { MapperTypeNames } from \"./serializer\";\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec: OperationSpec): Set<number> {\n  const result = new Set<number>();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperTypeNames.Stream\n    ) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  const { parameterPath, mapper } = parameter;\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,eAAe,QAAQ,cAAc;AAE9C;;;;AAIA,OAAM,SAAUC,+BAA+BA,CAACC,aAA4B;EAC1E,IAAMC,MAAM,GAAG,IAAIC,GAAG,EAAU;EAChC,KAAK,IAAMC,UAAU,IAAIH,aAAa,CAACI,SAAS,EAAE;IAChD,IAAMC,iBAAiB,GAAGL,aAAa,CAACI,SAAS,CAACD,UAAU,CAAC;IAC7D,IACEE,iBAAiB,CAACC,UAAU,IAC5BD,iBAAiB,CAACC,UAAU,CAACC,IAAI,CAACC,IAAI,KAAKV,eAAe,CAACW,MAAM,EACjE;MACAR,MAAM,CAACS,GAAG,CAACC,MAAM,CAACR,UAAU,CAAC,CAAC;;;EAGlC,OAAOF,MAAM;AACf;AAEA;;;;;;AAMA,OAAM,SAAUW,0BAA0BA,CAACC,SAA6B;EACtE,IAAQC,aAAa,GAAaD,SAAS,CAAnCC,aAAa;IAAEC,MAAM,GAAKF,SAAS,CAApBE,MAAM;EAC7B,IAAId,MAAc;EAClB,IAAI,OAAOa,aAAa,KAAK,QAAQ,EAAE;IACrCb,MAAM,GAAGa,aAAa;GACvB,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;IACvCb,MAAM,GAAGa,aAAa,CAACI,IAAI,CAAC,GAAG,CAAC;GACjC,MAAM;IACLjB,MAAM,GAAGc,MAAM,CAACI,cAAe;;EAEjC,OAAOlB,MAAM;AACf"},"metadata":{},"sourceType":"module"}