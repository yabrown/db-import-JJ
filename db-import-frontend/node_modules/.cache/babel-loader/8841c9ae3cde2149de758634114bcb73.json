{"ast":null,"code":"// Get the appropriate flag to use for creating files\n// We use fmap on Windows platforms for files less than\n// 512kb.  This is a fairly low limit, but avoids making\n// things slower in some cases.  Since most of what this\n// library is used for is extracting tarballs of many\n// relatively small files in npm packages and the like,\n// it can be a big boost on Windows platforms.\n// Only supported in Node v12.9.0 and above.\nvar platform = process.env.__FAKE_PLATFORM__ || process.platform;\nvar isWindows = platform === 'win32';\nvar fs = global.__FAKE_TESTING_FS__ || require('fs');\n\n/* istanbul ignore next */\nvar _fs$constants = fs.constants,\n  O_CREAT = _fs$constants.O_CREAT,\n  O_TRUNC = _fs$constants.O_TRUNC,\n  O_WRONLY = _fs$constants.O_WRONLY,\n  _fs$constants$UV_FS_O = _fs$constants.UV_FS_O_FILEMAP,\n  UV_FS_O_FILEMAP = _fs$constants$UV_FS_O === void 0 ? 0 : _fs$constants$UV_FS_O;\nvar fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;\nvar fMapLimit = 512 * 1024;\nvar fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;\nmodule.exports = !fMapEnabled ? function () {\n  return 'w';\n} : function (size) {\n  return size < fMapLimit ? fMapFlag : 'w';\n};","map":{"version":3,"names":["platform","process","env","__FAKE_PLATFORM__","isWindows","fs","global","__FAKE_TESTING_FS__","require","_fs$constants","constants","O_CREAT","O_TRUNC","O_WRONLY","_fs$constants$UV_FS_O","UV_FS_O_FILEMAP","fMapEnabled","fMapLimit","fMapFlag","module","exports","size"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/tar/lib/get-write-flag.js"],"sourcesContent":["// Get the appropriate flag to use for creating files\n// We use fmap on Windows platforms for files less than\n// 512kb.  This is a fairly low limit, but avoids making\n// things slower in some cases.  Since most of what this\n// library is used for is extracting tarballs of many\n// relatively small files in npm packages and the like,\n// it can be a big boost on Windows platforms.\n// Only supported in Node v12.9.0 and above.\nconst platform = process.env.__FAKE_PLATFORM__ || process.platform\nconst isWindows = platform === 'win32'\nconst fs = global.__FAKE_TESTING_FS__ || require('fs')\n\n/* istanbul ignore next */\nconst { O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0 } = fs.constants\n\nconst fMapEnabled = isWindows && !!UV_FS_O_FILEMAP\nconst fMapLimit = 512 * 1024\nconst fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY\nmodule.exports = !fMapEnabled ? () => 'w'\n  : size => size < fMapLimit ? fMapFlag : 'w'\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIF,OAAO,CAACD,QAAQ;AAClE,IAAMI,SAAS,GAAGJ,QAAQ,KAAK,OAAO;AACtC,IAAMK,EAAE,GAAGC,MAAM,CAACC,mBAAmB,IAAIC,OAAO,CAAC,IAAI,CAAC;;AAEtD;AACA,IAAAC,aAAA,GAA4DJ,EAAE,CAACK,SAAS;EAAhEC,OAAO,GAAAF,aAAA,CAAPE,OAAO;EAAEC,OAAO,GAAAH,aAAA,CAAPG,OAAO;EAAEC,QAAQ,GAAAJ,aAAA,CAARI,QAAQ;EAAAC,qBAAA,GAAAL,aAAA,CAAEM,eAAe;EAAfA,eAAe,GAAAD,qBAAA,cAAG,CAAC,GAAAA,qBAAA;AAEvD,IAAME,WAAW,GAAGZ,SAAS,IAAI,CAAC,CAACW,eAAe;AAClD,IAAME,SAAS,GAAG,GAAG,GAAG,IAAI;AAC5B,IAAMC,QAAQ,GAAGH,eAAe,GAAGH,OAAO,GAAGD,OAAO,GAAGE,QAAQ;AAC/DM,MAAM,CAACC,OAAO,GAAG,CAACJ,WAAW,GAAG;EAAA,OAAM,GAAG;AAAA,IACrC,UAAAK,IAAI;EAAA,OAAIA,IAAI,GAAGJ,SAAS,GAAGC,QAAQ,GAAG,GAAG;AAAA"},"metadata":{},"sourceType":"script"}