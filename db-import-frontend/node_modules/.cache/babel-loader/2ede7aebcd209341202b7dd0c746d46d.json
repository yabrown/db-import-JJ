{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"sequelize-pool\"),\n  Pool = _require.Pool,\n  TimeoutError = _require.TimeoutError;\nvar _ = require(\"lodash\");\nvar semver = require(\"semver\");\nvar errors = require(\"../../errors\");\nvar _require2 = require(\"../../utils/logger\"),\n  logger = _require2.logger;\nvar deprecations = require(\"../../utils/deprecations\");\nvar debug = logger.debugContext(\"pool\");\nvar ConnectionManager = /*#__PURE__*/function () {\n  function ConnectionManager(dialect, sequelize) {\n    _classCallCheck(this, ConnectionManager);\n    var config = _.cloneDeep(sequelize.config);\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n    if (config.pool === false) {\n      throw new Error(\"Support for pool:false was removed in v4.0\");\n    }\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 1e4,\n      acquire: 6e4,\n      evict: 1e3,\n      validate: this._validate.bind(this)\n    });\n    this.initPools();\n  }\n  _createClass(ConnectionManager, [{\n    key: \"refreshTypeParser\",\n    value: function refreshTypeParser(dataTypes) {\n      var _this = this;\n      _.each(dataTypes, function (dataType) {\n        if (Object.prototype.hasOwnProperty.call(dataType, \"parse\")) {\n          if (dataType.types[_this.dialectName]) {\n            _this._refreshTypeParser(dataType);\n          } else {\n            throw new Error(\"Parse function not supported for type \".concat(dataType.key, \" in dialect \").concat(_this.dialectName));\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_loadDialectModule\",\n    value: function _loadDialectModule(moduleName) {\n      try {\n        if (this.sequelize.config.dialectModulePath) {\n          return require(this.sequelize.config.dialectModulePath);\n        }\n        if (this.sequelize.config.dialectModule) {\n          return this.sequelize.config.dialectModule;\n        }\n        return require(moduleName);\n      } catch (err) {\n        if (err.code === \"MODULE_NOT_FOUND\") {\n          if (this.sequelize.config.dialectModulePath) {\n            throw new Error(\"Unable to find dialect at \".concat(this.sequelize.config.dialectModulePath));\n          }\n          throw new Error(\"Please install \".concat(moduleName, \" package manually\"));\n        }\n        throw err;\n      }\n    }\n  }, {\n    key: \"_onProcessExit\",\n    value: function () {\n      var _onProcessExit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.pool) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _context.next = 4;\n              return this.pool.drain();\n            case 4:\n              debug(\"connection drain due to process exit\");\n              _context.next = 7;\n              return this.pool.destroyAllNow();\n            case 7:\n              return _context.abrupt(\"return\", _context.sent);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _onProcessExit() {\n        return _onProcessExit2.apply(this, arguments);\n      }\n      return _onProcessExit;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.getConnection = /*#__PURE__*/function () {\n                var _getConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        throw new Error(\"ConnectionManager.getConnection was called after the connection manager was closed!\");\n                      case 1:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                function getConnection() {\n                  return _getConnection.apply(this, arguments);\n                }\n                return getConnection;\n              }();\n              _context3.next = 3;\n              return this._onProcessExit();\n            case 3:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }, {\n    key: \"initPools\",\n    value: function initPools() {\n      var _this2 = this;\n      var config = this.config;\n      if (!config.replication) {\n        this.pool = new Pool({\n          name: \"sequelize\",\n          create: function create() {\n            return _this2._connect(config);\n          },\n          destroy: function () {\n            var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection) {\n              var result;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _this2._disconnect(connection);\n                  case 2:\n                    result = _context4.sent;\n                    debug(\"connection destroy\");\n                    return _context4.abrupt(\"return\", result);\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n            function destroy(_x) {\n              return _destroy.apply(this, arguments);\n            }\n            return destroy;\n          }(),\n          validate: config.pool.validate,\n          max: config.pool.max,\n          min: config.pool.min,\n          acquireTimeoutMillis: config.pool.acquire,\n          idleTimeoutMillis: config.pool.idle,\n          reapIntervalMillis: config.pool.evict,\n          maxUses: config.pool.maxUses\n        });\n        debug(\"pool created with max/min: \".concat(config.pool.max, \"/\").concat(config.pool.min, \", no replication\"));\n        return;\n      }\n      if (!Array.isArray(config.replication.read)) {\n        config.replication.read = [config.replication.read];\n      }\n      config.replication.write = _.defaults(config.replication.write, _.omit(config, \"replication\"));\n      config.replication.read = config.replication.read.map(function (readConfig) {\n        return _.defaults(readConfig, _.omit(_this2.config, \"replication\"));\n      });\n      var reads = 0;\n      this.pool = {\n        release: function release(client) {\n          if (client.queryType === \"read\") {\n            _this2.pool.read.release(client);\n          } else {\n            _this2.pool.write.release(client);\n          }\n        },\n        acquire: function acquire(queryType, useMaster) {\n          useMaster = useMaster === void 0 ? false : useMaster;\n          if (queryType === \"SELECT\" && !useMaster) {\n            return _this2.pool.read.acquire();\n          }\n          return _this2.pool.write.acquire();\n        },\n        destroy: function destroy(connection) {\n          _this2.pool[connection.queryType].destroy(connection);\n          debug(\"connection destroy\");\n        },\n        destroyAllNow: function () {\n          var _destroyAllNow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return Promise.all([_this2.pool.read.destroyAllNow(), _this2.pool.write.destroyAllNow()]);\n                case 2:\n                  debug(\"all connections destroyed\");\n                case 3:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }));\n          function destroyAllNow() {\n            return _destroyAllNow.apply(this, arguments);\n          }\n          return destroyAllNow;\n        }(),\n        drain: function () {\n          var _drain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n            return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  return _context6.abrupt(\"return\", Promise.all([_this2.pool.write.drain(), _this2.pool.read.drain()]));\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee6);\n          }));\n          function drain() {\n            return _drain.apply(this, arguments);\n          }\n          return drain;\n        }(),\n        read: new Pool({\n          name: \"sequelize:read\",\n          create: function () {\n            var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n              var nextRead, connection;\n              return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                while (1) switch (_context7.prev = _context7.next) {\n                  case 0:\n                    nextRead = reads++ % config.replication.read.length;\n                    _context7.next = 3;\n                    return _this2._connect(config.replication.read[nextRead]);\n                  case 3:\n                    connection = _context7.sent;\n                    connection.queryType = \"read\";\n                    return _context7.abrupt(\"return\", connection);\n                  case 6:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }, _callee7);\n            }));\n            function create() {\n              return _create.apply(this, arguments);\n            }\n            return create;\n          }(),\n          destroy: function destroy(connection) {\n            return _this2._disconnect(connection);\n          },\n          validate: config.pool.validate,\n          max: config.pool.max,\n          min: config.pool.min,\n          acquireTimeoutMillis: config.pool.acquire,\n          idleTimeoutMillis: config.pool.idle,\n          reapIntervalMillis: config.pool.evict,\n          maxUses: config.pool.maxUses\n        }),\n        write: new Pool({\n          name: \"sequelize:write\",\n          create: function () {\n            var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n              var connection;\n              return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                while (1) switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return _this2._connect(config.replication.write);\n                  case 2:\n                    connection = _context8.sent;\n                    connection.queryType = \"write\";\n                    return _context8.abrupt(\"return\", connection);\n                  case 5:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }, _callee8);\n            }));\n            function create() {\n              return _create2.apply(this, arguments);\n            }\n            return create;\n          }(),\n          destroy: function destroy(connection) {\n            return _this2._disconnect(connection);\n          },\n          validate: config.pool.validate,\n          max: config.pool.max,\n          min: config.pool.min,\n          acquireTimeoutMillis: config.pool.acquire,\n          idleTimeoutMillis: config.pool.idle,\n          reapIntervalMillis: config.pool.evict,\n          maxUses: config.pool.maxUses\n        })\n      };\n      debug(\"pool created with max/min: \".concat(config.pool.max, \"/\").concat(config.pool.min, \", with replication\"));\n    }\n  }, {\n    key: \"getConnection\",\n    value: function () {\n      var _getConnection2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(options) {\n        var _this3 = this;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              options = options || {};\n              if (!(this.sequelize.options.databaseVersion === 0)) {\n                _context10.next = 5;\n                break;\n              }\n              if (!this.versionPromise) {\n                this.versionPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n                  var connection, _options, version, parsedVersion;\n                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                    while (1) switch (_context9.prev = _context9.next) {\n                      case 0:\n                        _context9.prev = 0;\n                        _context9.next = 3;\n                        return _this3._connect(_this3.config.replication.write || _this3.config);\n                      case 3:\n                        connection = _context9.sent;\n                        _options = {};\n                        _options.transaction = {\n                          connection: connection\n                        };\n                        _options.logging = function () {};\n                        _options.logging.__testLoggingFn = true;\n                        if (!(_this3.sequelize.options.databaseVersion === 0)) {\n                          _context9.next = 14;\n                          break;\n                        }\n                        _context9.next = 11;\n                        return _this3.sequelize.databaseVersion(_options);\n                      case 11:\n                        version = _context9.sent;\n                        parsedVersion = _.get(semver.coerce(version), \"version\") || version;\n                        _this3.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : _this3.dialect.defaultVersion;\n                      case 14:\n                        if (semver.lt(_this3.sequelize.options.databaseVersion, _this3.dialect.defaultVersion)) {\n                          deprecations.unsupportedEngine();\n                          debug(\"Unsupported database engine version \".concat(_this3.sequelize.options.databaseVersion));\n                        }\n                        _this3.versionPromise = null;\n                        _context9.next = 18;\n                        return _this3._disconnect(connection);\n                      case 18:\n                        return _context9.abrupt(\"return\", _context9.sent);\n                      case 21:\n                        _context9.prev = 21;\n                        _context9.t0 = _context9[\"catch\"](0);\n                        _this3.versionPromise = null;\n                        throw _context9.t0;\n                      case 25:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }, _callee9, null, [[0, 21]]);\n                }))();\n              }\n              _context10.next = 5;\n              return this.versionPromise;\n            case 5:\n              _context10.prev = 5;\n              _context10.next = 8;\n              return this.sequelize.runHooks(\"beforePoolAcquire\", options);\n            case 8:\n              _context10.next = 10;\n              return this.pool.acquire(options.type, options.useMaster);\n            case 10:\n              result = _context10.sent;\n              _context10.next = 13;\n              return this.sequelize.runHooks(\"afterPoolAcquire\", result, options);\n            case 13:\n              _context10.next = 20;\n              break;\n            case 15:\n              _context10.prev = 15;\n              _context10.t0 = _context10[\"catch\"](5);\n              if (!(_context10.t0 instanceof TimeoutError)) {\n                _context10.next = 19;\n                break;\n              }\n              throw new errors.ConnectionAcquireTimeoutError(_context10.t0);\n            case 19:\n              throw _context10.t0;\n            case 20:\n              debug(\"connection acquired\");\n              return _context10.abrupt(\"return\", result);\n            case 22:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[5, 15]]);\n      }));\n      function getConnection(_x2) {\n        return _getConnection2.apply(this, arguments);\n      }\n      return getConnection;\n    }()\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection(connection) {\n      this.pool.release(connection);\n      debug(\"connection released\");\n    }\n  }, {\n    key: \"destroyConnection\",\n    value: function () {\n      var _destroyConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(connection) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.pool.destroy(connection);\n            case 2:\n              debug(\"connection \".concat(connection.uuid, \" destroyed\"));\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function destroyConnection(_x3) {\n        return _destroyConnection.apply(this, arguments);\n      }\n      return destroyConnection;\n    }()\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(config) {\n        var connection;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.sequelize.runHooks(\"beforeConnect\", config);\n            case 2:\n              _context12.next = 4;\n              return this.dialect.connectionManager.connect(config);\n            case 4:\n              connection = _context12.sent;\n              _context12.next = 7;\n              return this.sequelize.runHooks(\"afterConnect\", connection, config);\n            case 7:\n              return _context12.abrupt(\"return\", connection);\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function _connect(_x4) {\n        return _connect2.apply(this, arguments);\n      }\n      return _connect;\n    }()\n  }, {\n    key: \"_disconnect\",\n    value: function () {\n      var _disconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(connection) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.sequelize.runHooks(\"beforeDisconnect\", connection);\n            case 2:\n              _context13.next = 4;\n              return this.dialect.connectionManager.disconnect(connection);\n            case 4:\n              return _context13.abrupt(\"return\", this.sequelize.runHooks(\"afterDisconnect\", connection));\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function _disconnect(_x5) {\n        return _disconnect2.apply(this, arguments);\n      }\n      return _disconnect;\n    }()\n  }, {\n    key: \"_validate\",\n    value: function _validate(connection) {\n      if (!this.dialect.connectionManager.validate) {\n        return true;\n      }\n      return this.dialect.connectionManager.validate(connection);\n    }\n  }]);\n  return ConnectionManager;\n}();\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["_require","require","Pool","TimeoutError","_","semver","errors","_require2","logger","deprecations","debug","debugContext","ConnectionManager","dialect","sequelize","_classCallCheck","config","cloneDeep","versionPromise","dialectName","options","pool","Error","defaults","max","min","idle","acquire","evict","validate","_validate","bind","initPools","_createClass","key","value","refreshTypeParser","dataTypes","_this","each","dataType","Object","prototype","hasOwnProperty","call","types","_refreshTypeParser","concat","_loadDialectModule","moduleName","dialectModulePath","dialectModule","err","code","_onProcessExit2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","drain","destroyAllNow","sent","stop","_onProcessExit","apply","arguments","_close","_callee3","_callee3$","_context3","getConnection","_getConnection","_callee2","_callee2$","_context2","close","_this2","replication","name","create","_connect","destroy","_destroy","_callee4","connection","result","_callee4$","_context4","_disconnect","_x","acquireTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","maxUses","Array","isArray","read","write","omit","map","readConfig","reads","release","client","queryType","useMaster","_destroyAllNow","_callee5","_callee5$","_context5","Promise","all","_drain","_callee6","_callee6$","_context6","_create","_callee7","nextRead","_callee7$","_context7","length","_create2","_callee8","_callee8$","_context8","_getConnection2","_callee10","_this3","_callee10$","_context10","databaseVersion","_callee9","_options","version","parsedVersion","_callee9$","_context9","transaction","logging","__testLoggingFn","get","coerce","valid","defaultVersion","lt","unsupportedEngine","t0","runHooks","type","ConnectionAcquireTimeoutError","_x2","releaseConnection","_destroyConnection","_callee11","_callee11$","_context11","uuid","destroyConnection","_x3","_connect2","_callee12","_callee12$","_context12","connectionManager","connect","_x4","_disconnect2","_callee13","_callee13$","_context13","disconnect","_x5","module","exports","default"],"sources":["../../../src/dialects/abstract/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n\n      await this.sequelize.runHooks('beforePoolAcquire', options);\n\n      result = await this.pool.acquire(options.type, options.useMaster);\n\n      await this.sequelize.runHooks('afterPoolAcquire', result, options);\n\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   */\n  releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Destroys a pooled connection and removes it from the pool.\n   *\n   * @param {Connection} connection\n   */\n  async destroyConnection(connection) {\n    await this.pool.destroy(connection);\n    debug(`connection ${connection.uuid} destroyed`);\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}