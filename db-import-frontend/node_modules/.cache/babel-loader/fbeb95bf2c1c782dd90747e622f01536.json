{"ast":null,"code":"var _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar Minipass = require('minipass');\nvar SizeError = /*#__PURE__*/function (_Error) {\n  \"use strict\";\n\n  _inherits(SizeError, _Error);\n  var _super = _createSuper(SizeError);\n  function SizeError(found, expect) {\n    var _this;\n    _classCallCheck(this, SizeError);\n    _this = _super.call(this, \"Bad data size: expected \".concat(expect, \" bytes, but got \").concat(found));\n    _this.expect = expect;\n    _this.found = found;\n    _this.code = 'EBADSIZE';\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n  _createClass(SizeError, [{\n    key: \"name\",\n    get: function get() {\n      return 'SizeError';\n    }\n  }]);\n  return SizeError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar MinipassSized = /*#__PURE__*/function (_Minipass) {\n  \"use strict\";\n\n  _inherits(MinipassSized, _Minipass);\n  var _super2 = _createSuper(MinipassSized);\n  function MinipassSized() {\n    var _this2;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, MinipassSized);\n    _this2 = _super2.call(this, options);\n    if (options.objectMode) throw new TypeError(\"\".concat(_this2.constructor.name, \" streams only work with string and buffer data\"));\n    _this2.found = 0;\n    _this2.expect = options.size;\n    if (typeof _this2.expect !== 'number' || _this2.expect > Number.MAX_SAFE_INTEGER || isNaN(_this2.expect) || _this2.expect < 0 || !isFinite(_this2.expect) || _this2.expect !== Math.floor(_this2.expect)) throw new Error('invalid expected size: ' + _this2.expect);\n    return _this2;\n  }\n  _createClass(MinipassSized, [{\n    key: \"write\",\n    value: function write(chunk, encoding, cb) {\n      var buffer = Buffer.isBuffer(chunk) ? chunk : typeof chunk === 'string' ? Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8') : chunk;\n      if (!Buffer.isBuffer(buffer)) {\n        this.emit('error', new TypeError(\"\".concat(this.constructor.name, \" streams only work with string and buffer data\")));\n        return false;\n      }\n      this.found += buffer.length;\n      if (this.found > this.expect) this.emit('error', new SizeError(this.found, this.expect));\n      return _get(_getPrototypeOf(MinipassSized.prototype), \"write\", this).call(this, chunk, encoding, cb);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _get2;\n      if (ev === 'end') {\n        if (this.found !== this.expect) this.emit('error', new SizeError(this.found, this.expect));\n      }\n      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n      return (_get2 = _get(_getPrototypeOf(MinipassSized.prototype), \"emit\", this)).call.apply(_get2, [this, ev].concat(data));\n    }\n  }]);\n  return MinipassSized;\n}(Minipass);\nMinipassSized.SizeError = SizeError;\nmodule.exports = MinipassSized;","map":{"version":3,"names":["Minipass","require","SizeError","_Error","_inherits","_super","_createSuper","found","expect","_this","_classCallCheck","call","concat","code","Error","captureStackTrace","_assertThisInitialized","constructor","_createClass","key","get","_wrapNativeSuper","MinipassSized","_Minipass","_super2","_this2","options","arguments","length","undefined","objectMode","TypeError","name","size","Number","MAX_SAFE_INTEGER","isNaN","isFinite","Math","floor","value","write","chunk","encoding","cb","buffer","Buffer","isBuffer","from","emit","_get","_getPrototypeOf","prototype","ev","_get2","_len","data","Array","_key","apply","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/minipass-sized/index.js"],"sourcesContent":["const Minipass = require('minipass')\n\nclass SizeError extends Error {\n  constructor (found, expect) {\n    super(`Bad data size: expected ${expect} bytes, but got ${found}`)\n    this.expect = expect\n    this.found = found\n    this.code = 'EBADSIZE'\n\t  Error.captureStackTrace(this, this.constructor)\n  }\n  get name () {\n    return 'SizeError'\n  }\n}\n\nclass MinipassSized extends Minipass {\n  constructor (options = {}) {\n    super(options)\n\n    if (options.objectMode)\n      throw new TypeError(`${\n        this.constructor.name\n      } streams only work with string and buffer data`)\n\n    this.found = 0\n    this.expect = options.size\n    if (typeof this.expect !== 'number' ||\n        this.expect > Number.MAX_SAFE_INTEGER ||\n        isNaN(this.expect) ||\n        this.expect < 0 ||\n        !isFinite(this.expect) ||\n        this.expect !== Math.floor(this.expect))\n      throw new Error('invalid expected size: ' + this.expect)\n  }\n\n  write (chunk, encoding, cb) {\n    const buffer = Buffer.isBuffer(chunk) ? chunk\n      : typeof chunk === 'string' ?\n        Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8')\n      : chunk\n\n    if (!Buffer.isBuffer(buffer)) {\n      this.emit('error', new TypeError(`${\n        this.constructor.name\n      } streams only work with string and buffer data`))\n      return false\n    }\n\n    this.found += buffer.length\n    if (this.found > this.expect)\n      this.emit('error', new SizeError(this.found, this.expect))\n\n    return super.write(chunk, encoding, cb)\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'end') {\n      if (this.found !== this.expect)\n        this.emit('error', new SizeError(this.found, this.expect))\n    }\n    return super.emit(ev, ...data)\n  }\n}\n\nMinipassSized.SizeError = SizeError\n\nmodule.exports = MinipassSized\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}