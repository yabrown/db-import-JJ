{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ThrottlingUtils = /** @class */function () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  };\n  return ThrottlingUtils;\n}();\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingUtils","generateThrottlingStorageKey","thumbprint","ThrottlingConstants","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","ServerError","_a","errorCodes","join","Constants","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","HeaderNames","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["../../src/network/ThrottlingUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { HeaderNames, ThrottlingConstants, Constants } from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\nexport class ThrottlingUtils {\n\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n        ) * 1000);\n    }\n\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): void {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}