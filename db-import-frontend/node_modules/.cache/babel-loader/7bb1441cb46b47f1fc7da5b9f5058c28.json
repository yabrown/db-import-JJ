{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Token cache manager\r\n */\nvar TokenCache = /** @class */function () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n    if (request.account) {\n      var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n      // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n  TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\n    var homeAccountId;\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\n    }\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n    var accountEntity = clientInfo ? AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\n    var _a, _b, _c;\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n    if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n      msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n  return TokenCache;\n}();\nexport { TokenCache };","map":{"version":3,"names":["TokenCache","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","prototype","loadExternalTokens","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","idToken","AuthToken","cacheRecord","authority","account","cacheRecordAccount","loadAccount","environment","undefined","homeAccountId","CacheRecord","loadIdToken","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","hostnameAndPort","authorityType","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","AccountEntity","generateHomeAccountId","accountEntity","createAccount","createGenericAccount","verbose","setAccount","idTokenEntity","IdTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","Date","getTime","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","RefreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","accessToken","Constants","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","claims","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","idTokenClaims","fromCache","correlationId","requestId","familyId","tokenType","_a","state","cloudGraphHostName","_b","msGraphHost","_c","code","fromNativeBroker"],"sources":["../../src/cache/TokenCache.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken, RefreshTokenEntity , AuthorityType, CacheRecord, AuthenticationResult, Constants } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\r\nimport { ITokenCache } from \"./ITokenCache\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport type LoadTokenOptions = {\r\n    clientInfo?: string,\r\n    expiresOn?: number,\r\n    extendedExpiresOn?: number\r\n};\r\n\r\n/**\r\n * Token cache manager\r\n */\r\nexport class TokenCache implements ITokenCache {\r\n    // Flag to indicate if in browser environment\r\n    public isBrowserEnvironment: boolean;\r\n    // Input configuration by developer/user\r\n    protected config: BrowserConfiguration;\r\n    // Browser cache storage\r\n    private storage: BrowserCacheManager;\r\n    // Logger\r\n    private logger: Logger;\r\n    // Crypto class\r\n    private cryptoObj: ICrypto;\r\n\r\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    // Move getAllAccounts here and cache utility APIs\r\n\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): AuthenticationResult {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n\r\n        const idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n\r\n        let cacheRecord: CacheRecord | undefined;\r\n        let authority: Authority | undefined;\r\n\r\n        if (request.account) {\r\n            const cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\r\n            cacheRecord = new CacheRecord(\r\n                cacheRecordAccount,\r\n                this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId),\r\n                this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options),\r\n                this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment)\r\n            );\r\n        } else if (request.authority) {\r\n\r\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            const authorityOptions: AuthorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                const cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                const cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\r\n    }\r\n\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    private loadAccount(idToken: AuthToken, environment: string, clientInfo?: string, authorityType?: AuthorityType, requestHomeAccountId?: string): AccountEntity {\r\n\r\n        let homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        } else if (authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\r\n        }\r\n\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n\r\n        const accountEntity = clientInfo ?\r\n            AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) :\r\n            AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    private loadIdToken(idToken: AuthToken, homeAccountId: string, environment: string, tenantId: string): IdTokenEntity {\r\n\r\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): AccessTokenEntity | null {\r\n\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n\r\n        const scopes = new ScopeSet(request.scopes).printScopes();\r\n        const expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        const extendedExpiresOn = options.extendedExpiresOn;\r\n\r\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    private loadRefreshToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string): RefreshTokenEntity | null {\r\n\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    private generateAuthenticationResult(\r\n        request: SilentRequest,\r\n        idTokenObj: AuthToken,\r\n        cacheRecord?: CacheRecord,\r\n        authority?: Authority,\r\n    ): AuthenticationResult {\r\n        let accessToken: string = Constants.EMPTY_STRING;\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n\r\n        if (cacheRecord?.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n\r\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\r\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\r\n\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: cacheRecord?.account ? cacheRecord.account.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord?.account?.cloudGraphHostName || Constants.EMPTY_STRING,\r\n            msGraphHost: cacheRecord?.account?.msGraphHost || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}