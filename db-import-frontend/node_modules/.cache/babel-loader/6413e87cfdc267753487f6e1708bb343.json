{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\nvar _stream = require(\"stream\");\nvar _token = require(\"./token/token\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nvar FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n/**\n * @private\n */\n\nvar DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\nvar rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nvar textPointerAndTimestampBuffer = Buffer.from([\n// TextPointer length\n0x10,\n// TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nvar textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\nvar RowTransform = /*#__PURE__*/function (_stream$Transform) {\n  _inherits(RowTransform, _stream$Transform);\n  var _super = _createSuper(RowTransform);\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  function RowTransform(bulkLoad) {\n    var _this;\n    _classCallCheck(this, RowTransform);\n    _this = _super.call(this, {\n      writableObjectMode: true\n    });\n    _this.columnMetadataWritten = void 0;\n    _this.bulkLoad = void 0;\n    _this.mainOptions = void 0;\n    _this.columns = void 0;\n    _this.bulkLoad = bulkLoad;\n    _this.mainOptions = bulkLoad.options;\n    _this.columns = bulkLoad.columns;\n    _this.columnMetadataWritten = false;\n    return _this;\n  }\n  /**\n   * @private\n   */\n  _createClass(RowTransform, [{\n    key: \"_transform\",\n    value: function _transform(row, _encoding, callback) {\n      if (!this.columnMetadataWritten) {\n        this.push(this.bulkLoad.getColMetaData());\n        this.columnMetadataWritten = true;\n      }\n      this.push(rowTokenBuffer);\n      for (var i = 0; i < this.columns.length; i++) {\n        var c = this.columns[i];\n        var value = Array.isArray(row) ? row[i] : row[c.objName];\n        if (!this.bulkLoad.firstRowWritten) {\n          try {\n            value = c.type.validate(value, c.collation);\n          } catch (error) {\n            return callback(error);\n          }\n        }\n        var parameter = {\n          length: c.length,\n          scale: c.scale,\n          precision: c.precision,\n          value: value\n        };\n        if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n          if (value == null) {\n            this.push(textPointerNullBuffer);\n            continue;\n          }\n          this.push(textPointerAndTimestampBuffer);\n        }\n        this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n        var _iterator = _createForOfIteratorHelper(c.type.generateParameterData(parameter, this.mainOptions)),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunk = _step.value;\n            this.push(chunk);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      process.nextTick(callback);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      this.push(this.bulkLoad.createDoneToken());\n      process.nextTick(callback);\n    }\n  }]);\n  return RowTransform;\n}(_stream.Transform);\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\nvar BulkLoad = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(BulkLoad, _events$EventEmitter);\n  var _super2 = _createSuper(BulkLoad);\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  function BulkLoad(table, collation, connectionOptions, _ref, callback) {\n    var _this2;\n    var _ref$checkConstraints = _ref.checkConstraints,\n      checkConstraints = _ref$checkConstraints === void 0 ? false : _ref$checkConstraints,\n      _ref$fireTriggers = _ref.fireTriggers,\n      fireTriggers = _ref$fireTriggers === void 0 ? false : _ref$fireTriggers,\n      _ref$keepNulls = _ref.keepNulls,\n      keepNulls = _ref$keepNulls === void 0 ? false : _ref$keepNulls,\n      _ref$lockTable = _ref.lockTable,\n      lockTable = _ref$lockTable === void 0 ? false : _ref$lockTable,\n      _ref$order = _ref.order,\n      order = _ref$order === void 0 ? {} : _ref$order;\n    _classCallCheck(this, BulkLoad);\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n    for (var _i = 0, _Object$entries = Object.entries(order); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        column = _Object$entries$_i[0],\n        direction = _Object$entries$_i[1];\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n    _this2 = _super2.call(this);\n    _this2.error = void 0;\n    _this2.canceled = void 0;\n    _this2.executionStarted = void 0;\n    _this2.streamingMode = void 0;\n    _this2.table = void 0;\n    _this2.timeout = void 0;\n    _this2.options = void 0;\n    _this2.callback = void 0;\n    _this2.columns = void 0;\n    _this2.columnsByName = void 0;\n    _this2.firstRowWritten = void 0;\n    _this2.rowToPacketTransform = void 0;\n    _this2.bulkOptions = void 0;\n    _this2.connection = void 0;\n    _this2.rows = void 0;\n    _this2.rst = void 0;\n    _this2.rowCount = void 0;\n    _this2.collation = void 0;\n    _this2.error = undefined;\n    _this2.canceled = false;\n    _this2.executionStarted = false;\n    _this2.collation = collation;\n    _this2.table = table;\n    _this2.options = connectionOptions;\n    _this2.callback = callback;\n    _this2.columns = [];\n    _this2.columnsByName = {};\n    _this2.firstRowWritten = false;\n    _this2.streamingMode = false;\n    _this2.rowToPacketTransform = new RowTransform(_assertThisInitialized(_this2)); // eslint-disable-line no-use-before-define\n\n    _this2.bulkOptions = {\n      checkConstraints: checkConstraints,\n      fireTriggers: fireTriggers,\n      keepNulls: keepNulls,\n      lockTable: lockTable,\n      order: order\n    };\n    return _this2;\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n  _createClass(BulkLoad, [{\n    key: \"addColumn\",\n    value: function addColumn(name, type, _ref2) {\n      var _ref2$output = _ref2.output,\n        output = _ref2$output === void 0 ? false : _ref2$output,\n        length = _ref2.length,\n        precision = _ref2.precision,\n        scale = _ref2.scale,\n        _ref2$objName = _ref2.objName,\n        objName = _ref2$objName === void 0 ? name : _ref2$objName,\n        _ref2$nullable = _ref2.nullable,\n        nullable = _ref2$nullable === void 0 ? true : _ref2$nullable;\n      if (this.firstRowWritten) {\n        throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n      }\n      if (this.executionStarted) {\n        throw new Error('Columns cannot be added to bulk insert after execution has started.');\n      }\n      var column = {\n        type: type,\n        name: name,\n        value: null,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale,\n        objName: objName,\n        nullable: nullable,\n        collation: this.collation\n      };\n      if ((type.id & 0x30) === 0x20) {\n        if (column.length == null && type.resolveLength) {\n          column.length = type.resolveLength(column);\n        }\n      }\n      if (type.resolvePrecision && column.precision == null) {\n        column.precision = type.resolvePrecision(column);\n      }\n      if (type.resolveScale && column.scale == null) {\n        column.scale = type.resolveScale(column);\n      }\n      this.columns.push(column);\n      this.columnsByName[name] = column;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getOptionsSql\",\n    value: function getOptionsSql() {\n      var addOptions = [];\n      if (this.bulkOptions.checkConstraints) {\n        addOptions.push('CHECK_CONSTRAINTS');\n      }\n      if (this.bulkOptions.fireTriggers) {\n        addOptions.push('FIRE_TRIGGERS');\n      }\n      if (this.bulkOptions.keepNulls) {\n        addOptions.push('KEEP_NULLS');\n      }\n      if (this.bulkOptions.lockTable) {\n        addOptions.push('TABLOCK');\n      }\n      if (this.bulkOptions.order) {\n        var orderColumns = [];\n        for (var _i2 = 0, _Object$entries2 = Object.entries(this.bulkOptions.order); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            column = _Object$entries2$_i[0],\n            direction = _Object$entries2$_i[1];\n          orderColumns.push(\"\".concat(column, \" \").concat(direction));\n        }\n        if (orderColumns.length) {\n          addOptions.push(\"ORDER (\".concat(orderColumns.join(', '), \")\"));\n        }\n      }\n      if (addOptions.length > 0) {\n        return \" WITH (\".concat(addOptions.join(','), \")\");\n      } else {\n        return '';\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getBulkInsertSql\",\n    value: function getBulkInsertSql() {\n      var sql = 'insert bulk ' + this.table + '(';\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n        if (i !== 0) {\n          sql += ', ';\n        }\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n      }\n      sql += ')';\n      sql += this.getOptionsSql();\n      return sql;\n    }\n    /**\n     * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n     * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n     *\n     * ```js\n     * var sql = bulkLoad.getTableCreationSql();\n     * ```\n     *\n     * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n     * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n     */\n  }, {\n    key: \"getTableCreationSql\",\n    value: function getTableCreationSql() {\n      var sql = 'CREATE TABLE ' + this.table + '(\\n';\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n        if (i !== 0) {\n          sql += ',\\n';\n        }\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n        if (c.nullable !== undefined) {\n          sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n        }\n      }\n      sql += '\\n)';\n      return sql;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getColMetaData\",\n    value: function getColMetaData() {\n      var tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n      tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n      tBuf.writeUInt16LE(this.columns.length);\n      for (var j = 0, len = this.columns.length; j < len; j++) {\n        var c = this.columns[j]; // UserType\n\n        if (this.options.tdsVersion < '7_2') {\n          tBuf.writeUInt16LE(0);\n        } else {\n          tBuf.writeUInt32LE(0);\n        } // Flags\n\n        var flags = FLAGS.updateableReadWrite;\n        if (c.nullable) {\n          flags |= FLAGS.nullable;\n        } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n          flags |= FLAGS.nullableUnknown;\n        }\n        tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n        tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n        if (c.type.hasTableName) {\n          tBuf.writeUsVarchar(this.table, 'ucs2');\n        } // ColName\n\n        tBuf.writeBVarchar(c.name, 'ucs2');\n      }\n      return tBuf.data;\n    }\n    /**\n     * Sets a timeout for this bulk load.\n     *\n     * ```js\n     * bulkLoad.setTimeout(timeout);\n     * ```\n     *\n     * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n     *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createDoneToken\",\n    value: function createDoneToken() {\n      // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n      var tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n      tBuf.writeUInt8(_token.TYPE.DONE);\n      var status = DONE_STATUS.FINAL;\n      tBuf.writeUInt16LE(status);\n      tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n      tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n      if (this.options.tdsVersion >= '7_2') {\n        tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n      }\n\n      return tBuf.data;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n      this.canceled = true;\n      this.emit('cancel');\n    }\n  }]);\n  return BulkLoad;\n}(_events.EventEmitter);\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"names":["_events","require","_writableTrackingBuffer","_interopRequireDefault","_stream","_token","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","rowTokenBuffer","Buffer","from","TYPE","ROW","textPointerAndTimestampBuffer","textPointerNullBuffer","RowTransform","_stream$Transform","_inherits","_super","_createSuper","bulkLoad","_this","_classCallCheck","call","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","_createClass","value","_transform","row","_encoding","callback","push","getColMetaData","i","length","c","Array","isArray","objName","firstRowWritten","type","validate","collation","error","parameter","scale","precision","name","generateParameterLength","_iterator","_createForOfIteratorHelper","generateParameterData","_step","s","n","done","chunk","err","e","f","process","nextTick","_flush","createDoneToken","Transform","BulkLoad","_events$EventEmitter","_super2","table","connectionOptions","_ref","_this2","_ref$checkConstraints","checkConstraints","_ref$fireTriggers","fireTriggers","_ref$keepNulls","keepNulls","_ref$lockTable","lockTable","_ref$order","order","TypeError","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","column","direction","canceled","executionStarted","streamingMode","timeout","columnsByName","rowToPacketTransform","bulkOptions","connection","rows","rst","rowCount","undefined","_assertThisInitialized","addColumn","_ref2","_ref2$output","output","_ref2$objName","_ref2$nullable","Error","id","resolveLength","resolvePrecision","resolveScale","getOptionsSql","addOptions","orderColumns","_i2","_Object$entries2","_Object$entries2$_i","concat","join","getBulkInsertSql","sql","len","declaration","getTableCreationSql","tBuf","default","writeUInt8","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","hasTableName","writeUsVarchar","writeBVarchar","data","setTimeout","DONE","status","cancel","emit","EventEmitter","module","exports"],"sources":["../src/bulk-load.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport Connection, { InternalConnectionOptions } from './connection';\n\nimport { Transform } from 'stream';\nimport { TYPE as TOKEN_TYPE } from './token/token';\n\nimport { DataType, Parameter } from './data-type';\nimport { Collation } from './collation';\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5, // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8, // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10, // introduced in TDS 7.3.B\n  hidden: 1 << 13, // introduced in TDS 7.2\n  key: 1 << 14, // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n\n/**\n * @private\n */\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\n/**\n * @private\n */\ninterface InternalOptions {\n  checkConstraints: boolean;\n  fireTriggers: boolean;\n  keepNulls: boolean;\n  lockTable: boolean;\n  order: { [columnName: string]: 'ASC' | 'DESC' };\n}\n\nexport interface Options {\n  /**\n   * Honors constraints during bulk load, using T-SQL\n   * [CHECK_CONSTRAINTS](https://technet.microsoft.com/en-us/library/ms186247(v=sql.105).aspx).\n   * (default: `false`)\n   */\n  checkConstraints?: InternalOptions['checkConstraints'] | undefined;\n\n  /**\n   * Honors insert triggers during bulk load, using the T-SQL [FIRE_TRIGGERS](https://technet.microsoft.com/en-us/library/ms187640(v=sql.105).aspx). (default: `false`)\n   */\n  fireTriggers?: InternalOptions['fireTriggers'] | undefined;\n\n  /**\n   * Honors null value passed, ignores the default values set on table, using T-SQL [KEEP_NULLS](https://msdn.microsoft.com/en-us/library/ms187887(v=sql.120).aspx). (default: `false`)\n   */\n  keepNulls?: InternalOptions['keepNulls'] | undefined;\n\n  /**\n   * Places a bulk update(BU) lock on table while performing bulk load, using T-SQL [TABLOCK](https://technet.microsoft.com/en-us/library/ms180876(v=sql.105).aspx). (default: `false`)\n   */\n  lockTable?: InternalOptions['lockTable'] | undefined;\n\n  /**\n   * Specifies the ordering of the data to possibly increase bulk insert performance, using T-SQL [ORDER](https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177468(v=sql.105)). (default: `{}`)\n   */\n  order?: InternalOptions['order'] | undefined;\n}\n\n\nexport type Callback =\n  /**\n   * A function which will be called after the [[BulkLoad]] finishes executing.\n   *\n   * @param rowCount the number of rows inserted\n   */\n  (err: Error | undefined | null, rowCount?: number) => void;\n\ninterface Column extends Parameter {\n  objName: string;\n  collation: Collation | undefined;\n}\n\ninterface ColumnOptions {\n  output?: boolean;\n\n  /**\n   * For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   */\n  length?: number;\n\n  /**\n   * For Numeric, Decimal.\n   */\n  precision?: number;\n\n  /**\n   * For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n   */\n  scale?: number;\n\n  /**\n   * If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   */\n  objName?: string;\n\n  /**\n   * Indicates whether the column accepts NULL values.\n   */\n  nullable?: boolean;\n}\n\nconst rowTokenBuffer = Buffer.from([ TOKEN_TYPE.ROW ]);\nconst textPointerAndTimestampBuffer = Buffer.from([\n  // TextPointer length\n  0x10,\n\n  // TextPointer\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\n  // Timestamp\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n]);\nconst textPointerNullBuffer = Buffer.from([0x00]);\n\n// A transform that converts rows to packets.\nclass RowTransform extends Transform {\n  /**\n   * @private\n   */\n  columnMetadataWritten: boolean;\n  /**\n   * @private\n   */\n  bulkLoad: BulkLoad;\n  /**\n   * @private\n   */\n  mainOptions: BulkLoad['options'];\n  /**\n   * @private\n   */\n  columns: BulkLoad['columns'];\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad: BulkLoad) {\n    super({ writableObjectMode: true });\n\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n\n    this.columnMetadataWritten = false;\n  }\n\n  /**\n   * @private\n   */\n  _transform(row: Array<unknown> | { [colName: string]: unknown }, _encoding: string, callback: (error?: Error) => void) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    this.push(rowTokenBuffer);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error: any) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n\n        this.push(textPointerAndTimestampBuffer);\n      }\n\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n\n  /**\n   * @private\n   */\n  _flush(callback: () => void) {\n    this.push(this.bulkLoad.createDoneToken());\n\n    process.nextTick(callback);\n  }\n}\n\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\nclass BulkLoad extends EventEmitter {\n  /**\n   * @private\n   */\n  error: Error | undefined;\n  /**\n   * @private\n   */\n  canceled: boolean;\n  /**\n   * @private\n   */\n  executionStarted: boolean;\n  /**\n   * @private\n   */\n  streamingMode: boolean;\n  /**\n   * @private\n   */\n  table: string;\n  /**\n   * @private\n   */\n  timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  options: InternalConnectionOptions;\n  /**\n   * @private\n   */\n  callback: Callback;\n\n  /**\n   * @private\n   */\n  columns: Array<Column>;\n  /**\n   * @private\n   */\n  columnsByName: { [name: string]: Column };\n\n  /**\n   * @private\n   */\n  firstRowWritten: boolean;\n  /**\n   * @private\n   */\n  rowToPacketTransform: RowTransform;\n\n  /**\n   * @private\n   */\n  bulkOptions: InternalOptions;\n\n  /**\n   * @private\n   */\n  connection: Connection | undefined;\n  /**\n   * @private\n   */\n  rows: Array<any> | undefined;\n  /**\n   * @private\n   */\n  rst: Array<any> | undefined;\n  /**\n   * @private\n   */\n  rowCount: number | undefined;\n\n  collation: Collation | undefined;\n\n  /**\n   * @private\n   */\n  constructor(table: string, collation: Collation | undefined, connectionOptions: InternalConnectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {},\n  }: Options, callback: Callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    super();\n\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n\n    this.collation = collation;\n\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = { checkConstraints, fireTriggers, keepNulls, lockTable, order };\n  }\n\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n  addColumn(name: string, type: DataType, { output = false, length, precision, scale, objName = name, nullable = true }: ColumnOptions) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column: Column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n\n    this.columnsByName[name] = column;\n  }\n\n  /**\n   * @private\n   */\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @private\n   */\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ', ';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n    }\n    sql += ')';\n\n    sql += this.getOptionsSql();\n    return sql;\n  }\n\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n    sql += '\\n)';\n    return sql;\n  }\n\n  /**\n   * @private\n   */\n  getColMetaData() {\n    const tBuf = new WritableTrackingBuffer(100, null, true);\n    // TokenType\n    tBuf.writeUInt8(TOKEN_TYPE.COLMETADATA);\n    // Count\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j];\n      // UserType\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      }\n\n      // Flags\n      let flags = FLAGS.updateableReadWrite;\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n      tBuf.writeUInt16LE(flags);\n\n      // TYPE_INFO\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options));\n\n      // TableName\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      }\n\n      // ColName\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n\n  /**\n   * @private\n   */\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new WritableTrackingBuffer(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(TOKEN_TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n}\n\nexport default BulkLoad;\nmodule.exports = BulkLoad;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}