{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _bl = _interopRequireDefault(require(\"bl\"));\nvar _stream = require(\"stream\");\nvar _message = _interopRequireDefault(require(\"./message\"));\nvar _packet = require(\"./packet\");\nvar _errors = require(\"./errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n  IncomingMessageStream\n  Transform received TDS data into individual IncomingMessage streams.\n*/\nvar IncomingMessageStream = /*#__PURE__*/function (_stream$Transform) {\n  _inherits(IncomingMessageStream, _stream$Transform);\n  var _super = _createSuper(IncomingMessageStream);\n  function IncomingMessageStream(debug) {\n    var _this;\n    _classCallCheck(this, IncomingMessageStream);\n    _this = _super.call(this, {\n      readableObjectMode: true\n    });\n    _this.debug = void 0;\n    _this.bl = void 0;\n    _this.currentMessage = void 0;\n    _this.debug = debug;\n    _this.currentMessage = undefined;\n    _this.bl = new _bl.default();\n    return _this;\n  }\n  _createClass(IncomingMessageStream, [{\n    key: \"pause\",\n    value: function pause() {\n      _get(_getPrototypeOf(IncomingMessageStream.prototype), \"pause\", this).call(this);\n      if (this.currentMessage) {\n        this.currentMessage.pause();\n      }\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      _get(_getPrototypeOf(IncomingMessageStream.prototype), \"resume\", this).call(this);\n      if (this.currentMessage) {\n        this.currentMessage.resume();\n      }\n      return this;\n    }\n  }, {\n    key: \"processBufferedData\",\n    value: function processBufferedData(callback) {\n      var _this2 = this;\n      // The packet header is always 8 bytes of length.\n      while (this.bl.length >= _packet.HEADER_LENGTH) {\n        // Get the full packet length\n        var length = this.bl.readUInt16BE(2);\n        if (length < _packet.HEADER_LENGTH) {\n          return callback(new _errors.ConnectionError('Unable to process incoming packet'));\n        }\n        if (this.bl.length >= length) {\n          var data = this.bl.slice(0, length);\n          this.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n          var packet = new _packet.Packet(data);\n          this.debug.packet('Received', packet);\n          this.debug.data(packet);\n          var message = this.currentMessage;\n          if (message === undefined) {\n            this.currentMessage = message = new _message.default({\n              type: packet.type(),\n              resetConnection: false\n            });\n            this.push(message);\n          }\n          if (packet.isLast()) {\n            // Wait until the current message was fully processed before we\n            // continue processing any remaining messages.\n            message.once('end', function () {\n              _this2.currentMessage = undefined;\n              _this2.processBufferedData(callback);\n            });\n            message.end(packet.data());\n            return;\n          } else if (!message.write(packet.data())) {\n            // If too much data is buffering up in the\n            // current message, wait for it to drain.\n            message.once('drain', function () {\n              _this2.processBufferedData(callback);\n            });\n            return;\n          }\n        } else {\n          break;\n        }\n      } // Not enough data to read the next packet. Stop here and wait for\n      // the next call to `_transform`.\n\n      callback();\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(chunk, _encoding, callback) {\n      this.bl.append(chunk);\n      this.processBufferedData(callback);\n    }\n  }]);\n  return IncomingMessageStream;\n}(_stream.Transform);\nvar _default = IncomingMessageStream;\nexports.default = _default;\nmodule.exports = IncomingMessageStream;","map":{"version":3,"names":["_bl","_interopRequireDefault","require","_stream","_message","_packet","_errors","IncomingMessageStream","_stream$Transform","_inherits","_super","_createSuper","debug","_this","_classCallCheck","call","readableObjectMode","bl","currentMessage","undefined","default","_createClass","key","value","pause","_get","_getPrototypeOf","prototype","resume","processBufferedData","callback","_this2","length","HEADER_LENGTH","readUInt16BE","ConnectionError","data","slice","consume","packet","Packet","message","type","resetConnection","push","isLast","once","end","write","_transform","chunk","_encoding","append","Transform","module","exports"],"sources":["../src/incoming-message-stream.ts"],"sourcesContent":["import BufferList from 'bl';\nimport { Transform } from 'stream';\n\nimport Debug from './debug';\nimport Message from './message';\nimport { Packet, HEADER_LENGTH } from './packet';\nimport { ConnectionError } from './errors';\n\n/**\n  IncomingMessageStream\n  Transform received TDS data into individual IncomingMessage streams.\n*/\nclass IncomingMessageStream extends Transform {\n  debug: Debug;\n  bl: any;\n  currentMessage: Message | undefined;\n\n  constructor(debug: Debug) {\n    super({ readableObjectMode: true });\n\n    this.debug = debug;\n\n    this.currentMessage = undefined;\n    this.bl = new BufferList();\n  }\n\n  pause() {\n    super.pause();\n\n    if (this.currentMessage) {\n      this.currentMessage.pause();\n    }\n\n    return this;\n  }\n\n  resume() {\n    super.resume();\n\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n\n    return this;\n  }\n\n  processBufferedData(callback: (err?: ConnectionError) => void) {\n    // The packet header is always 8 bytes of length.\n    while (this.bl.length >= HEADER_LENGTH) {\n      // Get the full packet length\n      const length = this.bl.readUInt16BE(2);\n      if (length < HEADER_LENGTH) {\n        return callback(new ConnectionError('Unable to process incoming packet'));\n      }\n\n      if (this.bl.length >= length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length);\n\n        // TODO: Get rid of creating `Packet` instances here.\n        const packet = new Packet(data);\n        this.debug.packet('Received', packet);\n        this.debug.data(packet);\n\n        let message = this.currentMessage;\n        if (message === undefined) {\n          this.currentMessage = message = new Message({ type: packet.type(), resetConnection: false });\n          this.push(message);\n        }\n\n        if (packet.isLast()) {\n          // Wait until the current message was fully processed before we\n          // continue processing any remaining messages.\n          message.once('end', () => {\n            this.currentMessage = undefined;\n            this.processBufferedData(callback);\n          });\n          message.end(packet.data());\n          return;\n        } else if (!message.write(packet.data())) {\n          // If too much data is buffering up in the\n          // current message, wait for it to drain.\n          message.once('drain', () => {\n            this.processBufferedData(callback);\n          });\n          return;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Not enough data to read the next packet. Stop here and wait for\n    // the next call to `_transform`.\n    callback();\n  }\n\n  _transform(chunk: Buffer, _encoding: string, callback: () => void) {\n    this.bl.append(chunk);\n    this.processBufferedData(callback);\n  }\n}\n\nexport default IncomingMessageStream;\nmodule.exports = IncomingMessageStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}