{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar NativeMessageHandler = /** @class */function () {\n  function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n    this.responseId = 0;\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n  NativeMessageHandler.prototype.sendMessage = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n      var _this = this;\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\n        this.messageChannel.port1.postMessage(req);\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          _this.resolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   */\n  NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\n    return __awaiter(this, void 0, void 0, function () {\n      var preferredProvider, backupProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.trace(\"NativeMessageHandler - createProvider called.\");\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\n            return [4 /*yield*/, preferredProvider.sendHandshakeRequest()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, preferredProvider];\n          case 3:\n            _a.sent();\n            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            return [4 /*yield*/, backupProvider.sendHandshakeRequest()];\n          case 4:\n            _a.sent();\n            return [2 /*return*/, backupProvider];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Send handshake request helper.\r\n   */\n  NativeMessageHandler.prototype.sendHandshakeRequest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n      var _this = this;\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: {\n            method: NativeExtensionMethod.HandshakeRequest\n          }\n        };\n        this.handshakeEvent.addStaticFields({\n          extensionId: this.extensionId,\n          extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n        this.messageChannel.port1.onmessage = function (event) {\n          _this.onChannelMessage(event);\n        };\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          _this.handshakeResolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n          _this.timeoutId = window.setTimeout(function () {\n            /*\r\n             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n             */\n            window.removeEventListener(\"message\", _this.windowListener, false);\n            _this.messageChannel.port1.close();\n            _this.messageChannel.port2.close();\n            _this.handshakeEvent.endMeasurement({\n              extensionHandshakeTimedOut: true,\n              success: false\n            });\n            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n            _this.handshakeResolvers.delete(req.responseId);\n          }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        })];\n      });\n    });\n  };\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n  NativeMessageHandler.prototype.onWindowMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n    // We only accept messages from ourselves\n    if (event.source !== window) {\n      return;\n    }\n    var request = event.data;\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n      if (handshakeResolver) {\n        this.handshakeEvent.endMeasurement({\n          success: false,\n          extensionInstalled: false\n        });\n        handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n      }\n    }\n  };\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n  NativeMessageHandler.prototype.onChannelMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    var request = event.data;\n    var resolver = this.resolvers.get(request.responseId);\n    var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n    try {\n      var method = request.body.method;\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n        var response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          return;\n        }\n        clearTimeout(this.timeoutId); // Clear setTimeout\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\n        this.handshakeEvent.endMeasurement({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      }\n      // Do nothing if method is not Response or HandshakeResponse\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\n      this.logger.errorPii(\"Unable to parse \" + event);\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  };\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  NativeMessageHandler.prototype.getExtensionId = function () {\n    return this.extensionId;\n  };\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  NativeMessageHandler.prototype.getExtensionVersion = function () {\n    return this.extensionVersion;\n  };\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n  NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n      // Developer disabled WAM\n      return false;\n    }\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n      // Extension is not available\n      return false;\n    }\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n    return true;\n  };\n  return NativeMessageHandler;\n}();\nexport { NativeMessageHandler };","map":{"version":3,"names":["NativeMessageHandler","logger","handshakeTimeoutMs","performanceClient","extensionId","resolvers","Map","handshakeResolvers","responseId","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","PerformanceEvents","NativeMessageHandlerHandshake","prototype","sendMessage","body","trace","req","channel","NativeConstants","CHANNEL_ID","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","_this","set","createProvider","preferredProvider","PREFERRED_EXTENSION_ID","sendHandshakeRequest","_a","sent","backupProvider","window","addEventListener","method","NativeExtensionMethod","HandshakeRequest","addStaticFields","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","endMeasurement","extensionHandshakeTimedOut","success","BrowserAuthError","createNativeHandshakeTimeoutError","delete","source","request","data","verbose","clearTimeout","handshakeResolver","get","extensionInstalled","createNativeExtensionNotInstalledError","resolver","Response","response","status","NativeAuthError","createError","code","description","ext","result","AuthError","createUnexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","toString","getExtensionId","getExtensionVersion","isNativeAvailable","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","AuthenticationScheme","BEARER","POP"],"sources":["../../../src/broker/nativeBroker/NativeMessageHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NativeConstants, NativeExtensionMethod } from \"../../utils/BrowserConstants\";\r\nimport {\r\n    Logger,\r\n    AuthError,\r\n    AuthenticationScheme,\r\n    InProgressPerformanceEvent,\r\n    PerformanceEvents,\r\n    IPerformanceClient\r\n} from \"@azure/msal-common\";\r\nimport { NativeExtensionRequest, NativeExtensionRequestBody } from \"./NativeRequest\";\r\nimport { NativeAuthError } from \"../../error/NativeAuthError\";\r\nimport { BrowserAuthError } from \"../../error/BrowserAuthError\";\r\nimport { BrowserConfiguration } from \"../../config/Configuration\";\r\n\r\ntype ResponseResolvers<T> = {\r\n    resolve: (value:T|PromiseLike<T>) => void;\r\n    reject: (value:AuthError|Error|PromiseLike<Error>|PromiseLike<AuthError>)  => void;\r\n};\r\n\r\nexport class NativeMessageHandler {\r\n    private extensionId: string | undefined;\r\n    private extensionVersion: string | undefined;\r\n    private logger: Logger;\r\n    private readonly handshakeTimeoutMs: number;\r\n    private responseId: number;\r\n    private timeoutId: number | undefined;\r\n    private resolvers: Map<number, ResponseResolvers<object>>;\r\n    private handshakeResolvers: Map<number, ResponseResolvers<void>>;\r\n    private messageChannel: MessageChannel;\r\n    private readonly windowListener: (event: MessageEvent) => void;\r\n    private readonly performanceClient: IPerformanceClient;\r\n    private readonly handshakeEvent: InProgressPerformanceEvent;\r\n\r\n    constructor(logger: Logger, handshakeTimeoutMs: number, performanceClient: IPerformanceClient, extensionId?: string) {\r\n        this.logger = logger;\r\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\r\n        this.extensionId = extensionId;\r\n        this.resolvers = new Map(); // Used for non-handshake messages\r\n        this.handshakeResolvers = new Map(); // Used for handshake messages\r\n        this.responseId = 0;\r\n        this.messageChannel = new MessageChannel();\r\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\r\n        this.performanceClient = performanceClient;\r\n        this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\r\n    }\r\n\r\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */\r\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\r\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\r\n        const req: NativeExtensionRequest = {\r\n            channel: NativeConstants.CHANNEL_ID,\r\n            extensionId: this.extensionId,\r\n            responseId: this.responseId++,\r\n            body: body\r\n        };\r\n\r\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\r\n        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\r\n        this.messageChannel.port1.postMessage(req);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.resolvers.set(req.responseId, {resolve, reject});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     */\r\n    static async createProvider(logger: Logger, handshakeTimeoutMs: number, performanceClient: IPerformanceClient): Promise<NativeMessageHandler> {\r\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\r\n        try {\r\n            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\r\n            await preferredProvider.sendHandshakeRequest();\r\n            return preferredProvider;\r\n        } catch (e) {\r\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\r\n            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\r\n            await backupProvider.sendHandshakeRequest();\r\n            return backupProvider;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send handshake request helper.\r\n     */\r\n    private async sendHandshakeRequest(): Promise<void> {\r\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\r\n        // Register this event listener before sending handshake\r\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\r\n\r\n        const req: NativeExtensionRequest = {\r\n            channel: NativeConstants.CHANNEL_ID,\r\n            extensionId: this.extensionId,\r\n            responseId: this.responseId++,\r\n            body: {\r\n                method: NativeExtensionMethod.HandshakeRequest\r\n            }\r\n        };\r\n        this.handshakeEvent.addStaticFields({\r\n            extensionId: this.extensionId,\r\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\r\n        });\r\n\r\n        this.messageChannel.port1.onmessage = (event) => {\r\n            this.onChannelMessage(event);\r\n        };\r\n\r\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.handshakeResolvers.set(req.responseId, {resolve, reject});\r\n            this.timeoutId = window.setTimeout(() => {\r\n                /*\r\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                 */\r\n                window.removeEventListener(\"message\", this.windowListener, false);\r\n                this.messageChannel.port1.close();\r\n                this.messageChannel.port2.close();\r\n                this.handshakeEvent.endMeasurement({extensionHandshakeTimedOut: true, success: false});\r\n                reject(BrowserAuthError.createNativeHandshakeTimeoutError());\r\n                this.handshakeResolvers.delete(req.responseId);\r\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */\r\n    private onWindowMessage(event: MessageEvent): void {\r\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\r\n        // We only accept messages from ourselves\r\n        if (event.source !== window) {\r\n            return;\r\n        }\r\n\r\n        const request = event.data;\r\n\r\n        if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\r\n            return;\r\n        }\r\n\r\n        if (request.extensionId && request.extensionId !== this.extensionId) {\r\n            return;\r\n        }\r\n\r\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\r\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\r\n            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\r\n            clearTimeout(this.timeoutId);\r\n            this.messageChannel.port1.close();\r\n            this.messageChannel.port2.close();\r\n            window.removeEventListener(\"message\", this.windowListener, false);\r\n            const handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n            if (handshakeResolver) {\r\n                this.handshakeEvent.endMeasurement({success: false, extensionInstalled: false});\r\n                handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */\r\n    private onChannelMessage(event: MessageEvent): void {\r\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\r\n        const request = event.data;\r\n\r\n        const resolver = this.resolvers.get(request.responseId);\r\n        const handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n\r\n        try {\r\n            const method = request.body.method;\r\n\r\n            if (method === NativeExtensionMethod.Response) {\r\n                if (!resolver) {\r\n                    return;\r\n                }\r\n                const response = request.body.response;\r\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\r\n                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\r\n                if (response.status !== \"Success\") {\r\n                    resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\r\n                } else if (response.result) {\r\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\r\n                        resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\r\n                    } else {\r\n                        resolver.resolve(response.result);\r\n                    }\r\n                } else {\r\n                    throw AuthError.createUnexpectedError(\"Event does not contain result.\");\r\n                }\r\n                this.resolvers.delete(request.responseId);\r\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\r\n                if (!handshakeResolver) {\r\n                    return;\r\n                }\r\n                clearTimeout(this.timeoutId); // Clear setTimeout\r\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\r\n                this.extensionId = request.extensionId;\r\n                this.extensionVersion = request.body.version;\r\n                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\r\n                this.handshakeEvent.endMeasurement({extensionInstalled: true, success: true});\r\n\r\n                handshakeResolver.resolve();\r\n                this.handshakeResolvers.delete(request.responseId);\r\n            }\r\n            // Do nothing if method is not Response or HandshakeResponse\r\n        } catch (err) {\r\n            this.logger.error(\"Error parsing response from WAM Extension\");\r\n            this.logger.errorPii(`Error parsing response from WAM Extension: ${err.toString()}`);\r\n            this.logger.errorPii(`Unable to parse ${event}`);\r\n\r\n            if (resolver) {\r\n                resolver.reject(err as AuthError);\r\n            } else if (handshakeResolver) {\r\n                handshakeResolver.reject(err as AuthError);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    getExtensionId(): string | undefined {\r\n        return this.extensionId;\r\n    }\r\n\r\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    getExtensionVersion(): string | undefined {\r\n        return this.extensionVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */\r\n    static isNativeAvailable(config: BrowserConfiguration, logger: Logger, nativeExtensionProvider?: NativeMessageHandler, authenticationScheme?: AuthenticationScheme): boolean {\r\n        logger.trace(\"isNativeAvailable called\");\r\n        if (!config.system.allowNativeBroker) {\r\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\r\n            // Developer disabled WAM\r\n            return false;\r\n        }\r\n\r\n        if (!nativeExtensionProvider) {\r\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\r\n            // Extension is not available\r\n            return false;\r\n        }\r\n\r\n        if (authenticationScheme) {\r\n            switch(authenticationScheme) {\r\n                case AuthenticationScheme.BEARER:\r\n                case AuthenticationScheme.POP:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\r\n                    return true;\r\n                default:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}