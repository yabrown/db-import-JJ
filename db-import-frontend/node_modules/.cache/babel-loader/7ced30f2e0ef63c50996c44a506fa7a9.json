{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// s2.2.7.17\nfunction rowParser(_x) {\n  return _rowParser.apply(this, arguments);\n}\nfunction _rowParser() {\n  _rowParser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(parser) {\n    var colMetadata, length, columns, _loop, i, columnsMap;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          colMetadata = parser.colMetadata;\n          length = colMetadata.length;\n          columns = [];\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var currColMetadata, value, next;\n            return _regeneratorRuntime().wrap(function _loop$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  currColMetadata = colMetadata[i];\n                  (0, _valueParser.default)(parser, currColMetadata, parser.options, function (v) {\n                    value = v;\n                  });\n                case 2:\n                  if (!parser.suspended) {\n                    _context.next = 10;\n                    break;\n                  }\n                  _context.next = 5;\n                  return parser.streamBuffer.waitForChunk();\n                case 5:\n                  parser.suspended = false;\n                  next = parser.next;\n                  next();\n                  _context.next = 2;\n                  break;\n                case 10:\n                  columns.push({\n                    value: value,\n                    metadata: currColMetadata\n                  });\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _loop);\n          });\n          i = 0;\n        case 5:\n          if (!(i < length)) {\n            _context2.next = 10;\n            break;\n          }\n          return _context2.delegateYield(_loop(), \"t0\", 7);\n        case 7:\n          i++;\n          _context2.next = 5;\n          break;\n        case 10:\n          if (!parser.options.useColumnNames) {\n            _context2.next = 16;\n            break;\n          }\n          columnsMap = Object.create(null);\n          columns.forEach(function (column) {\n            var colName = column.metadata.colName;\n            if (columnsMap[colName] == null) {\n              columnsMap[colName] = column;\n            }\n          });\n          return _context2.abrupt(\"return\", new _token.RowToken(columnsMap));\n        case 16:\n          return _context2.abrupt(\"return\", new _token.RowToken(columns));\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _rowParser.apply(this, arguments);\n}\nvar _default = rowParser;\nexports.default = _default;\nmodule.exports = rowParser;","map":{"version":3,"names":["_token","require","_valueParser","_interopRequireDefault","rowParser","_x","_rowParser","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","parser","colMetadata","length","columns","_loop","i","columnsMap","wrap","_callee$","_context2","prev","next","currColMetadata","value","_loop$","_context","default","options","v","suspended","streamBuffer","waitForChunk","push","metadata","stop","delegateYield","useColumnNames","Object","create","forEach","column","colName","abrupt","RowToken","module","exports"],"sources":["../../src/token/row-token-parser.ts"],"sourcesContent":["// s2.2.7.17\n\nimport Parser from './stream-parser';\nimport { ColumnMetadata } from './colmetadata-token-parser';\n\nimport { RowToken } from './token';\n\nimport valueParse from '../value-parser';\n\ninterface Column {\n  value: unknown;\n  metadata: ColumnMetadata;\n}\n\nasync function rowParser(parser: Parser): Promise<RowToken> {\n  const colMetadata = parser.colMetadata;\n  const length = colMetadata.length;\n  const columns: Column[] = [];\n\n  for (let i = 0; i < length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    valueParse(parser, currColMetadata, parser.options, (v) => {\n      value = v;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n\n      parser.suspended = false;\n      const next = parser.next!;\n\n      next();\n    }\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap: { [key: string]: Column } = Object.create(null);\n\n    columns.forEach((column) => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n\n    return new RowToken(columnsMap);\n  } else {\n    return new RowToken(columns);\n  }\n}\n\nexport default rowParser;\nmodule.exports = rowParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}