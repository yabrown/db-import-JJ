{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar AbstractQuery = require(\"../abstract/query\");\nvar sequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"mssql\");\nvar _ = require(\"lodash\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"sql:mssql\");\nvar minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nvar maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  var e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n  var _super = _createSuper(Query);\n  function Query() {\n    _classCallCheck(this, Query);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Query, [{\n    key: \"getInsertIdField\",\n    value: function getInsertIdField() {\n      return \"id\";\n    }\n  }, {\n    key: \"getSQLTypeFromJsType\",\n    value: function getSQLTypeFromJsType(value, TYPES) {\n      var paramType = {\n        type: TYPES.NVarChar,\n        typeOptions: {},\n        value: value\n      };\n      if (typeof value === \"number\") {\n        if (Number.isInteger(value)) {\n          if (value >= -2147483648 && value <= 2147483647) {\n            paramType.type = TYPES.Int;\n          } else {\n            paramType.type = TYPES.BigInt;\n          }\n        } else {\n          paramType.type = TYPES.Numeric;\n          paramType.typeOptions = {\n            precision: 30,\n            scale: getScale(value)\n          };\n        }\n      } else if (typeof value === \"bigint\") {\n        if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n          paramType.type = TYPES.VarChar;\n          paramType.value = value.toString();\n        } else {\n          return this.getSQLTypeFromJsType(Number(value), TYPES);\n        }\n      } else if (typeof value === \"boolean\") {\n        paramType.type = TYPES.Bit;\n      }\n      if (Buffer.isBuffer(value)) {\n        paramType.type = TYPES.VarBinary;\n      }\n      return paramType;\n    }\n  }, {\n    key: \"_run\",\n    value: function () {\n      var _run2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, sql, parameters, errStack) {\n        var _this = this;\n        var options, complete, query, rows, rowCount, _yield$query, _yield$query2;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.sql = sql;\n              options = this.options;\n              complete = this._logQuery(sql, debug, parameters);\n              query = new Promise(function (resolve, reject) {\n                if (sql.startsWith(\"BEGIN TRANSACTION\")) {\n                  return connection.beginTransaction(function (error) {\n                    return error ? reject(error) : resolve([]);\n                  }, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n                }\n                if (sql.startsWith(\"COMMIT TRANSACTION\")) {\n                  return connection.commitTransaction(function (error) {\n                    return error ? reject(error) : resolve([]);\n                  });\n                }\n                if (sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n                  return connection.rollbackTransaction(function (error) {\n                    return error ? reject(error) : resolve([]);\n                  }, options.transaction.name);\n                }\n                if (sql.startsWith(\"SAVE TRANSACTION\")) {\n                  return connection.saveTransaction(function (error) {\n                    return error ? reject(error) : resolve([]);\n                  }, options.transaction.name);\n                }\n                var rows2 = [];\n                var request = new connection.lib.Request(sql, function (err, rowCount2) {\n                  return err ? reject(err) : resolve([rows2, rowCount2]);\n                });\n                if (parameters) {\n                  _.forOwn(parameters, function (value, key) {\n                    var paramType = _this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n                    request.addParameter(key, paramType.type, value, paramType.typeOptions);\n                  });\n                }\n                request.on(\"row\", function (columns) {\n                  rows2.push(columns);\n                });\n                connection.execSql(request);\n              });\n              _context.prev = 4;\n              _context.next = 7;\n              return query;\n            case 7:\n              _yield$query = _context.sent;\n              _yield$query2 = _slicedToArray(_yield$query, 2);\n              rows = _yield$query2[0];\n              rowCount = _yield$query2[1];\n              _context.next = 18;\n              break;\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](4);\n              _context.t0.sql = sql;\n              _context.t0.parameters = parameters;\n              throw this.formatError(_context.t0, errStack);\n            case 18:\n              complete();\n              if (Array.isArray(rows)) {\n                rows = rows.map(function (columns) {\n                  var row = {};\n                  var _iterator = _createForOfIteratorHelper(columns),\n                    _step;\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var column = _step.value;\n                      var typeid = column.metadata.type.id;\n                      var parse = parserStore.get(typeid);\n                      var value = column.value;\n                      if (value !== null & !!parse) {\n                        value = parse(value);\n                      }\n                      row[column.metadata.colName] = value;\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                  return row;\n                });\n              }\n              return _context.abrupt(\"return\", this.formatResults(rows, rowCount));\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[4, 13]]);\n      }));\n      function _run(_x, _x2, _x3, _x4) {\n        return _run2.apply(this, arguments);\n      }\n      return _run;\n    }()\n  }, {\n    key: \"run\",\n    value: function run(sql, parameters) {\n      var _this2 = this;\n      var errForStack = new Error();\n      return this.connection.queue.enqueue(function () {\n        return _this2._run(_this2.connection, sql, parameters, errForStack.stack);\n      });\n    }\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data, rowCount) {\n      if (this.isInsertQuery(data)) {\n        this.handleInsertQuery(data);\n        return [this.instance || data, rowCount];\n      }\n      if (this.isShowTablesQuery()) {\n        return this.handleShowTablesQuery(data);\n      }\n      if (this.isDescribeQuery()) {\n        var result = {};\n        var _iterator2 = _createForOfIteratorHelper(data),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _result = _step2.value;\n            if (_result.Default) {\n              _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n            }\n            result[_result.Name] = {\n              type: _result.Type.toUpperCase(),\n              allowNull: _result.IsNull === \"YES\" ? true : false,\n              defaultValue: _result.Default,\n              primaryKey: _result.Constraint === \"PRIMARY KEY\",\n              autoIncrement: _result.IsIdentity === 1,\n              comment: _result.Comment\n            };\n            if (result[_result.Name].type.includes(\"CHAR\") && _result.Length) {\n              if (_result.Length === -1) {\n                result[_result.Name].type += \"(MAX)\";\n              } else {\n                result[_result.Name].type += \"(\".concat(_result.Length, \")\");\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        return result;\n      }\n      if (this.isSelectQuery()) {\n        return this.handleSelectQuery(data);\n      }\n      if (this.isShowIndexesQuery()) {\n        return this.handleShowIndexesQuery(data);\n      }\n      if (this.isCallQuery()) {\n        return data[0];\n      }\n      if (this.isBulkUpdateQuery()) {\n        if (this.options.returning) {\n          return this.handleSelectQuery(data);\n        }\n        return rowCount;\n      }\n      if (this.isBulkDeleteQuery()) {\n        return data[0] ? data[0].AFFECTEDROWS : 0;\n      }\n      if (this.isVersionQuery()) {\n        return data[0].version;\n      }\n      if (this.isForeignKeysQuery()) {\n        return data;\n      }\n      if (this.isUpsertQuery()) {\n        if (data && data.length === 0) {\n          return [this.instance || data, false];\n        }\n        this.handleInsertQuery(data);\n        return [this.instance || data, data[0].$action === \"INSERT\"];\n      }\n      if (this.isUpdateQuery()) {\n        return [this.instance || data, rowCount];\n      }\n      if (this.isShowConstraintsQuery()) {\n        return this.handleShowConstraintsQuery(data);\n      }\n      if (this.isRawQuery()) {\n        return [data, rowCount];\n      }\n      return data;\n    }\n  }, {\n    key: \"handleShowTablesQuery\",\n    value: function handleShowTablesQuery(results) {\n      return results.map(function (resultSet) {\n        return {\n          tableName: resultSet.TABLE_NAME,\n          schema: resultSet.TABLE_SCHEMA\n        };\n      });\n    }\n  }, {\n    key: \"handleShowConstraintsQuery\",\n    value: function handleShowConstraintsQuery(data) {\n      return data.slice(1).map(function (result) {\n        var constraint = {};\n        for (var key in result) {\n          constraint[_.camelCase(key)] = result[key];\n        }\n        return constraint;\n      });\n    }\n  }, {\n    key: \"formatError\",\n    value: function formatError(err, errStack) {\n      var _this3 = this;\n      var match;\n      match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n      match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n      if (match && match.length > 1) {\n        var fields = {};\n        var uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n        var message = \"Validation error\";\n        if (uniqueKey && !!uniqueKey.msg) {\n          message = uniqueKey.msg;\n        }\n        if (match[3]) {\n          var values = match[3].split(\",\").map(function (part) {\n            return part.trim();\n          });\n          if (uniqueKey) {\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[match[1]] = match[3];\n          }\n        }\n        var errors = [];\n        _.forOwn(fields, function (value, field) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(_this3.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, _this3.instance, \"not_unique\"));\n        });\n        return new sequelizeErrors.UniqueConstraintError({\n          message: message,\n          errors: errors,\n          parent: err,\n          fields: fields,\n          stack: errStack\n        });\n      }\n      match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n      if (match && match.length > 0) {\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          fields: null,\n          index: match[1],\n          parent: err,\n          stack: errStack\n        });\n      }\n      match = err.message.match(/Could not drop constraint. See previous errors./);\n      if (match && match.length > 0) {\n        var constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n        constraint = constraint ? constraint[1] : void 0;\n        var table = err.sql.match(/table \\[(.+?)\\]/i);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.UnknownConstraintError({\n          message: match[1],\n          constraint: constraint,\n          table: table,\n          parent: err,\n          stack: errStack\n        });\n      }\n      return new sequelizeErrors.DatabaseError(err, {\n        stack: errStack\n      });\n    }\n  }, {\n    key: \"isShowOrDescribeQuery\",\n    value: function isShowOrDescribeQuery() {\n      var result = false;\n      result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n      result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n      result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n      return result;\n    }\n  }, {\n    key: \"isShowIndexesQuery\",\n    value: function isShowIndexesQuery() {\n      return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      data = data.reduce(function (acc, item) {\n        if (!(item.index_name in acc)) {\n          acc[item.index_name] = item;\n          item.fields = [];\n        }\n        item.index_keys.split(\",\").forEach(function (column) {\n          var columnName = column.trim();\n          if (columnName.includes(\"(-)\")) {\n            columnName = columnName.replace(\"(-)\", \"\");\n          }\n          acc[item.index_name].fields.push({\n            attribute: columnName,\n            length: void 0,\n            order: column.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n            collate: void 0\n          });\n        });\n        delete item.index_keys;\n        return acc;\n      }, {});\n      return _.map(data, function (item) {\n        return {\n          primary: item.index_name.toLowerCase().startsWith(\"pk\"),\n          fields: item.fields,\n          name: item.index_name,\n          tableName: void 0,\n          unique: item.index_description.toLowerCase().includes(\"unique\"),\n          type: void 0\n        };\n      });\n    }\n  }, {\n    key: \"handleInsertQuery\",\n    value: function handleInsertQuery(results, metaData) {\n      var _this4 = this;\n      if (this.instance) {\n        var autoIncrementAttribute = this.model.autoIncrementAttribute;\n        var id = null;\n        var autoIncrementAttributeAlias = null;\n        if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n        id = id || results && results[0][this.getInsertIdField()];\n        id = id || metaData && metaData[this.getInsertIdField()];\n        id = id || results && results[0][autoIncrementAttribute];\n        id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n        this.instance[autoIncrementAttribute] = id;\n        if (this.instance.dataValues) {\n          var _loop = function _loop(key) {\n            if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n              var record = results[0][key];\n              var attr = _.find(_this4.model.rawAttributes, function (attribute) {\n                return attribute.fieldName === key || attribute.field === key;\n              });\n              _this4.instance.dataValues[attr && attr.fieldName || key] = record;\n            }\n          };\n          for (var key in results[0]) {\n            _loop(key);\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam = {};\n      var replacementFunc = function replacementFunc(match, key, values2) {\n        if (values2[key] !== void 0) {\n          bindParam[key] = values2[key];\n          return \"@\".concat(key);\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      return [sql, bindParam];\n    }\n  }]);\n  return Query;\n}(AbstractQuery);\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","parserStore","_","_require","logger","debug","debugContext","minSafeIntegerAsBigInt","BigInt","Number","MIN_SAFE_INTEGER","maxSafeIntegerAsBigInt","MAX_SAFE_INTEGER","getScale","aNum","isFinite","e","Math","round","log10","Query","_AbstractQuery","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","getInsertIdField","getSQLTypeFromJsType","TYPES","paramType","type","NVarChar","typeOptions","isInteger","Int","Numeric","precision","scale","VarChar","toString","Bit","Buffer","isBuffer","VarBinary","_run2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","connection","sql","parameters","errStack","_this","options","complete","query","rows","rowCount","_yield$query","_yield$query2","wrap","_callee$","_context","prev","next","_logQuery","Promise","resolve","reject","startsWith","beginTransaction","error","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","rows2","request","Request","err","rowCount2","forOwn","addParameter","on","columns","push","execSql","sent","_slicedToArray","t0","formatError","Array","isArray","map","row","_iterator","_createForOfIteratorHelper","_step","s","n","done","column","typeid","metadata","id","parse","get","colName","f","abrupt","formatResults","stop","_run","_x","_x2","_x3","_x4","run","_this2","errForStack","Error","queue","enqueue","stack","data","isInsertQuery","handleInsertQuery","instance","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","result","_iterator2","_step2","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","concat","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","returning","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","length","$action","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","results","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","_this3","match","message","fields","uniqueKey","model","uniqueKeys","msg","values","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","_this4","autoIncrementAttribute","autoIncrementAttributeAlias","Object","prototype","hasOwnProperty","call","rawAttributes","dataValues","_loop","record","attr","find","fieldName","formatBindParameters","dialect","bindParam","replacementFunc","values2","module","exports","default"],"sources":["../../../src/dialects/mssql/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'bigint') {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}