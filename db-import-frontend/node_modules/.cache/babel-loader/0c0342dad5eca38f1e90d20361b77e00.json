{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\nvar XhrClient = /** @class */function () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, /* async: */true);\n      _this.setXhrHeaders(xhr, options);\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n  return XhrClient;\n}();\nexport { XhrClient };","map":{"version":3,"names":["XhrClient","prototype","sendGetRequestAsync","url","options","sendRequestAsync","HTTP_REQUEST_TYPE","GET","sendPostRequestAsync","POST","method","_this","Promise","resolve","reject","xhr","XMLHttpRequest","open","setXhrHeaders","onload","status","BrowserAuthError","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","headers_1","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["../../src/network/XhrClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nexport class XhrClient implements INetworkModule {\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\r\n    }\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\r\n    }\r\n\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url \r\n     * @param method \r\n     * @param options \r\n     */\r\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            this.setXhrHeaders(xhr, options);\r\n            xhr.onload = (): void => {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                }\r\n                try {\r\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\r\n                    const networkResponse: NetworkResponse<T> = {\r\n                        headers: this.getHeaderDict(xhr),\r\n                        body: jsonResponse,\r\n                        status: xhr.status\r\n                    };\r\n                    resolve(networkResponse);\r\n                } catch (e) {\r\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = (): void => {\r\n                if (window.navigator.onLine) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                } else {\r\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\r\n                }\r\n            };\r\n\r\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\r\n                xhr.send(options.body);\r\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\r\n                xhr.send();\r\n            } else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr \r\n     * @param options \r\n     */\r\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\r\n        if (options && options.headers) {\r\n            const headers = options.headers;\r\n            Object.keys(headers).forEach((key: string) => {\r\n                xhr.setRequestHeader(key, headers[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string map of the headers received in the response.\r\n     * \r\n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n     * @param xhr \r\n     */\r\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\r\n        const headerString = xhr.getAllResponseHeaders();\r\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\r\n        const headerDict: Record<string, string> = {};\r\n        headerArr.forEach((value: string) => {\r\n            const parts = value.split(\": \");\r\n            const headerName = parts.shift();\r\n            const headerVal = parts.join(\": \");\r\n            if (headerName && headerVal) {\r\n                headerDict[headerName] = headerVal;\r\n            }\r\n        });\r\n\r\n        return headerDict;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}