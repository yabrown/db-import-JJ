{"ast":null,"code":"module.exports = Geometry;\nvar Types = require('./types');\nvar Point = require('./point');\nvar LineString = require('./linestring');\nvar Polygon = require('./polygon');\nvar MultiPoint = require('./multipoint');\nvar MultiLineString = require('./multilinestring');\nvar MultiPolygon = require('./multipolygon');\nvar GeometryCollection = require('./geometrycollection');\nvar BinaryReader = require('./binaryreader');\nvar BinaryWriter = require('./binarywriter');\nvar WktParser = require('./wktparser');\nvar ZigZag = require('./zigzag.js');\nfunction Geometry() {\n  this.srid = undefined;\n  this.hasZ = false;\n  this.hasM = false;\n}\nGeometry.parse = function (value, options) {\n  var valueType = typeof value;\n  if (valueType === 'string' || value instanceof WktParser) return Geometry._parseWkt(value);else if (Buffer.isBuffer(value) || value instanceof BinaryReader) return Geometry._parseWkb(value, options);else throw new Error('first argument must be a string or Buffer');\n};\nGeometry._parseWkt = function (value) {\n  var wktParser, srid;\n  if (value instanceof WktParser) wktParser = value;else wktParser = new WktParser(value);\n  var match = wktParser.matchRegex([/^SRID=(\\d+);/]);\n  if (match) srid = parseInt(match[1], 10);\n  var geometryType = wktParser.matchType();\n  var dimension = wktParser.matchDimension();\n  var options = {\n    srid: srid,\n    hasZ: dimension.hasZ,\n    hasM: dimension.hasM\n  };\n  switch (geometryType) {\n    case Types.wkt.Point:\n      return Point._parseWkt(wktParser, options);\n    case Types.wkt.LineString:\n      return LineString._parseWkt(wktParser, options);\n    case Types.wkt.Polygon:\n      return Polygon._parseWkt(wktParser, options);\n    case Types.wkt.MultiPoint:\n      return MultiPoint._parseWkt(wktParser, options);\n    case Types.wkt.MultiLineString:\n      return MultiLineString._parseWkt(wktParser, options);\n    case Types.wkt.MultiPolygon:\n      return MultiPolygon._parseWkt(wktParser, options);\n    case Types.wkt.GeometryCollection:\n      return GeometryCollection._parseWkt(wktParser, options);\n  }\n};\nGeometry._parseWkb = function (value, parentOptions) {\n  var binaryReader,\n    wkbType,\n    geometryType,\n    options = {};\n  if (value instanceof BinaryReader) binaryReader = value;else binaryReader = new BinaryReader(value);\n  binaryReader.isBigEndian = !binaryReader.readInt8();\n  wkbType = binaryReader.readUInt32();\n  options.hasSrid = (wkbType & 0x20000000) === 0x20000000;\n  options.isEwkb = wkbType & 0x20000000 || wkbType & 0x40000000 || wkbType & 0x80000000;\n  if (options.hasSrid) options.srid = binaryReader.readUInt32();\n  options.hasZ = false;\n  options.hasM = false;\n  if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {\n    if (wkbType >= 1000 && wkbType < 2000) {\n      options.hasZ = true;\n      geometryType = wkbType - 1000;\n    } else if (wkbType >= 2000 && wkbType < 3000) {\n      options.hasM = true;\n      geometryType = wkbType - 2000;\n    } else if (wkbType >= 3000 && wkbType < 4000) {\n      options.hasZ = true;\n      options.hasM = true;\n      geometryType = wkbType - 3000;\n    } else {\n      geometryType = wkbType;\n    }\n  } else {\n    if (wkbType & 0x80000000) options.hasZ = true;\n    if (wkbType & 0x40000000) options.hasM = true;\n    geometryType = wkbType & 0xF;\n  }\n  switch (geometryType) {\n    case Types.wkb.Point:\n      return Point._parseWkb(binaryReader, options);\n    case Types.wkb.LineString:\n      return LineString._parseWkb(binaryReader, options);\n    case Types.wkb.Polygon:\n      return Polygon._parseWkb(binaryReader, options);\n    case Types.wkb.MultiPoint:\n      return MultiPoint._parseWkb(binaryReader, options);\n    case Types.wkb.MultiLineString:\n      return MultiLineString._parseWkb(binaryReader, options);\n    case Types.wkb.MultiPolygon:\n      return MultiPolygon._parseWkb(binaryReader, options);\n    case Types.wkb.GeometryCollection:\n      return GeometryCollection._parseWkb(binaryReader, options);\n    default:\n      throw new Error('GeometryType ' + geometryType + ' not supported');\n  }\n};\nGeometry.parseTwkb = function (value) {\n  var binaryReader,\n    options = {};\n  if (value instanceof BinaryReader) binaryReader = value;else binaryReader = new BinaryReader(value);\n  var type = binaryReader.readUInt8();\n  var metadataHeader = binaryReader.readUInt8();\n  var geometryType = type & 0x0F;\n  options.precision = ZigZag.decode(type >> 4);\n  options.precisionFactor = Math.pow(10, options.precision);\n  options.hasBoundingBox = metadataHeader >> 0 & 1;\n  options.hasSizeAttribute = metadataHeader >> 1 & 1;\n  options.hasIdList = metadataHeader >> 2 & 1;\n  options.hasExtendedPrecision = metadataHeader >> 3 & 1;\n  options.isEmpty = metadataHeader >> 4 & 1;\n  if (options.hasExtendedPrecision) {\n    var extendedPrecision = binaryReader.readUInt8();\n    options.hasZ = (extendedPrecision & 0x01) === 0x01;\n    options.hasM = (extendedPrecision & 0x02) === 0x02;\n    options.zPrecision = ZigZag.decode((extendedPrecision & 0x1C) >> 2);\n    options.zPrecisionFactor = Math.pow(10, options.zPrecision);\n    options.mPrecision = ZigZag.decode((extendedPrecision & 0xE0) >> 5);\n    options.mPrecisionFactor = Math.pow(10, options.mPrecision);\n  } else {\n    options.hasZ = false;\n    options.hasM = false;\n  }\n  if (options.hasSizeAttribute) binaryReader.readVarInt();\n  if (options.hasBoundingBox) {\n    var dimensions = 2;\n    if (options.hasZ) dimensions++;\n    if (options.hasM) dimensions++;\n    for (var i = 0; i < dimensions; i++) {\n      binaryReader.readVarInt();\n      binaryReader.readVarInt();\n    }\n  }\n  switch (geometryType) {\n    case Types.wkb.Point:\n      return Point._parseTwkb(binaryReader, options);\n    case Types.wkb.LineString:\n      return LineString._parseTwkb(binaryReader, options);\n    case Types.wkb.Polygon:\n      return Polygon._parseTwkb(binaryReader, options);\n    case Types.wkb.MultiPoint:\n      return MultiPoint._parseTwkb(binaryReader, options);\n    case Types.wkb.MultiLineString:\n      return MultiLineString._parseTwkb(binaryReader, options);\n    case Types.wkb.MultiPolygon:\n      return MultiPolygon._parseTwkb(binaryReader, options);\n    case Types.wkb.GeometryCollection:\n      return GeometryCollection._parseTwkb(binaryReader, options);\n    default:\n      throw new Error('GeometryType ' + geometryType + ' not supported');\n  }\n};\nGeometry.parseGeoJSON = function (value) {\n  return Geometry._parseGeoJSON(value);\n};\nGeometry._parseGeoJSON = function (value, isSubGeometry) {\n  var geometry;\n  switch (value.type) {\n    case Types.geoJSON.Point:\n      geometry = Point._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.LineString:\n      geometry = LineString._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.Polygon:\n      geometry = Polygon._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.MultiPoint:\n      geometry = MultiPoint._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.MultiLineString:\n      geometry = MultiLineString._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.MultiPolygon:\n      geometry = MultiPolygon._parseGeoJSON(value);\n      break;\n    case Types.geoJSON.GeometryCollection:\n      geometry = GeometryCollection._parseGeoJSON(value);\n      break;\n    default:\n      throw new Error('GeometryType ' + value.type + ' not supported');\n  }\n  if (value.crs && value.crs.type && value.crs.type === 'name' && value.crs.properties && value.crs.properties.name) {\n    var crs = value.crs.properties.name;\n    if (crs.indexOf('EPSG:') === 0) geometry.srid = parseInt(crs.substring(5));else if (crs.indexOf('urn:ogc:def:crs:EPSG::') === 0) geometry.srid = parseInt(crs.substring(22));else throw new Error('Unsupported crs: ' + crs);\n  } else if (!isSubGeometry) {\n    geometry.srid = 4326;\n  }\n  return geometry;\n};\nGeometry.prototype.toEwkt = function () {\n  return 'SRID=' + this.srid + ';' + this.toWkt();\n};\nGeometry.prototype.toEwkb = function () {\n  var ewkb = new BinaryWriter(this._getWkbSize() + 4);\n  var wkb = this.toWkb();\n  ewkb.writeInt8(1);\n  ewkb.writeUInt32LE((wkb.slice(1, 5).readUInt32LE(0) | 0x20000000) >>> 0, true);\n  ewkb.writeUInt32LE(this.srid);\n  ewkb.writeBuffer(wkb.slice(5));\n  return ewkb.buffer;\n};\nGeometry.prototype._getWktType = function (wktType, isEmpty) {\n  var wkt = wktType;\n  if (this.hasZ && this.hasM) wkt += ' ZM ';else if (this.hasZ) wkt += ' Z ';else if (this.hasM) wkt += ' M ';\n  if (isEmpty && !this.hasZ && !this.hasM) wkt += ' ';\n  if (isEmpty) wkt += 'EMPTY';\n  return wkt;\n};\nGeometry.prototype._getWktCoordinate = function (point) {\n  var coordinates = point.x + ' ' + point.y;\n  if (this.hasZ) coordinates += ' ' + point.z;\n  if (this.hasM) coordinates += ' ' + point.m;\n  return coordinates;\n};\nGeometry.prototype._writeWkbType = function (wkb, geometryType, parentOptions) {\n  var dimensionType = 0;\n  if (typeof this.srid === 'undefined' && (!parentOptions || typeof parentOptions.srid === 'undefined')) {\n    if (this.hasZ && this.hasM) dimensionType += 3000;else if (this.hasZ) dimensionType += 1000;else if (this.hasM) dimensionType += 2000;\n  } else {\n    if (this.hasZ) dimensionType |= 0x80000000;\n    if (this.hasM) dimensionType |= 0x40000000;\n  }\n  wkb.writeUInt32LE(dimensionType + geometryType >>> 0, true);\n};\nGeometry.getTwkbPrecision = function (xyPrecision, zPrecision, mPrecision) {\n  return {\n    xy: xyPrecision,\n    z: zPrecision,\n    m: mPrecision,\n    xyFactor: Math.pow(10, xyPrecision),\n    zFactor: Math.pow(10, zPrecision),\n    mFactor: Math.pow(10, mPrecision)\n  };\n};\nGeometry.prototype._writeTwkbHeader = function (twkb, geometryType, precision, isEmpty) {\n  var type = (ZigZag.encode(precision.xy) << 4) + geometryType;\n  var metadataHeader = (this.hasZ || this.hasM) << 3;\n  metadataHeader += isEmpty << 4;\n  twkb.writeUInt8(type);\n  twkb.writeUInt8(metadataHeader);\n  if (this.hasZ || this.hasM) {\n    var extendedPrecision = 0;\n    if (this.hasZ) extendedPrecision |= 0x1;\n    if (this.hasM) extendedPrecision |= 0x2;\n    twkb.writeUInt8(extendedPrecision);\n  }\n};\nGeometry.prototype.toGeoJSON = function (options) {\n  var geoJSON = {};\n  if (this.srid) {\n    if (options) {\n      if (options.shortCrs) {\n        geoJSON.crs = {\n          type: 'name',\n          properties: {\n            name: 'EPSG:' + this.srid\n          }\n        };\n      } else if (options.longCrs) {\n        geoJSON.crs = {\n          type: 'name',\n          properties: {\n            name: 'urn:ogc:def:crs:EPSG::' + this.srid\n          }\n        };\n      }\n    }\n  }\n  return geoJSON;\n};","map":{"version":3,"names":["module","exports","Geometry","Types","require","Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection","BinaryReader","BinaryWriter","WktParser","ZigZag","srid","undefined","hasZ","hasM","parse","value","options","valueType","_parseWkt","Buffer","isBuffer","_parseWkb","Error","wktParser","match","matchRegex","parseInt","geometryType","matchType","dimension","matchDimension","wkt","parentOptions","binaryReader","wkbType","isBigEndian","readInt8","readUInt32","hasSrid","isEwkb","wkb","parseTwkb","type","readUInt8","metadataHeader","precision","decode","precisionFactor","Math","pow","hasBoundingBox","hasSizeAttribute","hasIdList","hasExtendedPrecision","isEmpty","extendedPrecision","zPrecision","zPrecisionFactor","mPrecision","mPrecisionFactor","readVarInt","dimensions","i","_parseTwkb","parseGeoJSON","_parseGeoJSON","isSubGeometry","geometry","geoJSON","crs","properties","name","indexOf","substring","prototype","toEwkt","toWkt","toEwkb","ewkb","_getWkbSize","toWkb","writeInt8","writeUInt32LE","slice","readUInt32LE","writeBuffer","buffer","_getWktType","wktType","_getWktCoordinate","point","coordinates","x","y","z","m","_writeWkbType","dimensionType","getTwkbPrecision","xyPrecision","xy","xyFactor","zFactor","mFactor","_writeTwkbHeader","twkb","encode","writeUInt8","toGeoJSON","shortCrs","longCrs"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/wkx/lib/geometry.js"],"sourcesContent":["module.exports = Geometry;\r\n\r\nvar Types = require('./types');\r\nvar Point = require('./point');\r\nvar LineString = require('./linestring');\r\nvar Polygon = require('./polygon');\r\nvar MultiPoint = require('./multipoint');\r\nvar MultiLineString = require('./multilinestring');\r\nvar MultiPolygon = require('./multipolygon');\r\nvar GeometryCollection = require('./geometrycollection');\r\nvar BinaryReader = require('./binaryreader');\r\nvar BinaryWriter = require('./binarywriter');\r\nvar WktParser = require('./wktparser');\r\nvar ZigZag = require('./zigzag.js');\r\n\r\nfunction Geometry() {\r\n    this.srid = undefined;\r\n    this.hasZ = false;\r\n    this.hasM = false;\r\n}\r\n\r\nGeometry.parse = function (value, options) {\r\n    var valueType = typeof value;\r\n\r\n    if (valueType === 'string' || value instanceof WktParser)\r\n        return Geometry._parseWkt(value);\r\n    else if (Buffer.isBuffer(value) || value instanceof BinaryReader)\r\n        return Geometry._parseWkb(value, options);\r\n    else\r\n        throw new Error('first argument must be a string or Buffer');\r\n};\r\n\r\nGeometry._parseWkt = function (value) {\r\n    var wktParser,\r\n        srid;\r\n\r\n    if (value instanceof WktParser)\r\n        wktParser = value;\r\n    else\r\n        wktParser = new WktParser(value);\r\n\r\n    var match = wktParser.matchRegex([/^SRID=(\\d+);/]);\r\n    if (match)\r\n        srid = parseInt(match[1], 10);\r\n\r\n    var geometryType = wktParser.matchType();\r\n    var dimension = wktParser.matchDimension();\r\n\r\n    var options = {\r\n        srid: srid,\r\n        hasZ: dimension.hasZ,\r\n        hasM: dimension.hasM\r\n    };\r\n\r\n    switch (geometryType) {\r\n        case Types.wkt.Point:\r\n            return Point._parseWkt(wktParser, options);\r\n        case Types.wkt.LineString:\r\n            return LineString._parseWkt(wktParser, options);\r\n        case Types.wkt.Polygon:\r\n            return Polygon._parseWkt(wktParser, options);\r\n        case Types.wkt.MultiPoint:\r\n            return MultiPoint._parseWkt(wktParser, options);\r\n        case Types.wkt.MultiLineString:\r\n            return MultiLineString._parseWkt(wktParser, options);\r\n        case Types.wkt.MultiPolygon:\r\n            return MultiPolygon._parseWkt(wktParser, options);\r\n        case Types.wkt.GeometryCollection:\r\n            return GeometryCollection._parseWkt(wktParser, options);\r\n    }\r\n};\r\n\r\nGeometry._parseWkb = function (value, parentOptions) {\r\n    var binaryReader,\r\n        wkbType,\r\n        geometryType,\r\n        options = {};\r\n\r\n    if (value instanceof BinaryReader)\r\n        binaryReader = value;\r\n    else\r\n        binaryReader = new BinaryReader(value);\r\n\r\n    binaryReader.isBigEndian = !binaryReader.readInt8();\r\n\r\n    wkbType = binaryReader.readUInt32();\r\n\r\n    options.hasSrid = (wkbType & 0x20000000) === 0x20000000;\r\n    options.isEwkb = (wkbType & 0x20000000) || (wkbType & 0x40000000) || (wkbType & 0x80000000);\r\n\r\n    if (options.hasSrid)\r\n        options.srid = binaryReader.readUInt32();\r\n\r\n    options.hasZ = false;\r\n    options.hasM = false;\r\n\r\n    if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {\r\n        if (wkbType >= 1000 && wkbType < 2000) {\r\n            options.hasZ = true;\r\n            geometryType = wkbType - 1000;\r\n        }\r\n        else if (wkbType >= 2000 && wkbType < 3000) {\r\n            options.hasM = true;\r\n            geometryType = wkbType - 2000;\r\n        }\r\n        else if (wkbType >= 3000 && wkbType < 4000) {\r\n            options.hasZ = true;\r\n            options.hasM = true;\r\n            geometryType = wkbType - 3000;\r\n        }\r\n        else {\r\n            geometryType = wkbType;\r\n        }\r\n    }\r\n    else {\r\n        if (wkbType & 0x80000000)\r\n            options.hasZ = true;\r\n        if (wkbType & 0x40000000)\r\n            options.hasM = true;\r\n\r\n        geometryType = wkbType & 0xF;\r\n    }\r\n\r\n    switch (geometryType) {\r\n        case Types.wkb.Point:\r\n            return Point._parseWkb(binaryReader, options);\r\n        case Types.wkb.LineString:\r\n            return LineString._parseWkb(binaryReader, options);\r\n        case Types.wkb.Polygon:\r\n            return Polygon._parseWkb(binaryReader, options);\r\n        case Types.wkb.MultiPoint:\r\n            return MultiPoint._parseWkb(binaryReader, options);\r\n        case Types.wkb.MultiLineString:\r\n            return MultiLineString._parseWkb(binaryReader, options);\r\n        case Types.wkb.MultiPolygon:\r\n            return MultiPolygon._parseWkb(binaryReader, options);\r\n        case Types.wkb.GeometryCollection:\r\n            return GeometryCollection._parseWkb(binaryReader, options);\r\n        default:\r\n            throw new Error('GeometryType ' + geometryType + ' not supported');\r\n    }\r\n};\r\n\r\nGeometry.parseTwkb = function (value) {\r\n    var binaryReader,\r\n        options = {};\r\n\r\n    if (value instanceof BinaryReader)\r\n        binaryReader = value;\r\n    else\r\n        binaryReader = new BinaryReader(value);\r\n\r\n    var type = binaryReader.readUInt8();\r\n    var metadataHeader = binaryReader.readUInt8();\r\n\r\n    var geometryType = type & 0x0F;\r\n    options.precision = ZigZag.decode(type >> 4);\r\n    options.precisionFactor = Math.pow(10, options.precision);\r\n\r\n    options.hasBoundingBox = metadataHeader >> 0 & 1;\r\n    options.hasSizeAttribute = metadataHeader >> 1 & 1;\r\n    options.hasIdList = metadataHeader >> 2 & 1;\r\n    options.hasExtendedPrecision = metadataHeader >> 3 & 1;\r\n    options.isEmpty = metadataHeader >> 4 & 1;\r\n\r\n    if (options.hasExtendedPrecision) {\r\n        var extendedPrecision = binaryReader.readUInt8();\r\n        options.hasZ = (extendedPrecision & 0x01) === 0x01;\r\n        options.hasM = (extendedPrecision & 0x02) === 0x02;\r\n\r\n        options.zPrecision = ZigZag.decode((extendedPrecision & 0x1C) >> 2);\r\n        options.zPrecisionFactor = Math.pow(10, options.zPrecision);\r\n\r\n        options.mPrecision = ZigZag.decode((extendedPrecision & 0xE0) >> 5);\r\n        options.mPrecisionFactor = Math.pow(10, options.mPrecision);\r\n    }\r\n    else {\r\n        options.hasZ = false;\r\n        options.hasM = false;\r\n    }\r\n\r\n    if (options.hasSizeAttribute)\r\n        binaryReader.readVarInt();\r\n    if (options.hasBoundingBox) {\r\n        var dimensions = 2;\r\n\r\n        if (options.hasZ)\r\n            dimensions++;\r\n        if (options.hasM)\r\n            dimensions++;\r\n\r\n        for (var i = 0; i < dimensions; i++) {\r\n            binaryReader.readVarInt();\r\n            binaryReader.readVarInt();\r\n        }\r\n    }\r\n\r\n    switch (geometryType) {\r\n        case Types.wkb.Point:\r\n            return Point._parseTwkb(binaryReader, options);\r\n        case Types.wkb.LineString:\r\n            return LineString._parseTwkb(binaryReader, options);\r\n        case Types.wkb.Polygon:\r\n            return Polygon._parseTwkb(binaryReader, options);\r\n        case Types.wkb.MultiPoint:\r\n            return MultiPoint._parseTwkb(binaryReader, options);\r\n        case Types.wkb.MultiLineString:\r\n            return MultiLineString._parseTwkb(binaryReader, options);\r\n        case Types.wkb.MultiPolygon:\r\n            return MultiPolygon._parseTwkb(binaryReader, options);\r\n        case Types.wkb.GeometryCollection:\r\n            return GeometryCollection._parseTwkb(binaryReader, options);\r\n        default:\r\n            throw new Error('GeometryType ' + geometryType + ' not supported');\r\n    }\r\n};\r\n\r\nGeometry.parseGeoJSON = function (value) {\r\n    return Geometry._parseGeoJSON(value);\r\n};\r\n\r\nGeometry._parseGeoJSON = function (value, isSubGeometry) {\r\n    var geometry;\r\n\r\n    switch (value.type) {\r\n        case Types.geoJSON.Point:\r\n            geometry = Point._parseGeoJSON(value); break;\r\n        case Types.geoJSON.LineString:\r\n            geometry = LineString._parseGeoJSON(value); break;\r\n        case Types.geoJSON.Polygon:\r\n            geometry = Polygon._parseGeoJSON(value); break;\r\n        case Types.geoJSON.MultiPoint:\r\n            geometry = MultiPoint._parseGeoJSON(value); break;\r\n        case Types.geoJSON.MultiLineString:\r\n            geometry = MultiLineString._parseGeoJSON(value); break;\r\n        case Types.geoJSON.MultiPolygon:\r\n            geometry = MultiPolygon._parseGeoJSON(value); break;\r\n        case Types.geoJSON.GeometryCollection:\r\n            geometry = GeometryCollection._parseGeoJSON(value); break;\r\n        default:\r\n            throw new Error('GeometryType ' + value.type + ' not supported');\r\n    }\r\n\r\n    if (value.crs && value.crs.type && value.crs.type === 'name' && value.crs.properties && value.crs.properties.name) {\r\n        var crs = value.crs.properties.name;\r\n\r\n        if (crs.indexOf('EPSG:') === 0)\r\n            geometry.srid = parseInt(crs.substring(5));\r\n        else if (crs.indexOf('urn:ogc:def:crs:EPSG::') === 0)\r\n            geometry.srid = parseInt(crs.substring(22));\r\n        else\r\n            throw new Error('Unsupported crs: ' + crs);\r\n    }\r\n    else if (!isSubGeometry) {\r\n        geometry.srid = 4326;\r\n    }\r\n\r\n    return geometry;\r\n};\r\n\r\nGeometry.prototype.toEwkt = function () {\r\n    return 'SRID=' + this.srid + ';' + this.toWkt();\r\n};\r\n\r\nGeometry.prototype.toEwkb = function () {\r\n    var ewkb = new BinaryWriter(this._getWkbSize() + 4);\r\n    var wkb = this.toWkb();\r\n\r\n    ewkb.writeInt8(1);\r\n    ewkb.writeUInt32LE((wkb.slice(1, 5).readUInt32LE(0) | 0x20000000) >>> 0, true);\r\n    ewkb.writeUInt32LE(this.srid);\r\n\r\n    ewkb.writeBuffer(wkb.slice(5));\r\n\r\n    return ewkb.buffer;\r\n};\r\n\r\nGeometry.prototype._getWktType = function (wktType, isEmpty) {\r\n    var wkt = wktType;\r\n\r\n    if (this.hasZ && this.hasM)\r\n        wkt += ' ZM ';\r\n    else if (this.hasZ)\r\n        wkt += ' Z ';\r\n    else if (this.hasM)\r\n        wkt += ' M ';\r\n\r\n    if (isEmpty && !this.hasZ && !this.hasM)\r\n        wkt += ' ';\r\n\r\n    if (isEmpty)\r\n        wkt += 'EMPTY';\r\n\r\n    return wkt;\r\n};\r\n\r\nGeometry.prototype._getWktCoordinate = function (point) {\r\n    var coordinates = point.x + ' ' + point.y;\r\n\r\n    if (this.hasZ)\r\n        coordinates += ' ' + point.z;\r\n    if (this.hasM)\r\n        coordinates += ' ' + point.m;\r\n\r\n    return coordinates;\r\n};\r\n\r\nGeometry.prototype._writeWkbType = function (wkb, geometryType, parentOptions) {\r\n    var dimensionType = 0;\r\n\r\n    if (typeof this.srid === 'undefined' && (!parentOptions || typeof parentOptions.srid === 'undefined')) {\r\n        if (this.hasZ && this.hasM)\r\n            dimensionType += 3000;\r\n        else if (this.hasZ)\r\n            dimensionType += 1000;\r\n        else if (this.hasM)\r\n            dimensionType += 2000;\r\n    }\r\n    else {\r\n        if (this.hasZ)\r\n            dimensionType |= 0x80000000;\r\n        if (this.hasM)\r\n            dimensionType |= 0x40000000;\r\n    }\r\n\r\n    wkb.writeUInt32LE((dimensionType + geometryType) >>> 0, true);\r\n};\r\n\r\nGeometry.getTwkbPrecision = function (xyPrecision, zPrecision, mPrecision) {\r\n    return {\r\n        xy: xyPrecision,\r\n        z: zPrecision,\r\n        m: mPrecision,\r\n        xyFactor: Math.pow(10, xyPrecision),\r\n        zFactor: Math.pow(10, zPrecision),\r\n        mFactor: Math.pow(10, mPrecision)\r\n    };\r\n};\r\n\r\nGeometry.prototype._writeTwkbHeader = function (twkb, geometryType, precision, isEmpty) {\r\n    var type = (ZigZag.encode(precision.xy) << 4) + geometryType;\r\n    var metadataHeader = (this.hasZ || this.hasM) << 3;\r\n    metadataHeader += isEmpty << 4;\r\n\r\n    twkb.writeUInt8(type);\r\n    twkb.writeUInt8(metadataHeader);\r\n\r\n    if (this.hasZ || this.hasM) {\r\n        var extendedPrecision = 0;\r\n        if (this.hasZ)\r\n            extendedPrecision |= 0x1;\r\n        if (this.hasM)\r\n            extendedPrecision |= 0x2;\r\n\r\n        twkb.writeUInt8(extendedPrecision);\r\n    }\r\n};\r\n\r\nGeometry.prototype.toGeoJSON = function (options) {\r\n    var geoJSON = {};\r\n\r\n    if (this.srid) {\r\n        if (options) {\r\n            if (options.shortCrs) {\r\n                geoJSON.crs = {\r\n                    type: 'name',\r\n                    properties: {\r\n                        name: 'EPSG:' + this.srid\r\n                    }\r\n                };\r\n            }\r\n            else if (options.longCrs) {\r\n                geoJSON.crs = {\r\n                    type: 'name',\r\n                    properties: {\r\n                        name: 'urn:ogc:def:crs:EPSG::' + this.srid\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return geoJSON;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}