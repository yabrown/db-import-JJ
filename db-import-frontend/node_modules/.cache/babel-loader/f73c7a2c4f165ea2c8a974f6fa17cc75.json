{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _metadataParser = require(\"./metadata-parser\");\nvar _dataType = require(\"./data-type\");\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\nvar _sprintfJs = require(\"sprintf-js\");\nvar _guidParser = require(\"./guid-parser\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar NULL = (1 << 16) - 1;\nvar MAX = (1 << 16) - 1;\nvar THREE_AND_A_THIRD = 3 + 1 / 3;\nvar MONEY_DIVISOR = 10000;\nvar PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nvar UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nvar DEFAULT_ENCODING = 'utf8';\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(function (value) {\n    callback(value.toString());\n  });\n}\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(function (value) {\n    callback(value / MONEY_DIVISOR);\n  });\n}\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(function (high) {\n    parser.readUInt32LE(function (low) {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\nfunction readBit(parser, callback) {\n  parser.readUInt8(function (value) {\n    callback(!!value);\n  });\n}\nfunction valueParse(parser, metadata, options, callback) {\n  var type = metadata.type;\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n    case 'Int':\n      return readInt(parser, callback);\n    case 'BigInt':\n      return readBigInt(parser, callback);\n    case 'IntN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 1:\n            return readTinyInt(parser, callback);\n          case 2:\n            return readSmallInt(parser, callback);\n          case 4:\n            return readInt(parser, callback);\n          case 8:\n            return readBigInt(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n        }\n      });\n    case 'Real':\n      return readReal(parser, callback);\n    case 'Float':\n      return readFloat(parser, callback);\n    case 'FloatN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readReal(parser, callback);\n          case 8:\n            return readFloat(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n        }\n      });\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n    case 'Money':\n      return readMoney(parser, callback);\n    case 'MoneyN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readSmallMoney(parser, callback);\n          case 8:\n            return readMoney(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n        }\n      });\n    case 'Bit':\n      return readBit(parser, callback);\n    case 'BitN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 1:\n            return readBit(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n        }\n      });\n    case 'VarChar':\n    case 'Char':\n      var codepage = metadata.collation.codepage;\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readNChars(parser, dataLength, callback);\n        });\n      }\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readBinary(parser, dataLength, callback);\n        });\n      }\n    case 'Text':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n    case 'NText':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n    case 'Image':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n    case 'DateTimeN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n        }\n      });\n    case 'Time':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n    case 'Date':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n    case 'DateTime2':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n    case 'DateTimeOffset':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n    case 'UniqueIdentifier':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n          default:\n            throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));\n        }\n      });\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n    case 'Variant':\n      return parser.readUInt32LE(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n        readVariant(parser, options, dataLength, callback);\n      });\n    default:\n      throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\n  }\n}\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, function (data) {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(function (sign) {\n    sign = sign === 1 ? 1 : -1;\n    var readValue;\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));\n    }\n    readValue.call(parser, function (value) {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(function (baseType) {\n    var type = _dataType.TYPE[baseType];\n    return parser.readUInt8(function (propBytes) {\n      dataLength = dataLength - propBytes - 2;\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n        case 'Bit':\n          return readBit(parser, callback);\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n        case 'Int':\n          return readInt(parser, callback);\n        case 'BigInt':\n          return readBigInt(parser, callback);\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n        case 'Real':\n          return readReal(parser, callback);\n        case 'Float':\n          return readFloat(parser, callback);\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n        case 'Money':\n          return readMoney(parser, callback);\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n        case 'Time':\n          return parser.readUInt8(function (scale) {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n        case 'DateTime2':\n          return parser.readUInt8(function (scale) {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n        case 'DateTimeOffset':\n          return parser.readUInt8(function (scale) {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(function (_maxLength) {\n            readBinary(parser, dataLength, callback);\n          });\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(function (precision) {\n            parser.readUInt8(function (scale) {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(function (_maxLength) {\n            (0, _metadataParser.readCollation)(parser, function (collation) {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(function (_maxLength) {\n            (0, _metadataParser.readCollation)(parser, function (_collation) {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n  return parser.readBuffer(dataLength, function (data) {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, function (data) {\n    callback(data.toString('ucs2'));\n  });\n}\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n  readMax(parser, function (data) {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, function (data) {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, function (type) {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      var low = type.readUInt32LE(0);\n      var high = type.readUInt32LE(4);\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n      var expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  var data = Buffer.alloc(totalLength, 0);\n  var offset = 0;\n  function next(done) {\n    parser.readUInt32LE(function (chunkLength) {\n      if (!chunkLength) {\n        return done();\n      }\n      parser.readBuffer(chunkLength, function (chunk) {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n  next(function () {\n    if (offset !== totalLength) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\n    }\n    callback(data);\n  });\n}\nfunction readMaxUnknownLength(parser, callback) {\n  var chunks = [];\n  var length = 0;\n  function next(done) {\n    parser.readUInt32LE(function (chunkLength) {\n      if (!chunkLength) {\n        return done();\n      }\n      parser.readBuffer(chunkLength, function (chunk) {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n  next(function () {\n    callback(Buffer.concat(chunks, length));\n  });\n}\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(function (days) {\n    parser.readUInt16LE(function (minutes) {\n      var value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n      callback(value);\n    });\n  });\n}\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(function (days) {\n    parser.readUInt32LE(function (threeHundredthsOfSecond) {\n      var milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      var value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n      callback(value);\n    });\n  });\n}\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  var readValue;\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n  readValue.call(parser, function (value) {\n    if (scale < 7) {\n      for (var i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n    var date;\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(function (days) {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, function (time) {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(function (days) {\n      var date;\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, function (time) {\n    parser.readUInt24LE(function (days) {\n      // offset\n      parser.readInt16LE(function () {\n        var date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;","map":{"version":3,"names":["_metadataParser","require","_dataType","_iconvLite","_interopRequireDefault","_sprintfJs","_guidParser","NULL","MAX","THREE_AND_A_THIRD","MONEY_DIVISOR","PLP_NULL","Buffer","from","UNKNOWN_PLP_LEN","DEFAULT_ENCODING","readTinyInt","parser","callback","readUInt8","readSmallInt","readInt16LE","readInt","readInt32LE","readBigInt","readBigInt64LE","value","toString","readReal","readFloatLE","readFloat","readDoubleLE","readSmallMoney","readMoney","high","readUInt32LE","low","readBit","valueParse","metadata","options","type","name","dataLength","Error","codepage","collation","readMaxChars","readUInt16LE","readChars","readMaxNChars","readNChars","readMaxBinary","readBinary","textPointerLength","readBuffer","_textPointer","_timestamp","readSmallDateTime","useUTC","readDateTime","readTime","scale","readDate","readDateTime2","readDateTimeOffset","readNumeric","precision","readUniqueIdentifier","sprintf","readVariant","data","lowerCaseGuids","bufferToLowerCaseGuid","bufferToUpperCaseGuid","_precision","sign","readValue","readUNumeric64LE","readUNumeric96LE","readUNumeric128LE","call","Math","pow","baseType","TYPE","propBytes","_maxLength","readCollation","_collation","default","decode","readMax","equals","readMaxUnknownLength","console","warn","expectedLength","readMaxKnownLength","totalLength","alloc","offset","next","done","chunkLength","chunk","copy","chunks","length","push","concat","days","minutes","Date","UTC","threeHundredthsOfSecond","milliseconds","round","readUInt24LE","readUInt40LE","i","date","Object","defineProperty","enumerable","time","getHours","getMinutes","getSeconds","getMilliseconds","nanosecondsDelta","module","exports"],"sources":["../src/value-parser.ts"],"sourcesContent":["import Parser, { ParserOptions } from './token/stream-parser';\nimport { Metadata, readCollation } from './metadata-parser';\nimport { TYPE } from './data-type';\n\nimport iconv from 'iconv-lite';\nimport { sprintf } from 'sprintf-js';\nimport { bufferToLowerCaseGuid, bufferToUpperCaseGuid } from './guid-parser';\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + (1 / 3);\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(parser: Parser, callback: (value: unknown) => void) {\n  parser.readUInt8(callback);\n}\n\nfunction readSmallInt(parser: Parser, callback: (value: unknown) => void) {\n  parser.readInt16LE(callback);\n}\n\nfunction readInt(parser: Parser, callback: (value: unknown) => void) {\n  parser.readInt32LE(callback);\n}\n\nfunction readBigInt(parser: Parser, callback: (value: unknown) => void) {\n  parser.readBigInt64LE((value) => {\n    callback(value.toString());\n  });\n}\n\nfunction readReal(parser: Parser, callback: (value: unknown) => void) {\n  parser.readFloatLE(callback);\n}\n\nfunction readFloat(parser: Parser, callback: (value: unknown) => void) {\n  parser.readDoubleLE(callback);\n}\n\nfunction readSmallMoney(parser: Parser, callback: (value: unknown) => void) {\n  parser.readInt32LE((value) => {\n    callback(value / MONEY_DIVISOR);\n  });\n}\n\nfunction readMoney(parser: Parser, callback: (value: unknown) => void) {\n  parser.readInt32LE((high) => {\n    parser.readUInt32LE((low) => {\n      callback((low + (0x100000000 * high)) / MONEY_DIVISOR);\n    });\n  });\n}\n\nfunction readBit(parser: Parser, callback: (value: unknown) => void) {\n  parser.readUInt8((value) => {\n    callback(!!value);\n  });\n}\n\nfunction valueParse(parser: Parser, metadata: Metadata, options: ParserOptions, callback: (value: unknown) => void): void {\n  const type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n\n    case 'Int':\n      return readInt(parser, callback);\n\n    case 'BigInt':\n      return readBigInt(parser, callback);\n\n    case 'IntN':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readTinyInt(parser, callback);\n          case 2:\n            return readSmallInt(parser, callback);\n          case 4:\n            return readInt(parser, callback);\n          case 8:\n            return readBigInt(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n        }\n      });\n\n    case 'Real':\n      return readReal(parser, callback);\n\n    case 'Float':\n      return readFloat(parser, callback);\n\n    case 'FloatN':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readReal(parser, callback);\n          case 8:\n            return readFloat(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n        }\n      });\n\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n\n    case 'Money':\n      return readMoney(parser, callback);\n\n    case 'MoneyN':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallMoney(parser, callback);\n          case 8:\n            return readMoney(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n        }\n      });\n\n    case 'Bit':\n      return readBit(parser, callback);\n\n    case 'BitN':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readBit(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n        }\n      });\n\n    case 'VarChar':\n    case 'Char':\n      const codepage = metadata.collation!.codepage!;\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE((dataLength) => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readChars(parser, dataLength!, codepage, callback);\n        });\n      }\n\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE((dataLength) => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readNChars(parser, dataLength!, callback);\n        });\n      }\n\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE((dataLength) => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readBinary(parser, dataLength!, callback);\n        });\n      }\n\n    case 'Text':\n      return parser.readUInt8((textPointerLength) => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, (_textPointer) => {\n          parser.readBuffer(8, (_timestamp) => {\n            parser.readUInt32LE((dataLength) => {\n              readChars(parser, dataLength!, metadata.collation!.codepage!, callback);\n            });\n          });\n        });\n      });\n\n    case 'NText':\n      return parser.readUInt8((textPointerLength) => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, (_textPointer) => {\n          parser.readBuffer(8, (_timestamp) => {\n            parser.readUInt32LE((dataLength) => {\n              readNChars(parser, dataLength!, callback);\n            });\n          });\n        });\n      });\n\n    case 'Image':\n      return parser.readUInt8((textPointerLength) => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, (_textPointer) => {\n          parser.readBuffer(8, (_timestamp) => {\n            parser.readUInt32LE((dataLength) => {\n              readBinary(parser, dataLength!, callback);\n            });\n          });\n        });\n      });\n\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n\n    case 'DateTimeN':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n        }\n      });\n\n    case 'Time':\n      return parser.readUInt8((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength!, metadata.scale!, options.useUTC, callback);\n        }\n      });\n\n    case 'Date':\n      return parser.readUInt8((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTime2':\n      return parser.readUInt8((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength!, metadata.scale!, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTimeOffset':\n      return parser.readUInt8((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength!, metadata.scale!, callback);\n        }\n      });\n\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength!, metadata.precision!, metadata.scale!, callback);\n        }\n      });\n\n    case 'UniqueIdentifier':\n      return parser.readUInt8((dataLength) => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n\n          default:\n            throw new Error(sprintf('Unsupported guid size %d', dataLength! - 1));\n        }\n      });\n\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n\n    case 'Variant':\n      return parser.readUInt32LE((dataLength) => {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n\n        readVariant(parser, options, dataLength!, callback);\n      });\n\n    default:\n      throw new Error(sprintf('Unrecognised type %s', type.name));\n  }\n}\n\nfunction readUniqueIdentifier(parser: Parser, options: ParserOptions, callback: (value: unknown) => void) {\n  parser.readBuffer(0x10, (data) => {\n    callback(options.lowerCaseGuids ? bufferToLowerCaseGuid(data) : bufferToUpperCaseGuid(data));\n  });\n}\n\nfunction readNumeric(parser: Parser, dataLength: number, _precision: number, scale: number, callback: (value: unknown) => void) {\n  parser.readUInt8((sign) => {\n    sign = sign === 1 ? 1 : -1;\n\n    let readValue;\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      throw new Error(sprintf('Unsupported numeric dataLength %d', dataLength));\n    }\n\n    readValue.call(parser, (value) => {\n      callback((value * sign) / Math.pow(10, scale));\n    });\n  });\n}\n\nfunction readVariant(parser: Parser, options: ParserOptions, dataLength: number, callback: (value: unknown) => void) {\n  return parser.readUInt8((baseType) => {\n    const type = TYPE[baseType];\n\n    return parser.readUInt8((propBytes) => {\n      dataLength = dataLength - propBytes - 2;\n\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n\n        case 'Bit':\n          return readBit(parser, callback);\n\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n\n        case 'Int':\n          return readInt(parser, callback);\n\n        case 'BigInt':\n          return readBigInt(parser, callback);\n\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n\n        case 'Real':\n          return readReal(parser, callback);\n\n        case 'Float':\n          return readFloat(parser, callback);\n\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n\n        case 'Money':\n          return readMoney(parser, callback);\n\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n\n        case 'Time':\n          return parser.readUInt8((scale) => {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTime2':\n          return parser.readUInt8((scale) => {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTimeOffset':\n          return parser.readUInt8((scale) => {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE((_maxLength) => {\n            readBinary(parser, dataLength, callback);\n          });\n\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8((precision) => {\n            parser.readUInt8((scale) => {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE((_maxLength) => {\n            readCollation(parser, (collation) => {\n              readChars(parser, dataLength, collation.codepage!, callback);\n            });\n          });\n\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE((_maxLength) => {\n            readCollation(parser, (_collation) => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\n\nfunction readBinary(parser: Parser, dataLength: number, callback: (value: unknown) => void) {\n  return parser.readBuffer(dataLength, callback);\n}\n\nfunction readChars(parser: Parser, dataLength: number, codepage: string, callback: (value: unknown) => void) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  return parser.readBuffer(dataLength, (data) => {\n    callback(iconv.decode(data, codepage));\n  });\n}\n\nfunction readNChars(parser: Parser, dataLength: number, callback: (value: unknown) => void) {\n  parser.readBuffer(dataLength, (data) => {\n    callback(data.toString('ucs2'));\n  });\n}\n\nfunction readMaxBinary(parser: Parser, callback: (value: unknown) => void) {\n  return readMax(parser, callback);\n}\n\nfunction readMaxChars(parser: Parser, codepage: string, callback: (value: unknown) => void) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  readMax(parser, (data) => {\n    if (data) {\n      callback(iconv.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMaxNChars(parser: Parser, callback: (value: string | null) => void) {\n  readMax(parser, (data) => {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMax(parser: Parser, callback: (value: null | Buffer) => void) {\n  parser.readBuffer(8, (type) => {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      const low = type.readUInt32LE(0);\n      const high = type.readUInt32LE(4);\n\n      if (high >= (2 << (53 - 32))) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n\n      const expectedLength = low + (0x100000000 * high);\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\n\nfunction readMaxKnownLength(parser: Parser, totalLength: number, callback: (value: null | Buffer) => void) {\n  const data = Buffer.alloc(totalLength, 0);\n\n  let offset = 0;\n  function next(done: any) {\n    parser.readUInt32LE((chunkLength) => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, (chunk) => {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    if (offset !== totalLength) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\n    }\n\n    callback(data);\n  });\n}\n\nfunction readMaxUnknownLength(parser: Parser, callback: (value: null | Buffer) => void) {\n  const chunks: Buffer[] = [];\n\n  let length = 0;\n  function next(done: any) {\n    parser.readUInt32LE((chunkLength) => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, (chunk) => {\n        chunks.push(chunk);\n        length += chunkLength;\n\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    callback(Buffer.concat(chunks, length));\n  });\n}\n\nfunction readSmallDateTime(parser: Parser, useUTC: boolean, callback: (value: Date) => void) {\n  parser.readUInt16LE((days) => {\n    parser.readUInt16LE((minutes) => {\n      let value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n      callback(value);\n    });\n  });\n}\n\nfunction readDateTime(parser: Parser, useUTC: boolean, callback: (value: Date) => void) {\n  parser.readInt32LE((days) => {\n    parser.readUInt32LE((threeHundredthsOfSecond) => {\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n\n      let value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n\n      callback(value);\n    });\n  });\n}\n\ninterface DateWithNanosecondsDelta extends Date {\n  nanosecondsDelta: number;\n}\n\nfunction readTime(parser: Parser, dataLength: number, scale: number, useUTC: boolean, callback: (value: DateWithNanosecondsDelta) => void) {\n  let readValue: any;\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n\n  readValue!.call(parser, (value: number) => {\n    if (scale < 7) {\n      for (let i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n\n    let date;\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000)) as DateWithNanosecondsDelta;\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000) as DateWithNanosecondsDelta;\n    }\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: (value % 10000) / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\n\nfunction readDate(parser: Parser, useUTC: boolean, callback: (value: Date) => void) {\n  parser.readUInt24LE((days) => {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\n\nfunction readDateTime2(parser: Parser, dataLength: number, scale: number, useUTC: boolean, callback: (value: DateWithNanosecondsDelta) => void) {\n  readTime(parser, dataLength - 3, scale, useUTC, (time) => { // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE((days) => {\n      let date;\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time)) as DateWithNanosecondsDelta;\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()) as DateWithNanosecondsDelta;\n      }\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\n\nfunction readDateTimeOffset(parser: Parser, dataLength: number, scale: number, callback: (value: DateWithNanosecondsDelta) => void) {\n  readTime(parser, dataLength - 5, scale, true, (time) => {\n    parser.readUInt24LE((days) => {\n      // offset\n      parser.readInt16LE(() => {\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time)) as DateWithNanosecondsDelta;\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\n\nexport default valueParse;\nmodule.exports = valueParse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}