{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar _ = require(\"lodash\");\nvar Utils = require(\"./utils\");\nvar sequelizeError = require(\"./errors\");\nvar DataTypes = require(\"./data-types\");\nvar BelongsTo = require(\"./associations/belongs-to\");\nvar validator = require(\"./utils/validator-extras\").validator;\nvar _require = require(\"util\"),\n  promisify = _require.promisify;\nvar InstanceValidator = /*#__PURE__*/function () {\n  function InstanceValidator(modelInstance, options) {\n    _classCallCheck(this, InstanceValidator);\n    options = __spreadValues({\n      hooks: true\n    }, options);\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n    this.options = options;\n    this.modelInstance = modelInstance;\n    this.validator = validator;\n    this.errors = [];\n    this.inProgress = false;\n  }\n  _createClass(InstanceValidator, [{\n    key: \"_validate\",\n    value: function () {\n      var _validate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.inProgress) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error(\"Validations already in progress.\");\n            case 2:\n              this.inProgress = true;\n              _context.next = 5;\n              return Promise.all([this._perAttributeValidators(), this._customValidators()]);\n            case 5:\n              if (!this.errors.length) {\n                _context.next = 7;\n                break;\n              }\n              throw new sequelizeError.ValidationError(null, this.errors);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _validate() {\n        return _validate2.apply(this, arguments);\n      }\n      return _validate;\n    }()\n  }, {\n    key: \"validate\",\n    value: function () {\n      var _validate3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.options.hooks ? this._validateAndRunHooks() : this._validate();\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function validate() {\n        return _validate3.apply(this, arguments);\n      }\n      return validate;\n    }()\n  }, {\n    key: \"_validateAndRunHooks\",\n    value: function () {\n      var _validateAndRunHooks2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var runHooks, newError;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n              _context3.next = 3;\n              return runHooks(\"beforeValidate\", this.modelInstance, this.options);\n            case 3:\n              _context3.prev = 3;\n              _context3.next = 6;\n              return this._validate();\n            case 6:\n              _context3.next = 14;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](3);\n              _context3.next = 12;\n              return runHooks(\"validationFailed\", this.modelInstance, this.options, _context3.t0);\n            case 12:\n              newError = _context3.sent;\n              throw newError || _context3.t0;\n            case 14:\n              _context3.next = 16;\n              return runHooks(\"afterValidate\", this.modelInstance, this.options);\n            case 16:\n              return _context3.abrupt(\"return\", this.modelInstance);\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 8]]);\n      }));\n      function _validateAndRunHooks() {\n        return _validateAndRunHooks2.apply(this, arguments);\n      }\n      return _validateAndRunHooks;\n    }()\n  }, {\n    key: \"_perAttributeValidators\",\n    value: function () {\n      var _perAttributeValidators2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this = this;\n        var validators;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              validators = [];\n              _.forIn(this.modelInstance.rawAttributes, function (rawAttribute, field) {\n                if (_this.options.skip.includes(field)) {\n                  return;\n                }\n                var value = _this.modelInstance.dataValues[field];\n                if (value instanceof Utils.SequelizeMethod) {\n                  return;\n                }\n                if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n                  _this._validateSchema(rawAttribute, field, value);\n                }\n                if (Object.prototype.hasOwnProperty.call(_this.modelInstance.validators, field)) {\n                  validators.push(_this._singleAttrValidate(value, field, rawAttribute.allowNull));\n                }\n              });\n              _context4.next = 4;\n              return Promise.all(validators);\n            case 4:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _perAttributeValidators() {\n        return _perAttributeValidators2.apply(this, arguments);\n      }\n      return _perAttributeValidators;\n    }()\n  }, {\n    key: \"_customValidators\",\n    value: function () {\n      var _customValidators2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this2 = this;\n        var validators;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              validators = [];\n              _.each(this.modelInstance.constructor.options.validate, function (validator2, validatorType) {\n                if (_this2.options.skip.includes(validatorType)) {\n                  return;\n                }\n                var valprom = _this2._invokeCustomValidator(validator2, validatorType).catch(function () {});\n                validators.push(valprom);\n              });\n              _context5.next = 4;\n              return Promise.all(validators);\n            case 4:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _customValidators() {\n        return _customValidators2.apply(this, arguments);\n      }\n      return _customValidators;\n    }()\n  }, {\n    key: \"_singleAttrValidate\",\n    value: function () {\n      var _singleAttrValidate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value, field, allowNull) {\n        var _this3 = this;\n        var validators;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!((value === null || value === void 0) && !allowNull)) {\n                _context6.next = 2;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 2:\n              validators = [];\n              _.forIn(this.modelInstance.validators[field], function (test, validatorType) {\n                if ([\"isUrl\", \"isURL\", \"isEmail\"].includes(validatorType)) {\n                  if (typeof test === \"object\" && test !== null && test.msg) {\n                    test = {\n                      msg: test.msg\n                    };\n                  } else if (test === true) {\n                    test = {};\n                  }\n                }\n                if (typeof test === \"function\") {\n                  validators.push(_this3._invokeCustomValidator(test, validatorType, true, value, field));\n                  return;\n                }\n                if (value === null || value === void 0) {\n                  return;\n                }\n                var validatorPromise = _this3._invokeBuiltinValidator(value, test, validatorType, field);\n                validatorPromise.catch(function () {});\n                validators.push(validatorPromise);\n              });\n              return _context6.abrupt(\"return\", Promise.all(validators.map(function (validator2) {\n                return validator2.catch(function (rejection) {\n                  var isBuiltIn = !!rejection.validatorName;\n                  _this3._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n                });\n              })));\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _singleAttrValidate(_x, _x2, _x3) {\n        return _singleAttrValidate2.apply(this, arguments);\n      }\n      return _singleAttrValidate;\n    }()\n  }, {\n    key: \"_invokeCustomValidator\",\n    value: function () {\n      var _invokeCustomValidator2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(validator2, validatorType, optAttrDefined, optValue, optField) {\n        var isAsync, validatorArity, asyncArity, errorKey, invokeArgs;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              isAsync = false;\n              validatorArity = validator2.length;\n              asyncArity = 1;\n              errorKey = validatorType;\n              if (optAttrDefined) {\n                asyncArity = 2;\n                invokeArgs = optValue;\n                errorKey = optField;\n              }\n              if (validatorArity === asyncArity) {\n                isAsync = true;\n              }\n              if (!isAsync) {\n                _context7.next = 20;\n                break;\n              }\n              _context7.prev = 7;\n              if (!optAttrDefined) {\n                _context7.next = 12;\n                break;\n              }\n              _context7.next = 11;\n              return promisify(validator2.bind(this.modelInstance, invokeArgs))();\n            case 11:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 12:\n              _context7.next = 14;\n              return promisify(validator2.bind(this.modelInstance))();\n            case 14:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 17:\n              _context7.prev = 17;\n              _context7.t0 = _context7[\"catch\"](7);\n              return _context7.abrupt(\"return\", this._pushError(false, errorKey, _context7.t0, optValue, validatorType));\n            case 20:\n              _context7.prev = 20;\n              _context7.next = 23;\n              return validator2.call(this.modelInstance, invokeArgs);\n            case 23:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 26:\n              _context7.prev = 26;\n              _context7.t1 = _context7[\"catch\"](20);\n              return _context7.abrupt(\"return\", this._pushError(false, errorKey, _context7.t1, optValue, validatorType));\n            case 29:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[7, 17], [20, 26]]);\n      }));\n      function _invokeCustomValidator(_x4, _x5, _x6, _x7, _x8) {\n        return _invokeCustomValidator2.apply(this, arguments);\n      }\n      return _invokeCustomValidator;\n    }()\n  }, {\n    key: \"_invokeBuiltinValidator\",\n    value: function () {\n      var _invokeBuiltinValidator2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(value, test, validatorType, field) {\n        var valueString, validatorArgs;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              valueString = String(value);\n              if (!(typeof validator[validatorType] !== \"function\")) {\n                _context8.next = 3;\n                break;\n              }\n              throw new Error(\"Invalid validator function: \".concat(validatorType));\n            case 3:\n              validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n              if (validator[validatorType].apply(validator, [valueString].concat(_toConsumableArray(validatorArgs)))) {\n                _context8.next = 6;\n                break;\n              }\n              throw Object.assign(new Error(test.msg || \"Validation \".concat(validatorType, \" on \").concat(field, \" failed\")), {\n                validatorName: validatorType,\n                validatorArgs: validatorArgs\n              });\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function _invokeBuiltinValidator(_x9, _x10, _x11, _x12) {\n        return _invokeBuiltinValidator2.apply(this, arguments);\n      }\n      return _invokeBuiltinValidator;\n    }()\n  }, {\n    key: \"_extractValidatorArgs\",\n    value: function _extractValidatorArgs(test, validatorType, field) {\n      var validatorArgs = test.args || test;\n      var isLocalizedValidator = typeof validatorArgs !== \"string\" && [\"isAlpha\", \"isAlphanumeric\", \"isMobilePhone\"].includes(validatorType);\n      if (!Array.isArray(validatorArgs)) {\n        if (validatorType === \"isImmutable\") {\n          validatorArgs = [validatorArgs, field, this.modelInstance];\n        } else if (isLocalizedValidator || validatorType === \"isIP\") {\n          validatorArgs = [];\n        } else {\n          validatorArgs = [validatorArgs];\n        }\n      } else {\n        validatorArgs = validatorArgs.slice(0);\n      }\n      return validatorArgs;\n    }\n  }, {\n    key: \"_validateSchema\",\n    value: function _validateSchema(rawAttribute, field, value) {\n      if (rawAttribute.allowNull === false && (value === null || value === void 0)) {\n        var association = Object.values(this.modelInstance.constructor.associations).find(function (association2) {\n          return association2 instanceof BelongsTo && association2.foreignKey === rawAttribute.fieldName;\n        });\n        if (!association || !this.modelInstance.get(association.associationAccessor)) {\n          var validators = this.modelInstance.validators[field];\n          var errMsg = _.get(validators, \"notNull.msg\", \"\".concat(this.modelInstance.constructor.name, \".\").concat(field, \" cannot be null\"));\n          this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, \"notNull Violation\", field, value, this.modelInstance, \"is_null\"));\n        }\n      }\n      if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n        if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n          this.errors.push(new sequelizeError.ValidationErrorItem(\"\".concat(field, \" cannot be an array or an object\"), \"string violation\", field, value, this.modelInstance, \"not_a_string\"));\n        }\n      }\n    }\n  }, {\n    key: \"_pushError\",\n    value: function _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n      var message = rawError.message || rawError || \"Validation error\";\n      var error = new sequelizeError.ValidationErrorItem(message, \"Validation error\", errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : void 0, isBuiltin ? fnArgs : void 0);\n      error[InstanceValidator.RAW_KEY_NAME] = rawError;\n      this.errors.push(error);\n    }\n  }]);\n  return InstanceValidator;\n}();\nInstanceValidator.RAW_KEY_NAME = \"original\";\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;","map":{"version":3,"names":["_","require","Utils","sequelizeError","DataTypes","BelongsTo","validator","_require","promisify","InstanceValidator","modelInstance","options","_classCallCheck","__spreadValues","hooks","fields","skip","difference","Object","keys","constructor","rawAttributes","errors","inProgress","_createClass","key","value","_validate2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","Error","Promise","all","_perAttributeValidators","_customValidators","length","ValidationError","stop","_validate","apply","arguments","_validate3","_callee2","_callee2$","_context2","_validateAndRunHooks","abrupt","sent","validate","_validateAndRunHooks2","_callee3","runHooks","newError","_callee3$","_context3","bind","t0","_perAttributeValidators2","_callee4","_this","validators","_callee4$","_context4","forIn","rawAttribute","field","includes","dataValues","SequelizeMethod","_autoGenerated","autoIncrement","_validateSchema","prototype","hasOwnProperty","call","push","_singleAttrValidate","allowNull","_customValidators2","_callee5","_this2","_callee5$","_context5","each","validator2","validatorType","valprom","_invokeCustomValidator","catch","_singleAttrValidate2","_callee6","_this3","_callee6$","_context6","test","msg","validatorPromise","_invokeBuiltinValidator","map","rejection","isBuiltIn","validatorName","_pushError","validatorArgs","_x","_x2","_x3","_invokeCustomValidator2","_callee7","optAttrDefined","optValue","optField","isAsync","validatorArity","asyncArity","errorKey","invokeArgs","_callee7$","_context7","t1","_x4","_x5","_x6","_x7","_x8","_invokeBuiltinValidator2","_callee8","valueString","_callee8$","_context8","String","concat","_extractValidatorArgs","_toConsumableArray","assign","_x9","_x10","_x11","_x12","args","isLocalizedValidator","Array","isArray","slice","association","values","associations","find","association2","foreignKey","fieldName","get","associationAccessor","errMsg","name","ValidationErrorItem","type","STRING","TEXT","CITEXT","isObject","Buffer","isBuffer","isBuiltin","rawError","fnName","fnArgs","message","error","RAW_KEY_NAME","module","exports","default"],"sources":["../src/instance-validator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst DataTypes = require('./data-types');\nconst BelongsTo = require('./associations/belongs-to');\nconst validator = require('./utils/validator-extras').validator;\nconst { promisify } = require('util');\n\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {object} options A dictionary with options.\n *\n * @private\n */\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = {\n      // assign defined and default options\n      hooks: true,\n      ...options\n    };\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n\n    this.options = options;\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     *\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n\n    this.inProgress = true;\n\n    await Promise.all([\n      this._perAttributeValidators(),\n      this._customValidators()\n    ]);\n\n    if (this.errors.length) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks('beforeValidate', this.modelInstance, this.options);\n\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks('validationFailed', this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n\n    await runHooks('afterValidate', this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {});\n\n      validators.push(valprom);\n    });\n\n    return await Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n  async _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return;\n    }\n\n    // Promisify each validator\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (['isUrl', 'isURL', 'isEmail'].includes(validatorType)) {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n\n      // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise);\n    });\n\n    return Promise\n      .all(validators.map(validator => validator.catch(rejection => {\n        const isBuiltIn = !!rejection.validatorName;\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      })));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n  async _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator.bind(this.modelInstance))();\n      } catch (e) {\n        return this._pushError(false, errorKey, e, optValue, validatorType);\n      }\n    }\n\n    try {\n      return await validator.call(this.modelInstance, invokeArgs);\n    } catch (e) {\n      return this._pushError(false, errorKey, e, optValue, validatorType);\n    }\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {object} An object with specific keys to invoke the validator.\n   */\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    // Cast value as string to pass new Validator.js string requirement\n    const valueString = String(value);\n    // check if Validator knows that kind of validation test\n    if (typeof validator[validatorType] !== 'function') {\n      throw new Error(`Invalid validator function: ${validatorType}`);\n    }\n\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n    }\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && ['isAlpha', 'isAlphanumeric', 'isMobilePhone'].includes(validatorType);\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          errMsg,\n          'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'is_null'\n        ));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          `${field} cannot be an array or an object`,\n          'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'not_a_string'\n        ));\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(\n      message,\n      'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n      errorKey,\n      value,\n      this.modelInstance,\n      fnName,\n      isBuiltin ? fnName : undefined,\n      isBuiltin ? fnArgs : undefined\n    );\n\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * The error key for arguments as passed by custom validators\n *\n * @type {string}\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = 'original';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}