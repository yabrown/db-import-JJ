{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\nvar subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(_x, _x2, _x3) {\n  return _computeSha256Hmac.apply(this, arguments);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nfunction _computeSha256Hmac() {\n  _computeSha256Hmac = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, stringToSign, encoding) {\n    var crypto, keyBytes, stringToSignBytes, cryptoKey, signature;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          crypto = getCrypto();\n          keyBytes = base64ToBytes(key);\n          stringToSignBytes = utf8ToBytes(stringToSign);\n          _context.next = 5;\n          return crypto.importKey(\"raw\", keyBytes, {\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-256\"\n            }\n          }, false, [\"sign\"]);\n        case 5:\n          cryptoKey = _context.sent;\n          _context.next = 8;\n          return crypto.sign({\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-256\"\n            }\n          }, cryptoKey, stringToSignBytes);\n        case 8:\n          signature = _context.sent;\n          _context.t0 = encoding;\n          _context.next = _context.t0 === \"base64\" ? 12 : _context.t0 === \"hex\" ? 13 : 14;\n          break;\n        case 12:\n          return _context.abrupt(\"return\", bufferToBase64(signature));\n        case 13:\n          return _context.abrupt(\"return\", bufferToHex(signature));\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _computeSha256Hmac.apply(this, arguments);\n}\nexport function computeSha256Hash(_x4, _x5) {\n  return _computeSha256Hash.apply(this, arguments);\n}\nfunction _computeSha256Hash() {\n  _computeSha256Hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(content, encoding) {\n    var contentBytes, digest;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          contentBytes = utf8ToBytes(content);\n          _context2.next = 3;\n          return getCrypto().digest({\n            name: \"SHA-256\"\n          }, contentBytes);\n        case 3:\n          digest = _context2.sent;\n          _context2.t0 = encoding;\n          _context2.next = _context2.t0 === \"base64\" ? 7 : _context2.t0 === \"hex\" ? 8 : 9;\n          break;\n        case 7:\n          return _context2.abrupt(\"return\", bufferToBase64(digest));\n        case 8:\n          return _context2.abrupt(\"return\", bufferToHex(digest));\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _computeSha256Hash.apply(this, arguments);\n}","map":{"version":3,"names":["base64ToBytes","bufferToBase64","bufferToHex","utf8ToBytes","subtleCrypto","getCrypto","self","crypto","subtle","Error","computeSha256Hmac","_x","_x2","_x3","_computeSha256Hmac","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","key","stringToSign","encoding","keyBytes","stringToSignBytes","cryptoKey","signature","wrap","_callee$","_context","prev","next","importKey","name","hash","sent","sign","t0","abrupt","stop","computeSha256Hash","_x4","_x5","_computeSha256Hash","_callee2","content","contentBytes","digest","_callee2$","_context2"],"sources":["../../src/sha256.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\n\n// stubs for browser self.crypto\ninterface JsonWebKey {}\ninterface CryptoKey {}\ntype KeyUsage =\n  | \"decrypt\"\n  | \"deriveBits\"\n  | \"deriveKey\"\n  | \"encrypt\"\n  | \"sign\"\n  | \"unwrapKey\"\n  | \"verify\"\n  | \"wrapKey\";\ninterface Algorithm {\n  name: string;\n}\ninterface SubtleCrypto {\n  importKey(\n    format: string,\n    keyData: JsonWebKey,\n    algorithm: HmacImportParams,\n    extractable: boolean,\n    usage: KeyUsage[]\n  ): Promise<CryptoKey>;\n  sign(\n    algorithm: HmacImportParams,\n    key: CryptoKey,\n    data: ArrayBufferView | ArrayBuffer\n  ): Promise<ArrayBuffer>;\n  digest(algorithm: Algorithm, data: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer>;\n}\ninterface Crypto {\n  readonly subtle: SubtleCrypto;\n  getRandomValues<T extends ArrayBufferView | null>(array: T): T;\n}\ndeclare const self: {\n  crypto: Crypto;\n};\ninterface HmacImportParams {\n  name: string;\n  hash: Algorithm;\n  length?: number;\n}\n\nlet subtleCrypto: SubtleCrypto | undefined;\n\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto(): SubtleCrypto {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(\n  key: string,\n  stringToSign: string,\n  encoding: \"base64\" | \"hex\"\n): Promise<string> {\n  const crypto = getCrypto();\n  const keyBytes = base64ToBytes(key);\n  const stringToSignBytes = utf8ToBytes(stringToSign);\n\n  const cryptoKey = await crypto.importKey(\n    \"raw\",\n    keyBytes,\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    false,\n    [\"sign\"]\n  );\n  const signature = await crypto.sign(\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    cryptoKey,\n    stringToSignBytes\n  );\n\n  switch (encoding) {\n    case \"base64\":\n      return bufferToBase64(signature);\n    case \"hex\":\n      return bufferToHex(signature);\n  }\n}\n\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(\n  content: string,\n  encoding: \"base64\" | \"hex\"\n): Promise<string> {\n  const contentBytes = utf8ToBytes(content);\n  const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n\n  switch (encoding) {\n    case \"base64\":\n      return bufferToBase64(digest);\n    case \"hex\":\n      return bufferToHex(digest);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}