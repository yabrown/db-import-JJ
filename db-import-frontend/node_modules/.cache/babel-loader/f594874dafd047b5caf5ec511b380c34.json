{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nvar AuthenticationHeaderParser = /** @class */function () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    }\n    // If neither header is present, throw missing headers error\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n        key = _a[0],\n        value = _a[1];\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n  return AuthenticationHeaderParser;\n}();\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["AuthenticationHeaderParser","headers","prototype","getShrNonce","authenticationInfo","HeaderNames","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","ClientConfigurationError","createInvalidAuthenticationHeaderError","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","createMissingNonceAuthenticationHeadersError","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","_a","key","value","unescape","replace","Constants","EMPTY_STRING"],"sources":["../../src/request/AuthenticationHeaderParser.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string,\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns \n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges = this.parseChallenges<AuthenticationInfoChallenges>(authenticationInfo);\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges = this.parseChallenges<WWWAuthenticateChallenges>(wwwAuthenticate);     \n            if (wwwAuthenticateChallenges.nonce){\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n        }\n\n        // If neither header is present, throw missing headers error\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header \n     * @returns \n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [ key, value ] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n        });\n\n        return challengeMap;\n    }\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAaH;;;AAGG;AACH,IAAAA,0BAAA;EAGI,SAAAA,2BAAYC,OAA+B;IACvC,IAAI,CAACA,OAAO,GAAGA,OAAO;;EAG1B;;;AAGG;EACHD,0BAAA,CAAAE,SAAA,CAAAC,WAAW,GAAX;;IAEI,IAAMC,kBAAkB,GAAG,IAAI,CAACH,OAAO,CAACI,WAAW,CAACC,kBAAkB,CAAC;IACvE,IAAIF,kBAAkB,EAAE;MACpB,IAAMG,4BAA4B,GAAG,IAAI,CAACC,eAAe,CAA+BJ,kBAAkB,CAAC;MAC3G,IAAIG,4BAA4B,CAACE,SAAS,EAAE;QACxC,OAAOF,4BAA4B,CAACE,SAAS;MAChD;MACD,MAAMC,wBAAwB,CAACC,sCAAsC,CAACN,WAAW,CAACC,kBAAkB,EAAE,iCAAiC,CAAC;IAC3I;;IAGD,IAAMM,eAAe,GAAG,IAAI,CAACX,OAAO,CAACI,WAAW,CAACQ,eAAe,CAAC;IACjE,IAAID,eAAe,EAAE;MACjB,IAAME,yBAAyB,GAAG,IAAI,CAACN,eAAe,CAA4BI,eAAe,CAAC;MAClG,IAAIE,yBAAyB,CAACC,KAAK,EAAC;QAChC,OAAOD,yBAAyB,CAACC,KAAK;MACzC;MACD,MAAML,wBAAwB,CAACC,sCAAsC,CAACN,WAAW,CAACQ,eAAe,EAAE,6BAA6B,CAAC;IACpI;;IAGD,MAAMH,wBAAwB,CAACM,4CAA4C,EAAE;GAChF;EAED;;;;AAIG;EACKhB,0BAAe,CAAAE,SAAA,CAAAM,eAAA,GAAvB,UAA2BS,MAAc;IACrC,IAAMC,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;IAC3C,IAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACH,eAAe,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAChE,IAAMC,YAAY,GAAG,EAAO;IAE5BH,UAAU,CAACI,OAAO,CAAC,UAACC,SAAiB;MAC3B,IAAAC,EAAiB,GAAAD,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;QAAnCK,GAAG,GAAAD,EAAA;QAAEE,KAAK,GAAAF,EAAA,GAAyB;;MAE3CH,YAAY,CAACI,GAAG,CAAC,GAAGE,QAAQ,CAACD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAEC,SAAS,CAACC,YAAY,CAAC,CAAC;IACjF,CAAC,CAAC;IAEF,OAAOT,YAAY;GACtB;EACL,OAACvB,0BAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}