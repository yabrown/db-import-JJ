{"ast":null,"code":"'use strict';\n\nmodule.exports = exports;\nvar url = require('url');\nvar fs = require('fs');\nvar path = require('path');\nmodule.exports.detect = function (opts, config) {\n  var to = opts.hosted_path;\n  var uri = url.parse(to);\n  config.prefix = !uri.pathname || uri.pathname === '/' ? '' : uri.pathname.replace('/', '');\n  if (opts.bucket && opts.region) {\n    config.bucket = opts.bucket;\n    config.region = opts.region;\n    config.endpoint = opts.host;\n    config.s3ForcePathStyle = opts.s3ForcePathStyle;\n  } else {\n    var parts = uri.hostname.split('.s3');\n    var bucket = parts[0];\n    if (!bucket) {\n      return;\n    }\n    if (!config.bucket) {\n      config.bucket = bucket;\n    }\n    if (!config.region) {\n      var region = parts[1].slice(1).split('.')[0];\n      if (region === 'amazonaws') {\n        config.region = 'us-east-1';\n      } else {\n        config.region = region;\n      }\n    }\n  }\n};\nmodule.exports.get_s3 = function (config) {\n  if (process.env.node_pre_gyp_mock_s3) {\n    // here we're mocking. node_pre_gyp_mock_s3 is the scratch directory\n    // for the mock code.\n    var AWSMock = require('mock-aws-s3');\n    var os = require('os');\n    AWSMock.config.basePath = \"\".concat(os.tmpdir(), \"/mock\");\n    var _s = AWSMock.S3();\n\n    // wrapped callback maker. fs calls return code of ENOENT but AWS.S3 returns\n    // NotFound.\n    var wcb = function wcb(fn) {\n      return function (err) {\n        if (err && err.code === 'ENOENT') {\n          err.code = 'NotFound';\n        }\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        return fn.apply(void 0, [err].concat(args));\n      };\n    };\n    return {\n      listObjects: function listObjects(params, callback) {\n        return _s.listObjects(params, wcb(callback));\n      },\n      headObject: function headObject(params, callback) {\n        return _s.headObject(params, wcb(callback));\n      },\n      deleteObject: function deleteObject(params, callback) {\n        return _s.deleteObject(params, wcb(callback));\n      },\n      putObject: function putObject(params, callback) {\n        return _s.putObject(params, wcb(callback));\n      }\n    };\n  }\n\n  // if not mocking then setup real s3.\n  var AWS = require('aws-sdk');\n  AWS.config.update(config);\n  var s3 = new AWS.S3();\n\n  // need to change if additional options need to be specified.\n  return {\n    listObjects: function listObjects(params, callback) {\n      return s3.listObjects(params, callback);\n    },\n    headObject: function headObject(params, callback) {\n      return s3.headObject(params, callback);\n    },\n    deleteObject: function deleteObject(params, callback) {\n      return s3.deleteObject(params, callback);\n    },\n    putObject: function putObject(params, callback) {\n      return s3.putObject(params, callback);\n    }\n  };\n};\n\n//\n// function to get the mocking control function. if not mocking it returns a no-op.\n//\n// if mocking it sets up the mock http interceptors that use the mocked s3 file system\n// to fulfill reponses.\nmodule.exports.get_mockS3Http = function () {\n  var mock_s3 = false;\n  if (!process.env.node_pre_gyp_mock_s3) {\n    return function () {\n      return mock_s3;\n    };\n  }\n  var nock = require('nock');\n  // the bucket used for testing, as addressed by https.\n  var host = 'https://mapbox-node-pre-gyp-public-testing-bucket.s3.us-east-1.amazonaws.com';\n  var mockDir = process.env.node_pre_gyp_mock_s3 + '/mapbox-node-pre-gyp-public-testing-bucket';\n\n  // function to setup interceptors. they are \"turned off\" by setting mock_s3 to false.\n  var mock_http = function mock_http() {\n    // eslint-disable-next-line no-unused-vars\n    function get(uri, requestBody) {\n      var filepath = path.join(mockDir, uri.replace('%2B', '+'));\n      try {\n        fs.accessSync(filepath, fs.constants.R_OK);\n      } catch (e) {\n        return [404, 'not found\\n'];\n      }\n\n      // the mock s3 functions just write to disk, so just read from it.\n      return [200, fs.createReadStream(filepath)];\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    return nock(host).persist().get(function () {\n      return mock_s3;\n    }) // mock any uri for s3 when true\n    .reply(get);\n  };\n\n  // setup interceptors. they check the mock_s3 flag to determine whether to intercept.\n  mock_http(nock, host, mockDir);\n  // function to turn matching all requests to s3 on/off.\n  var mockS3Http = function mockS3Http(action) {\n    var previous = mock_s3;\n    if (action === 'off') {\n      mock_s3 = false;\n    } else if (action === 'on') {\n      mock_s3 = true;\n    } else if (action !== 'get') {\n      throw new Error(\"illegal action for setMockHttp \".concat(action));\n    }\n    return previous;\n  };\n\n  // call mockS3Http with the argument\n  // - 'on' - turn it on\n  // - 'off' - turn it off (used by fetch.test.js so it doesn't interfere with redirects)\n  // - 'get' - return true or false for 'on' or 'off'\n  return mockS3Http;\n};","map":{"version":3,"names":["module","exports","url","require","fs","path","detect","opts","config","to","hosted_path","uri","parse","prefix","pathname","replace","bucket","region","endpoint","host","s3ForcePathStyle","parts","hostname","split","slice","get_s3","process","env","node_pre_gyp_mock_s3","AWSMock","os","basePath","concat","tmpdir","s3","S3","wcb","fn","err","code","_len","arguments","length","args","Array","_key","apply","listObjects","params","callback","headObject","deleteObject","putObject","AWS","update","get_mockS3Http","mock_s3","nock","mockDir","mock_http","get","requestBody","filepath","join","accessSync","constants","R_OK","e","createReadStream","persist","reply","mockS3Http","action","previous","Error"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/@mapbox/node-pre-gyp/lib/util/s3_setup.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports;\n\nconst url = require('url');\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports.detect = function(opts, config) {\n  const to = opts.hosted_path;\n  const uri = url.parse(to);\n  config.prefix = (!uri.pathname || uri.pathname === '/') ? '' : uri.pathname.replace('/', '');\n  if (opts.bucket && opts.region) {\n    config.bucket = opts.bucket;\n    config.region = opts.region;\n    config.endpoint = opts.host;\n    config.s3ForcePathStyle = opts.s3ForcePathStyle;\n  } else {\n    const parts = uri.hostname.split('.s3');\n    const bucket = parts[0];\n    if (!bucket) {\n      return;\n    }\n    if (!config.bucket) {\n      config.bucket = bucket;\n    }\n    if (!config.region) {\n      const region = parts[1].slice(1).split('.')[0];\n      if (region === 'amazonaws') {\n        config.region = 'us-east-1';\n      } else {\n        config.region = region;\n      }\n    }\n  }\n};\n\nmodule.exports.get_s3 = function(config) {\n\n  if (process.env.node_pre_gyp_mock_s3) {\n    // here we're mocking. node_pre_gyp_mock_s3 is the scratch directory\n    // for the mock code.\n    const AWSMock = require('mock-aws-s3');\n    const os = require('os');\n\n    AWSMock.config.basePath = `${os.tmpdir()}/mock`;\n\n    const s3 = AWSMock.S3();\n\n    // wrapped callback maker. fs calls return code of ENOENT but AWS.S3 returns\n    // NotFound.\n    const wcb = (fn) => (err, ...args) => {\n      if (err && err.code === 'ENOENT') {\n        err.code = 'NotFound';\n      }\n      return fn(err, ...args);\n    };\n\n    return {\n      listObjects(params, callback) {\n        return s3.listObjects(params, wcb(callback));\n      },\n      headObject(params, callback) {\n        return s3.headObject(params, wcb(callback));\n      },\n      deleteObject(params, callback) {\n        return s3.deleteObject(params, wcb(callback));\n      },\n      putObject(params, callback) {\n        return s3.putObject(params, wcb(callback));\n      }\n    };\n  }\n\n  // if not mocking then setup real s3.\n  const AWS = require('aws-sdk');\n\n  AWS.config.update(config);\n  const s3 = new AWS.S3();\n\n  // need to change if additional options need to be specified.\n  return {\n    listObjects(params, callback) {\n      return s3.listObjects(params, callback);\n    },\n    headObject(params, callback) {\n      return s3.headObject(params, callback);\n    },\n    deleteObject(params, callback) {\n      return s3.deleteObject(params, callback);\n    },\n    putObject(params, callback) {\n      return s3.putObject(params, callback);\n    }\n  };\n\n\n\n};\n\n//\n// function to get the mocking control function. if not mocking it returns a no-op.\n//\n// if mocking it sets up the mock http interceptors that use the mocked s3 file system\n// to fulfill reponses.\nmodule.exports.get_mockS3Http = function() {\n  let mock_s3 = false;\n  if (!process.env.node_pre_gyp_mock_s3) {\n    return () => mock_s3;\n  }\n\n  const nock = require('nock');\n  // the bucket used for testing, as addressed by https.\n  const host = 'https://mapbox-node-pre-gyp-public-testing-bucket.s3.us-east-1.amazonaws.com';\n  const mockDir = process.env.node_pre_gyp_mock_s3 + '/mapbox-node-pre-gyp-public-testing-bucket';\n\n  // function to setup interceptors. they are \"turned off\" by setting mock_s3 to false.\n  const mock_http = () => {\n    // eslint-disable-next-line no-unused-vars\n    function get(uri, requestBody) {\n      const filepath = path.join(mockDir, uri.replace('%2B', '+'));\n\n      try {\n        fs.accessSync(filepath, fs.constants.R_OK);\n      } catch (e) {\n        return [404, 'not found\\n'];\n      }\n\n      // the mock s3 functions just write to disk, so just read from it.\n      return [200, fs.createReadStream(filepath)];\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    return nock(host)\n      .persist()\n      .get(() => mock_s3) // mock any uri for s3 when true\n      .reply(get);\n  };\n\n  // setup interceptors. they check the mock_s3 flag to determine whether to intercept.\n  mock_http(nock, host, mockDir);\n  // function to turn matching all requests to s3 on/off.\n  const mockS3Http = (action) => {\n    const previous = mock_s3;\n    if (action === 'off') {\n      mock_s3 = false;\n    } else if (action === 'on') {\n      mock_s3 = true;\n    } else if (action !== 'get') {\n      throw new Error(`illegal action for setMockHttp ${action}`);\n    }\n    return previous;\n  };\n\n  // call mockS3Http with the argument\n  // - 'on' - turn it on\n  // - 'off' - turn it off (used by fetch.test.js so it doesn't interfere with redirects)\n  // - 'get' - return true or false for 'on' or 'off'\n  return mockS3Http;\n};\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}