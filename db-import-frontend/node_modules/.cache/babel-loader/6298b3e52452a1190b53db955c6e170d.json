{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getInstrumenter } from \"./instrumenter\";\nimport { knownContextKeys } from \"./tracingContext\";\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options) {\n  var namespace = options.namespace,\n    packageName = options.packageName,\n    packageVersion = options.packageVersion;\n  function startSpan(name, operationOptions, spanOptions) {\n    var _a;\n    var startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), {\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext\n    }));\n    var tracingContext = startSpanResult.tracingContext;\n    var span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    var updatedOptions = Object.assign({}, operationOptions, {\n      tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), {\n        tracingContext: tracingContext\n      })\n    });\n    return {\n      span: span,\n      updatedOptions: updatedOptions\n    };\n  }\n  function withSpan(_x, _x2, _x3, _x4) {\n    return _withSpan.apply(this, arguments);\n  }\n  function _withSpan() {\n    _withSpan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, operationOptions, callback, spanOptions) {\n      var _startSpan, span, updatedOptions, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _startSpan = startSpan(name, operationOptions, spanOptions), span = _startSpan.span, updatedOptions = _startSpan.updatedOptions;\n            _context.prev = 1;\n            _context.next = 4;\n            return withContext(updatedOptions.tracingOptions.tracingContext, function () {\n              return Promise.resolve(callback(updatedOptions, span));\n            });\n          case 4:\n            result = _context.sent;\n            span.setStatus({\n              status: \"success\"\n            });\n            return _context.abrupt(\"return\", result);\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            span.setStatus({\n              status: \"error\",\n              error: _context.t0\n            });\n            throw _context.t0;\n          case 13:\n            _context.prev = 13;\n            span.end();\n            return _context.finish(13);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 9, 13, 16]]);\n    }));\n    return _withSpan.apply(this, arguments);\n  }\n  function withContext(context, callback) {\n    var _getInstrumenter;\n    for (var _len = arguments.length, callbackArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      callbackArgs[_key - 2] = arguments[_key];\n    }\n    return (_getInstrumenter = getInstrumenter()).withContext.apply(_getInstrumenter, [context, callback].concat(callbackArgs));\n  }\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader) {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext) {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n  return {\n    startSpan: startSpan,\n    withSpan: withSpan,\n    withContext: withContext,\n    parseTraceparentHeader: parseTraceparentHeader,\n    createRequestHeaders: createRequestHeaders\n  };\n}","map":{"version":3,"names":["getInstrumenter","knownContextKeys","createTracingClient","options","namespace","packageName","packageVersion","startSpan","name","operationOptions","spanOptions","startSpanResult","Object","assign","tracingContext","_a","tracingOptions","span","getValue","setValue","setAttribute","updatedOptions","withSpan","_x","_x2","_x3","_x4","_withSpan","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","callback","_startSpan","result","wrap","_callee$","_context","prev","next","withContext","Promise","resolve","sent","setStatus","status","abrupt","t0","error","end","finish","stop","context","_getInstrumenter","_len","length","callbackArgs","Array","_key","concat","parseTraceparentHeader","traceparentHeader","createRequestHeaders"],"sources":["../../src/tracingClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  OptionsWithTracingContext,\n  Resolved,\n  TracingClient,\n  TracingClientOptions,\n  TracingContext,\n  TracingSpan,\n  TracingSpanOptions,\n} from \"./interfaces\";\nimport { getInstrumenter } from \"./instrumenter\";\nimport { knownContextKeys } from \"./tracingContext\";\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options: TracingClientOptions): TracingClient {\n  const { namespace, packageName, packageVersion } = options;\n\n  function startSpan<Options extends { tracingOptions?: OperationTracingOptions }>(\n    name: string,\n    operationOptions?: Options,\n    spanOptions?: TracingSpanOptions\n  ): {\n    span: TracingSpan;\n    updatedOptions: OptionsWithTracingContext<Options>;\n  } {\n    const startSpanResult = getInstrumenter().startSpan(name, {\n      ...spanOptions,\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: operationOptions?.tracingOptions?.tracingContext,\n    });\n    let tracingContext = startSpanResult.tracingContext;\n    const span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    const updatedOptions: OptionsWithTracingContext<Options> = Object.assign({}, operationOptions, {\n      tracingOptions: { ...operationOptions?.tracingOptions, tracingContext },\n    });\n\n    return {\n      span,\n      updatedOptions,\n    };\n  }\n\n  async function withSpan<\n    Options extends { tracingOptions?: OperationTracingOptions },\n    Callback extends (\n      updatedOptions: Options,\n      span: Omit<TracingSpan, \"end\">\n    ) => ReturnType<Callback>\n  >(\n    name: string,\n    operationOptions: Options,\n    callback: Callback,\n    spanOptions?: TracingSpanOptions\n  ): Promise<Resolved<ReturnType<Callback>>> {\n    const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n    try {\n      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () =>\n        Promise.resolve(callback(updatedOptions, span))\n      );\n      span.setStatus({ status: \"success\" });\n      return result as ReturnType<typeof withSpan>;\n    } catch (err: any) {\n      span.setStatus({ status: \"error\", error: err });\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n\n  function withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>\n  >(\n    context: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    return getInstrumenter().withContext(context, callback, ...callbackArgs);\n  }\n\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader: string): TracingContext | undefined {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext?: TracingContext): Record<string, string> {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n\n  return {\n    startSpan,\n    withSpan,\n    withContext,\n    parseTraceparentHeader,\n    createRequestHeaders,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}