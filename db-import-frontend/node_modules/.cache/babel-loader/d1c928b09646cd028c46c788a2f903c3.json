{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createAbortablePromise } from \"./createAbortablePromise\";\nvar StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n  var token;\n  var _ref = options !== null && options !== void 0 ? options : {},\n    abortSignal = _ref.abortSignal,\n    abortErrorMsg = _ref.abortErrorMsg;\n  return createAbortablePromise(function (resolve) {\n    token = setTimeout(resolve, timeInMs);\n  }, {\n    cleanupBeforeAbort: function cleanupBeforeAbort() {\n      return clearTimeout(token);\n    },\n    abortSignal: abortSignal,\n    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage\n  });\n}","map":{"version":3,"names":["createAbortablePromise","StandardAbortMessage","delay","timeInMs","options","token","_ref","abortSignal","abortErrorMsg","resolve","setTimeout","cleanupBeforeAbort","clearTimeout"],"sources":["../../src/delay.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { createAbortablePromise } from \"./createAbortablePromise\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    }\n  );\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,sBAAsB,QAAQ,0BAA0B;AAEjE,IAAMC,oBAAoB,GAAG,wBAAwB;AAgBrD;;;;;;AAMA,OAAM,SAAUC,KAAKA,CAACC,QAAgB,EAAEC,OAAsB;EAC5D,IAAIC,KAAoC;EACxC,IAAAC,IAAA,GAAuCF,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAA5CG,WAAW,GAAAD,IAAA,CAAXC,WAAW;IAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;EAClC,OAAOR,sBAAsB,CAC3B,UAACS,OAAO,EAAI;IACVJ,KAAK,GAAGK,UAAU,CAACD,OAAO,EAAEN,QAAQ,CAAC;EACvC,CAAC,EACD;IACEQ,kBAAkB,EAAE,SAAAA,mBAAA;MAAA,OAAMC,YAAY,CAACP,KAAK,CAAC;IAAA;IAC7CE,WAAW,EAAXA,WAAW;IACXC,aAAa,EAAEA,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAIP;GACjC,CACF;AACH"},"metadata":{},"sourceType":"module"}