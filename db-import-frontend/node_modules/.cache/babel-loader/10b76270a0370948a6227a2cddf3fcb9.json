{"ast":null,"code":"'use strict';\n\nvar mapValues = require('lodash/mapValues');\nvar querystring = require('querystring');\nvar common = require('./common');\nmodule.exports = function matchBody(options, spec, body) {\n  if (spec instanceof RegExp) {\n    return spec.test(body);\n  }\n  if (Buffer.isBuffer(spec)) {\n    var encoding = common.isUtf8Representable(spec) ? 'utf8' : 'hex';\n    spec = spec.toString(encoding);\n  }\n  var contentType = (options.headers && (options.headers['Content-Type'] || options.headers['content-type']) || '').toString();\n  var isMultipart = contentType.includes('multipart');\n  var isUrlencoded = contentType.includes('application/x-www-form-urlencoded');\n\n  // try to transform body to json\n  var json;\n  if (typeof spec === 'object' || typeof spec === 'function') {\n    try {\n      json = JSON.parse(body);\n    } catch (err) {\n      // not a valid JSON string\n    }\n    if (json !== undefined) {\n      body = json;\n    } else if (isUrlencoded) {\n      body = querystring.parse(body);\n    }\n  }\n  if (typeof spec === 'function') {\n    return spec.call(options, body);\n  }\n\n  // strip line endings from both so that we get a match no matter what OS we are running on\n  // if Content-Type does not contain 'multipart'\n  if (!isMultipart && typeof body === 'string') {\n    body = body.replace(/\\r?\\n|\\r/g, '');\n  }\n  if (!isMultipart && typeof spec === 'string') {\n    spec = spec.replace(/\\r?\\n|\\r/g, '');\n  }\n\n  // Because the nature of URL encoding, all the values in the body must be cast to strings.\n  // dataEqual does strict checking, so we have to cast the non-regexp values in the spec too.\n  if (isUrlencoded) {\n    spec = mapValuesDeep(spec, function (val) {\n      return val instanceof RegExp ? val : \"\".concat(val);\n    });\n  }\n  return common.dataEqual(spec, body);\n};\n\n/**\n * Based on lodash issue discussion\n * https://github.com/lodash/lodash/issues/1244\n */\nfunction mapValuesDeep(obj, cb) {\n  if (Array.isArray(obj)) {\n    return obj.map(function (v) {\n      return mapValuesDeep(v, cb);\n    });\n  }\n  if (common.isPlainObject(obj)) {\n    return mapValues(obj, function (v) {\n      return mapValuesDeep(v, cb);\n    });\n  }\n  return cb(obj);\n}","map":{"version":3,"names":["mapValues","require","querystring","common","module","exports","matchBody","options","spec","body","RegExp","test","Buffer","isBuffer","encoding","isUtf8Representable","toString","contentType","headers","isMultipart","includes","isUrlencoded","json","JSON","parse","err","undefined","call","replace","mapValuesDeep","val","concat","dataEqual","obj","cb","Array","isArray","map","v","isPlainObject"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/nock/lib/match_body.js"],"sourcesContent":["'use strict'\n\nconst mapValues = require('lodash/mapValues')\nconst querystring = require('querystring')\n\nconst common = require('./common')\n\nmodule.exports = function matchBody(options, spec, body) {\n  if (spec instanceof RegExp) {\n    return spec.test(body)\n  }\n\n  if (Buffer.isBuffer(spec)) {\n    const encoding = common.isUtf8Representable(spec) ? 'utf8' : 'hex'\n    spec = spec.toString(encoding)\n  }\n\n  const contentType = (\n    (options.headers &&\n      (options.headers['Content-Type'] || options.headers['content-type'])) ||\n    ''\n  ).toString()\n\n  const isMultipart = contentType.includes('multipart')\n  const isUrlencoded = contentType.includes('application/x-www-form-urlencoded')\n\n  // try to transform body to json\n  let json\n  if (typeof spec === 'object' || typeof spec === 'function') {\n    try {\n      json = JSON.parse(body)\n    } catch (err) {\n      // not a valid JSON string\n    }\n    if (json !== undefined) {\n      body = json\n    } else if (isUrlencoded) {\n      body = querystring.parse(body)\n    }\n  }\n\n  if (typeof spec === 'function') {\n    return spec.call(options, body)\n  }\n\n  // strip line endings from both so that we get a match no matter what OS we are running on\n  // if Content-Type does not contain 'multipart'\n  if (!isMultipart && typeof body === 'string') {\n    body = body.replace(/\\r?\\n|\\r/g, '')\n  }\n\n  if (!isMultipart && typeof spec === 'string') {\n    spec = spec.replace(/\\r?\\n|\\r/g, '')\n  }\n\n  // Because the nature of URL encoding, all the values in the body must be cast to strings.\n  // dataEqual does strict checking, so we have to cast the non-regexp values in the spec too.\n  if (isUrlencoded) {\n    spec = mapValuesDeep(spec, val => (val instanceof RegExp ? val : `${val}`))\n  }\n\n  return common.dataEqual(spec, body)\n}\n\n/**\n * Based on lodash issue discussion\n * https://github.com/lodash/lodash/issues/1244\n */\nfunction mapValuesDeep(obj, cb) {\n  if (Array.isArray(obj)) {\n    return obj.map(v => mapValuesDeep(v, cb))\n  }\n  if (common.isPlainObject(obj)) {\n    return mapValues(obj, v => mapValuesDeep(v, cb))\n  }\n  return cb(obj)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}