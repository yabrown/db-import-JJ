{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\nvar RequestValidator = /** @class */function () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    return eQParams;\n  };\n  return RequestValidator;\n}();\nexport { RequestValidator };","map":{"version":3,"names":["RequestValidator","validateRedirectUri","redirectUri","StringUtils","isEmpty","ClientConfigurationError","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","PromptValue","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","CodeChallengeMethodValues","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","key"],"sources":["../../src/request/RequestValidator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\nimport { StringDict } from \"../utils/MsalTypes\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string) : void {\n        if (StringUtils.isEmpty(redirectUri)) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string) : void {\n        const promptValues = [];\n\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n\n        if (promptValues.indexOf(prompt) < 0) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n\n    static validateClaims(claims: string) : void {\n        try {\n            JSON.parse(claims);\n        } catch(e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n\n    /**\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\n        if (!eQParams) {\n            return {};\n        }\n\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n\n        return eQParams;\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAOH;;AAEG;AACH,IAAAA,gBAAA;EAAA,SAAAA,iBAAA,G;EAEI;;;AAGG;EACIA,gBAAmB,CAAAC,mBAAA,GAA1B,UAA2BC,WAAmB;IAC1C,IAAIC,WAAW,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE;MAClC,MAAMG,wBAAwB,CAACC,2BAA2B,EAAE;IAC/D;GACJ;EAED;;;AAGG;EACIN,gBAAc,CAAAO,cAAA,GAArB,UAAsBC,MAAc;IAChC,IAAMC,YAAY,GAAG,EAAE;IAEvB,KAAK,IAAMC,KAAK,IAAIC,WAAW,EAAE;MAC7BF,YAAY,CAACG,IAAI,CAACD,WAAW,CAACD,KAAK,CAAC,CAAC;IACxC;IAED,IAAID,YAAY,CAACI,OAAO,CAACL,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAMH,wBAAwB,CAACS,wBAAwB,CAACN,MAAM,CAAC;IAClE;GACJ;EAEMR,gBAAc,CAAAe,cAAA,GAArB,UAAsBC,MAAc;IAChC,IAAI;MACAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;IACrB,EAAC,OAAMG,CAAC,EAAE;MACP,MAAMd,wBAAwB,CAACe,+BAA+B,EAAE;IACnE;GACJ;EAED;;;;AAIG;EACIpB,gBAAA,CAAAqB,2BAA2B,GAAlC,UAAmCC,aAAqB,EAAEC,mBAA2B;IACjF,IAAIpB,WAAW,CAACC,OAAO,CAACkB,aAAa,CAAC,IAAInB,WAAW,CAACC,OAAO,CAACmB,mBAAmB,CAAC,EAAE;MAChF,MAAMlB,wBAAwB,CAACmB,qCAAqC,EAAE;IACzE,OAAM;MACH,IAAI,CAACC,2BAA2B,CAACF,mBAAmB,CAAC;IACxD;GACJ;EAED;;;AAGG;EACIvB,gBAA2B,CAAAyB,2BAAA,GAAlC,UAAmCF,mBAA2B;IAC1D,IACI,CACIG,yBAAyB,CAACC,KAAK,EAC/BD,yBAAyB,CAACE,IAAI,CACjC,CAACf,OAAO,CAACU,mBAAmB,CAAC,GAAG,CAAC,EACpC;MACE,MAAMlB,wBAAwB,CAACwB,qCAAqC,EAAE;IACzE;GACJ;EAED;;;AAGG;EACI7B,gBAAA,CAAA8B,gBAAgB,GAAvB,UAAwBC,QAAoB,EAAEC,WAAgC;IAC1E,IAAI,CAACD,QAAQ,EAAE;MACX,OAAO,EAAE;IACZ;;IAGDC,WAAW,CAACC,OAAO,CAAC,UAACvB,KAAK,EAAEwB,GAAG;MAC3B,IAAIH,QAAQ,CAACG,GAAG,CAAC,EAAE;QACf,OAAOH,QAAQ,CAACG,GAAG,CAAC;MACvB;IACL,CAAC,CAAC;IAEF,OAAOH,QAAQ;GAClB;EACL,OAAC/B,gBAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}