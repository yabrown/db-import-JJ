{"ast":null,"code":"/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n  // 'access',\n  'accommodation', 'adulthood', 'advertising', 'advice', 'aggression', 'aid', 'air', 'aircraft', 'alcohol', 'anger', 'applause', 'arithmetic',\n  // 'art',\n  'assistance', 'athletics',\n  // 'attention',\n\n  'bacon', 'baggage',\n  // 'ballet',\n  // 'beauty',\n  'beef',\n  // 'beer',\n  // 'behavior',\n  'biology',\n  // 'billiards',\n  'blood', 'botany',\n  // 'bowels',\n  'bread',\n  // 'business',\n  'butter', 'carbon', 'cardboard', 'cash', 'chalk', 'chaos', 'chess', 'crossroads', 'countryside',\n  // 'damage',\n  'dancing',\n  // 'danger',\n  'deer',\n  // 'delight',\n  // 'dessert',\n  'dignity', 'dirt',\n  // 'distribution',\n  'dust', 'economics', 'education', 'electricity',\n  // 'employment',\n  // 'energy',\n  'engineering', 'enjoyment',\n  // 'entertainment',\n  'envy', 'equipment', 'ethics', 'evidence', 'evolution',\n  // 'failure',\n  // 'faith',\n  'fame', 'fiction',\n  // 'fish',\n  'flour', 'flu', 'food',\n  // 'freedom',\n  // 'fruit',\n  'fuel', 'fun',\n  // 'funeral',\n  'furniture', 'gallows', 'garbage', 'garlic',\n  // 'gas',\n  'genetics',\n  // 'glass',\n  'gold', 'golf', 'gossip',\n  // 'grass',\n  'gratitude', 'grief',\n  // 'ground',\n  'guilt', 'gymnastics',\n  // 'hair',\n  'happiness', 'hardware', 'harm', 'hate', 'hatred', 'health', 'heat',\n  // 'height',\n  'help', 'homework', 'honesty', 'honey', 'hospitality', 'housework', 'humour', 'hunger', 'hydrogen', 'ice', 'importance', 'inflation', 'information',\n  // 'injustice',\n  'innocence',\n  // 'intelligence',\n  'iron', 'irony', 'jam',\n  // 'jealousy',\n  // 'jelly',\n  'jewelry',\n  // 'joy',\n  'judo',\n  // 'juice',\n  // 'justice',\n\n  'karate',\n  // 'kindness',\n  'knowledge',\n  // 'labour',\n  'lack',\n  // 'land',\n  'laughter', 'lava', 'leather', 'leisure', 'lightning', 'linguine', 'linguini', 'linguistics', 'literature', 'litter', 'livestock', 'logic', 'loneliness',\n  // 'love',\n  'luck', 'luggage', 'macaroni', 'machinery', 'magic',\n  // 'mail',\n  'management', 'mankind', 'marble', 'mathematics', 'mayonnaise', 'measles',\n  // 'meat',\n  // 'metal',\n  'methane', 'milk', 'minus', 'money',\n  // 'moose',\n  'mud', 'music', 'mumps', 'nature', 'news', 'nitrogen', 'nonsense', 'nurture', 'nutrition', 'obedience', 'obesity',\n  // 'oil',\n  'oxygen',\n  // 'paper',\n  // 'passion',\n  'pasta', 'patience',\n  // 'permission',\n  'physics', 'poetry', 'pollution', 'poverty',\n  // 'power',\n  'pride',\n  // 'production',\n  // 'progress',\n  // 'pronunciation',\n  'psychology', 'publicity', 'punctuation',\n  // 'quality',\n  // 'quantity',\n  'quartz', 'racism',\n  // 'rain',\n  // 'recreation',\n  'relaxation', 'reliability', 'research', 'respect', 'revenge', 'rice', 'rubbish', 'rum', 'safety',\n  // 'salad',\n  // 'salt',\n  // 'sand',\n  // 'satire',\n  'scenery', 'seafood', 'seaside', 'series', 'shame', 'sheep', 'shopping',\n  // 'silence',\n  'sleep',\n  // 'slang'\n  'smoke', 'smoking', 'snow', 'soap', 'software', 'soil',\n  // 'sorrow',\n  // 'soup',\n  'spaghetti',\n  // 'speed',\n  'species',\n  // 'spelling',\n  // 'sport',\n  'steam',\n  // 'strength',\n  'stuff', 'stupidity',\n  // 'success',\n  // 'sugar',\n  'sunshine', 'symmetry',\n  // 'tea',\n  'tennis', 'thirst', 'thunder', 'timber',\n  // 'time',\n  // 'toast',\n  // 'tolerance',\n  // 'trade',\n  'traffic', 'transportation',\n  // 'travel',\n  'trust',\n  // 'understanding',\n  'underwear', 'unemployment', 'unity',\n  // 'usage',\n\n  'validity', 'veal', 'vegetation', 'vegetarianism', 'vengeance', 'violence',\n  // 'vision',\n  'vitality', 'warmth',\n  // 'water',\n  'wealth', 'weather',\n  // 'weight',\n  'welfare', 'wheat',\n  // 'whiskey',\n  // 'width',\n  'wildlife',\n  // 'wine',\n  'wisdom',\n  // 'wood',\n  // 'wool',\n  // 'work',\n\n  // 'yeast',\n  'yoga', 'zinc', 'zoology'];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural: {\n      men: new RegExp('^(m|wom)en$', 'gi'),\n      people: new RegExp('(pe)ople$', 'gi'),\n      children: new RegExp('(child)ren$', 'gi'),\n      tia: new RegExp('([ti])a$', 'gi'),\n      analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n      databases: new RegExp('(database)s$', 'gi'),\n      drives: new RegExp('(drive)s$', 'gi'),\n      hives: new RegExp('(hi|ti)ves$', 'gi'),\n      curves: new RegExp('(curve)s$', 'gi'),\n      lrves: new RegExp('([lr])ves$', 'gi'),\n      aves: new RegExp('([a])ves$', 'gi'),\n      foves: new RegExp('([^fo])ves$', 'gi'),\n      movies: new RegExp('(m)ovies$', 'gi'),\n      aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n      series: new RegExp('(s)eries$', 'gi'),\n      xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n      mice: new RegExp('([m|l])ice$', 'gi'),\n      buses: new RegExp('(bus)es$', 'gi'),\n      oes: new RegExp('(o)es$', 'gi'),\n      shoes: new RegExp('(shoe)s$', 'gi'),\n      crises: new RegExp('(cris|ax|test)es$', 'gi'),\n      octopuses: new RegExp('(octop|vir)uses$', 'gi'),\n      aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n      summonses: new RegExp('^(summons|bonus)es$', 'gi'),\n      oxen: new RegExp('^(ox)en', 'gi'),\n      matrices: new RegExp('(matr)ices$', 'gi'),\n      vertices: new RegExp('(vert|ind)ices$', 'gi'),\n      feet: new RegExp('^feet$', 'gi'),\n      teeth: new RegExp('^teeth$', 'gi'),\n      geese: new RegExp('^geese$', 'gi'),\n      quizzes: new RegExp('(quiz)zes$', 'gi'),\n      whereases: new RegExp('^(whereas)es$', 'gi'),\n      criteria: new RegExp('^(criteri)a$', 'gi'),\n      genera: new RegExp('^genera$', 'gi'),\n      ss: new RegExp('ss$', 'gi'),\n      s: new RegExp('s$', 'gi')\n    },\n    singular: {\n      man: new RegExp('^(m|wom)an$', 'gi'),\n      person: new RegExp('(pe)rson$', 'gi'),\n      child: new RegExp('(child)$', 'gi'),\n      drive: new RegExp('(drive)$', 'gi'),\n      ox: new RegExp('^(ox)$', 'gi'),\n      axis: new RegExp('(ax|test)is$', 'gi'),\n      octopus: new RegExp('(octop|vir)us$', 'gi'),\n      alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n      summons: new RegExp('^(summons|bonus)$', 'gi'),\n      bus: new RegExp('(bu)s$', 'gi'),\n      buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n      tium: new RegExp('([ti])um$', 'gi'),\n      sis: new RegExp('sis$', 'gi'),\n      ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n      hive: new RegExp('(hi|ti)ve$', 'gi'),\n      aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n      x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n      matrix: new RegExp('(matr)ix$', 'gi'),\n      vertex: new RegExp('(vert|ind)ex$', 'gi'),\n      mouse: new RegExp('([m|l])ouse$', 'gi'),\n      foot: new RegExp('^foot$', 'gi'),\n      tooth: new RegExp('^tooth$', 'gi'),\n      goose: new RegExp('^goose$', 'gi'),\n      quiz: new RegExp('(quiz)$', 'gi'),\n      whereas: new RegExp('^(whereas)$', 'gi'),\n      criterion: new RegExp('^(criteri)on$', 'gi'),\n      genus: new RegExp('^genus$', 'gi'),\n      s: new RegExp('s$', 'gi'),\n      common: new RegExp('$', 'gi')\n    }\n  };\n  var plural_rules = [\n  // do not replace if its already a plural word\n  [regex.plural.men], [regex.plural.people], [regex.plural.children], [regex.plural.tia], [regex.plural.analyses], [regex.plural.databases], [regex.plural.drives], [regex.plural.hives], [regex.plural.curves], [regex.plural.lrves], [regex.plural.foves], [regex.plural.aeiouyies], [regex.plural.series], [regex.plural.movies], [regex.plural.xes], [regex.plural.mice], [regex.plural.buses], [regex.plural.oes], [regex.plural.shoes], [regex.plural.crises], [regex.plural.octopuses], [regex.plural.aliases], [regex.plural.summonses], [regex.plural.oxen], [regex.plural.matrices], [regex.plural.feet], [regex.plural.teeth], [regex.plural.geese], [regex.plural.quizzes], [regex.plural.whereases], [regex.plural.criteria], [regex.plural.genera],\n  // original rule\n  [regex.singular.man, '$1en'], [regex.singular.person, '$1ople'], [regex.singular.child, '$1ren'], [regex.singular.drive, '$1s'], [regex.singular.ox, '$1en'], [regex.singular.axis, '$1es'], [regex.singular.octopus, '$1uses'], [regex.singular.alias, '$1es'], [regex.singular.summons, '$1es'], [regex.singular.bus, '$1ses'], [regex.singular.buffalo, '$1oes'], [regex.singular.tium, '$1a'], [regex.singular.sis, 'ses'], [regex.singular.ffe, '$1$2ves'], [regex.singular.hive, '$1ves'], [regex.singular.aeiouyy, '$1ies'], [regex.singular.matrix, '$1ices'], [regex.singular.vertex, '$1ices'], [regex.singular.x, '$1es'], [regex.singular.mouse, '$1ice'], [regex.singular.foot, 'feet'], [regex.singular.tooth, 'teeth'], [regex.singular.goose, 'geese'], [regex.singular.quiz, '$1zes'], [regex.singular.whereas, '$1es'], [regex.singular.criterion, '$1a'], [regex.singular.genus, 'genera'], [regex.singular.s, 's'], [regex.singular.common, 's']];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n  // do not replace if its already a singular word\n  [regex.singular.man], [regex.singular.person], [regex.singular.child], [regex.singular.drive], [regex.singular.ox], [regex.singular.axis], [regex.singular.octopus], [regex.singular.alias], [regex.singular.summons], [regex.singular.bus], [regex.singular.buffalo], [regex.singular.tium], [regex.singular.sis], [regex.singular.ffe], [regex.singular.hive], [regex.singular.aeiouyy], [regex.singular.x], [regex.singular.matrix], [regex.singular.mouse], [regex.singular.foot], [regex.singular.tooth], [regex.singular.goose], [regex.singular.quiz], [regex.singular.whereas], [regex.singular.criterion], [regex.singular.genus],\n  // original rule\n  [regex.plural.men, '$1an'], [regex.plural.people, '$1rson'], [regex.plural.children, '$1'], [regex.plural.databases, '$1'], [regex.plural.drives, '$1'], [regex.plural.genera, 'genus'], [regex.plural.criteria, '$1on'], [regex.plural.tia, '$1um'], [regex.plural.analyses, '$1$2sis'], [regex.plural.hives, '$1ve'], [regex.plural.curves, '$1'], [regex.plural.lrves, '$1f'], [regex.plural.aves, '$1ve'], [regex.plural.foves, '$1fe'], [regex.plural.movies, '$1ovie'], [regex.plural.aeiouyies, '$1y'], [regex.plural.series, '$1eries'], [regex.plural.xes, '$1'], [regex.plural.mice, '$1ouse'], [regex.plural.buses, '$1'], [regex.plural.oes, '$1'], [regex.plural.shoes, '$1'], [regex.plural.crises, '$1is'], [regex.plural.octopuses, '$1us'], [regex.plural.aliases, '$1'], [regex.plural.summonses, '$1'], [regex.plural.oxen, '$1'], [regex.plural.matrices, '$1ix'], [regex.plural.vertices, '$1ex'], [regex.plural.feet, 'foot'], [regex.plural.teeth, 'tooth'], [regex.plural.geese, 'goose'], [regex.plural.quizzes, '$1'], [regex.plural.whereases, '$1'], [regex.plural.ss, 'ss'], [regex.plural.s, '']];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\n     * A helper method that applies rules based replacement to a String.\n     * @private\n     * @function\n     * @param {String} str String to modify and return based on the passed rules.\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n     * @param {Array: [String]} skip Strings to skip if they match\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n     * @returns {String} Return passed String modified by passed rules.\n     * @example\n     *\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n     */\n    _apply_rules: function _apply_rules(str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return str;\n    },\n    /**\n     * This lets us detect if an Array contains a given element.\n     * @public\n     * @function\n     * @param {Array} arr The subject array.\n     * @param {Object} item Object to locate in the Array.\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n     * @returns {Number} Return index position in the Array of the passed item.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n     */\n    indexOf: function indexOf(arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n    /**\n     * This function adds pluralization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} Singular English language nouns are returned in plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.pluralize( 'person' ); // === 'people'\n     *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n     */\n    pluralize: function pluralize(str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n    /**\n     * This function adds singularization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @returns {String} Plural English language nouns are returned in singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.singularize( 'people' ); // === 'person'\n     *     inflection.singularize( 'octopuses' ); // === 'octopus'\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\n     */\n    singularize: function singularize(str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n    /**\n     * This function will pluralize or singularlize a String appropriately based on a number value\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Number} count The number to base pluralization off of.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.inflect( 'people' 1 ); // === 'person'\n     *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n     *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n     *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n     *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n     *     inflection.inflect( 'person', 2 ); // === 'people'\n     *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n     *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n     *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n     */\n    inflect: function inflect(str, count, singular, plural) {\n      count = parseFloat(count, 10);\n      if (isNaN(count)) return str;\n      if (count === 1) {\n        return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n      } else {\n        return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n      }\n    },\n    /**\n     * This function adds camelization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in camel case.\n     *                  additionally '/' is translated to '::'\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n     */\n    camelize: function camelize(str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n        str_path[i] = str_arr.join('');\n      }\n      return str_path.join('::');\n    },\n    /**\n     * This function adds underscore support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n     *                  Passing true will return as entered.\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\n     *                  additionally '::' is translated to '/'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'MP', true ); // === 'MP'\n     */\n    underscore: function underscore(str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n      return str_path.join('/').toLowerCase();\n    },\n    /**\n     * This function adds humanize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in humanized form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n     */\n    humanize: function humanize(str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n      return str;\n    },\n    /**\n     * This function adds capitalization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} All characters will be lower case and the first will be upper.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n     */\n    capitalize: function capitalize(str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n    /**\n     * This function replaces underscores with dashes in the string.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Replaces all spaces or underscores with dashes.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n     */\n    dasherize: function dasherize(str) {\n      return str.replace(space_or_underbar, '-');\n    },\n    /**\n     * This function adds titleize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Capitalizes words as you would for a book title.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n     */\n    titleize: function titleize(str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n        str_arr[i] = d.join('-');\n      }\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n    /**\n     * This function adds demodulize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n     */\n    demodulize: function demodulize(str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n    /**\n     * This function adds tableize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return camel cased words into their underscored plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n     */\n    tableize: function tableize(str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n    /**\n     * This function adds classification support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n     */\n    classify: function classify(str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n    /**\n     * This function adds foreign key support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                   you can pass true to skip it.(optional)\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n     */\n    foreign_key: function foreign_key(str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n    /**\n     * This function adds ordinalize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return all found numbers their sequence like '22nd'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n     */\n    ordinalize: function ordinalize(str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n          str_arr[i] += suf;\n        }\n      }\n      return str_arr.join(' ');\n    },\n    /**\n     * This function performs multiple inflection methods on a string\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Array} arr An array of inflection methods.\n     * @returns {String}\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n     */\n    transform: function transform(str, arr) {\n      var i = 0;\n      var j = arr.length;\n      for (; i < j; i++) {\n        var method = arr[i];\n        if (inflector.hasOwnProperty(method)) {\n          str = inflector[method](str);\n        }\n      }\n      return str;\n    }\n  };\n\n  /**\n   * @public\n   */\n  inflector.version = '1.13.1';\n  return inflector;\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","inflection","uncountable_words","regex","plural","men","RegExp","people","children","tia","analyses","databases","drives","hives","curves","lrves","aves","foves","movies","aeiouyies","series","xes","mice","buses","oes","shoes","crises","octopuses","aliases","summonses","oxen","matrices","vertices","feet","teeth","geese","quizzes","whereases","criteria","genera","ss","s","singular","man","person","child","drive","ox","axis","octopus","alias","summons","bus","buffalo","tium","sis","ffe","hive","aeiouyy","x","matrix","vertex","mouse","foot","tooth","goose","quiz","whereas","criterion","genus","common","plural_rules","singular_rules","non_titlecased_words","id_suffix","underbar","space_or_underbar","uppercase","underbar_prefix","inflector","_apply_rules","str","rules","skip","override","ignore","indexOf","toLowerCase","i","j","length","match","undefined","replace","arr","item","from_index","compare_func","index","pluralize","singularize","inflect","count","parseFloat","isNaN","camelize","low_first_letter","str_path","split","str_arr","init_x","k","l","first","charAt","toUpperCase","substring","join","underscore","all_upper_case","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreign_key","drop_id_ubar","ordinalize","parseInt","ltd","ld","suf","transform","method","hasOwnProperty","version"],"sources":["/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/inflection/lib/inflection.js"],"sourcesContent":["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n\n    'karate',\n    // 'kindness',\n    'knowledge',\n\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n\n    // 'quality',\n    // 'quantity',\n    'quartz',\n\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n\n    // 'yeast',\n    'yoga',\n\n    'zinc',\n    'zoology'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural : {\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\n      databases : new RegExp( '(database)s$'                   , 'gi' ),\n      drives    : new RegExp( '(drive)s$'                      , 'gi' ),\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\n      octopuses : new RegExp( '(octop|vir)uses$'               , 'gi' ),\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\n      summonses : new RegExp( '^(summons|bonus)es$'            , 'gi' ),\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\n      s         : new RegExp( 's$'                             , 'gi' )\n    },\n\n    singular : {\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\n      child     : new RegExp( '(child)$'                     , 'gi' ),\n      drive     : new RegExp( '(drive)$'                     , 'gi' ),\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\n      summons   : new RegExp( '^(summons|bonus)$'            , 'gi' ),\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\n      s         : new RegExp( 's$'                           , 'gi' ),\n      common    : new RegExp( '$'                            , 'gi' )\n    }\n  };\n\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ regex.plural.men       ],\n    [ regex.plural.people    ],\n    [ regex.plural.children  ],\n    [ regex.plural.tia       ],\n    [ regex.plural.analyses  ],\n    [ regex.plural.databases ],\n    [ regex.plural.drives    ],\n    [ regex.plural.hives     ],\n    [ regex.plural.curves    ],\n    [ regex.plural.lrves     ],\n    [ regex.plural.foves     ],\n    [ regex.plural.aeiouyies ],\n    [ regex.plural.series    ],\n    [ regex.plural.movies    ],\n    [ regex.plural.xes       ],\n    [ regex.plural.mice      ],\n    [ regex.plural.buses     ],\n    [ regex.plural.oes       ],\n    [ regex.plural.shoes     ],\n    [ regex.plural.crises    ],\n    [ regex.plural.octopuses ],\n    [ regex.plural.aliases   ],\n    [ regex.plural.summonses ],\n    [ regex.plural.oxen      ],\n    [ regex.plural.matrices  ],\n    [ regex.plural.feet      ],\n    [ regex.plural.teeth     ],\n    [ regex.plural.geese     ],\n    [ regex.plural.quizzes   ],\n    [ regex.plural.whereases ],\n    [ regex.plural.criteria  ],\n    [ regex.plural.genera    ],\n\n    // original rule\n    [ regex.singular.man      , '$1en' ],\n    [ regex.singular.person   , '$1ople' ],\n    [ regex.singular.child    , '$1ren' ],\n    [ regex.singular.drive    , '$1s' ],\n    [ regex.singular.ox       , '$1en' ],\n    [ regex.singular.axis     , '$1es' ],\n    [ regex.singular.octopus  , '$1uses' ],\n    [ regex.singular.alias    , '$1es' ],\n    [ regex.singular.summons  , '$1es' ],\n    [ regex.singular.bus      , '$1ses' ],\n    [ regex.singular.buffalo  , '$1oes' ],\n    [ regex.singular.tium     , '$1a' ],\n    [ regex.singular.sis      , 'ses' ],\n    [ regex.singular.ffe      , '$1$2ves' ],\n    [ regex.singular.hive     , '$1ves' ],\n    [ regex.singular.aeiouyy  , '$1ies' ],\n    [ regex.singular.matrix   , '$1ices' ],\n    [ regex.singular.vertex   , '$1ices' ],\n    [ regex.singular.x        , '$1es' ],\n    [ regex.singular.mouse    , '$1ice' ],\n    [ regex.singular.foot     , 'feet' ],\n    [ regex.singular.tooth    , 'teeth' ],\n    [ regex.singular.goose    , 'geese' ],\n    [ regex.singular.quiz     , '$1zes' ],\n    [ regex.singular.whereas  , '$1es' ],\n    [ regex.singular.criterion, '$1a' ],\n    [ regex.singular.genus    , 'genera' ],\n\n    [ regex.singular.s     , 's' ],\n    [ regex.singular.common, 's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ regex.singular.man     ],\n    [ regex.singular.person  ],\n    [ regex.singular.child   ],\n    [ regex.singular.drive   ],\n    [ regex.singular.ox      ],\n    [ regex.singular.axis    ],\n    [ regex.singular.octopus ],\n    [ regex.singular.alias   ],\n    [ regex.singular.summons ],\n    [ regex.singular.bus     ],\n    [ regex.singular.buffalo ],\n    [ regex.singular.tium    ],\n    [ regex.singular.sis     ],\n    [ regex.singular.ffe     ],\n    [ regex.singular.hive    ],\n    [ regex.singular.aeiouyy ],\n    [ regex.singular.x       ],\n    [ regex.singular.matrix  ],\n    [ regex.singular.mouse   ],\n    [ regex.singular.foot    ],\n    [ regex.singular.tooth   ],\n    [ regex.singular.goose   ],\n    [ regex.singular.quiz    ],\n    [ regex.singular.whereas ],\n    [ regex.singular.criterion ],\n    [ regex.singular.genus ],\n\n    // original rule\n    [ regex.plural.men      , '$1an' ],\n    [ regex.plural.people   , '$1rson' ],\n    [ regex.plural.children , '$1' ],\n    [ regex.plural.databases, '$1'],\n    [ regex.plural.drives   , '$1'],\n    [ regex.plural.genera   , 'genus'],\n    [ regex.plural.criteria , '$1on'],\n    [ regex.plural.tia      , '$1um' ],\n    [ regex.plural.analyses , '$1$2sis' ],\n    [ regex.plural.hives    , '$1ve' ],\n    [ regex.plural.curves   , '$1' ],\n    [ regex.plural.lrves    , '$1f' ],\n    [ regex.plural.aves     , '$1ve' ],\n    [ regex.plural.foves    , '$1fe' ],\n    [ regex.plural.movies   , '$1ovie' ],\n    [ regex.plural.aeiouyies, '$1y' ],\n    [ regex.plural.series   , '$1eries' ],\n    [ regex.plural.xes      , '$1' ],\n    [ regex.plural.mice     , '$1ouse' ],\n    [ regex.plural.buses    , '$1' ],\n    [ regex.plural.oes      , '$1' ],\n    [ regex.plural.shoes    , '$1' ],\n    [ regex.plural.crises   , '$1is' ],\n    [ regex.plural.octopuses, '$1us' ],\n    [ regex.plural.aliases  , '$1' ],\n    [ regex.plural.summonses, '$1' ],\n    [ regex.plural.oxen     , '$1' ],\n    [ regex.plural.matrices , '$1ix' ],\n    [ regex.plural.vertices , '$1ex' ],\n    [ regex.plural.feet     , 'foot' ],\n    [ regex.plural.teeth    , 'tooth' ],\n    [ regex.plural.geese    , 'goose' ],\n    [ regex.plural.quizzes  , '$1' ],\n    [ regex.plural.whereases, '$1' ],\n\n    [ regex.plural.ss, 'ss' ],\n    [ regex.plural.s , '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopuses' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n  /**\n   * This function will pluralize or singularlize a String appropriately based on a number value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */\n    inflect : function ( str, count, singular, plural ){\n      count = parseFloat( count, 10 );\n\n      if( isNaN( count )) return str;\n\n      if( count === 1 ){\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n      }else{\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n      }\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( inflector.hasOwnProperty( method )){\n          str = inflector[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.13.1';\n\n  return inflector;\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}