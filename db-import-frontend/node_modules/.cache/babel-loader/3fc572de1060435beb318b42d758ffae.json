{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\nvar Base64Decode = /** @class */function () {\n  function Base64Decode() {}\n  /**\r\n   * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n   * @param input\r\n   */\n  Base64Decode.prototype.decode = function (input) {\n    var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n      case 0:\n        break;\n      case 2:\n        encodedString += \"==\";\n        break;\n      case 3:\n        encodedString += \"=\";\n        break;\n      default:\n        throw new Error(\"Invalid base64 string\");\n    }\n    var inputUtf8Arr = this.base64DecToArr(encodedString);\n    return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\n  };\n  /**\r\n   * Decodes base64 into Uint8Array\r\n   * @param base64String\r\n   * @param nBlockSize\r\n   */\n  Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {\n    var sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, Constants.EMPTY_STRING);\n    var nInLen = sB64Enc.length;\n    var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\n    var aBytes = new Uint8Array(nOutLen);\n    for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n      nMod4 = nInIdx & 3;\n      nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n      if (nMod4 === 3 || nInLen - nInIdx === 1) {\n        for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n          aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n        }\n        nUint24 = 0;\n      }\n    }\n    return aBytes;\n  };\n  /**\r\n   * Base64 string to array decoding helper\r\n   * @param charNum\r\n   */\n  Base64Decode.prototype.b64ToUint6 = function (charNum) {\n    return charNum > 64 && charNum < 91 ? charNum - 65 : charNum > 96 && charNum < 123 ? charNum - 71 : charNum > 47 && charNum < 58 ? charNum + 4 : charNum === 43 ? 62 : charNum === 47 ? 63 : 0;\n  };\n  return Base64Decode;\n}();\nexport { Base64Decode };","map":{"version":3,"names":["Base64Decode","prototype","decode","input","encodedString","replace","length","Error","inputUtf8Arr","base64DecToArr","BrowserStringUtils","utf8ArrToString","base64String","nBlockSize","sB64Enc","Constants","EMPTY_STRING","nInLen","nOutLen","Math","ceil","aBytes","Uint8Array","nMod3","nMod4","nUint24","nOutIdx","nInIdx","b64ToUint6","charCodeAt","charNum"],"sources":["../../src/encode/Base64Decode.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants } from \"@azure/msal-common\";\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\n\r\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class Base64Decode {\r\n\r\n    /**\r\n     * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n     * @param input \r\n     */\r\n    decode(input: string): string {\r\n        let encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n\r\n        const inputUtf8Arr = this.base64DecToArr(encodedString);\r\n        return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\r\n    }\r\n\r\n    /**\r\n     * Decodes base64 into Uint8Array\r\n     * @param base64String \r\n     * @param nBlockSize \r\n     */\r\n    private base64DecToArr(base64String: string, nBlockSize?: number): Uint8Array {\r\n        const sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, Constants.EMPTY_STRING);\r\n        const nInLen = sB64Enc.length;\r\n        const nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\r\n        const aBytes = new Uint8Array(nOutLen);\r\n\r\n        for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n            nMod4 = nInIdx & 3;\r\n            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n            if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n                }\r\n                nUint24 = 0;\r\n            }\r\n        }\r\n\r\n        return aBytes;\r\n    }\r\n\r\n    /**\r\n     * Base64 string to array decoding helper\r\n     * @param charNum \r\n     */\r\n    private b64ToUint6(charNum: number): number {\r\n        return charNum > 64 && charNum < 91 ?\r\n            charNum - 65\r\n            : charNum > 96 && charNum < 123 ? \r\n                charNum - 71\r\n                : charNum > 47 && charNum < 58 ?\r\n                    charNum + 4\r\n                    : charNum === 43 ?\r\n                        62\r\n                        : charNum === 47 ?\r\n                            63\r\n                            :\r\n                            0;\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;;;;AAQA;;;;;EAIA,SAAAA,aAAA,G;;;;;EAMIA,YAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UAAOC,KAAa;IAChB,IAAIC,aAAa,GAAGD,KAAK,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC/D,QAAQD,aAAa,CAACE,MAAM,GAAG,CAAC;MAC5B,KAAK,CAAC;QACF;MACJ,KAAK,CAAC;QACFF,aAAa,IAAI,IAAI;QACrB;MACJ,KAAK,CAAC;QACFA,aAAa,IAAI,GAAG;QACpB;MACJ;QACI,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;;IAGhD,IAAMC,YAAY,GAAG,IAAI,CAACC,cAAc,CAACL,aAAa,CAAC;IACvD,OAAOM,kBAAkB,CAACC,eAAe,CAACH,YAAY,CAAC;GAC1D;;;;;;EAOOR,YAAA,CAAAC,SAAA,CAAAQ,cAAc,GAAtB,UAAuBG,YAAoB,EAAEC,UAAmB;IAC5D,IAAMC,OAAO,GAAGF,YAAY,CAACP,OAAO,CAAC,mBAAmB,EAAEU,SAAS,CAACC,YAAY,CAAC;IACjF,IAAMC,MAAM,GAAGH,OAAO,CAACR,MAAM;IAC7B,IAAMY,OAAO,GAAGL,UAAU,GAAGM,IAAI,CAACC,IAAI,CAAC,CAACH,MAAM,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIJ,UAAU,CAAC,GAAGA,UAAU,GAAGI,MAAM,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;IAC/G,IAAMI,MAAM,GAAG,IAAIC,UAAU,CAACJ,OAAO,CAAC;IAEtC,KAAK,IAAIK,KAAK,WAAEC,KAAK,WAAEC,OAAO,GAAG,CAAC,EAAEC,OAAO,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGV,MAAM,EAAEU,MAAM,EAAE,EAAE;MACpFH,KAAK,GAAGG,MAAM,GAAG,CAAC;MAClBF,OAAO,IAAI,IAAI,CAACG,UAAU,CAACd,OAAO,CAACe,UAAU,CAACF,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAGH,KAAK;MACxE,IAAIA,KAAK,KAAK,CAAC,IAAIP,MAAM,GAAGU,MAAM,KAAK,CAAC,EAAE;QACtC,KAAKJ,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,IAAIG,OAAO,GAAGR,OAAO,EAAEK,KAAK,EAAE,EAAEG,OAAO,EAAE,EAAE;UAChEL,MAAM,CAACK,OAAO,CAAC,GAAGD,OAAO,MAAM,EAAE,KAAKF,KAAK,GAAG,EAAE,CAAC,GAAG,GAAG;;QAE3DE,OAAO,GAAG,CAAC;;;IAInB,OAAOJ,MAAM;GAChB;;;;;EAMOrB,YAAA,CAAAC,SAAA,CAAA2B,UAAU,GAAlB,UAAmBE,OAAe;IAC9B,OAAOA,OAAO,GAAG,EAAE,IAAIA,OAAO,GAAG,EAAE,GAC/BA,OAAO,GAAG,EAAE,GACVA,OAAO,GAAG,EAAE,IAAIA,OAAO,GAAG,GAAG,GAC3BA,OAAO,GAAG,EAAE,GACVA,OAAO,GAAG,EAAE,IAAIA,OAAO,GAAG,EAAE,GAC1BA,OAAO,GAAG,CAAC,GACTA,OAAO,KAAK,EAAE,GACZ,EAAE,GACAA,OAAO,KAAK,EAAE,GACZ,EAAE,GAEF,CAAC;GACxB;EACL,OAAA9B,YAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module"}