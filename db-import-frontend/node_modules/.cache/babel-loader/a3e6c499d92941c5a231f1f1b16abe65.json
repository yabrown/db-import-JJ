{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar _ = require(\"lodash\");\nvar Utils = require(\"../../utils\");\nvar AbstractQueryGenerator = require(\"../abstract/query-generator\");\nvar util = require(\"util\");\nvar Op = require(\"../../operators\");\nvar JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nvar JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nvar TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nvar FOREIGN_KEY_FIELDS = [\"CONSTRAINT_NAME as constraint_name\", \"CONSTRAINT_NAME as constraintName\", \"CONSTRAINT_SCHEMA as constraintSchema\", \"CONSTRAINT_SCHEMA as constraintCatalog\", \"TABLE_NAME as tableName\", \"TABLE_SCHEMA as tableSchema\", \"TABLE_SCHEMA as tableCatalog\", \"COLUMN_NAME as columnName\", \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\", \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\", \"REFERENCED_TABLE_NAME as referencedTableName\", \"REFERENCED_COLUMN_NAME as referencedColumnName\"].join(\",\");\nvar typeWithoutDefault = /* @__PURE__ */new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\nvar MySQLQueryGenerator = /*#__PURE__*/function (_AbstractQueryGenerat) {\n  _inherits(MySQLQueryGenerator, _AbstractQueryGenerat);\n  var _super = _createSuper(MySQLQueryGenerator);\n  function MySQLQueryGenerator(options) {\n    var _spreadProps;\n    var _this;\n    _classCallCheck(this, MySQLQueryGenerator);\n    _this = _super.call(this, options);\n    _this.OperatorMap = __spreadProps(__spreadValues({}, _this.OperatorMap), (_spreadProps = {}, _defineProperty(_spreadProps, Op.regexp, \"REGEXP\"), _defineProperty(_spreadProps, Op.notRegexp, \"NOT REGEXP\"), _spreadProps));\n    return _this;\n  }\n  _createClass(MySQLQueryGenerator, [{\n    key: \"createDatabaseQuery\",\n    value: function createDatabaseQuery(databaseName, options) {\n      options = __spreadValues({\n        charset: null,\n        collate: null\n      }, options);\n      return Utils.joinSQLFragments([\"CREATE DATABASE IF NOT EXISTS\", this.quoteIdentifier(databaseName), options.charset && \"DEFAULT CHARACTER SET \".concat(this.escape(options.charset)), options.collate && \"DEFAULT COLLATE \".concat(this.escape(options.collate)), \";\"]);\n    }\n  }, {\n    key: \"dropDatabaseQuery\",\n    value: function dropDatabaseQuery(databaseName) {\n      return \"DROP DATABASE IF EXISTS \".concat(this.quoteIdentifier(databaseName), \";\");\n    }\n  }, {\n    key: \"createSchema\",\n    value: function createSchema() {\n      return \"SHOW TABLES\";\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery() {\n      return \"SHOW TABLES\";\n    }\n  }, {\n    key: \"versionQuery\",\n    value: function versionQuery() {\n      return \"SELECT VERSION() as `version`\";\n    }\n  }, {\n    key: \"createTableQuery\",\n    value: function createTableQuery(tableName, attributes, options) {\n      var _this2 = this;\n      options = __spreadValues({\n        engine: \"InnoDB\",\n        charset: null,\n        rowFormat: null\n      }, options);\n      var primaryKeys = [];\n      var foreignKeys = {};\n      var attrStr = [];\n      for (var attr in attributes) {\n        if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n        var dataType = attributes[attr];\n        var match = void 0;\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          primaryKeys.push(attr);\n          if (dataType.includes(\"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(match[1].replace(\"PRIMARY KEY\", \"\")));\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(dataType.replace(\"PRIMARY KEY\", \"\")));\n          }\n        } else if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(match[1]));\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(dataType));\n        }\n      }\n      var table = this.quoteTable(tableName);\n      var attributesClause = attrStr.join(\", \");\n      var pkString = primaryKeys.map(function (pk) {\n        return _this2.quoteIdentifier(pk);\n      }).join(\", \");\n      if (options.uniqueKeys) {\n        _.each(options.uniqueKeys, function (columns, indexName) {\n          if (columns.customIndex) {\n            if (typeof indexName !== \"string\") {\n              indexName = \"uniq_\".concat(tableName, \"_\").concat(columns.fields.join(\"_\"));\n            }\n            attributesClause += \", UNIQUE \".concat(_this2.quoteIdentifier(indexName), \" (\").concat(columns.fields.map(function (field) {\n              return _this2.quoteIdentifier(field);\n            }).join(\", \"), \")\");\n          }\n        });\n      }\n      if (pkString.length > 0) {\n        attributesClause += \", PRIMARY KEY (\".concat(pkString, \")\");\n      }\n      for (var fkey in foreignKeys) {\n        if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n          attributesClause += \", FOREIGN KEY (\".concat(this.quoteIdentifier(fkey), \") \").concat(foreignKeys[fkey]);\n        }\n      }\n      return Utils.joinSQLFragments([\"CREATE TABLE IF NOT EXISTS\", table, \"(\".concat(attributesClause, \")\"), \"ENGINE=\".concat(options.engine), options.comment && typeof options.comment === \"string\" && \"COMMENT \".concat(this.escape(options.comment)), options.charset && \"DEFAULT CHARSET=\".concat(options.charset), options.collate && \"COLLATE \".concat(options.collate), options.initialAutoIncrement && \"AUTO_INCREMENT=\".concat(options.initialAutoIncrement), options.rowFormat && \"ROW_FORMAT=\".concat(options.rowFormat), \";\"]);\n    }\n  }, {\n    key: \"describeTableQuery\",\n    value: function describeTableQuery(tableName, schema, schemaDelimiter) {\n      var table = this.quoteTable(this.addSchema({\n        tableName: tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      }));\n      return \"SHOW FULL COLUMNS FROM \".concat(table, \";\");\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery(database) {\n      var query = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n      if (database) {\n        query += \" AND TABLE_SCHEMA = \".concat(this.escape(database));\n      } else {\n        query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS', 'mysql', 'information_schema', 'performance_schema', 'sys')\";\n      }\n      return \"\".concat(query, \";\");\n    }\n  }, {\n    key: \"tableExistsQuery\",\n    value: function tableExistsQuery(table) {\n      var tableName = this.escape(this.quoteTable(table).slice(1, -1));\n      return \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = \".concat(tableName, \" AND TABLE_SCHEMA = \").concat(this.escape(this.sequelize.config.database));\n    }\n  }, {\n    key: \"addColumnQuery\",\n    value: function addColumnQuery(table, key, dataType) {\n      return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(table), \"ADD\", this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n        context: \"addColumn\",\n        tableName: table,\n        foreignKey: key\n      }), \";\"]);\n    }\n  }, {\n    key: \"removeColumnQuery\",\n    value: function removeColumnQuery(tableName, attributeName) {\n      return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP\", this.quoteIdentifier(attributeName), \";\"]);\n    }\n  }, {\n    key: \"changeColumnQuery\",\n    value: function changeColumnQuery(tableName, attributes) {\n      var attrString = [];\n      var constraintString = [];\n      for (var attributeName in attributes) {\n        var definition = attributes[attributeName];\n        if (definition.includes(\"REFERENCES\")) {\n          var attrName = this.quoteIdentifier(attributeName);\n          definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n          constraintString.push(\"FOREIGN KEY (\".concat(attrName, \") \").concat(definition));\n        } else {\n          attrString.push(\"`\".concat(attributeName, \"` `\").concat(attributeName, \"` \").concat(definition));\n        }\n      }\n      return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), attrString.length && \"CHANGE \".concat(attrString.join(\", \")), constraintString.length && \"ADD \".concat(constraintString.join(\", \")), \";\"]);\n    }\n  }, {\n    key: \"renameColumnQuery\",\n    value: function renameColumnQuery(tableName, attrBefore, attributes) {\n      var attrString = [];\n      for (var attrName in attributes) {\n        var definition = attributes[attrName];\n        attrString.push(\"`\".concat(attrBefore, \"` `\").concat(attrName, \"` \").concat(definition));\n      }\n      return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"CHANGE\", attrString.join(\", \"), \";\"]);\n    }\n  }, {\n    key: \"handleSequelizeMethod\",\n    value: function handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n      var _this3 = this;\n      if (smth instanceof Utils.Json) {\n        if (smth.conditions) {\n          var conditions = this.parseConditionObject(smth.conditions).map(function (condition) {\n            return \"\".concat(_this3.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path)), \" = '\").concat(condition.value, \"'\");\n          });\n          return conditions.join(\" AND \");\n        }\n        if (smth.path) {\n          var str;\n          if (this._checkValidJsonStatement(smth.path)) {\n            str = smth.path;\n          } else {\n            var paths = _.toPath(smth.path);\n            var column = paths.shift();\n            str = this.jsonPathExtractionQuery(column, paths);\n          }\n          if (smth.value) {\n            str += util.format(\" = %s\", this.escape(smth.value));\n          }\n          return str;\n        }\n      } else if (smth instanceof Utils.Cast) {\n        if (/timestamp/i.test(smth.type)) {\n          smth.type = \"datetime\";\n        } else if (smth.json && /boolean/i.test(smth.type)) {\n          smth.type = \"char\";\n        } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n          smth.type = \"decimal\";\n        } else if (/text/i.test(smth.type)) {\n          smth.type = \"char\";\n        }\n      }\n      return _get(_getPrototypeOf(MySQLQueryGenerator.prototype), \"handleSequelizeMethod\", this).call(this, smth, tableName, factory, options, prepend);\n    }\n  }, {\n    key: \"_toJSONValue\",\n    value: function _toJSONValue(value) {\n      if (typeof value === \"boolean\") {\n        return value.toString();\n      }\n      if (value === null) {\n        return \"null\";\n      }\n      return value;\n    }\n  }, {\n    key: \"truncateTableQuery\",\n    value: function truncateTableQuery(tableName) {\n      return \"TRUNCATE \".concat(this.quoteTable(tableName));\n    }\n  }, {\n    key: \"deleteQuery\",\n    value: function deleteQuery(tableName, where) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var model = arguments.length > 3 ? arguments[3] : undefined;\n      var limit = \"\";\n      var query = \"DELETE FROM \".concat(this.quoteTable(tableName));\n      if (options.limit) {\n        limit = \" LIMIT \".concat(this.escape(options.limit));\n      }\n      where = this.getWhereConditions(where, null, model, options);\n      if (where) {\n        query += \" WHERE \".concat(where);\n      }\n      return query + limit;\n    }\n  }, {\n    key: \"showIndexesQuery\",\n    value: function showIndexesQuery(tableName, options) {\n      return Utils.joinSQLFragments([\"SHOW INDEX FROM \".concat(this.quoteTable(tableName)), options && options.database && \"FROM `\".concat(options.database, \"`\")]);\n    }\n  }, {\n    key: \"showConstraintsQuery\",\n    value: function showConstraintsQuery(table, constraintName) {\n      var tableName = table.tableName || table;\n      var schemaName = table.schema;\n      return Utils.joinSQLFragments([\"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\", \"CONSTRAINT_NAME AS constraintName,\", \"CONSTRAINT_SCHEMA AS constraintSchema,\", \"CONSTRAINT_TYPE AS constraintType,\", \"TABLE_NAME AS tableName,\", \"TABLE_SCHEMA AS tableSchema\", \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\", \"WHERE table_name='\".concat(tableName, \"'\"), constraintName && \"AND constraint_name = '\".concat(constraintName, \"'\"), schemaName && \"AND TABLE_SCHEMA = '\".concat(schemaName, \"'\"), \";\"]);\n    }\n  }, {\n    key: \"removeIndexQuery\",\n    value: function removeIndexQuery(tableName, indexNameOrAttributes) {\n      var indexName = indexNameOrAttributes;\n      if (typeof indexName !== \"string\") {\n        indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join(\"_\")));\n      }\n      return Utils.joinSQLFragments([\"DROP INDEX\", this.quoteIdentifier(indexName), \"ON\", this.quoteTable(tableName)]);\n    }\n  }, {\n    key: \"attributeToSQL\",\n    value: function attributeToSQL(attribute, options) {\n      if (!_.isPlainObject(attribute)) {\n        attribute = {\n          type: attribute\n        };\n      }\n      var attributeString = attribute.type.toString({\n        escape: this.escape.bind(this)\n      });\n      var template = attributeString;\n      if (attribute.allowNull === false) {\n        template += \" NOT NULL\";\n      }\n      if (attribute.autoIncrement) {\n        template += \" auto_increment\";\n      }\n      if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n        template += \" DEFAULT \".concat(this.escape(attribute.defaultValue));\n      }\n      if (attribute.unique === true) {\n        template += \" UNIQUE\";\n      }\n      if (attribute.primaryKey) {\n        template += \" PRIMARY KEY\";\n      }\n      if (attribute.comment) {\n        template += \" COMMENT \".concat(this.escape(attribute.comment));\n      }\n      if (attribute.first) {\n        template += \" FIRST\";\n      }\n      if (attribute.after) {\n        template += \" AFTER \".concat(this.quoteIdentifier(attribute.after));\n      }\n      if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n        if (options && options.context === \"addColumn\" && options.foreignKey) {\n          var attrName = this.quoteIdentifier(options.foreignKey);\n          var fkName = this.quoteIdentifier(\"\".concat(options.tableName, \"_\").concat(attrName, \"_foreign_idx\"));\n          template += \", ADD CONSTRAINT \".concat(fkName, \" FOREIGN KEY (\").concat(attrName, \")\");\n        }\n        template += \" REFERENCES \".concat(this.quoteTable(attribute.references.model));\n        if (attribute.references.key) {\n          template += \" (\".concat(this.quoteIdentifier(attribute.references.key), \")\");\n        } else {\n          template += \" (\".concat(this.quoteIdentifier(\"id\"), \")\");\n        }\n        if (attribute.onDelete) {\n          template += \" ON DELETE \".concat(attribute.onDelete.toUpperCase());\n        }\n        if (attribute.onUpdate) {\n          template += \" ON UPDATE \".concat(attribute.onUpdate.toUpperCase());\n        }\n      }\n      return template;\n    }\n  }, {\n    key: \"attributesToSQL\",\n    value: function attributesToSQL(attributes, options) {\n      var result = {};\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        result[attribute.field || key] = this.attributeToSQL(attribute, options);\n      }\n      return result;\n    }\n  }, {\n    key: \"_checkValidJsonStatement\",\n    value: function _checkValidJsonStatement(stmt) {\n      if (typeof stmt !== \"string\") {\n        return false;\n      }\n      var currentIndex = 0;\n      var openingBrackets = 0;\n      var closingBrackets = 0;\n      var hasJsonFunction = false;\n      var hasInvalidToken = false;\n      while (currentIndex < stmt.length) {\n        var string = stmt.substr(currentIndex);\n        var functionMatches = JSON_FUNCTION_REGEX.exec(string);\n        if (functionMatches) {\n          currentIndex += functionMatches[0].indexOf(\"(\");\n          hasJsonFunction = true;\n          continue;\n        }\n        var operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n        if (operatorMatches) {\n          currentIndex += operatorMatches[0].length;\n          hasJsonFunction = true;\n          continue;\n        }\n        var tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n        if (tokenMatches) {\n          var capturedToken = tokenMatches[1];\n          if (capturedToken === \"(\") {\n            openingBrackets++;\n          } else if (capturedToken === \")\") {\n            closingBrackets++;\n          } else if (capturedToken === \";\") {\n            hasInvalidToken = true;\n            break;\n          }\n          currentIndex += tokenMatches[0].length;\n          continue;\n        }\n        break;\n      }\n      if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n        throw new Error(\"Invalid json statement: \".concat(stmt));\n      }\n      return hasJsonFunction;\n    }\n  }, {\n    key: \"getForeignKeysQuery\",\n    value: function getForeignKeysQuery(table, schemaName) {\n      var tableName = table.tableName || table;\n      return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '\".concat(tableName, \"'\"), \"AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='\".concat(schemaName, \"'\"), \"AND REFERENCED_TABLE_NAME IS NOT NULL\", \";\"]);\n    }\n  }, {\n    key: \"getForeignKeyQuery\",\n    value: function getForeignKeyQuery(table, columnName) {\n      var quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : \"\";\n      var quotedTableName = wrapSingleQuote(table.tableName || table);\n      var quotedColumnName = wrapSingleQuote(columnName);\n      return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\", \"WHERE (\", [\"REFERENCED_TABLE_NAME = \".concat(quotedTableName), table.schema && \"AND REFERENCED_TABLE_SCHEMA = \".concat(quotedSchemaName), \"AND REFERENCED_COLUMN_NAME = \".concat(quotedColumnName)], \") OR (\", [\"TABLE_NAME = \".concat(quotedTableName), table.schema && \"AND TABLE_SCHEMA = \".concat(quotedSchemaName), \"AND COLUMN_NAME = \".concat(quotedColumnName), \"AND REFERENCED_TABLE_NAME IS NOT NULL\"], \")\"]);\n    }\n  }, {\n    key: \"dropForeignKeyQuery\",\n    value: function dropForeignKeyQuery(tableName, foreignKey) {\n      return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP FOREIGN KEY\", this.quoteIdentifier(foreignKey), \";\"]);\n    }\n  }, {\n    key: \"quoteIdentifier\",\n    value: function quoteIdentifier(identifier, force) {\n      return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n    }\n  }]);\n  return MySQLQueryGenerator;\n}(AbstractQueryGenerator);\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\nmodule.exports = MySQLQueryGenerator;","map":{"version":3,"names":["_","require","Utils","AbstractQueryGenerator","util","Op","JSON_FUNCTION_REGEX","JSON_OPERATOR_REGEX","TOKEN_CAPTURE_REGEX","FOREIGN_KEY_FIELDS","join","typeWithoutDefault","Set","MySQLQueryGenerator","_AbstractQueryGenerat","_inherits","_super","_createSuper","options","_spreadProps","_this","_classCallCheck","call","OperatorMap","__spreadProps","__spreadValues","_defineProperty","regexp","notRegexp","_createClass","key","value","createDatabaseQuery","databaseName","charset","collate","joinSQLFragments","quoteIdentifier","concat","escape","dropDatabaseQuery","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","_this2","engine","rowFormat","primaryKeys","foreignKeys","attrStr","attr","Object","prototype","hasOwnProperty","dataType","match","includes","push","replace","table","quoteTable","attributesClause","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","comment","initialAutoIncrement","describeTableQuery","schema","schemaDelimiter","addSchema","_schema","_schemaDelimiter","showTablesQuery","database","query","tableExistsQuery","slice","sequelize","config","addColumnQuery","attributeToSQL","context","foreignKey","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","definition","attrName","renameColumnQuery","attrBefore","handleSequelizeMethod","smth","factory","prepend","_this3","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","str","_checkValidJsonStatement","paths","toPath","column","shift","format","Cast","test","type","json","_get","_getPrototypeOf","_toJSONValue","toString","truncateTableQuery","deleteQuery","where","arguments","undefined","model","limit","getWhereConditions","showIndexesQuery","showConstraintsQuery","constraintName","schemaName","removeIndexQuery","indexNameOrAttributes","underscore","attribute","isPlainObject","attributeString","bind","template","allowNull","autoIncrement","has","_binary","defaultValueSchemable","defaultValue","unique","primaryKey","first","after","withoutForeignKeyConstraints","references","fkName","onDelete","toUpperCase","onUpdate","attributesToSQL","result","stmt","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","indexOf","operatorMatches","tokenMatches","capturedToken","Error","getForeignKeysQuery","getForeignKeyQuery","columnName","quotedSchemaName","wrapSingleQuote","quotedTableName","quotedColumnName","dropForeignKeyQuery","identifier","force","addTicks","removeTicks","module","exports"],"sources":["../../../src/dialects/mysql/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\', \\'mysql\\', \\'information_schema\\', \\'performance_schema\\', \\'sys\\')';\n    }\n    return `${query};`;\n  }\n\n  tableExistsQuery(table) {\n    // remove first & last `, then escape as SQL string\n    const tableName = this.escape(this.quoteTable(table).slice(1, -1));\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';'\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'decimal';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _toJSONValue(value) {\n    // true/false are stored as strings in mysql\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n    // null is stored as a string in mysql\n    if (value === null) {\n      return 'null';\n    }\n    return value;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = '';\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    return query + limit;\n  }\n\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\n      options && options.database && `FROM \\`${options.database}\\``\n    ]);\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = MySQLQueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}