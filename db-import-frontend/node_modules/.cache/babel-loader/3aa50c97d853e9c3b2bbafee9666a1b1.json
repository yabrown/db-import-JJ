{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar AbstractConnectionManager = require(\"../abstract/connection-manager\");\nvar SequelizeErrors = require(\"../../errors\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar DataTypes = require(\"../../data-types\").snowflake;\nvar debug = logger.debugContext(\"connection:snowflake\");\nvar parserStore = require(\"../parserStore\")(\"snowflake\");\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n  var _super = _createSuper(ConnectionManager);\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n    _classCallCheck(this, ConnectionManager);\n    sequelize.config.port = sequelize.config.port || 3306;\n    _this = _super.call(this, dialect, sequelize);\n    _this.lib = _this._loadDialectModule(\"snowflake-sdk\");\n    _this.refreshTypeParser(DataTypes);\n    return _this;\n  }\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n        var _this2 = this;\n        var connectionConfig, connection, tzOffset, isNamedTzOffset;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connectionConfig = __spreadValues({\n                account: config.host,\n                username: config.username,\n                password: config.password,\n                database: config.database,\n                warehouse: config.warehouse,\n                role: config.role\n              }, config.dialectOptions);\n              _context.prev = 1;\n              _context.next = 4;\n              return new Promise(function (resolve, reject) {\n                _this2.lib.createConnection(connectionConfig).connect(function (err, conn) {\n                  if (err) {\n                    console.log(err);\n                    reject(err);\n                  } else {\n                    resolve(conn);\n                  }\n                });\n              });\n            case 4:\n              connection = _context.sent;\n              debug(\"connection acquired\");\n              if (this.sequelize.config.keepDefaultTimezone) {\n                _context.next = 15;\n                break;\n              }\n              tzOffset = this.sequelize.options.timezone === \"+00:00\" ? \"Etc/UTC\" : this.sequelize.options.timezone;\n              isNamedTzOffset = /\\//.test(tzOffset);\n              if (!isNamedTzOffset) {\n                _context.next = 14;\n                break;\n              }\n              _context.next = 12;\n              return new Promise(function (resolve, reject) {\n                connection.execute({\n                  sqlText: \"ALTER SESSION SET timezone = '\".concat(tzOffset, \"'\"),\n                  complete: function complete(err) {\n                    if (err) {\n                      console.log(err);\n                      reject(err);\n                    } else {\n                      resolve();\n                    }\n                  }\n                });\n              });\n            case 12:\n              _context.next = 15;\n              break;\n            case 14:\n              throw Error(\"only support time zone name for snowflake!\");\n            case 15:\n              return _context.abrupt(\"return\", connection);\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](1);\n              _context.t1 = _context.t0.code;\n              _context.next = _context.t1 === \"ECONNREFUSED\" ? 23 : _context.t1 === \"ER_ACCESS_DENIED_ERROR\" ? 24 : _context.t1 === \"ENOTFOUND\" ? 25 : _context.t1 === \"EHOSTUNREACH\" ? 26 : _context.t1 === \"EINVAL\" ? 27 : 28;\n              break;\n            case 23:\n              throw new SequelizeErrors.ConnectionRefusedError(_context.t0);\n            case 24:\n              throw new SequelizeErrors.AccessDeniedError(_context.t0);\n            case 25:\n              throw new SequelizeErrors.HostNotFoundError(_context.t0);\n            case 26:\n              throw new SequelizeErrors.HostNotReachableError(_context.t0);\n            case 27:\n              throw new SequelizeErrors.InvalidConnectionError(_context.t0);\n            case 28:\n              throw new SequelizeErrors.ConnectionError(_context.t0);\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 18]]);\n      }));\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (connection.isUp()) {\n                _context2.next = 3;\n                break;\n              }\n              debug(\"connection tried to disconnect but was already at CLOSED state\");\n              return _context2.abrupt(\"return\");\n            case 3:\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                connection.destroy(function (err) {\n                  if (err) {\n                    console.error(\"Unable to disconnect: \".concat(err.message));\n                    reject(err);\n                  } else {\n                    console.log(\"Disconnected connection with id: \".concat(connection.getId()));\n                    resolve(connection.getId());\n                  }\n                });\n              }));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection.isUp();\n    }\n  }], [{\n    key: \"_typecast\",\n    value: function _typecast(field, next) {\n      if (parserStore.get(field.type)) {\n        return parserStore.get(field.type)(field, this.sequelize.options, next);\n      }\n      return next();\n    }\n  }]);\n  return ConnectionManager;\n}(AbstractConnectionManager);\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["AbstractConnectionManager","require","SequelizeErrors","_require","logger","DataTypes","snowflake","debug","debugContext","parserStore","ConnectionManager","_AbstractConnectionMa","_inherits","_super","_createSuper","dialect","sequelize","_this","_classCallCheck","config","port","call","lib","_loadDialectModule","refreshTypeParser","_createClass","key","value","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","connectionConfig","connection","tzOffset","isNamedTzOffset","wrap","_callee$","_context","prev","next","__spreadValues","account","host","username","password","database","warehouse","role","dialectOptions","Promise","resolve","reject","createConnection","connect","err","conn","console","log","sent","keepDefaultTimezone","options","timezone","test","execute","sqlText","concat","complete","Error","abrupt","t0","t1","code","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","stop","_x","apply","arguments","_disconnect","_callee2","_callee2$","_context2","isUp","destroy","error","message","getId","disconnect","_x2","validate","_typecast","field","get","type","module","exports","default"],"sources":["../../../src/dialects/snowflake/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').snowflake;\nconst debug = logger.debugContext('connection:snowflake');\nconst parserStore = require('../parserStore')('snowflake');\n\n/**\n * Snowflake Connection Manager\n *\n * Get connections, validate and disconnect them.\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('snowflake-sdk');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with a snowflake database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role,\n      /*\n      flags: '-FOUND_ROWS',\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      */\n      ...config.dialectOptions\n    };\n\n    try {\n\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.log(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n\n      debug('connection acquired');\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // default value is '+00:00', put a quick workaround for it.\n        const tzOffset = this.sequelize.options.timezone === '+00:00' ? 'Etc/UTC' : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if ( isNamedTzOffset ) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              }\n            });\n          });\n        } else {\n          throw Error('only support time zone name for snowflake!');\n        }\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isUp()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.log(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection.isUp();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}