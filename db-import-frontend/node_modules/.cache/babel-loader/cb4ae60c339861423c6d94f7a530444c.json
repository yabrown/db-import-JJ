{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport var exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  return retryPolicy([exponentialRetryStrategy(Object.assign(Object.assign({}, options), {\n    ignoreSystemErrors: true\n  }))], {\n    maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT\n  });\n}","map":{"version":3,"names":["exponentialRetryStrategy","retryPolicy","DEFAULT_RETRY_POLICY_COUNT","exponentialRetryPolicyName","exponentialRetryPolicy","options","arguments","length","undefined","Object","assign","ignoreSystemErrors","maxRetries","_a"],"sources":["../../../src/policies/exponentialRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelinePolicy } from \"../pipeline\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport const exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface ExponentialRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy(\n  options: ExponentialRetryPolicyOptions = {}\n): PipelinePolicy {\n  return retryPolicy(\n    [\n      exponentialRetryStrategy({\n        ...options,\n        ignoreSystemErrors: true,\n      }),\n    ],\n    {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    }\n  );\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,wBAAwB,QAAQ,6CAA6C;AACtF,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,0BAA0B,QAAQ,cAAc;AAEzD;;;AAGA,OAAO,IAAMC,0BAA0B,GAAG,wBAAwB;AAyBlE;;;;AAIA,OAAM,SAAUC,sBAAsBA,CAAA,EACO;EAAA,IAA3CC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyC,EAAE;;EAE3C,OAAOL,WAAW,CAChB,CACED,wBAAwB,CAAAS,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACnBL,OAAO;IACVM,kBAAkB,EAAE;EAAI,GACxB,CACH,EACD;IACEC,UAAU,EAAE,CAAAC,EAAA,GAAAR,OAAO,CAACO,UAAU,cAAAC,EAAA,cAAAA,EAAA,GAAIX;GACnC,CACF;AACH"},"metadata":{},"sourceType":"module"}