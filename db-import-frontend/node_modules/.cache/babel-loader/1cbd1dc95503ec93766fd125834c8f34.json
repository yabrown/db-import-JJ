{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n */\nexport function encodeString(value) {\n  return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n */\nexport function encodeByteArray(value) {\n  var str = \"\";\n  for (var i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n */\nexport function decodeString(value) {\n  var byteString = atob(value);\n  var arr = new Uint8Array(byteString.length);\n  for (var i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n */\nexport function decodeStringToString(value) {\n  return atob(value);\n}","map":{"version":3,"names":["encodeString","value","btoa","encodeByteArray","str","i","length","String","fromCharCode","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","decodeStringToString"],"sources":["../../src/base64.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n */\nexport function decodeStringToString(value: string): string {\n  return atob(value);\n}\n"],"mappings":"AAAA;AACA;AAQA;;;;AAIA,OAAM,SAAUA,YAAYA,CAACC,KAAa;EACxC,OAAOC,IAAI,CAACD,KAAK,CAAC;AACpB;AAEA;;;;AAIA,OAAM,SAAUE,eAAeA,CAACF,KAAiB;EAC/C,IAAIG,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,GAAG,IAAIG,MAAM,CAACC,YAAY,CAACP,KAAK,CAACI,CAAC,CAAC,CAAC;;EAEtC,OAAOH,IAAI,CAACE,GAAG,CAAC;AAClB;AAEA;;;;AAIA,OAAM,SAAUK,YAAYA,CAACR,KAAa;EACxC,IAAMS,UAAU,GAAGC,IAAI,CAACV,KAAK,CAAC;EAC9B,IAAMW,GAAG,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACJ,MAAM,CAAC;EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,UAAU,CAACJ,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1CO,GAAG,CAACP,CAAC,CAAC,GAAGK,UAAU,CAACI,UAAU,CAACT,CAAC,CAAC;;EAEnC,OAAOO,GAAG;AACZ;AAEA;;;;AAIA,OAAM,SAAUG,oBAAoBA,CAACd,KAAa;EAChD,OAAOU,IAAI,CAACV,KAAK,CAAC;AACpB"},"metadata":{},"sourceType":"module"}