{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require('minipass'),\n  Minipass = _require.Minipass;\nvar normPath = require('./normalize-windows-path.js');\nvar SLURP = Symbol('slurp');\nmodule.exports = /*#__PURE__*/function (_Minipass) {\n  _inherits(ReadEntry, _Minipass);\n  var _super = _createSuper(ReadEntry);\n  function ReadEntry(header, ex, gex) {\n    var _this;\n    _classCallCheck(this, ReadEntry);\n    _this = _super.call(this);\n    // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n    _this.pause();\n    _this.extended = ex;\n    _this.globalExtended = gex;\n    _this.header = header;\n    _this.startBlockSize = 512 * Math.ceil(header.size / 512);\n    _this.blockRemain = _this.startBlockSize;\n    _this.remain = header.size;\n    _this.type = header.type;\n    _this.meta = false;\n    _this.ignore = false;\n    switch (_this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break;\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        _this.meta = true;\n        break;\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        _this.ignore = true;\n    }\n    _this.path = normPath(header.path);\n    _this.mode = header.mode;\n    if (_this.mode) {\n      _this.mode = _this.mode & 4095;\n    }\n    _this.uid = header.uid;\n    _this.gid = header.gid;\n    _this.uname = header.uname;\n    _this.gname = header.gname;\n    _this.size = header.size;\n    _this.mtime = header.mtime;\n    _this.atime = header.atime;\n    _this.ctime = header.ctime;\n    _this.linkpath = normPath(header.linkpath);\n    _this.uname = header.uname;\n    _this.gname = header.gname;\n    if (ex) {\n      _this[SLURP](ex);\n    }\n    if (gex) {\n      _this[SLURP](gex, true);\n    }\n    return _this;\n  }\n  _createClass(ReadEntry, [{\n    key: \"write\",\n    value: function write(data) {\n      var writeLen = data.length;\n      if (writeLen > this.blockRemain) {\n        throw new Error('writing more to entry than is appropriate');\n      }\n      var r = this.remain;\n      var br = this.blockRemain;\n      this.remain = Math.max(0, r - writeLen);\n      this.blockRemain = Math.max(0, br - writeLen);\n      if (this.ignore) {\n        return true;\n      }\n      if (r >= writeLen) {\n        return _get(_getPrototypeOf(ReadEntry.prototype), \"write\", this).call(this, data);\n      }\n\n      // r < writeLen\n      return _get(_getPrototypeOf(ReadEntry.prototype), \"write\", this).call(this, data.slice(0, r));\n    }\n  }, {\n    key: SLURP,\n    value: function value(ex, global) {\n      for (var k in ex) {\n        // we slurp in everything except for the path attribute in\n        // a global extended header, because that's weird.\n        if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) {\n          this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k];\n        }\n      }\n    }\n  }]);\n  return ReadEntry;\n}(Minipass);","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_get","_getPrototypeOf","_inherits","_createSuper","_require","Minipass","normPath","SLURP","Symbol","module","exports","_Minipass","ReadEntry","_super","header","ex","gex","_this","call","pause","extended","globalExtended","startBlockSize","Math","ceil","size","blockRemain","remain","type","meta","ignore","path","mode","uid","gid","uname","gname","mtime","atime","ctime","linkpath","key","value","write","data","writeLen","length","Error","r","br","max","prototype","slice","global","k","undefined"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/tar/lib/read-entry.js"],"sourcesContent":["'use strict'\nconst { Minipass } = require('minipass')\nconst normPath = require('./normalize-windows-path.js')\n\nconst SLURP = Symbol('slurp')\nmodule.exports = class ReadEntry extends Minipass {\n  constructor (header, ex, gex) {\n    super()\n    // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n    this.pause()\n    this.extended = ex\n    this.globalExtended = gex\n    this.header = header\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\n    this.blockRemain = this.startBlockSize\n    this.remain = header.size\n    this.type = header.type\n    this.meta = false\n    this.ignore = false\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true\n        break\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        this.ignore = true\n    }\n\n    this.path = normPath(header.path)\n    this.mode = header.mode\n    if (this.mode) {\n      this.mode = this.mode & 0o7777\n    }\n    this.uid = header.uid\n    this.gid = header.gid\n    this.uname = header.uname\n    this.gname = header.gname\n    this.size = header.size\n    this.mtime = header.mtime\n    this.atime = header.atime\n    this.ctime = header.ctime\n    this.linkpath = normPath(header.linkpath)\n    this.uname = header.uname\n    this.gname = header.gname\n\n    if (ex) {\n      this[SLURP](ex)\n    }\n    if (gex) {\n      this[SLURP](gex, true)\n    }\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain) {\n      throw new Error('writing more to entry than is appropriate')\n    }\n\n    const r = this.remain\n    const br = this.blockRemain\n    this.remain = Math.max(0, r - writeLen)\n    this.blockRemain = Math.max(0, br - writeLen)\n    if (this.ignore) {\n      return true\n    }\n\n    if (r >= writeLen) {\n      return super.write(data)\n    }\n\n    // r < writeLen\n    return super.write(data.slice(0, r))\n  }\n\n  [SLURP] (ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path')) {\n        this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k]\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}