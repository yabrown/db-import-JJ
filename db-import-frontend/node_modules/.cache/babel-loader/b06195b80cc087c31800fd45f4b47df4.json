{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectClient = /** @class */function (_super) {\n  __extends(RedirectClient, _super);\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n            handleBackButton = function handleBackButton(event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n              }\n            };\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n            // Create auth code request and generate PKCE params\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\n          case 3:\n            authCodeRequest = _a.sent();\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2 /*return*/, _a.sent()];\n          case 7:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2 /*return*/, null];\n            }\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2 /*return*/, null];\n            }\n            state = void 0;\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2 /*return*/, null];\n            }\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];\n            // We are on the page we need to navigate to - handle hash\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n          case 2:\n            handleHashResult = _a.sent();\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n            return [2 /*return*/, handleHashResult];\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3 /*break*/, 6];\n            homepage = BrowserUtils.getHomepage();\n            // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3 /*break*/, 8];\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n            _a.label = 9;\n          case 9:\n            return [2 /*return*/, null];\n          case 10:\n            e_2 = _a.sent();\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\");\n    // Get current location hash from window or cache.\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n            // Clear cache on logout\n            return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3 /*break*/, 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3 /*break*/, 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n          case 4:\n            _a.sent();\n            return [2 /*return*/];\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n          case 8:\n            _a.sent();\n            return [2 /*return*/];\n          case 9:\n            return [3 /*break*/, 11];\n          case 10:\n            e_3 = _a.sent();\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n  return RedirectClient;\n}(StandardInteractionClient);\nexport { RedirectClient };","map":{"version":3,"names":["__extends","RedirectClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","nativeStorage","prototype","acquireToken","request","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","InteractionType","Redirect","validRequest","_a","sent","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","handleBackButton","event","persisted","verbose","cleanRequestByState","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","interactionHandler","RedirectHandler","getAuthCodeUrl","__assign","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","redirectStartPage","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","e_1","AuthError","setCorrelationId","removeEventListener","cacheFailedRequest","handleRedirectPromise","hash","isInteractionInProgress","info","responseHash","getRedirectResponseHash","location","cleanRequestByInteractionType","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","e","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","loginRequestUrlNormalized","removeHashFromUrl","currentUrlNormalized","href","auth","navigateToLoginRequestUrl","handleHash","handleHashResult","indexOf","BrowserUtils","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","e_2","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","getCachedRequest","accountId","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","acquireTokenPopup","userRequestState","ProtocolUtils","parseRequestState","prompt","undefined","finally","currentAuthority","getCachedAuthority","createNoCachedAuthorityError","ThrottlingUtils","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","emitEvent","EventType","LOGOUT_START","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","navigate","getInteractionInProgress","setInteractionInProgress","navigateExternal","e_3","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri","StandardInteractionClient"],"sources":["../../src/interaction_client/RedirectClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, ThrottlingUtils, ICrypto, Logger, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\n\r\nexport class RedirectClient extends StandardInteractionClient {\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */\r\n    async acquireToken(request: RedirectRequest): Promise<void> {\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\r\n\r\n        const handleBackButton = (event: PageTransitionEvent) => {\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            if (event.persisted) {\r\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\r\n                this.browserStorage.cleanRequestByState(validRequest.state);\r\n            }\r\n        };\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create redirect interaction handler.\r\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\r\n            });\r\n\r\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\r\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\r\n\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            window.addEventListener(\"pageshow\", handleBackButton);\r\n\r\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\r\n                navigationClient: this.navigationClient,\r\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\r\n                redirectStartPage: redirectStartPage,\r\n                onRedirectNavigate: request.onRedirectNavigate\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(this.correlationId);\r\n            }\r\n            window.removeEventListener(\"pageshow\", handleBackButton);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash\r\n     */\r\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\r\n        try {\r\n            if (!this.browserStorage.isInteractionInProgress(true)) {\r\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\r\n                return null;\r\n            }\r\n\r\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\r\n            if (!responseHash) {\r\n                // Not a recognized server response hash or hash not associated with a redirect request\r\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            let state: string;\r\n            try {\r\n                // Deserialize hash fragment response parameters.\r\n                const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(responseHash);\r\n                state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\r\n                this.logger.verbose(\"State extracted from hash\");\r\n            } catch (e) {\r\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\r\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\r\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\r\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\r\n\r\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\r\n                // We are on the page we need to navigate to - handle hash\r\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\r\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\r\n\r\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\r\n                    // Replace current hash with non-msal hash, if present\r\n                    BrowserUtils.replaceHash(loginRequestUrl);\r\n                }\r\n\r\n                return handleHashResult;\r\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\r\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\r\n                return this.handleHash(responseHash, state, serverTelemetryManager);\r\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\r\n                /*\r\n                 * Returned from authority using redirect - need to perform navigation before processing response\r\n                 * Cache the hash to be retrieved after the next redirect\r\n                 */\r\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.handleRedirectPromise,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: true\r\n                };\r\n\r\n                /**\r\n                 * Default behavior is to redirect to the start page and not process the hash now.\r\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n                 */\r\n                let processHashOnRedirect: boolean = true;\r\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                    // Redirect to home page if login request url is null (real null or the string null)\r\n                    const homepage = BrowserUtils.getHomepage();\r\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\r\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\r\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\r\n                } else {\r\n                    // Navigate to page that initiated the redirect request\r\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\r\n                }\r\n\r\n                // If navigateInternal implementation returns false, handle the hash now\r\n                if (!processHashOnRedirect) {\r\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */\r\n    protected getRedirectResponseHash(hash: string): string | null {\r\n        this.logger.verbose(\"getRedirectResponseHash called\");\r\n        // Get current location hash from window or cache.\r\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\r\n\r\n        if (isResponseHash) {\r\n            BrowserUtils.clearHash(window);\r\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\r\n            return hash;\r\n        }\r\n\r\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n\r\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\r\n        return cachedHash;\r\n    }\r\n\r\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */\r\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\r\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\r\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\r\n\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...cachedRequest,\r\n                state: userRequestState,\r\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Hash contains known properties - handle and return in callback\r\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\r\n        if (!currentAuthority) {\r\n            throw BrowserAuthError.createNoCachedAuthorityError();\r\n        }\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\r\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\r\n        this.logger.verbose(\"Auth code client created\");\r\n        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\r\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        this.logger.verbose(\"logoutRedirect called\");\r\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\r\n\r\n        try {\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\r\n\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validLogoutRequest.account);\r\n\r\n            const navigationOptions: NavigationOptions = {\r\n                apiId: ApiId.logout,\r\n                timeout: this.config.system.redirectNavigationTimeout,\r\n                noHistory: false\r\n            };\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\r\n            // Check if onRedirectNavigate is implemented, and invoke it if so\r\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\r\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\r\n\r\n                if (navigate !== false) {\r\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\r\n                    // Ensure interaction is in progress\r\n                    if (!this.browserStorage.getInteractionInProgress()) {\r\n                        this.browserStorage.setInteractionInProgress(true);\r\n                    }\r\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                    return;\r\n                } else {\r\n                    // Ensure interaction is not in progress\r\n                    this.browserStorage.setInteractionInProgress(false);\r\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\r\n                }\r\n            } else {\r\n                // Ensure interaction is in progress\r\n                if (!this.browserStorage.getInteractionInProgress()) {\r\n                    this.browserStorage.setInteractionInProgress(true);\r\n                }\r\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                return;\r\n            }\r\n        } catch(e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n    }\r\n\r\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */\r\n    protected getRedirectStartPage(requestStartPage?: string): string {\r\n        const redirectStartPage = requestStartPage || window.location.href;\r\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}