{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content) {\n  if (typeof atob !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global \\\"atob\\\" function.\");\n  }\n  var binary = atob(content);\n  var bytes = new Uint8Array(binary.length);\n  for (var i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer) {\n  if (typeof btoa !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global \\\"btoa\\\" function.\");\n  }\n  var bytes = new Uint8Array(buffer);\n  var binary = \"\";\n  var _iterator = _createForOfIteratorHelper(bytes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      binary += String.fromCharCode(byte);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return btoa(binary);\n}","map":{"version":3,"names":["base64ToBytes","content","atob","Error","binary","bytes","Uint8Array","length","i","charCodeAt","bufferToBase64","buffer","btoa","_iterator","_createForOfIteratorHelper","_step","s","n","done","byte","value","String","fromCharCode","err","e","f"],"sources":["../../src/base64.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content: string): Uint8Array {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer: ArrayBuffer): string {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n  return btoa(binary);\n}\n"],"mappings":";AAAA;AACA;AAQA;;;;;AAKA,OAAM,SAAUA,aAAaA,CAACC,OAAe;EAC3C,IAAI,OAAOC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAM,IAAIC,KAAK,oEAAkE,CAAC;;EAGpF,IAAMC,MAAM,GAAGF,IAAI,CAACD,OAAO,CAAC;EAC5B,IAAMI,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,MAAM,CAAC;EAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCH,KAAK,CAACG,CAAC,CAAC,GAAGJ,MAAM,CAACK,UAAU,CAACD,CAAC,CAAC;;EAGjC,OAAOH,KAAK;AACd;AAEA;;;;;AAKA,OAAM,SAAUK,cAAcA,CAACC,MAAmB;EAChD,IAAI,OAAOC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAM,IAAIT,KAAK,oEAAkE,CAAC;;EAGpF,IAAME,KAAK,GAAG,IAAIC,UAAU,CAACK,MAAM,CAAC;EACpC,IAAIP,MAAM,GAAG,EAAE;EAAC,IAAAS,SAAA,GAAAC,0BAAA,CACGT,KAAK;IAAAU,KAAA;EAAA;IAAxB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0B;MAAA,IAAfC,IAAI,GAAAJ,KAAA,CAAAK,KAAA;MACbhB,MAAM,IAAIiB,MAAM,CAACC,YAAY,CAACH,IAAI,CAAC;;EACpC,SAAAI,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EACD,OAAOb,IAAI,CAACR,MAAM,CAAC;AACrB"},"metadata":{},"sourceType":"module"}