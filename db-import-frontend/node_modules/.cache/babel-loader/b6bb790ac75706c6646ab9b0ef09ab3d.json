{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar AbstractDialect = require(\"../abstract\");\nvar ConnectionManager = require(\"./connection-manager\");\nvar Query = require(\"./query\");\nvar QueryGenerator = require(\"./query-generator\");\nvar DataTypes = require(\"../../data-types\").snowflake;\nvar _require = require(\"./query-interface\"),\n  SnowflakeQueryInterface = _require.SnowflakeQueryInterface;\nvar SnowflakeDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(SnowflakeDialect, _AbstractDialect);\n  var _super = _createSuper(SnowflakeDialect);\n  function SnowflakeDialect(sequelize) {\n    var _this;\n    _classCallCheck(this, SnowflakeDialect);\n    _this = _super.call(this);\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_this),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new SnowflakeQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n  return _createClass(SnowflakeDialect);\n}(AbstractDialect);\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\nSnowflakeDialect.prototype.defaultVersion = \"5.7.0\";\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = \"snowflake\";\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\nmodule.exports = SnowflakeDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","snowflake","_require","SnowflakeQueryInterface","SnowflakeDialect","_AbstractDialect","_inherits","_super","_createSuper","sequelize","_this","_classCallCheck","call","connectionManager","_assertThisInitialized","queryGenerator","_dialect","queryInterface","_createClass","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","schemas","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["../../../src/dialects/snowflake/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').snowflake;\nconst { SnowflakeQueryInterface } = require('./query-interface');\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    // disable for now, but could be enable by approach below\n    // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  // disable for now, need more work to enable the GEOGRAPHY MAPPING\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\n\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = 'snowflake';\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\n\nmodule.exports = SnowflakeDialect;\n"],"mappings":";;;;;;;AAEA,IAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,IAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,IAAME,iBAAA,GAAoBF,OAAA,CAAQ;AAClC,IAAMG,KAAA,GAAQH,OAAA,CAAQ;AACtB,IAAMI,cAAA,GAAiBJ,OAAA,CAAQ;AAC/B,IAAMK,SAAA,GAAYL,OAAA,CAAQ,oBAAoBM,SAAA;AAC9C,IAAAC,QAAA,GAAoCP,OAAA,CAAQ;EAApCQ,uBAAA,GAAAD,QAAA,CAAAC,uBAAA;AAAoC,IAE5CC,gBAAA,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EACE,SAAAA,iBAAYK,SAAA,EAAW;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,gBAAA;IACrBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IACAF,KAAA,CAAKD,SAAA,GAAYA,SAAA;IACjBC,KAAA,CAAKG,iBAAA,GAAoB,IAAIhB,iBAAA,CAAAiB,sBAAA,CAAAJ,KAAA,GAAwBD,SAAA;IACrDC,KAAA,CAAKK,cAAA,GAAiB,IAAIhB,cAAA,CAAe;MACvCiB,QAAA,EAAAF,sBAAA,CAAAJ,KAAA,CAAU;MACVD,SAAA,EAAAA;IAAA;IAEFC,KAAA,CAAKO,cAAA,GAAiB,IAAId,uBAAA,CAAwBM,SAAA,EAAWC,KAAA,CAAKK,cAAA;IAAA,OAAAL,KAAA;EAAA;EAAA,OAAAQ,YAAA,CAAAd,gBAAA;AAAA,EATvCR,eAAA;AAa/BQ,gBAAA,CAAiBe,SAAA,CAAUC,QAAA,GAAW1B,CAAA,CAAE2B,KAAA,CAAM3B,CAAA,CAAE4B,SAAA,CAAU1B,eAAA,CAAgBuB,SAAA,CAAUC,QAAA,GAAW;EAC7F,aAAa;EACb,mBAAmB;EACnBG,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,sCAAA,EAAwC;EACxCC,OAAA,EAAS;IACPC,gBAAA,EAAkB;IAGlBC,iBAAA,EAAmB;EAAA;EAErBC,KAAA,EAAO;IACLC,OAAA,EAAS;IACTC,MAAA,EAAQ;IACRC,MAAA,EAAQ;IACRC,IAAA,EAAM;IACNC,KAAA,EAAO;EAAA;EAETC,WAAA,EAAa;IACXC,cAAA,EAAgB;IAChBC,KAAA,EAAO;EAAA;EAETC,aAAA,EAAe;EACfC,UAAA,EAAY;EACZC,OAAA,EAAS;EAETC,QAAA,EAAU;EACVC,IAAA,EAAM;EACNC,MAAA,EAAQ;EACRC,OAAA,EAAS;AAAA;AAGXxC,gBAAA,CAAiBe,SAAA,CAAU0B,cAAA,GAAiB;AAC5CzC,gBAAA,CAAiBe,SAAA,CAAUrB,KAAA,GAAQA,KAAA;AACnCM,gBAAA,CAAiBe,SAAA,CAAUpB,cAAA,GAAiBA,cAAA;AAC5CK,gBAAA,CAAiBe,SAAA,CAAUnB,SAAA,GAAYA,SAAA;AACvCI,gBAAA,CAAiBe,SAAA,CAAU2B,IAAA,GAAO;AAClC1C,gBAAA,CAAiBe,SAAA,CAAU4B,SAAA,GAAY;AACvC3C,gBAAA,CAAiBe,SAAA,CAAU6B,cAAA,GAAiB5C,gBAAA,CAAiBe,SAAA,CAAU4B,SAAA;AACvE3C,gBAAA,CAAiBe,SAAA,CAAU8B,eAAA,GAAkB7C,gBAAA,CAAiBe,SAAA,CAAU4B,SAAA;AAExEG,MAAA,CAAOC,OAAA,GAAU/C,gBAAA"},"metadata":{},"sourceType":"script"}