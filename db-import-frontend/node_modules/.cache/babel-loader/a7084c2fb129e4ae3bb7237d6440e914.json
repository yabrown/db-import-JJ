{"ast":null,"code":"(function () {\n  var _ = require('underscore');\n  function sanitize_input(input) {\n    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]\n    // single quotes (') must be replaced with double single quotes ('')\n    input = input.replace(/'/g, '\\'\\'');\n    // backslashes (\\) must be replaced with double backslashes (\\\\)\n    input = input.replace(/\\\\/g, '\\\\\\\\');\n    // double quotes (\") must be replaced with escaped quotes (\\\\\")\n    input = input.replace(/\"/g, '\\\\\"');\n    return input;\n  }\n  function to_string(input, sanitize) {\n    switch (typeof input) {\n      case 'boolean':\n      case 'number':\n      case 'object':\n        return String(input);\n      case 'string':\n        return sanitize ? sanitize_input(input) : input;\n      default:\n        return '';\n    }\n  }\n  module.exports = function (options) {\n    options = _.defaults({}, options, {\n      sanitize: false\n    });\n    return {\n      stringify: function stringify(data, callback) {\n        var hstore = Object.keys(data).map(function (key) {\n          if (data[key] === null) {\n            return '\"' + to_string(key, options.sanitize) + '\"=>NULL';\n          } else {\n            return '\"' + to_string(key, options.sanitize) + '\"=>\"' + to_string(data[key], options.sanitize) + '\"';\n          }\n        });\n        var joined = hstore.join();\n        if (!callback || callback === null) return joined;\n        callback(joined);\n      },\n      parse: function parse(string, callback) {\n        var result = {},\n          //using [\\s\\S] to match any character, including line feed and carriage return,\n          r = /([\"])(?:\\\\\\1|\\\\\\\\|[\\s\\S])*?\\1|NULL/g,\n          matches = string.match(r),\n          i,\n          l,\n          clean = function clean(value) {\n            // Remove leading double quotes\n            value = value.replace(/^\\\"|\\\"$/g, \"\");\n            // Unescape quotes\n            value = value.replace(/\\\\\"/g, \"\\\"\");\n            //Unescape backslashes\n            value = value.replace(/\\\\\\\\/g, \"\\\\\");\n            //Unescape single quotes\n            value = value.replace(/''/g, \"'\");\n            return value;\n          };\n        if (matches) {\n          for (i = 0, l = matches.length; i < l; i += 2) {\n            if (matches[i] && matches[i + 1]) {\n              var key = clean(matches[i]);\n              var value = matches[i + 1];\n              result[key] = value == \"NULL\" ? null : clean(value);\n            }\n          }\n        }\n        if (!callback || callback === null) return result;\n        callback(result);\n      }\n    };\n  };\n})();","map":{"version":3,"names":["_","require","sanitize_input","input","replace","to_string","sanitize","String","module","exports","options","defaults","stringify","data","callback","hstore","Object","keys","map","key","joined","join","parse","string","result","r","matches","match","i","l","clean","value","length"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/pg-hstore/lib/index.js"],"sourcesContent":["(function () {\r\n  var _ = require('underscore');\r\n\r\n  function sanitize_input(input) {\r\n    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]\r\n    // single quotes (') must be replaced with double single quotes ('')\r\n    input = input.replace(/'/g, '\\'\\'');\r\n    // backslashes (\\) must be replaced with double backslashes (\\\\)\r\n    input = input.replace(/\\\\/g, '\\\\\\\\');\r\n    // double quotes (\") must be replaced with escaped quotes (\\\\\")\r\n    input = input.replace(/\"/g, '\\\\\"');\r\n    return input;\r\n  }\r\n\r\n  function to_string(input, sanitize) {\r\n    switch(typeof input) {\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'object':\r\n        return String(input);\r\n      case 'string':\r\n        return sanitize ? sanitize_input(input) : input;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  module.exports = function (options) {\r\n    options = _.defaults({}, options, { sanitize: false });\r\n\r\n    return {\r\n      stringify: function (data, callback) {\r\n        var hstore = Object.keys(data).map(function (key) {\r\n          if (data[key] === null) {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>NULL';\r\n          } else {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>\"'+to_string(data[key], options.sanitize)+'\"';\r\n          }\r\n        });\r\n        var joined = hstore.join();\r\n        if (!callback || callback === null) return joined;\r\n        callback(joined);\r\n      },\r\n\r\n      parse: function(string, callback) {\r\n        var result = {},\r\n        //using [\\s\\S] to match any character, including line feed and carriage return,\r\n            r = /([\"])(?:\\\\\\1|\\\\\\\\|[\\s\\S])*?\\1|NULL/g,\r\n            matches = string.match(r),\r\n            i,\r\n            l,\r\n            clean = function (value) {\r\n                // Remove leading double quotes\r\n                value = value.replace(/^\\\"|\\\"$/g, \"\");\r\n                // Unescape quotes\r\n                value = value.replace(/\\\\\"/g, \"\\\"\");\r\n                //Unescape backslashes\r\n                value = value.replace(/\\\\\\\\/g,\"\\\\\");\r\n                //Unescape single quotes\r\n                value = value.replace(/''/g,\"'\");\r\n\r\n                return value;\r\n            };\r\n\r\n        if(matches) {\r\n          for (i = 0, l = matches.length; i < l; i+= 2) {\r\n            if (matches[i] && matches[i + 1]) {\r\n              var key = clean(matches[i]);\r\n              var value = matches[i + 1];\r\n              result[key] = value==\"NULL\"?null:clean(value);\r\n            }\r\n          }\r\n        }\r\n        if (!callback || callback === null) return result;\r\n        callback(result);\r\n      }\r\n    };\r\n  };\r\n})();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}