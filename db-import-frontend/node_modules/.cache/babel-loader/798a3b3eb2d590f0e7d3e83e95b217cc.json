{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar AbstractQuery = require(\"../abstract/query\");\nvar QueryTypes = require(\"../../query-types\");\nvar sequelizeErrors = require(\"../../errors\");\nvar _ = require(\"lodash\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"sql:pg\");\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n  var _super = _createSuper(Query);\n  function Query() {\n    _classCallCheck(this, Query);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Query, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sql, parameters) {\n        var _this = this;\n        var connection, query, complete, queryResult, errForStack, rows, rowCount, isTableNameQuery, isRelNameQuery, _iterator, _step, row, _iterator2, _step2, _loop, result, _iterator3, _step3, _row, defParts, i, _result, attrsMap, _result2, _iterator4, _step4, _row2, split, _loop2, key;\n        return _regeneratorRuntime().wrap(function _callee$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              connection = this.connection;\n              if (!_.isEmpty(this.options.searchPath)) {\n                sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n              }\n              if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n                _.toPairs(this.options.includeAliases).sort(function (a, b) {\n                  return b[1].length - a[1].length;\n                }).forEach(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                    alias = _ref2[0],\n                    original = _ref2[1];\n                  var reg = new RegExp(_.escapeRegExp(original), \"g\");\n                  sql = sql.replace(reg, alias);\n                });\n              }\n              this.sql = sql;\n              query = parameters && parameters.length ? new Promise(function (resolve, reject) {\n                return connection.query(sql, parameters, function (error, result) {\n                  return error ? reject(error) : resolve(result);\n                });\n              }) : new Promise(function (resolve, reject) {\n                return connection.query(sql, function (error, result) {\n                  return error ? reject(error) : resolve(result);\n                });\n              });\n              complete = this._logQuery(sql, debug, parameters);\n              errForStack = new Error();\n              _context3.prev = 7;\n              _context3.next = 10;\n              return query;\n            case 10:\n              queryResult = _context3.sent;\n              _context3.next = 19;\n              break;\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](7);\n              if (_context3.t0.code === \"ECONNRESET\" || /Unable to set non-blocking to true/i.test(_context3.t0) || /SSL SYSCALL error: EOF detected/i.test(_context3.t0) || /Local: Authentication failure/i.test(_context3.t0) || _context3.t0.message === \"Query read timeout\") {\n                connection._invalid = true;\n              }\n              _context3.t0.sql = sql;\n              _context3.t0.parameters = parameters;\n              throw this.formatError(_context3.t0, errForStack.stack);\n            case 19:\n              complete();\n              rows = Array.isArray(queryResult) ? queryResult.reduce(function (allRows, r) {\n                return allRows.concat(r.rows || []);\n              }, []) : queryResult.rows;\n              rowCount = Array.isArray(queryResult) ? queryResult.reduce(function (count, r) {\n                return Number.isFinite(r.rowCount) ? count + r.rowCount : count;\n              }, 0) : queryResult.rowCount || 0;\n              if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n                rows = rows.map(function (row) {\n                  return _.toPairs(row).reduce(function (acc, _ref3) {\n                    var _ref4 = _slicedToArray(_ref3, 2),\n                      key = _ref4[0],\n                      value = _ref4[1];\n                    var mapping = _this.options.aliasesMapping.get(key);\n                    acc[mapping || key] = value;\n                    return acc;\n                  }, {});\n                });\n              }\n              isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n              isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n              if (!isRelNameQuery) {\n                _context3.next = 27;\n                break;\n              }\n              return _context3.abrupt(\"return\", rows.map(function (row) {\n                return {\n                  name: row.relname,\n                  tableName: row.relname.split(\"_\")[0]\n                };\n              }));\n            case 27:\n              if (!isTableNameQuery) {\n                _context3.next = 29;\n                break;\n              }\n              return _context3.abrupt(\"return\", rows.map(function (row) {\n                return Object.values(row);\n              }));\n            case 29:\n              if (!(rows[0] && rows[0].sequelize_caught_exception !== void 0)) {\n                _context3.next = 34;\n                break;\n              }\n              if (!(rows[0].sequelize_caught_exception !== null)) {\n                _context3.next = 32;\n                break;\n              }\n              throw this.formatError({\n                sql: sql,\n                parameters: parameters,\n                code: \"23505\",\n                detail: rows[0].sequelize_caught_exception\n              });\n            case 32:\n              _iterator = _createForOfIteratorHelper(rows);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  row = _step.value;\n                  delete row.sequelize_caught_exception;\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            case 34:\n              if (!this.isShowIndexesQuery()) {\n                _context3.next = 52;\n                break;\n              }\n              _iterator2 = _createForOfIteratorHelper(rows);\n              _context3.prev = 36;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var row, attributes, columns, field, attribute;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      row = _step2.value;\n                      attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n                      columns = _.zipObject(row.column_indexes, _this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n                      delete row.column_indexes;\n                      delete row.column_names;\n                      row.fields = row.indkey.split(\" \").map(function (indKey, index) {\n                        field = columns[indKey];\n                        if (!field) {\n                          return null;\n                        }\n                        attribute = attributes[index];\n                        return {\n                          attribute: field,\n                          collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n                          order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n                          length: void 0\n                        };\n                      }).filter(function (n) {\n                        return n !== null;\n                      });\n                      delete row.columns;\n                    case 7:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop);\n              });\n              _iterator2.s();\n            case 39:\n              if ((_step2 = _iterator2.n()).done) {\n                _context3.next = 43;\n                break;\n              }\n              return _context3.delegateYield(_loop(), \"t1\", 41);\n            case 41:\n              _context3.next = 39;\n              break;\n            case 43:\n              _context3.next = 48;\n              break;\n            case 45:\n              _context3.prev = 45;\n              _context3.t2 = _context3[\"catch\"](36);\n              _iterator2.e(_context3.t2);\n            case 48:\n              _context3.prev = 48;\n              _iterator2.f();\n              return _context3.finish(48);\n            case 51:\n              return _context3.abrupt(\"return\", rows);\n            case 52:\n              if (!this.isForeignKeysQuery()) {\n                _context3.next = 57;\n                break;\n              }\n              result = [];\n              _iterator3 = _createForOfIteratorHelper(rows);\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _row = _step3.value;\n                  defParts = void 0;\n                  if (_row.condef !== void 0 && (defParts = _row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n                    _row.id = _row.constraint_name;\n                    _row.table = defParts[2];\n                    _row.from = defParts[1];\n                    _row.to = defParts[3];\n                    i = void 0;\n                    for (i = 5; i <= 8; i += 3) {\n                      if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                        _row[\"on_\".concat(defParts[i].toLowerCase())] = defParts[i + 1];\n                      }\n                    }\n                  }\n                  result.push(_row);\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n              return _context3.abrupt(\"return\", result);\n            case 57:\n              if (!this.isSelectQuery()) {\n                _context3.next = 61;\n                break;\n              }\n              _result = rows;\n              if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n                attrsMap = _.reduce(this.model.rawAttributes, function (m, v, k) {\n                  m[k.toLowerCase()] = k;\n                  return m;\n                }, {});\n                _result = rows.map(function (row) {\n                  return _.mapKeys(row, function (value, key) {\n                    var targetAttr = attrsMap[key];\n                    if (typeof targetAttr === \"string\" && targetAttr !== key) {\n                      return targetAttr;\n                    }\n                    return key;\n                  });\n                });\n              }\n              return _context3.abrupt(\"return\", this.handleSelectQuery(_result));\n            case 61:\n              if (!(QueryTypes.DESCRIBE === this.options.type)) {\n                _context3.next = 66;\n                break;\n              }\n              _result2 = {};\n              _iterator4 = _createForOfIteratorHelper(rows);\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  _row2 = _step4.value;\n                  _result2[_row2.Field] = {\n                    type: _row2.Type.toUpperCase(),\n                    allowNull: _row2.Null === \"YES\",\n                    defaultValue: _row2.Default,\n                    comment: _row2.Comment,\n                    special: _row2.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(_row2.special) : [],\n                    primaryKey: _row2.Constraint === \"PRIMARY KEY\"\n                  };\n                  if (_result2[_row2.Field].type === \"BOOLEAN\") {\n                    _result2[_row2.Field].defaultValue = {\n                      \"false\": false,\n                      \"true\": true\n                    }[_result2[_row2.Field].defaultValue];\n                    if (_result2[_row2.Field].defaultValue === void 0) {\n                      _result2[_row2.Field].defaultValue = null;\n                    }\n                  }\n                  if (typeof _result2[_row2.Field].defaultValue === \"string\") {\n                    _result2[_row2.Field].defaultValue = _result2[_row2.Field].defaultValue.replace(/'/g, \"\");\n                    if (_result2[_row2.Field].defaultValue.includes(\"::\")) {\n                      split = _result2[_row2.Field].defaultValue.split(\"::\");\n                      if (split[1].toLowerCase() !== \"regclass)\") {\n                        _result2[_row2.Field].defaultValue = split[0];\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              return _context3.abrupt(\"return\", _result2);\n            case 66:\n              if (!this.isVersionQuery()) {\n                _context3.next = 68;\n                break;\n              }\n              return _context3.abrupt(\"return\", rows[0].server_version);\n            case 68:\n              if (!this.isShowOrDescribeQuery()) {\n                _context3.next = 70;\n                break;\n              }\n              return _context3.abrupt(\"return\", rows);\n            case 70:\n              if (!(QueryTypes.BULKUPDATE === this.options.type)) {\n                _context3.next = 74;\n                break;\n              }\n              if (this.options.returning) {\n                _context3.next = 73;\n                break;\n              }\n              return _context3.abrupt(\"return\", parseInt(rowCount, 10));\n            case 73:\n              return _context3.abrupt(\"return\", this.handleSelectQuery(rows));\n            case 74:\n              if (!(QueryTypes.BULKDELETE === this.options.type)) {\n                _context3.next = 76;\n                break;\n              }\n              return _context3.abrupt(\"return\", parseInt(rowCount, 10));\n            case 76:\n              if (!(this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery())) {\n                _context3.next = 90;\n                break;\n              }\n              if (!(this.instance && this.instance.dataValues)) {\n                _context3.next = 87;\n                break;\n              }\n              if (!(this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0)) {\n                _context3.next = 80;\n                break;\n              }\n              throw new sequelizeErrors.EmptyResultError();\n            case 80:\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2(key) {\n                var record, attr;\n                return _regeneratorRuntime().wrap(function _loop2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n                        record = rows[0][key];\n                        attr = _.find(_this.model.rawAttributes, function (attribute) {\n                          return attribute.fieldName === key || attribute.field === key;\n                        });\n                        _this.instance.dataValues[attr && attr.fieldName || key] = record;\n                      }\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop2);\n              });\n              _context3.t3 = _regeneratorRuntime().keys(rows[0]);\n            case 82:\n              if ((_context3.t4 = _context3.t3()).done) {\n                _context3.next = 87;\n                break;\n              }\n              key = _context3.t4.value;\n              return _context3.delegateYield(_loop2(key), \"t5\", 85);\n            case 85:\n              _context3.next = 82;\n              break;\n            case 87:\n              if (!this.isUpsertQuery()) {\n                _context3.next = 89;\n                break;\n              }\n              return _context3.abrupt(\"return\", [this.instance, null]);\n            case 89:\n              return _context3.abrupt(\"return\", [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount]);\n            case 90:\n              if (!this.isRawQuery()) {\n                _context3.next = 92;\n                break;\n              }\n              return _context3.abrupt(\"return\", [rows, queryResult]);\n            case 92:\n              return _context3.abrupt(\"return\", rows);\n            case 93:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee, this, [[7, 13], [36, 45, 48, 51]]);\n      }));\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n  }, {\n    key: \"formatError\",\n    value: function formatError(err, errStack) {\n      var _this2 = this;\n      var match;\n      var table;\n      var index;\n      var fields;\n      var errors;\n      var message;\n      var code = err.code || err.sqlState;\n      var errMessage = err.message || err.messagePrimary;\n      var errDetail = err.detail || err.messageDetail;\n      switch (code) {\n        case \"23503\":\n          index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/on table \"(.+?)\"/);\n          table = table ? table[1] : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            message: errMessage,\n            fields: null,\n            index: index,\n            table: table,\n            parent: err,\n            stack: errStack\n          });\n        case \"23505\":\n          if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n            fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n            errors = [];\n            message = \"Validation error\";\n            _.forOwn(fields, function (value, field) {\n              errors.push(new sequelizeErrors.ValidationErrorItem(_this2.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, _this2.instance, \"not_unique\"));\n            });\n            if (this.model && this.model.uniqueKeys) {\n              _.forOwn(this.model.uniqueKeys, function (constraint) {\n                if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                  message = constraint.msg;\n                  return false;\n                }\n              });\n            }\n            return new sequelizeErrors.UniqueConstraintError({\n              message: message,\n              errors: errors,\n              parent: err,\n              fields: fields,\n              stack: errStack\n            });\n          }\n          return new sequelizeErrors.UniqueConstraintError({\n            message: errMessage,\n            parent: err,\n            stack: errStack\n          });\n        case \"23P01\":\n          match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n          if (match) {\n            fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          }\n          message = \"Exclusion constraint error\";\n          return new sequelizeErrors.ExclusionConstraintError({\n            message: message,\n            constraint: err.constraint,\n            fields: fields,\n            table: err.table,\n            parent: err,\n            stack: errStack\n          });\n        case \"42704\":\n          if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n            message = \"Unknown constraint error\";\n            index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n            index = index ? index[1] : void 0;\n            table = errMessage.match(/relation \"(.+?)\"/i);\n            table = table ? table[1] : void 0;\n            throw new sequelizeErrors.UnknownConstraintError({\n              message: message,\n              constraint: index,\n              fields: fields,\n              table: table,\n              parent: err,\n              stack: errStack\n            });\n          }\n        default:\n          return new sequelizeErrors.DatabaseError(err, {\n            stack: errStack\n          });\n      }\n    }\n  }, {\n    key: \"isForeignKeysQuery\",\n    value: function isForeignKeysQuery() {\n      return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n    }\n  }, {\n    key: \"getInsertIdField\",\n    value: function getInsertIdField() {\n      return \"id\";\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var stringReplaceFunc = function stringReplaceFunc(value) {\n        return typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n      };\n      var bindParam;\n      if (Array.isArray(values)) {\n        bindParam = values.map(stringReplaceFunc);\n        sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n          skipValueReplace: true\n        })[0];\n      } else {\n        bindParam = [];\n        var i = 0;\n        var seen = {};\n        var replacementFunc = function replacementFunc(match, key, values2) {\n          if (seen[key] !== void 0) {\n            return seen[key];\n          }\n          if (values2[key] !== void 0) {\n            i = i + 1;\n            bindParam.push(stringReplaceFunc(values2[key]));\n            seen[key] = \"$\".concat(i);\n            return \"$\".concat(i);\n          }\n          return void 0;\n        };\n        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      }\n      return [sql, bindParam];\n    }\n  }]);\n  return Query;\n}(AbstractQuery);\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","_require","logger","debug","debugContext","Query","_AbstractQuery","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_run","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sql","parameters","_this","connection","query","complete","queryResult","errForStack","rows","rowCount","isTableNameQuery","isRelNameQuery","_iterator","_step","row","_iterator2","_step2","_loop","result","_iterator3","_step3","_row","defParts","i","_result","attrsMap","_result2","_iterator4","_step4","_row2","split","_loop2","wrap","_callee$","_context3","prev","next","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","_ref","_ref2","_slicedToArray","alias","original","reg","RegExp","escapeRegExp","replace","Promise","resolve","reject","error","_logQuery","Error","sent","t0","code","test","message","_invalid","formatError","stack","Array","isArray","reduce","allRows","r","concat","count","Number","isFinite","aliasesMapping","map","acc","_ref3","_ref4","mapping","get","startsWith","abrupt","name","relname","tableName","Object","values","sequelize_caught_exception","detail","_createForOfIteratorHelper","s","n","done","err","e","f","isShowIndexesQuery","attributes","columns","field","attribute","_loop$","_context","exec","definition","zipObject","column_indexes","fromArray","column_names","fields","indkey","indKey","index","collate","match","order","includes","filter","stop","delegateYield","t2","finish","isForeignKeysQuery","condef","id","constraint_name","table","from","to","toLowerCase","push","isSelectQuery","raw","quoteIdentifiers","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","EmptyResultError","record","attr","_loop2$","_context2","prototype","hasOwnProperty","call","find","fieldName","t3","keys","t4","plain","isRawQuery","run","_x","_x2","errStack","_this2","errors","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","formatBindParameters","dialect","stringReplaceFunc","bindParam","skipValueReplace","seen","replacementFunc","values2","module","exports","default"],"sources":["../../../src/dialects/postgres/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (error.code === 'ECONNRESET'\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        || /Unable to set non-blocking to true/i.test(error)\n        || /SSL SYSCALL error: EOF detected/i.test(error)\n        || /Local: Authentication failure/i.test(error)\n        // https://github.com/sequelize/sequelize/pull/15144\n        || error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}