{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/construct.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _asyncIterator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _dns = _interopRequireDefault(require(\"dns\"));\nvar _constants = _interopRequireDefault(require(\"constants\"));\nvar _stream = require(\"stream\");\nvar _identity = require(\"@azure/identity\");\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\nvar _debug = _interopRequireDefault(require(\"./debug\"));\nvar _events = require(\"events\");\nvar _instanceLookup = require(\"./instance-lookup\");\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\nvar _packet = require(\"./packet\");\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\nvar _request = _interopRequireDefault(require(\"./request\"));\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\nvar _transaction = require(\"./transaction\");\nvar _errors = require(\"./errors\");\nvar _connector = require(\"./connector\");\nvar _library = require(\"./library\");\nvar _tdsVersions = require(\"./tds-versions\");\nvar _message = _interopRequireDefault(require(\"./message\"));\nvar _ntlm = require(\"./ntlm\");\nvar _nodeAbortController = require(\"node-abort-controller\");\nvar _dataType = require(\"./data-type\");\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nvar _package = require(\"../package.json\");\nvar _url = require(\"url\");\nvar _handler = require(\"./token/handler\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nvar KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nvar DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nvar DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nvar DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\n\nvar DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nvar DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nvar DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nvar DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nvar DEFAULT_DATEFORMAT = 'mdy';\n\n/**\n * @private\n */\nvar CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nvar Connection = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Connection, _events$EventEmitter);\n  var _super = _createSuper(Connection);\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  function Connection(config) {\n    var _this;\n    _classCallCheck(this, Connection);\n    _this = _super.call(this);\n    _this.fedAuthRequired = void 0;\n    _this.config = void 0;\n    _this.secureContextOptions = void 0;\n    _this.inTransaction = void 0;\n    _this.transactionDescriptors = void 0;\n    _this.transactionDepth = void 0;\n    _this.isSqlBatch = void 0;\n    _this.curTransientRetryCount = void 0;\n    _this.transientErrorLookup = void 0;\n    _this.closed = void 0;\n    _this.loginError = void 0;\n    _this.debug = void 0;\n    _this.ntlmpacket = void 0;\n    _this.ntlmpacketBuffer = void 0;\n    _this.routingData = void 0;\n    _this.messageIo = void 0;\n    _this.state = void 0;\n    _this.resetConnectionOnNextRequest = void 0;\n    _this.request = void 0;\n    _this.procReturnStatusValue = void 0;\n    _this.socket = void 0;\n    _this.messageBuffer = void 0;\n    _this.connectTimer = void 0;\n    _this.cancelTimer = void 0;\n    _this.requestTimer = void 0;\n    _this.retryTimer = void 0;\n    _this._cancelAfterRequestSent = void 0;\n    _this.databaseCollation = void 0;\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n    _this.fedAuthRequired = false;\n    var authentication;\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n      var type = config.authentication.type;\n      var options = config.authentication.options === undefined ? {} : config.authentication.options;\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n    _this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connector: undefined,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n        _this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n        _this.config.options.appName = config.options.appName;\n      }\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n        _this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n        _this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n        _this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        _this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n        _this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n      if (config.options.connector !== undefined) {\n        if (typeof config.options.connector !== 'function') {\n          throw new TypeError('The \"config.options.connector\" property must be a function.');\n        }\n        _this.config.options.connector = config.options.connector;\n      }\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n        _this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n        _this.config.options.database = config.options.database;\n      }\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n        _this.config.options.datefirst = config.options.datefirst;\n      }\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n        _this.config.options.dateFormat = config.options.dateFormat;\n      }\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n          _this.config.options.debug.data = config.options.debug.data;\n        }\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n          _this.config.options.debug.packet = config.options.debug.packet;\n        }\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n          _this.config.options.debug.payload = config.options.debug.payload;\n        }\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n          _this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n        _this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n        _this.config.options.encrypt = config.options.encrypt;\n      }\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n        _this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n        _this.config.options.instanceName = config.options.instanceName;\n        _this.config.options.port = undefined;\n      }\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        _this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n        _this.config.options.language = config.options.language;\n      }\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n        _this.config.options.localAddress = config.options.localAddress;\n      }\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n        _this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n        _this.config.options.packetSize = config.options.packetSize;\n      }\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n        _this.config.options.port = config.options.port;\n        _this.config.options.instanceName = undefined;\n      }\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n        _this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n        _this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n        _this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n        _this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n        _this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n        _this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n        _this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n        _this.config.options.textsize = config.options.textsize | 0;\n      }\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n        _this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n        _this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n        _this.config.options.useUTC = config.options.useUTC;\n      }\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n        _this.config.options.workstationId = config.options.workstationId;\n      }\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n        _this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n    _this.secureContextOptions = _this.config.options.cryptoCredentialsDetails;\n    if (_this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      _this.secureContextOptions = Object.create(_this.secureContextOptions, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n    _this.debug = _this.createDebug();\n    _this.inTransaction = false;\n    _this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    _this.transactionDepth = 0;\n    _this.isSqlBatch = false;\n    _this.closed = false;\n    _this.messageBuffer = Buffer.alloc(0);\n    _this.curTransientRetryCount = 0;\n    _this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    _this.state = _this.STATE.INITIALIZED;\n    _this._cancelAfterRequestSent = function () {\n      _this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n      _this.createCancelTimer();\n    };\n    return _this;\n  }\n  _createClass(Connection, [{\n    key: \"connect\",\n    value: function connect(connectListener) {\n      var _this2 = this;\n      if (this.state !== this.STATE.INITIALIZED) {\n        throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n      }\n      if (connectListener) {\n        var onConnect = function onConnect(err) {\n          _this2.removeListener('error', onError);\n          connectListener(err);\n        };\n        var onError = function onError(err) {\n          _this2.removeListener('connect', onConnect);\n          connectListener(err);\n        };\n        this.once('connect', onConnect);\n        this.once('error', onError);\n      }\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\n     * The server has reported that the charset has changed.\n     */\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      return _get(_getPrototypeOf(Connection.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return (_get2 = _get(_getPrototypeOf(Connection.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n    /**\n     * Closes the connection to the database.\n     *\n     * The [[Event_end]] will be emitted once the connection has been closed.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.transitionTo(this.STATE.FINAL);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"initialiseConnection\",\n    value: function initialiseConnection() {\n      var _this3 = this;\n      var signal = this.createConnectTimer();\n      if (this.config.options.port) {\n        return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n      } else {\n        return (0, _instanceLookup.instanceLookup)({\n          server: this.config.server,\n          instanceName: this.config.options.instanceName,\n          timeout: this.config.options.connectTimeout,\n          signal: signal\n        }).then(function (port) {\n          process.nextTick(function () {\n            _this3.connectOnPort(port, _this3.config.options.multiSubnetFailover, signal, _this3.config.options.connector);\n          });\n        }, function (err) {\n          _this3.clearConnectTimer();\n          if (err.name === 'AbortError') {\n            // Ignore the AbortError for now, this is still handled by the connectTimer firing\n            return;\n          }\n          process.nextTick(function () {\n            _this3.emit('connect', new _errors.ConnectionError(err.message, 'EINSTLOOKUP'));\n          });\n        });\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"cleanupConnection\",\n    value: function cleanupConnection(cleanupType) {\n      var _this4 = this;\n      if (!this.closed) {\n        this.clearConnectTimer();\n        this.clearRequestTimer();\n        this.clearRetryTimer();\n        this.closeConnection();\n        if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n          this.emit('rerouting');\n        } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n          process.nextTick(function () {\n            _this4.emit('end');\n          });\n        }\n        var request = this.request;\n        if (request) {\n          var err = new _errors.RequestError('Connection closed before request completed.', 'ECLOSE');\n          request.callback(err);\n          this.request = undefined;\n        }\n        this.closed = true;\n        this.loginError = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createDebug\",\n    value: function createDebug() {\n      var _this5 = this;\n      var debug = new _debug.default(this.config.options.debug);\n      debug.on('debug', function (message) {\n        _this5.emit('debug', message);\n      });\n      return debug;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createTokenStreamParser\",\n    value: function createTokenStreamParser(message, handler) {\n      return new _tokenStreamParser.Parser(message, this.debug, handler, this.config.options);\n    }\n  }, {\n    key: \"connectOnPort\",\n    value: function connectOnPort(port, multiSubnetFailover, signal, customConnector) {\n      var _this6 = this;\n      var connectOpts = {\n        host: this.routingData ? this.routingData.server : this.config.server,\n        port: this.routingData ? this.routingData.port : port,\n        localAddress: this.config.options.localAddress\n      };\n      var connect = customConnector || (multiSubnetFailover ? _connector.connectInParallel : _connector.connectInSequence);\n      connect(connectOpts, _dns.default.lookup, signal).then(function (socket) {\n        process.nextTick(function () {\n          socket.on('error', function (error) {\n            _this6.socketError(error);\n          });\n          socket.on('close', function () {\n            _this6.socketClose();\n          });\n          socket.on('end', function () {\n            _this6.socketEnd();\n          });\n          socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n          _this6.messageIo = new _messageIo.default(socket, _this6.config.options.packetSize, _this6.debug);\n          _this6.messageIo.on('secure', function (cleartext) {\n            _this6.emit('secure', cleartext);\n          });\n          _this6.socket = socket;\n          _this6.closed = false;\n          _this6.debug.log('connected to ' + _this6.config.server + ':' + _this6.config.options.port);\n          _this6.sendPreLogin();\n          _this6.transitionTo(_this6.STATE.SENT_PRELOGIN);\n        });\n      }, function (err) {\n        _this6.clearConnectTimer();\n        if (err.name === 'AbortError') {\n          return;\n        }\n        process.nextTick(function () {\n          _this6.socketError(err);\n        });\n      });\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"closeConnection\",\n    value: function closeConnection() {\n      if (this.socket) {\n        this.socket.destroy();\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createConnectTimer\",\n    value: function createConnectTimer() {\n      var _this7 = this;\n      var controller = new _nodeAbortController.AbortController();\n      this.connectTimer = setTimeout(function () {\n        controller.abort();\n        _this7.connectTimeout();\n      }, this.config.options.connectTimeout);\n      return controller.signal;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createCancelTimer\",\n    value: function createCancelTimer() {\n      var _this8 = this;\n      this.clearCancelTimer();\n      var timeout = this.config.options.cancelTimeout;\n      if (timeout > 0) {\n        this.cancelTimer = setTimeout(function () {\n          _this8.cancelTimeout();\n        }, timeout);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createRequestTimer\",\n    value: function createRequestTimer() {\n      var _this9 = this;\n      this.clearRequestTimer(); // release old timer, just to be safe\n\n      var request = this.request;\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n      if (timeout) {\n        this.requestTimer = setTimeout(function () {\n          _this9.requestTimeout();\n        }, timeout);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"createRetryTimer\",\n    value: function createRetryTimer() {\n      var _this10 = this;\n      this.clearRetryTimer();\n      this.retryTimer = setTimeout(function () {\n        _this10.retryTimeout();\n      }, this.config.options.connectionRetryInterval);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"connectTimeout\",\n    value: function connectTimeout() {\n      var message = \"Failed to connect to \".concat(this.config.server).concat(this.config.options.port ? \":\".concat(this.config.options.port) : \"\\\\\".concat(this.config.options.instanceName), \" in \").concat(this.config.options.connectTimeout, \"ms\");\n      this.debug.log(message);\n      this.emit('connect', new _errors.ConnectionError(message, 'ETIMEOUT'));\n      this.connectTimer = undefined;\n      this.dispatchEvent('connectTimeout');\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      var message = \"Failed to cancel request in \".concat(this.config.options.cancelTimeout, \"ms\");\n      this.debug.log(message);\n      this.dispatchEvent('socketError', new _errors.ConnectionError(message, 'ETIMEOUT'));\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"requestTimeout\",\n    value: function requestTimeout() {\n      this.requestTimer = undefined;\n      var request = this.request;\n      request.cancel();\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n      var message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n      request.error = new _errors.RequestError(message, 'ETIMEOUT');\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"retryTimeout\",\n    value: function retryTimeout() {\n      this.retryTimer = undefined;\n      this.emit('retry');\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"clearConnectTimer\",\n    value: function clearConnectTimer() {\n      if (this.connectTimer) {\n        clearTimeout(this.connectTimer);\n        this.connectTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"clearCancelTimer\",\n    value: function clearCancelTimer() {\n      if (this.cancelTimer) {\n        clearTimeout(this.cancelTimer);\n        this.cancelTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"clearRequestTimer\",\n    value: function clearRequestTimer() {\n      if (this.requestTimer) {\n        clearTimeout(this.requestTimer);\n        this.requestTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"clearRetryTimer\",\n    value: function clearRetryTimer() {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n        this.retryTimer = undefined;\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"transitionTo\",\n    value: function transitionTo(newState) {\n      if (this.state === newState) {\n        this.debug.log('State is already ' + newState.name);\n        return;\n      }\n      if (this.state && this.state.exit) {\n        this.state.exit.call(this, newState);\n      }\n      this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n      this.state = newState;\n      if (this.state.enter) {\n        this.state.enter.apply(this);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(eventName) {\n      var handler = this.state.events[eventName];\n      if (!handler) {\n        throw new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\"));\n      }\n      return handler;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventName) {\n      var handler = this.state.events[eventName];\n      if (handler) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        handler.apply(this, args);\n      } else {\n        this.emit('error', new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\")));\n        this.close();\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"socketError\",\n    value: function socketError(error) {\n      if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n        var message = \"Failed to connect to \".concat(this.config.server, \":\").concat(this.config.options.port, \" - \").concat(error.message);\n        this.debug.log(message);\n        this.emit('connect', new _errors.ConnectionError(message, 'ESOCKET'));\n      } else {\n        var _message2 = \"Connection lost - \".concat(error.message);\n        this.debug.log(_message2);\n        this.emit('error', new _errors.ConnectionError(_message2, 'ESOCKET'));\n      }\n      this.dispatchEvent('socketError', error);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"socketEnd\",\n    value: function socketEnd() {\n      this.debug.log('socket ended');\n      if (this.state !== this.STATE.FINAL) {\n        var error = new Error('socket hang up');\n        error.code = 'ECONNRESET';\n        this.socketError(error);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"socketClose\",\n    value: function socketClose() {\n      this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n      if (this.state === this.STATE.REROUTING) {\n        this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n        this.dispatchEvent('reconnect');\n      } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n        var server = this.routingData ? this.routingData.server : this.config.server;\n        var port = this.routingData ? this.routingData.port : this.config.options.port;\n        this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n        this.dispatchEvent('retry');\n      } else {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"sendPreLogin\",\n    value: function sendPreLogin() {\n      var _exec;\n      var _ref = (_exec = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version)) !== null && _exec !== void 0 ? _exec : ['0.0.0', '0', '0', '0'],\n        _ref2 = _slicedToArray(_ref, 4),\n        major = _ref2[1],\n        minor = _ref2[2],\n        build = _ref2[3];\n      var payload = new _preloginPayload.default({\n        encrypt: this.config.options.encrypt,\n        version: {\n          major: Number(major),\n          minor: Number(minor),\n          build: Number(build),\n          subbuild: 0\n        }\n      });\n      this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"sendLogin7Packet\",\n    value: function sendLogin7Packet() {\n      var payload = new _login7Payload.default({\n        tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n        packetSize: this.config.options.packetSize,\n        clientProgVer: 0,\n        clientPid: process.pid,\n        connectionId: 0,\n        clientTimeZone: new Date().getTimezoneOffset(),\n        clientLcid: 0x00000409\n      });\n      var authentication = this.config.authentication;\n      switch (authentication.type) {\n        case 'azure-active-directory-password':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'default'\n          };\n          break;\n        case 'azure-active-directory-access-token':\n          payload.fedAuth = {\n            type: 'SECURITYTOKEN',\n            echo: this.fedAuthRequired,\n            fedAuthToken: authentication.options.token\n          };\n          break;\n        case 'azure-active-directory-msi-vm':\n        case 'azure-active-directory-default':\n        case 'azure-active-directory-msi-app-service':\n        case 'azure-active-directory-service-principal-secret':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'integrated'\n          };\n          break;\n        case 'ntlm':\n          payload.sspi = (0, _ntlm.createNTLMRequest)({\n            domain: authentication.options.domain\n          });\n          break;\n        default:\n          payload.userName = authentication.options.userName;\n          payload.password = authentication.options.password;\n      }\n      payload.hostname = this.config.options.workstationId || _os.default.hostname();\n      payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n      payload.appName = this.config.options.appName || 'Tedious';\n      payload.libraryName = _library.name;\n      payload.language = this.config.options.language;\n      payload.database = this.config.options.database;\n      payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n      payload.readOnlyIntent = this.config.options.readOnlyIntent;\n      payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n      this.routingData = undefined;\n      this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"sendFedAuthTokenMessage\",\n    value: function sendFedAuthTokenMessage(token) {\n      var accessTokenLen = Buffer.byteLength(token, 'ucs2');\n      var data = Buffer.alloc(8 + accessTokenLen);\n      var offset = 0;\n      offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n      offset = data.writeUInt32LE(accessTokenLen, offset);\n      data.write(token, offset, 'ucs2');\n      this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n      this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"sendInitialSql\",\n    value: function sendInitialSql() {\n      var payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n      var message = new _message.default({\n        type: _packet.TYPE.SQL_BATCH\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n      _stream.Readable.from(payload).pipe(message);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getInitialSql\",\n    value: function getInitialSql() {\n      var options = [];\n      if (this.config.options.enableAnsiNull === true) {\n        options.push('set ansi_nulls on');\n      } else if (this.config.options.enableAnsiNull === false) {\n        options.push('set ansi_nulls off');\n      }\n      if (this.config.options.enableAnsiNullDefault === true) {\n        options.push('set ansi_null_dflt_on on');\n      } else if (this.config.options.enableAnsiNullDefault === false) {\n        options.push('set ansi_null_dflt_on off');\n      }\n      if (this.config.options.enableAnsiPadding === true) {\n        options.push('set ansi_padding on');\n      } else if (this.config.options.enableAnsiPadding === false) {\n        options.push('set ansi_padding off');\n      }\n      if (this.config.options.enableAnsiWarnings === true) {\n        options.push('set ansi_warnings on');\n      } else if (this.config.options.enableAnsiWarnings === false) {\n        options.push('set ansi_warnings off');\n      }\n      if (this.config.options.enableArithAbort === true) {\n        options.push('set arithabort on');\n      } else if (this.config.options.enableArithAbort === false) {\n        options.push('set arithabort off');\n      }\n      if (this.config.options.enableConcatNullYieldsNull === true) {\n        options.push('set concat_null_yields_null on');\n      } else if (this.config.options.enableConcatNullYieldsNull === false) {\n        options.push('set concat_null_yields_null off');\n      }\n      if (this.config.options.enableCursorCloseOnCommit === true) {\n        options.push('set cursor_close_on_commit on');\n      } else if (this.config.options.enableCursorCloseOnCommit === false) {\n        options.push('set cursor_close_on_commit off');\n      }\n      if (this.config.options.datefirst !== null) {\n        options.push(\"set datefirst \".concat(this.config.options.datefirst));\n      }\n      if (this.config.options.dateFormat !== null) {\n        options.push(\"set dateformat \".concat(this.config.options.dateFormat));\n      }\n      if (this.config.options.enableImplicitTransactions === true) {\n        options.push('set implicit_transactions on');\n      } else if (this.config.options.enableImplicitTransactions === false) {\n        options.push('set implicit_transactions off');\n      }\n      if (this.config.options.language !== null) {\n        options.push(\"set language \".concat(this.config.options.language));\n      }\n      if (this.config.options.enableNumericRoundabort === true) {\n        options.push('set numeric_roundabort on');\n      } else if (this.config.options.enableNumericRoundabort === false) {\n        options.push('set numeric_roundabort off');\n      }\n      if (this.config.options.enableQuotedIdentifier === true) {\n        options.push('set quoted_identifier on');\n      } else if (this.config.options.enableQuotedIdentifier === false) {\n        options.push('set quoted_identifier off');\n      }\n      if (this.config.options.textsize !== null) {\n        options.push(\"set textsize \".concat(this.config.options.textsize));\n      }\n      if (this.config.options.connectionIsolationLevel !== null) {\n        options.push(\"set transaction isolation level \".concat(this.getIsolationLevelText(this.config.options.connectionIsolationLevel)));\n      }\n      if (this.config.options.abortTransactionOnError === true) {\n        options.push('set xact_abort on');\n      } else if (this.config.options.abortTransactionOnError === false) {\n        options.push('set xact_abort off');\n      }\n      return options.join('\\n');\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"processedInitialSql\",\n    value: function processedInitialSql() {\n      this.clearConnectTimer();\n      this.emit('connect');\n    }\n    /**\n     * Execute the SQL batch represented by [[Request]].\n     * There is no param support, and unlike [[Request.execSql]],\n     * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n     *\n     * In almost all cases, [[Request.execSql]] will be a better choice.\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n  }, {\n    key: \"execSqlBatch\",\n    value: function execSqlBatch(request) {\n      this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\n     *  Execute the SQL represented by [[Request]].\n     *\n     * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n     * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n     * for the first execution. This may also result in SQL server treating the request like a stored procedure\n     * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n     * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n     *\n     * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n     * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n     * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n  }, {\n    key: \"execSql\",\n    value: function execSql(request) {\n      var _this11 = this;\n      try {\n        request.validateParameters(this.databaseCollation);\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this11.debug.log(error.message);\n          request.callback(error);\n        });\n        return;\n      }\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'statement',\n        value: request.sqlTextOrProcedure,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      if (request.parameters.length) {\n        parameters.push({\n          type: _dataType.TYPES.NVarChar,\n          name: 'params',\n          value: request.makeParamsParameter(request.parameters),\n          output: false,\n          length: undefined,\n          precision: undefined,\n          scale: undefined\n        });\n        parameters.push.apply(parameters, _toConsumableArray(request.parameters));\n      }\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n    }\n    /**\n     * Creates a new BulkLoad instance.\n     *\n     * @param table The name of the table to bulk-insert into.\n     * @param options A set of bulk load options.\n     */\n  }, {\n    key: \"newBulkLoad\",\n    value: function newBulkLoad(table, callbackOrOptions, callback) {\n      var options;\n      if (callback === undefined) {\n        callback = callbackOrOptions;\n        options = {};\n      } else {\n        options = callbackOrOptions;\n      }\n      if (typeof options !== 'object') {\n        throw new TypeError('\"options\" argument must be an object');\n      }\n      return new _bulkLoad.default(table, this.databaseCollation, this.config.options, options, callback);\n    }\n    /**\n     * Execute a [[BulkLoad]].\n     *\n     * ```js\n     * // We want to perform a bulk load into a table with the following format:\n     * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n     *\n     * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n     *   // ...\n     * });\n     *\n     * // First, we need to specify the columns that we want to write to,\n     * // and their definitions. These definitions must match the actual table,\n     * // otherwise the bulk load will fail.\n     * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n     * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n     * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n     *\n     * // Execute a bulk load with a predefined list of rows.\n     * //\n     * // Note that these rows are held in memory until the\n     * // bulk load was performed, so if you need to write a large\n     * // number of rows (e.g. by reading from a CSV file),\n     * // passing an `AsyncIterable` is advisable to keep memory usage low.\n     * connection.execBulkLoad(bulkLoad, [\n     *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n     *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n     * ]);\n     * ```\n     *\n     * @param bulkLoad A previously created [[BulkLoad]].\n     * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n     */\n  }, {\n    key: \"execBulkLoad\",\n    value: function execBulkLoad(bulkLoad, rows) {\n      var _this12 = this;\n      bulkLoad.executionStarted = true;\n      if (rows) {\n        if (bulkLoad.streamingMode) {\n          throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n        }\n        if (bulkLoad.firstRowWritten) {\n          throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n        }\n        var rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n        // e.g. if an error is thrown from within a generator or stream.\n\n        rowStream.on('error', function (err) {\n          bulkLoad.rowToPacketTransform.destroy(err);\n        }); // Destroy the row stream if an error happens in the packet transform,\n        // e.g. if the bulk load is cancelled.\n\n        bulkLoad.rowToPacketTransform.on('error', function (err) {\n          rowStream.destroy(err);\n        });\n        rowStream.pipe(bulkLoad.rowToPacketTransform);\n      } else if (!bulkLoad.streamingMode) {\n        // If the bulkload was not put into streaming mode by the user,\n        // we end the rowToPacketTransform here for them.\n        //\n        // If it was put into streaming mode, it's the user's responsibility\n        // to end the stream.\n        bulkLoad.rowToPacketTransform.end();\n      }\n      var onCancel = function onCancel() {\n        request.cancel();\n      };\n      var payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n      var request = new _request.default(bulkLoad.getBulkInsertSql(), function (error) {\n        bulkLoad.removeListener('cancel', onCancel);\n        if (error) {\n          if (error.code === 'UNKNOWN') {\n            error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n          }\n          bulkLoad.error = error;\n          bulkLoad.callback(error);\n          return;\n        }\n        _this12.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n      });\n      bulkLoad.once('cancel', onCancel);\n      this.execSqlBatch(request);\n    }\n    /**\n     * Prepare the SQL represented by the request.\n     *\n     * The request can then be used in subsequent calls to\n     * [[execute]] and [[unprepare]]\n     *\n     * @param request A [[Request]] object representing the request.\n     *   Parameters only require a name and type. Parameter values are ignored.\n     */\n  }, {\n    key: \"prepare\",\n    value: function prepare(request) {\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        value: undefined,\n        output: true,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'stmt',\n        value: request.sqlTextOrProcedure,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n      request.on('returnValue', function (name, value) {\n        if (name === 'handle') {\n          request.handle = value;\n        } else {\n          request.error = new _errors.RequestError(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n        }\n      });\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n    }\n    /**\n     * Release the SQL Server resources associated with a previously prepared request.\n     *\n     * @param request A [[Request]] object representing the request.\n     *   Parameters only require a name and type.\n     *   Parameter values are ignored.\n     */\n  }, {\n    key: \"unprepare\",\n    value: function unprepare(request) {\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        // TODO: Abort if `request.handle` is not set\n        value: request.handle,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n    }\n    /**\n     * Execute previously prepared SQL, using the supplied parameters.\n     *\n     * @param request A previously prepared [[Request]].\n     * @param parameters  An object whose names correspond to the names of\n     *   parameters that were added to the [[Request]] before it was prepared.\n     *   The object's values are passed as the parameters' values when the\n     *   request is executed.\n     */\n  }, {\n    key: \"execute\",\n    value: function execute(request, parameters) {\n      var _this13 = this;\n      var executeParameters = [];\n      executeParameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        // TODO: Abort if `request.handle` is not set\n        value: request.handle,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      try {\n        for (var i = 0, len = request.parameters.length; i < len; i++) {\n          var parameter = request.parameters[i];\n          executeParameters.push(_objectSpread(_objectSpread({}, parameter), {}, {\n            value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n          }));\n        }\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this13.debug.log(error.message);\n          request.callback(error);\n        });\n        return;\n      }\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n    }\n    /**\n     * Call a stored procedure represented by [[Request]].\n     *\n     * @param request A [[Request]] object representing the request.\n     */\n  }, {\n    key: \"callProcedure\",\n    value: function callProcedure(request) {\n      var _this14 = this;\n      try {\n        request.validateParameters(this.databaseCollation);\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this14.debug.log(error.message);\n          request.callback(error);\n        });\n        return;\n      }\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n    }\n    /**\n     * Start a transaction.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`\n     *   is present.\n     * @param isolationLevel The isolation level that the transaction is to be run with.\n     *\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n     *   * `READ_UNCOMMITTED`\n     *   * `READ_COMMITTED`\n     *   * `REPEATABLE_READ`\n     *   * `SERIALIZABLE`\n     *   * `SNAPSHOT`\n     *\n     *   Optional, and defaults to the Connection's isolation level.\n     */\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(callback) {\n      var _this15 = this;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var isolationLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.options.isolationLevel;\n      (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n      var transaction = new _transaction.Transaction(name, isolationLevel);\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, function (err) {\n          _this15.transactionDepth++;\n          if (_this15.transactionDepth === 1) {\n            _this15.inTransaction = true;\n          }\n          callback(err);\n        }));\n      }\n      var request = new _request.default(undefined, function (err) {\n        return callback(err, _this15.currentTransactionDescriptor());\n      });\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Commit a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n     */\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction(callback) {\n      var _this16 = this;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, function (err) {\n          _this16.transactionDepth--;\n          if (_this16.transactionDepth === 0) {\n            _this16.inTransaction = false;\n          }\n          callback(err);\n        }));\n      }\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Rollback a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\n     *   Optional, and defaults to an empty string.\n     *   Required when `isolationLevel` is present.\n     */\n  }, {\n    key: \"rollbackTransaction\",\n    value: function rollbackTransaction(callback) {\n      var _this17 = this;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, function (err) {\n          _this17.transactionDepth--;\n          if (_this17.transactionDepth === 0) {\n            _this17.inTransaction = false;\n          }\n          callback(err);\n        }));\n      }\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Set a savepoint within a transaction.\n     *\n     * There should be an active transaction - that is, [[beginTransaction]]\n     * should have been previously called.\n     *\n     * @param callback\n     * @param name A string representing a name to associate with the transaction.\\\n     *   Optional, and defaults to an empty string.\n     *   Required when `isolationLevel` is present.\n     */\n  }, {\n    key: \"saveTransaction\",\n    value: function saveTransaction(callback, name) {\n      var _this18 = this;\n      var transaction = new _transaction.Transaction(name);\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, function (err) {\n          _this18.transactionDepth++;\n          callback(err);\n        }));\n      }\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n    }\n    /**\n     * Run the given callback after starting a transaction, and commit or\n     * rollback the transaction afterwards.\n     *\n     * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n     * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n     * use of database transactions and automatically handle transaction nesting.\n     *\n     * @param cb\n     * @param isolationLevel\n     *   The isolation level that the transaction is to be run with.\n     *\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n     *   * `READ_UNCOMMITTED`\n     *   * `READ_COMMITTED`\n     *   * `REPEATABLE_READ`\n     *   * `SERIALIZABLE`\n     *   * `SNAPSHOT`\n     *\n     *   Optional, and defaults to the Connection's isolation level.\n     */\n  }, {\n    key: \"transaction\",\n    value: function transaction(cb, isolationLevel) {\n      var _this19 = this;\n      if (typeof cb !== 'function') {\n        throw new TypeError('`cb` must be a function');\n      }\n      var useSavepoint = this.inTransaction;\n      var name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n      var txDone = function txDone(err, done) {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          args[_key3 - 2] = arguments[_key3];\n        }\n        if (err) {\n          if (_this19.inTransaction && _this19.state === _this19.STATE.LOGGED_IN) {\n            _this19.rollbackTransaction(function (txErr) {\n              done.apply(void 0, [txErr || err].concat(args));\n            }, name);\n          } else {\n            done.apply(void 0, [err].concat(args));\n          }\n        } else if (useSavepoint) {\n          if (_this19.config.options.tdsVersion < '7_2') {\n            _this19.transactionDepth--;\n          }\n          done.apply(void 0, [null].concat(args));\n        } else {\n          _this19.commitTransaction(function (txErr) {\n            done.apply(void 0, [txErr].concat(args));\n          }, name);\n        }\n      };\n      if (useSavepoint) {\n        return this.saveTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n          if (isolationLevel) {\n            return _this19.execSqlBatch(new _request.default('SET transaction isolation level ' + _this19.getIsolationLevelText(isolationLevel), function (err) {\n              return cb(err, txDone);\n            }));\n          } else {\n            return cb(null, txDone);\n          }\n        }, name);\n      } else {\n        return this.beginTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n          return cb(null, txDone);\n        }, name, isolationLevel);\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(request, packetType, payload) {\n      var _this20 = this;\n      if (this.state !== this.STATE.LOGGED_IN) {\n        var message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n        this.debug.log(message);\n        request.callback(new _errors.RequestError(message, 'EINVALIDSTATE'));\n      } else if (request.canceled) {\n        process.nextTick(function () {\n          request.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n        });\n      } else {\n        if (packetType === _packet.TYPE.SQL_BATCH) {\n          this.isSqlBatch = true;\n        } else {\n          this.isSqlBatch = false;\n        }\n        this.request = request;\n        request.connection = this;\n        request.rowCount = 0;\n        request.rows = [];\n        request.rst = [];\n        var onCancel = function onCancel() {\n          payloadStream.unpipe(_message3);\n          payloadStream.destroy(new _errors.RequestError('Canceled.', 'ECANCEL')); // set the ignore bit and end the message.\n\n          _message3.ignore = true;\n          _message3.end();\n          if (request instanceof _request.default && request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            request.resume();\n          }\n        };\n        request.once('cancel', onCancel);\n        this.createRequestTimer();\n        var _message3 = new _message.default({\n          type: packetType,\n          resetConnection: this.resetConnectionOnNextRequest\n        });\n        this.messageIo.outgoingMessageStream.write(_message3);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n        _message3.once('finish', function () {\n          request.removeListener('cancel', onCancel);\n          request.once('cancel', _this20._cancelAfterRequestSent);\n          _this20.resetConnectionOnNextRequest = false;\n          _this20.debug.payload(function () {\n            return payload.toString('  ');\n          });\n        });\n        var payloadStream = _stream.Readable.from(payload);\n        payloadStream.once('error', function (error) {\n          var _request$error;\n          payloadStream.unpipe(_message3); // Only set a request error if no error was set yet.\n\n          (_request$error = request.error) !== null && _request$error !== void 0 ? _request$error : request.error = error;\n          _message3.ignore = true;\n          _message3.end();\n        });\n        payloadStream.pipe(_message3);\n      }\n    }\n    /**\n     * Cancel currently executed request.\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.request) {\n        return false;\n      }\n      if (this.request.canceled) {\n        return false;\n      }\n      this.request.cancel();\n      return true;\n    }\n    /**\n     * Reset the connection to its initial state.\n     * Can be useful for connection pool implementations.\n     *\n     * @param callback\n     */\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this21 = this;\n      var request = new _request.default(this.getInitialSql(), function (err) {\n        if (_this21.config.options.tdsVersion < '7_2') {\n          _this21.inTransaction = false;\n        }\n        callback(err);\n      });\n      this.resetConnectionOnNextRequest = true;\n      this.execSqlBatch(request);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"currentTransactionDescriptor\",\n    value: function currentTransactionDescriptor() {\n      return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"getIsolationLevelText\",\n    value: function getIsolationLevelText(isolationLevel) {\n      switch (isolationLevel) {\n        case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n          return 'read uncommitted';\n        case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n          return 'repeatable read';\n        case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n          return 'serializable';\n        case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n          return 'snapshot';\n        default:\n          return 'read committed';\n      }\n    }\n  }]);\n  return Connection;\n}(_events.EventEmitter);\nfunction isTransientError(error) {\n  if (error instanceof _esAggregateError.default) {\n    error = error.errors[0];\n  }\n  return error instanceof _errors.ConnectionError && !!error.isTransient;\n}\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function enter() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function enter() {\n      var _this22 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var messageBuffer, message, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, data, preloginPayload, _ref4, _this$routingData, authentication;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              messageBuffer = Buffer.alloc(0);\n              _context.prev = 1;\n              _context.next = 4;\n              return _this22.messageIo.readMessage();\n            case 4:\n              message = _context.sent;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _this22.socketError(_context.t0));\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 12;\n              _iterator = _asyncIterator(message);\n            case 14:\n              _context.next = 16;\n              return _iterator.next();\n            case 16:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 22;\n                break;\n              }\n              data = _step.value;\n              messageBuffer = Buffer.concat([messageBuffer, data]);\n            case 19:\n              _iteratorAbruptCompletion = false;\n              _context.next = 14;\n              break;\n            case 22:\n              _context.next = 28;\n              break;\n            case 24:\n              _context.prev = 24;\n              _context.t1 = _context[\"catch\"](12);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 28:\n              _context.prev = 28;\n              _context.prev = 29;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 33;\n                break;\n              }\n              _context.next = 33;\n              return _iterator.return();\n            case 33:\n              _context.prev = 33;\n              if (!_didIteratorError) {\n                _context.next = 36;\n                break;\n              }\n              throw _iteratorError;\n            case 36:\n              return _context.finish(33);\n            case 37:\n              return _context.finish(28);\n            case 38:\n              preloginPayload = new _preloginPayload.default(messageBuffer);\n              _this22.debug.payload(function () {\n                return preloginPayload.toString('  ');\n              });\n              if (preloginPayload.fedAuthRequired === 1) {\n                _this22.fedAuthRequired = true;\n              }\n              if (!(preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ')) {\n                _context.next = 54;\n                break;\n              }\n              if (_this22.config.options.encrypt) {\n                _context.next = 45;\n                break;\n              }\n              _this22.emit('connect', new _errors.ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n              return _context.abrupt(\"return\", _this22.close());\n            case 45:\n              _context.prev = 45;\n              _this22.transitionTo(_this22.STATE.SENT_TLSSSLNEGOTIATION);\n              _context.next = 49;\n              return _this22.messageIo.startTls(_this22.secureContextOptions, (_ref4 = (_this$routingData = _this22.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _ref4 !== void 0 ? _ref4 : _this22.config.server, _this22.config.options.trustServerCertificate);\n            case 49:\n              _context.next = 54;\n              break;\n            case 51:\n              _context.prev = 51;\n              _context.t2 = _context[\"catch\"](45);\n              return _context.abrupt(\"return\", _this22.socketError(_context.t2));\n            case 54:\n              _this22.sendLogin7Packet();\n              authentication = _this22.config.authentication;\n              _context.t3 = authentication.type;\n              _context.next = _context.t3 === 'azure-active-directory-password' ? 59 : _context.t3 === 'azure-active-directory-msi-vm' ? 59 : _context.t3 === 'azure-active-directory-msi-app-service' ? 59 : _context.t3 === 'azure-active-directory-service-principal-secret' ? 59 : _context.t3 === 'azure-active-directory-default' ? 59 : _context.t3 === 'ntlm' ? 61 : 63;\n              break;\n            case 59:\n              _this22.transitionTo(_this22.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n              return _context.abrupt(\"break\", 65);\n            case 61:\n              _this22.transitionTo(_this22.STATE.SENT_LOGIN7_WITH_NTLM);\n              return _context.abrupt(\"break\", 65);\n            case 63:\n              _this22.transitionTo(_this22.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n              return _context.abrupt(\"break\", 65);\n            case 65:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 7], [12, 24, 28, 38], [29,, 33, 37], [45, 51]]);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function reconnect() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function enter() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function retry() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function enter() {\n      var _this23 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var message, handler, tokenStreamParser;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _this23.messageIo.readMessage();\n            case 3:\n              message = _context2.sent;\n              _context2.next = 9;\n              break;\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              return _context2.abrupt(\"return\", _this23.socketError(_context2.t0));\n            case 9:\n              handler = new _handler.Login7TokenHandler(_this23);\n              tokenStreamParser = _this23.createTokenStreamParser(message, handler);\n              _context2.next = 13;\n              return (0, _events.once)(tokenStreamParser, 'end');\n            case 13:\n              if (handler.loginAckReceived) {\n                if (handler.routingData) {\n                  _this23.routingData = handler.routingData;\n                  _this23.transitionTo(_this23.STATE.REROUTING);\n                } else {\n                  _this23.transitionTo(_this23.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n                }\n              } else if (_this23.loginError) {\n                if (isTransientError(_this23.loginError)) {\n                  _this23.debug.log('Initiating retry on transient error');\n                  _this23.transitionTo(_this23.STATE.TRANSIENT_FAILURE_RETRY);\n                } else {\n                  _this23.emit('connect', _this23.loginError);\n                  _this23.transitionTo(_this23.STATE.FINAL);\n                }\n              } else {\n                _this23.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n                _this23.transitionTo(_this23.STATE.FINAL);\n              }\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 6]]);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function enter() {\n      var _this24 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _loop, _ret;\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var message, handler, tokenStreamParser, authentication, payload;\n                return _regeneratorRuntime().wrap(function _loop$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.prev = 0;\n                      _context3.next = 3;\n                      return _this24.messageIo.readMessage();\n                    case 3:\n                      message = _context3.sent;\n                      _context3.next = 9;\n                      break;\n                    case 6:\n                      _context3.prev = 6;\n                      _context3.t0 = _context3[\"catch\"](0);\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.socketError(_context3.t0)\n                      });\n                    case 9:\n                      handler = new _handler.Login7TokenHandler(_this24);\n                      tokenStreamParser = _this24.createTokenStreamParser(message, handler);\n                      _context3.next = 13;\n                      return (0, _events.once)(tokenStreamParser, 'end');\n                    case 13:\n                      if (!handler.loginAckReceived) {\n                        _context3.next = 22;\n                        break;\n                      }\n                      if (!handler.routingData) {\n                        _context3.next = 19;\n                        break;\n                      }\n                      _this24.routingData = handler.routingData;\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.transitionTo(_this24.STATE.REROUTING)\n                      });\n                    case 19:\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.transitionTo(_this24.STATE.LOGGED_IN_SENDING_INITIAL_SQL)\n                      });\n                    case 20:\n                      _context3.next = 42;\n                      break;\n                    case 22:\n                      if (!_this24.ntlmpacket) {\n                        _context3.next = 30;\n                        break;\n                      }\n                      authentication = _this24.config.authentication;\n                      payload = new _ntlmPayload.default({\n                        domain: authentication.options.domain,\n                        userName: authentication.options.userName,\n                        password: authentication.options.password,\n                        ntlmpacket: _this24.ntlmpacket\n                      });\n                      _this24.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n                      _this24.debug.payload(function () {\n                        return payload.toString('  ');\n                      });\n                      _this24.ntlmpacket = undefined;\n                      _context3.next = 42;\n                      break;\n                    case 30:\n                      if (!_this24.loginError) {\n                        _context3.next = 40;\n                        break;\n                      }\n                      if (!isTransientError(_this24.loginError)) {\n                        _context3.next = 36;\n                        break;\n                      }\n                      _this24.debug.log('Initiating retry on transient error');\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.transitionTo(_this24.STATE.TRANSIENT_FAILURE_RETRY)\n                      });\n                    case 36:\n                      _this24.emit('connect', _this24.loginError);\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.transitionTo(_this24.STATE.FINAL)\n                      });\n                    case 38:\n                      _context3.next = 42;\n                      break;\n                    case 40:\n                      _this24.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n                      return _context3.abrupt(\"return\", {\n                        v: _this24.transitionTo(_this24.STATE.FINAL)\n                      });\n                    case 42:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }, _loop, null, [[0, 6]]);\n              });\n            case 1:\n              if (!true) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.delegateYield(_loop(), \"t0\", 3);\n            case 3:\n              _ret = _context4.t0;\n              if (!(typeof _ret === \"object\")) {\n                _context4.next = 6;\n                break;\n              }\n              return _context4.abrupt(\"return\", _ret.v);\n            case 6:\n              _context4.next = 1;\n              break;\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee3);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function enter() {\n      var _this25 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _authentication$optio;\n        var message, handler, tokenStreamParser, fedAuthInfoToken, authentication, tokenScope, credentials, msiArgs, args, tokenResponse, token;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return _this25.messageIo.readMessage();\n            case 3:\n              message = _context5.sent;\n              _context5.next = 9;\n              break;\n            case 6:\n              _context5.prev = 6;\n              _context5.t0 = _context5[\"catch\"](0);\n              return _context5.abrupt(\"return\", _this25.socketError(_context5.t0));\n            case 9:\n              handler = new _handler.Login7TokenHandler(_this25);\n              tokenStreamParser = _this25.createTokenStreamParser(message, handler);\n              _context5.next = 13;\n              return (0, _events.once)(tokenStreamParser, 'end');\n            case 13:\n              if (!handler.loginAckReceived) {\n                _context5.next = 16;\n                break;\n              }\n              if (handler.routingData) {\n                _this25.routingData = handler.routingData;\n                _this25.transitionTo(_this25.STATE.REROUTING);\n              } else {\n                _this25.transitionTo(_this25.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n              }\n              return _context5.abrupt(\"return\");\n            case 16:\n              fedAuthInfoToken = handler.fedAuthInfoToken;\n              if (!(fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn)) {\n                _context5.next = 49;\n                break;\n              }\n              authentication = _this25.config.authentication;\n              tokenScope = new _url.URL('/.default', fedAuthInfoToken.spn).toString();\n              _context5.t1 = authentication.type;\n              _context5.next = _context5.t1 === 'azure-active-directory-password' ? 23 : _context5.t1 === 'azure-active-directory-msi-vm' ? 25 : _context5.t1 === 'azure-active-directory-msi-app-service' ? 25 : _context5.t1 === 'azure-active-directory-default' ? 28 : _context5.t1 === 'azure-active-directory-service-principal-secret' ? 31 : 33;\n              break;\n            case 23:\n              credentials = new _identity.UsernamePasswordCredential((_authentication$optio = authentication.options.tenantId) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.clientId, authentication.options.userName, authentication.options.password);\n              return _context5.abrupt(\"break\", 33);\n            case 25:\n              msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = _construct(_identity.ManagedIdentityCredential, msiArgs);\n              return _context5.abrupt(\"break\", 33);\n            case 28:\n              args = authentication.options.clientId ? {\n                managedIdentityClientId: authentication.options.clientId\n              } : {};\n              credentials = new _identity.DefaultAzureCredential(args);\n              return _context5.abrupt(\"break\", 33);\n            case 31:\n              credentials = new _identity.ClientSecretCredential(authentication.options.tenantId, authentication.options.clientId, authentication.options.clientSecret);\n              return _context5.abrupt(\"break\", 33);\n            case 33:\n              _context5.prev = 33;\n              _context5.next = 36;\n              return credentials.getToken(tokenScope);\n            case 36:\n              tokenResponse = _context5.sent;\n              _context5.next = 45;\n              break;\n            case 39:\n              _context5.prev = 39;\n              _context5.t2 = _context5[\"catch\"](33);\n              _this25.loginError = new _esAggregateError.default([new _errors.ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), _context5.t2]);\n              _this25.emit('connect', _this25.loginError);\n              _this25.transitionTo(_this25.STATE.FINAL);\n              return _context5.abrupt(\"return\");\n            case 45:\n              token = tokenResponse.token;\n              _this25.sendFedAuthTokenMessage(token);\n              _context5.next = 50;\n              break;\n            case 49:\n              if (_this25.loginError) {\n                if (isTransientError(_this25.loginError)) {\n                  _this25.debug.log('Initiating retry on transient error');\n                  _this25.transitionTo(_this25.STATE.TRANSIENT_FAILURE_RETRY);\n                } else {\n                  _this25.emit('connect', _this25.loginError);\n                  _this25.transitionTo(_this25.STATE.FINAL);\n                }\n              } else {\n                _this25.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n                _this25.transitionTo(_this25.STATE.FINAL);\n              }\n            case 50:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, null, [[0, 6], [33, 39]]);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function enter() {\n      var _this26 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var message, tokenStreamParser;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _this26.sendInitialSql();\n              _context6.prev = 1;\n              _context6.next = 4;\n              return _this26.messageIo.readMessage();\n            case 4:\n              message = _context6.sent;\n              _context6.next = 10;\n              break;\n            case 7:\n              _context6.prev = 7;\n              _context6.t0 = _context6[\"catch\"](1);\n              return _context6.abrupt(\"return\", _this26.socketError(_context6.t0));\n            case 10:\n              tokenStreamParser = _this26.createTokenStreamParser(message, new _handler.InitialSqlTokenHandler(_this26));\n              _context6.next = 13;\n              return (0, _events.once)(tokenStreamParser, 'end');\n            case 13:\n              _this26.transitionTo(_this26.STATE.LOGGED_IN);\n              _this26.processedInitialSql();\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, null, [[1, 7]]);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function enter() {\n      var _this27 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this$request, _this$request3, _this$request10, message, tokenStreamParser, onResume, onPause, onCancel, onEndOfMessage;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return _this27.messageIo.readMessage();\n            case 3:\n              message = _context7.sent;\n              _context7.next = 9;\n              break;\n            case 6:\n              _context7.prev = 6;\n              _context7.t0 = _context7[\"catch\"](0);\n              return _context7.abrupt(\"return\", _this27.socketError(_context7.t0));\n            case 9:\n              // request timer is stopped on first data package\n\n              _this27.clearRequestTimer();\n              tokenStreamParser = _this27.createTokenStreamParser(message, new _handler.RequestTokenHandler(_this27, _this27.request)); // If the request was canceled and we have a `cancelTimer`\n              // defined, we send a attention message after the\n              // request message was fully sent off.\n              //\n              // We already started consuming the current message\n              // (but all the token handlers should be no-ops), and\n              // need to ensure the next message is handled by the\n              // `SENT_ATTENTION` state.\n              if (!((_this$request = _this27.request) !== null && _this$request !== void 0 && _this$request.canceled && _this27.cancelTimer)) {\n                _context7.next = 13;\n                break;\n              }\n              return _context7.abrupt(\"return\", _this27.transitionTo(_this27.STATE.SENT_ATTENTION));\n            case 13:\n              onResume = function onResume() {\n                tokenStreamParser.resume();\n              };\n              onPause = function onPause() {\n                var _this$request2;\n                tokenStreamParser.pause();\n                (_this$request2 = _this27.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.once('resume', onResume);\n              };\n              (_this$request3 = _this27.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.on('pause', onPause);\n              if (_this27.request instanceof _request.default && _this27.request.paused) {\n                onPause();\n              }\n              onCancel = function onCancel() {\n                var _this$request4, _this$request5;\n                tokenStreamParser.removeListener('end', onEndOfMessage);\n                if (_this27.request instanceof _request.default && _this27.request.paused) {\n                  // resume the request if it was paused so we can read the remaining tokens\n                  _this27.request.resume();\n                }\n                (_this$request4 = _this27.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('pause', onPause);\n                (_this$request5 = _this27.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('resume', onResume); // The `_cancelAfterRequestSent` callback will have sent a\n                // attention message, so now we need to also switch to\n                // the `SENT_ATTENTION` state to make sure the attention ack\n                // message is processed correctly.\n\n                _this27.transitionTo(_this27.STATE.SENT_ATTENTION);\n              };\n              onEndOfMessage = function onEndOfMessage() {\n                var _this$request6, _this$request7, _this$request8, _this$request9;\n                (_this$request6 = _this27.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', _this27._cancelAfterRequestSent);\n                (_this$request7 = _this27.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('cancel', onCancel);\n                (_this$request8 = _this27.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('pause', onPause);\n                (_this$request9 = _this27.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.removeListener('resume', onResume);\n                _this27.transitionTo(_this27.STATE.LOGGED_IN);\n                var sqlRequest = _this27.request;\n                _this27.request = undefined;\n                if (_this27.config.options.tdsVersion < '7_2' && sqlRequest.error && _this27.isSqlBatch) {\n                  _this27.inTransaction = false;\n                }\n                sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n              };\n              tokenStreamParser.once('end', onEndOfMessage);\n              (_this$request10 = _this27.request) === null || _this$request10 === void 0 ? void 0 : _this$request10.once('cancel', onCancel);\n            case 21:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, null, [[0, 6]]);\n      }))();\n    },\n    exit: function exit(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function enter() {\n      var _this28 = this;\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var message, handler, tokenStreamParser, sqlRequest;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return _this28.messageIo.readMessage();\n            case 3:\n              message = _context8.sent;\n              _context8.next = 9;\n              break;\n            case 6:\n              _context8.prev = 6;\n              _context8.t0 = _context8[\"catch\"](0);\n              return _context8.abrupt(\"return\", _this28.socketError(_context8.t0));\n            case 9:\n              handler = new _handler.AttentionTokenHandler(_this28, _this28.request);\n              tokenStreamParser = _this28.createTokenStreamParser(message, handler);\n              _context8.next = 13;\n              return (0, _events.once)(tokenStreamParser, 'end');\n            case 13:\n              // 3.2.5.7 Sent Attention State\n              // Discard any data contained in the response, until we receive the attention response\n\n              if (handler.attentionReceived) {\n                _this28.clearCancelTimer();\n                sqlRequest = _this28.request;\n                _this28.request = undefined;\n                _this28.transitionTo(_this28.STATE.LOGGED_IN);\n                if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n                  sqlRequest.callback(sqlRequest.error);\n                } else {\n                  sqlRequest.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n                }\n              }\n            case 14:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, null, [[0, 6]]);\n      }))().catch(function (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function connectTimeout() {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function message() {// Do nothing\n      },\n      socketError: function socketError() {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"names":["_crypto","_interopRequireDefault","require","_os","_dns","_constants","_stream","_identity","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_nodeAbortController","_dataType","_bulkLoadPayload","_esAggregateError","_package","_url","_handler","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","_events$EventEmitter","_inherits","_super","_createSuper","config","_this","_classCallCheck","call","fedAuthRequired","secureContextOptions","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","databaseCollation","TypeError","server","authentication","undefined","type","options","domain","userName","password","toUpperCase","clientId","tenantId","token","clientSecret","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connector","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","secureOptions","Object","create","value","default","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","createCancelTimer","_createClass","key","connect","connectListener","_this2","ConnectionError","name","onConnect","err","removeListener","onError","once","transitionTo","CONNECTING","on","event","listener","_get","_getPrototypeOf","prototype","emit","_get2","_len","arguments","length","args","Array","_key","apply","concat","close","FINAL","initialiseConnection","_this3","signal","createConnectTimer","connectOnPort","instanceLookup","timeout","then","process","nextTick","clearConnectTimer","message","cleanupConnection","cleanupType","_this4","clearRequestTimer","clearRetryTimer","closeConnection","RequestError","callback","_this5","createTokenStreamParser","handler","Parser","customConnector","_this6","connectOpts","host","connectInParallel","connectInSequence","lookup","error","socketError","socketClose","socketEnd","setKeepAlive","cleartext","log","sendPreLogin","SENT_PRELOGIN","destroy","_this7","controller","AbortController","setTimeout","abort","_this8","clearCancelTimer","createRequestTimer","_this9","createRetryTimer","_this10","retryTimeout","dispatchEvent","cancel","clearTimeout","newState","exit","enter","getEventHandler","eventName","events","_len2","_key2","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","_exec","_ref","exec","version","_ref2","_slicedToArray","major","minor","build","Number","subbuild","PRELOGIN","toString","sendLogin7Packet","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendInitialSql","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","push","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","_this11","validateParameters","parameters","TYPES","NVarChar","output","precision","scale","makeParamsParameter","_toConsumableArray","RPC_REQUEST","newBulkLoad","table","callbackOrOptions","execBulkLoad","bulkLoad","rows","_this12","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","end","onCancel","BulkLoadPayload","getBulkInsertSql","BULK_LOAD","prepare","Int","preparing","handle","unprepare","execute","_this13","executeParameters","i","len","parameter","_objectSpread","validate","callProcedure","_this14","beginTransaction","_this15","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","_this16","commitPayload","rollbackTransaction","_this17","rollbackPayload","saveTransaction","_this18","savePayload","cb","_this19","useSavepoint","randomBytes","txDone","done","_len3","_key3","LOGGED_IN","txErr","packetType","_this20","canceled","connection","rowCount","rst","payloadStream","unpipe","ignore","paused","resume","resetConnection","SENT_CLIENT_REQUEST","_request$error","reset","_this21","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","EventEmitter","isTransientError","errors","isTransient","module","exports","_this22","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","preloginPayload","_ref4","_this$routingData","wrap","_callee$","_context","prev","next","readMessage","sent","t0","abrupt","_asyncIterator","t1","return","finish","encryptionString","startTls","t2","t3","SENT_LOGIN7_WITH_FEDAUTH","SENT_LOGIN7_WITH_NTLM","stop","catch","reconnect","retry","_this23","_callee2","tokenStreamParser","_callee2$","_context2","Login7TokenHandler","loginAckReceived","LOGGED_IN_SENDING_INITIAL_SQL","_this24","_callee3","_loop","_ret","_callee3$","_context4","_loop$","_context3","v","NTLMAUTH_PKT","delegateYield","_this25","_callee4","_authentication$optio","fedAuthInfoToken","tokenScope","credentials","msiArgs","tokenResponse","_callee4$","_context5","stsurl","spn","URL","UsernamePasswordCredential","_construct","ManagedIdentityCredential","managedIdentityClientId","DefaultAzureCredential","ClientSecretCredential","getToken","_this26","_callee5","_callee5$","_context6","InitialSqlTokenHandler","_this27","_callee6","_this$request","_this$request3","_this$request10","onResume","onPause","onEndOfMessage","_callee6$","_context7","RequestTokenHandler","SENT_ATTENTION","_this$request2","pause","_this$request4","_this$request5","_this$request6","_this$request7","_this$request8","_this$request9","sqlRequest","nextState","_this28","_callee7","_callee7$","_context8","AttentionTokenHandler","attentionReceived"],"sources":["../src/connection.ts"],"sourcesContent":["import crypto from 'crypto';\nimport os from 'os';\nimport { Socket } from 'net';\nimport dns from 'dns';\n\nimport constants from 'constants';\nimport { SecureContextOptions } from 'tls';\n\nimport { Readable } from 'stream';\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  UsernamePasswordCredential,\n} from '@azure/identity';\n\nimport BulkLoad, { Options as BulkLoadOptions, Callback as BulkLoadCallback } from './bulk-load';\nimport Debug from './debug';\nimport { EventEmitter, once } from 'events';\nimport { instanceLookup } from './instance-lookup';\nimport { TransientErrorLookup } from './transient-error-lookup';\nimport { TYPE } from './packet';\nimport PreloginPayload from './prelogin-payload';\nimport Login7Payload from './login7-payload';\nimport NTLMResponsePayload from './ntlm-payload';\nimport Request from './request';\nimport RpcRequestPayload from './rpcrequest-payload';\nimport SqlBatchPayload from './sqlbatch-payload';\nimport MessageIO from './message-io';\nimport { Parser as TokenStreamParser } from './token/token-stream-parser';\nimport { Transaction, ISOLATION_LEVEL, assertValidIsolationLevel } from './transaction';\nimport { ConnectionError, RequestError } from './errors';\nimport { connectInParallel, connectInSequence } from './connector';\nimport { name as libraryName } from './library';\nimport { versions } from './tds-versions';\nimport Message from './message';\nimport { Metadata } from './metadata-parser';\nimport { createNTLMRequest } from './ntlm';\nimport { ColumnEncryptionAzureKeyVaultProvider } from './always-encrypted/keystore-provider-azure-key-vault';\n\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { Parameter, TYPES } from './data-type';\nimport { BulkLoadPayload } from './bulk-load-payload';\nimport { Collation } from './collation';\n\nimport AggregateError from 'es-aggregate-error';\nimport { version } from '../package.json';\nimport { URL } from 'url';\nimport { AttentionTokenHandler, InitialSqlTokenHandler, Login7TokenHandler, RequestTokenHandler, TokenHandler } from './token/handler';\n\ntype BeginTransactionCallback =\n  /**\n   * The callback is called when the request to start the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param transactionDescriptor A Buffer that describe the transaction\n   */\n  (err: Error | null | undefined, transactionDescriptor?: Buffer) => void\n\ntype SaveTransactionCallback =\n  /**\n   * The callback is called when the request to set a savepoint within the\n   * transaction has completed, either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype CommitTransactionCallback =\n  /**\n   * The callback is called when the request to commit the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype RollbackTransactionCallback =\n  /**\n   * The callback is called when the request to rollback the transaction has\n   * completed, either successfully or with an error.\n   * If an error occurred then err will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype ResetCallback =\n  /**\n   * The callback is called when the connection reset has completed,\n   * either successfully or with an error.\n   *\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another\n   * request should not be initiated until this callback is called\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype TransactionCallback<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * The callback is called when the request to start a transaction (or create a savepoint, in\n   * the case of a nested transaction) has completed, either successfully or with an error.\n   * If an error occurred, then `err` will describe the error.\n   * If no error occurred, the callback should perform its work and eventually call\n   * `done` with an error or null (to trigger a transaction rollback or a\n   * transaction commit) and an additional completion callback that will be called when the request\n   * to rollback or commit the current transaction has completed, either successfully or with an error.\n   * Additional arguments given to `done` will be passed through to this callback.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until the completion callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param txDone If no error occurred, a function to be called to commit or rollback the transaction.\n   */\n  (err: Error | null | undefined, txDone?: TransactionDone<T>) => void;\n\ntype TransactionDoneCallback = (err: Error | null | undefined, ...args: any[]) => void;\ntype CallbackParameters<T extends (err: Error | null | undefined, ...args: any[]) => any> = T extends (err: Error | null | undefined, ...args: infer P) => any ? P : never;\n\ntype TransactionDone<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * If no error occurred, a function to be called to commit or rollback the transaction.\n   *\n   * @param err If an err occurred, a string with details of the error.\n   */\n  (err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void;\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\nconst DEFAULT_DATEFORMAT = 'mdy';\n\ninterface AzureActiveDirectoryMsiAppServiceAuthentication {\n  type: 'azure-active-directory-msi-app-service';\n  options: {\n    /**\n     * If you user want to connect to an Azure app service using a specific client account\n     * they need to provide `clientId` asscoiate to their created idnetity.\n     *\n     * This is optional for retrieve token from azure web app service\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryMsiVmAuthentication {\n  type: 'azure-active-directory-msi-vm';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieve a token\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryDefaultAuthentication {\n  type: 'azure-active-directory-default';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieving a token\n     */\n    clientId?: string;\n  };\n}\n\n\ninterface AzureActiveDirectoryAccessTokenAuthentication {\n  type: 'azure-active-directory-access-token';\n  options: {\n    /**\n     * A user need to provide `token` which they retrived else where\n     * to forming the connection.\n     */\n    token: string;\n  };\n}\n\ninterface AzureActiveDirectoryPasswordAuthentication {\n  type: 'azure-active-directory-password';\n  options: {\n    /**\n     * A user need to provide `userName` asscoiate to their account.\n     */\n    userName: string;\n\n    /**\n     * A user need to provide `password` asscoiate to their account.\n     */\n    password: string;\n\n    /**\n     * A client id to use.\n     */\n    clientId: string;\n\n    /**\n     * Optional parameter for specific Azure tenant ID\n     */\n    tenantId: string;\n  };\n}\n\ninterface AzureActiveDirectoryServicePrincipalSecret {\n  type: 'azure-active-directory-service-principal-secret';\n  options: {\n    /**\n     * Application (`client`) ID from your registered Azure application\n     */\n    clientId: string;\n    /**\n     * The created `client secret` for this registered Azure application\n     */\n    clientSecret: string;\n    /**\n     * Directory (`tenant`) ID from your registered Azure application\n     */\n    tenantId: string;\n  };\n}\n\ninterface NtlmAuthentication {\n  type: 'ntlm';\n  options: {\n    /**\n     * User name from your windows account.\n     */\n    userName: string;\n    /**\n     * Password from your windows account.\n     */\n    password: string;\n    /**\n     * Once you set domain for ntlm authentication type, driver will connect to SQL Server using domain login.\n     *\n     * This is necessary for forming a connection using ntlm type\n     */\n    domain: string;\n  };\n}\n\ninterface DefaultAuthentication {\n  type: 'default';\n  options: {\n    /**\n     * User name to use for sql server login.\n     */\n    userName?: string | undefined;\n    /**\n     * Password to use for sql server login.\n     */\n    password?: string | undefined;\n  };\n}\n\ninterface ErrorWithCode extends Error {\n  code?: string;\n}\n\ninterface InternalConnectionConfig {\n  server: string;\n  authentication: DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n  options: InternalConnectionOptions;\n}\n\nexport interface InternalConnectionOptions {\n  abortTransactionOnError: boolean;\n  appName: undefined | string;\n  camelCaseColumns: boolean;\n  cancelTimeout: number;\n  columnEncryptionKeyCacheTTL: number;\n  columnEncryptionSetting: boolean;\n  columnNameReplacer: undefined | ((colName: string, index: number, metadata: Metadata) => string);\n  connectionRetryInterval: number;\n  connector: undefined | (() => Promise<Socket>);\n  connectTimeout: number;\n  connectionIsolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  cryptoCredentialsDetails: SecureContextOptions;\n  database: undefined | string;\n  datefirst: number;\n  dateFormat: string;\n  debug: {\n    data: boolean;\n    packet: boolean;\n    payload: boolean;\n    token: boolean;\n  };\n  enableAnsiNull: null | boolean;\n  enableAnsiNullDefault: null | boolean;\n  enableAnsiPadding: null | boolean;\n  enableAnsiWarnings: null | boolean;\n  enableArithAbort: null | boolean;\n  enableConcatNullYieldsNull: null | boolean;\n  enableCursorCloseOnCommit: null | boolean;\n  enableImplicitTransactions: null | boolean;\n  enableNumericRoundabort: null | boolean;\n  enableQuotedIdentifier: null | boolean;\n  encrypt: boolean;\n  encryptionKeyStoreProviders: KeyStoreProviderMap | undefined;\n  fallbackToDefaultDb: boolean;\n  instanceName: undefined | string;\n  isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  language: string;\n  localAddress: undefined | string;\n  maxRetriesOnTransientErrors: number;\n  multiSubnetFailover: boolean;\n  packetSize: number;\n  port: undefined | number;\n  readOnlyIntent: boolean;\n  requestTimeout: number;\n  rowCollectionOnDone: boolean;\n  rowCollectionOnRequestCompletion: boolean;\n  serverName: undefined | string;\n  serverSupportsColumnEncryption: boolean;\n  tdsVersion: string;\n  textsize: number;\n  trustedServerNameAE: string | undefined;\n  trustServerCertificate: boolean;\n  useColumnNames: boolean;\n  useUTC: boolean;\n  workstationId: undefined | string;\n  lowerCaseGuids: boolean;\n}\n\ninterface KeyStoreProviderMap {\n  [key: string]: ColumnEncryptionAzureKeyVaultProvider;\n}\n\n/**\n * @private\n */\ninterface State {\n  name: string;\n  enter?(this: Connection): void;\n  exit?(this: Connection, newState: State): void;\n  events: {\n    socketError?(this: Connection, err: Error): void;\n    connectTimeout?(this: Connection): void;\n    message?(this: Connection, message: Message): void;\n    retry?(this: Connection): void;\n    reconnect?(this: Connection): void;\n  };\n}\n\ntype Authentication = DefaultAuthentication |\n  NtlmAuthentication |\n  AzureActiveDirectoryPasswordAuthentication |\n  AzureActiveDirectoryMsiAppServiceAuthentication |\n  AzureActiveDirectoryMsiVmAuthentication |\n  AzureActiveDirectoryAccessTokenAuthentication |\n  AzureActiveDirectoryServicePrincipalSecret |\n  AzureActiveDirectoryDefaultAuthentication;\n\ntype AuthenticationType = Authentication['type'];\n\nexport interface ConnectionConfiguration {\n  /**\n   * Hostname to connect to.\n   */\n  server: string;\n  /**\n   * Configuration options for forming the connection.\n   */\n  options?: ConnectionOptions;\n  /**\n   * Authentication realted options for connection.\n   */\n  authentication?: AuthenticationOptions;\n}\n\ninterface DebugOptions {\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet data details\n   *\n   * (default: `false`)\n   */\n  data: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet details\n   *\n   * (default: `false`)\n   */\n  packet: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet payload details\n   *\n   * (default: `false`)\n   */\n  payload: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing token stream tokens\n   *\n   * (default: `false`)\n   */\n  token: boolean;\n}\n\ninterface AuthenticationOptions {\n  /**\n   * Type of the authentication method, valid types are `default`, `ntlm`,\n   * `azure-active-directory-password`, `azure-active-directory-access-token`,\n   * `azure-active-directory-msi-vm`, `azure-active-directory-msi-app-service`,\n   * `azure-active-directory-default`\n   * or `azure-active-directory-service-principal-secret`\n   */\n  type?: AuthenticationType;\n  /**\n   * Different options for authentication types:\n   *\n   * * `default`: [[DefaultAuthentication.options]]\n   * * `ntlm` :[[NtlmAuthentication]]\n   * * `azure-active-directory-password` : [[AzureActiveDirectoryPasswordAuthentication.options]]\n   * * `azure-active-directory-access-token` : [[AzureActiveDirectoryAccessTokenAuthentication.options]]\n   * * `azure-active-directory-msi-vm` : [[AzureActiveDirectoryMsiVmAuthentication.options]]\n   * * `azure-active-directory-msi-app-service` : [[AzureActiveDirectoryMsiAppServiceAuthentication.options]]\n   * * `azure-active-directory-service-principal-secret` : [[AzureActiveDirectoryServicePrincipalSecret.options]]\n   * * `azure-active-directory-default` : [[AzureActiveDirectoryDefaultAuthentication.options]]\n   */\n  options?: any;\n}\n\nexport interface ConnectionOptions {\n  /**\n   * A boolean determining whether to rollback a transaction automatically if any error is encountered\n   * during the given transaction's execution. This sets the value for `SET XACT_ABORT` during the\n   * initial SQL phase of a connection [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-xact-abort-transact-sql).\n   */\n  abortTransactionOnError?: boolean;\n\n  /**\n   * Application name used for identifying a specific application in profiling, logging or tracing tools of SQLServer.\n   *\n   * (default: `Tedious`)\n   */\n  appName?: string | undefined;\n\n  /**\n   * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n   * (`true`) or not. This value is ignored if you provide a [[columnNameReplacer]].\n   *\n   * (default: `false`).\n   */\n  camelCaseColumns?: boolean;\n\n  /**\n   * The number of milliseconds before the [[Request.cancel]] (abort) of a request is considered failed\n   *\n   * (default: `5000`).\n   */\n  cancelTimeout?: number;\n\n  /**\n   * A function with parameters `(columnName, index, columnMetaData)` and returning a string. If provided,\n   * this will be called once per column per result-set. The returned value will be used instead of the SQL-provided\n   * column name on row and meta data objects. This allows you to dynamically convert between naming conventions.\n   *\n   * (default: `null`)\n   */\n  columnNameReplacer?: (colName: string, index: number, metadata: Metadata) => string;\n\n  /**\n   * Number of milliseconds before retrying to establish connection, in case of transient failure.\n   *\n   * (default:`500`)\n   */\n  connectionRetryInterval?: number;\n\n  /**\n   * Custom connector factory method.\n   *\n   * (default: `undefined`)\n   */\n  connector?: () => Promise<Socket>;\n\n  /**\n   * The number of milliseconds before the attempt to connect is considered failed\n   *\n   * (default: `15000`).\n   */\n  connectTimeout?: number;\n\n  /**\n   * The default isolation level for new connections. All out-of-transaction queries are executed with this setting.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  connectionIsolationLevel?: number;\n\n  /**\n   * When encryption is used, an object may be supplied that will be used\n   * for the first argument when calling [`tls.createSecurePair`](http://nodejs.org/docs/latest/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized)\n   *\n   * (default: `{}`)\n   */\n  cryptoCredentialsDetails?: SecureContextOptions;\n\n  /**\n   * Database to connect to (default: dependent on server configuration).\n   */\n  database?: string | undefined;\n\n  /**\n   * Sets the first day of the week to a number from 1 through 7.\n   */\n  datefirst?: number;\n\n  /**\n   * A string representing position of month, day and year in temporal datatypes.\n   *\n   * (default: `mdy`)\n   */\n  dateFormat?: string;\n\n  debug?: DebugOptions;\n\n  /**\n   * A boolean, controls the way null values should be used during comparison operation.\n   *\n   * (default: `true`)\n   */\n  enableAnsiNull?: boolean;\n\n  /**\n   * If true, `SET ANSI_NULL_DFLT_ON ON` will be set in the initial sql. This means new columns will be\n   * nullable by default. See the [T-SQL documentation](https://msdn.microsoft.com/en-us/library/ms187375.aspx)\n   *\n   * (default: `true`).\n   */\n  enableAnsiNullDefault?: boolean;\n\n  /**\n   * A boolean, controls if padding should be applied for values shorter than the size of defined column.\n   *\n   * (default: `true`)\n   */\n  enableAnsiPadding?: boolean;\n\n  /**\n   * If true, SQL Server will follow ISO standard behavior during various error conditions. For details,\n   * see [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-warnings-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableAnsiWarnings?: boolean;\n\n  /**\n   * Ends a query when an overflow or divide-by-zero error occurs during query execution.\n   * See [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-arithabort-transact-sql?view=sql-server-2017)\n   * for more details.\n   *\n   * (default: `true`)\n   */\n  enableArithAbort?: boolean;\n\n  /**\n   * A boolean, determines if concatenation with NULL should result in NULL or empty string value, more details in\n   * [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-concat-null-yields-null-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableConcatNullYieldsNull?: boolean;\n\n  /**\n   * A boolean, controls whether cursor should be closed, if the transaction opening it gets committed or rolled\n   * back.\n   *\n   * (default: `null`)\n   */\n  enableCursorCloseOnCommit?: boolean | null;\n\n  /**\n   * A boolean, sets the connection to either implicit or autocommit transaction mode.\n   *\n   * (default: `false`)\n   */\n  enableImplicitTransactions?: boolean;\n\n  /**\n   * If false, error is not generated during loss of precession.\n   *\n   * (default: `false`)\n   */\n  enableNumericRoundabort?: boolean;\n\n  /**\n   * If true, characters enclosed in single quotes are treated as literals and those enclosed double quotes are treated as identifiers.\n   *\n   * (default: `true`)\n   */\n  enableQuotedIdentifier?: boolean;\n\n  /**\n   * A boolean determining whether or not the connection will be encrypted. Set to `true` if you're on Windows Azure.\n   *\n   * (default: `false`)\n   */\n  encrypt?: boolean;\n\n  /**\n   * By default, if the database requested by [[database]] cannot be accessed,\n   * the connection will fail with an error. However, if [[fallbackToDefaultDb]] is\n   * set to `true`, then the user's default database will be used instead\n   *\n   * (default: `false`)\n   */\n  fallbackToDefaultDb?: boolean;\n\n  /**\n   * The instance name to connect to.\n   * The SQL Server Browser service must be running on the database server,\n   * and UDP port 1434 on the database server must be reachable.\n   *\n   * (no default)\n   *\n   * Mutually exclusive with [[port]].\n   */\n  instanceName?: string | undefined;\n\n  /**\n   * The default isolation level that transactions will be run with.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  isolationLevel?: number;\n\n  /**\n   * Specifies the language environment for the session. The session language determines the datetime formats and system messages.\n   *\n   * (default: `us_english`).\n   */\n  language?: string;\n\n  /**\n   * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n   */\n  localAddress?: string | undefined;\n\n  /**\n   * A boolean determining whether to parse unique identifier type with lowercase case characters.\n   *\n   * (default: `false`).\n   */\n  lowerCaseGuids?: boolean;\n\n  /**\n   * The maximum number of connection retries for transient errors.、\n   *\n   * (default: `3`).\n   */\n  maxRetriesOnTransientErrors?: number;\n\n  /**\n   * Sets the MultiSubnetFailover = True parameter, which can help minimize the client recovery latency when failovers occur.\n   *\n   * (default: `false`).\n   */\n  multiSubnetFailover?: boolean;\n\n  /**\n   * The size of TDS packets (subject to negotiation with the server).\n   * Should be a power of 2.\n   *\n   * (default: `4096`).\n   */\n  packetSize?: number;\n\n  /**\n   * Port to connect to (default: `1433`).\n   *\n   * Mutually exclusive with [[instanceName]]\n   */\n  port?: number;\n\n  /**\n   * A boolean, determining whether the connection will request read only access from a SQL Server Availability\n   * Group. For more information, see [here](http://msdn.microsoft.com/en-us/library/hh710054.aspx \"Microsoft: Configure Read-Only Routing for an Availability Group (SQL Server)\")\n   *\n   * (default: `false`).\n   */\n  readOnlyIntent?: boolean;\n\n  /**\n   * The number of milliseconds before a request is considered failed, or `0` for no timeout\n   *\n   * (default: `15000`).\n   */\n  requestTimeout?: number;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests done related events:\n   * * [[Request.Event_doneInProc]]\n   * * [[Request.Event_doneProc]]\n   * * [[Request.Event_done]]\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnDone?: boolean;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests' completion callback.See [[Request.constructor]].\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnRequestCompletion?: boolean;\n\n  /**\n   * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n   *\n   * The versions are available from `require('tedious').TDS_VERSION`.\n   * * `7_1`\n   * * `7_2`\n   * * `7_3_A`\n   * * `7_3_B`\n   * * `7_4`\n   *\n   * (default: `7_4`)\n   */\n  tdsVersion?: string;\n\n  /**\n   * Specifies the size of varchar(max), nvarchar(max), varbinary(max), text, ntext, and image data returned by a SELECT statement.\n   *\n   * (default: `2147483647`)\n   */\n  textsize?: string;\n\n  /**\n   * If \"true\", the SQL Server SSL certificate is automatically trusted when the communication layer is encrypted using SSL.\n   *\n   * If \"false\", the SQL Server validates the server SSL certificate. If the server certificate validation fails,\n   * the driver raises an error and terminates the connection. Make sure the value passed to serverName exactly\n   * matches the Common Name (CN) or DNS name in the Subject Alternate Name in the server certificate for an SSL connection to succeed.\n   *\n   * (default: `true`)\n   */\n  trustServerCertificate?: boolean;\n\n  /**\n   * A boolean determining whether to return rows as arrays or key-value collections.\n   *\n   * (default: `false`).\n   */\n  useColumnNames?: boolean;\n\n  /**\n   * A boolean determining whether to pass time values in UTC or local time.\n   *\n   * (default: `true`).\n   */\n  useUTC?: boolean;\n\n  /**\n   * The workstation ID (WSID) of the client, default os.hostname().\n   * Used for identifying a specific client in profiling, logging or\n   * tracing client activity in SQLServer.\n   *\n   * The value is reported by the TSQL function HOST_NAME().\n   */\n  workstationId?: string | undefined;\n}\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\ninterface RoutingData {\n  server: string;\n  port: number;\n}\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends EventEmitter {\n  /**\n   * @private\n   */\n  fedAuthRequired: boolean;\n  /**\n   * @private\n   */\n  config: InternalConnectionConfig;\n  /**\n   * @private\n   */\n  secureContextOptions: SecureContextOptions;\n  /**\n   * @private\n   */\n  inTransaction: boolean;\n  /**\n   * @private\n   */\n  transactionDescriptors: Buffer[];\n  /**\n   * @private\n   */\n  transactionDepth: number;\n  /**\n   * @private\n   */\n  isSqlBatch: boolean;\n  /**\n   * @private\n   */\n  curTransientRetryCount: number;\n  /**\n   * @private\n   */\n  transientErrorLookup: TransientErrorLookup;\n  /**\n   * @private\n   */\n  closed: boolean;\n  /**\n   * @private\n   */\n  loginError: undefined | AggregateError | ConnectionError;\n  /**\n   * @private\n   */\n  debug: Debug;\n  /**\n   * @private\n   */\n  ntlmpacket: undefined | any;\n  /**\n   * @private\n   */\n  ntlmpacketBuffer: undefined | Buffer;\n\n  /**\n   * @private\n   */\n  declare STATE: {\n    INITIALIZED: State;\n    CONNECTING: State;\n    SENT_PRELOGIN: State;\n    REROUTING: State;\n    TRANSIENT_FAILURE_RETRY: State;\n    SENT_TLSSSLNEGOTIATION: State;\n    SENT_LOGIN7_WITH_STANDARD_LOGIN: State;\n    SENT_LOGIN7_WITH_NTLM: State;\n    SENT_LOGIN7_WITH_FEDAUTH: State;\n    LOGGED_IN_SENDING_INITIAL_SQL: State;\n    LOGGED_IN: State;\n    SENT_CLIENT_REQUEST: State;\n    SENT_ATTENTION: State;\n    FINAL: State;\n  }\n\n  /**\n   * @private\n   */\n  routingData: undefined | RoutingData;\n\n  /**\n   * @private\n   */\n  messageIo!: MessageIO;\n  /**\n   * @private\n   */\n  state: State;\n  /**\n   * @private\n   */\n  resetConnectionOnNextRequest: undefined | boolean;\n\n  /**\n   * @private\n   */\n  request: undefined | Request | BulkLoad;\n  /**\n   * @private\n   */\n  procReturnStatusValue: undefined | any;\n  /**\n   * @private\n   */\n  socket: undefined | Socket;\n  /**\n   * @private\n   */\n  messageBuffer: Buffer;\n\n  /**\n   * @private\n   */\n  connectTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  cancelTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  requestTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  retryTimer: undefined | NodeJS.Timeout;\n\n  /**\n   * @private\n   */\n  _cancelAfterRequestSent: () => void;\n\n  /**\n   * @private\n   */\n  databaseCollation: Collation | undefined;\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config: ConnectionConfiguration) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n\n    let authentication: InternalConnectionConfig['authentication'];\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,  // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connector: undefined,\n        connectionIsolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connector !== undefined) {\n        if (typeof config.options.connector !== 'function') {\n          throw new TypeError('The \"config.options.connector\" property must be a function.');\n        }\n\n        this.config.options.connector = config.options.connector;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.isolationLevel, 'config.options.isolationLevel');\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: constants.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])];\n\n    // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new TransientErrorLookup();\n\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener?: (err?: Error) => void) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = (err?: Error) => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = (err: Error) => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * The server has reported that the charset has changed.\n   */\n  on(event: 'charsetChange', listener: (charset: string) => void): this\n\n  /**\n   * The attempt to connect and validate has completed.\n   */\n  on(\n    event: 'connect',\n    /**\n     * @param err If successfully connected, will be falsey. If there was a\n     *   problem (with either connecting or validation), will be an [[Error]] object.\n     */\n    listener: (err: Error | undefined) => void\n  ): this\n\n  /**\n   * The server has reported that the active database has changed.\n   * This may be as a result of a successful login, or a `use` statement.\n   */\n  on(event: 'databaseChange', listener: (databaseName: string) => void): this\n\n  /**\n   * A debug message is available. It may be logged or ignored.\n   */\n  on(event: 'debug', listener: (messageText: string) => void): this\n\n  /**\n   * Internal error occurs.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * The server has issued an error message.\n   */\n  on(event: 'errorMessage', listener: (message: import('./token/token').ErrorMessageToken) => void): this\n\n  /**\n   * The connection has ended.\n   *\n   * This may be as a result of the client calling [[close]], the server\n   * closing the connection, or a network error.\n   */\n  on(event: 'end', listener: () => void): this\n\n  /**\n   * The server has issued an information message.\n   */\n  on(event: 'infoMessage', listener: (message: import('./token/token').InfoMessageToken) => void): this\n\n  /**\n   * The server has reported that the language has changed.\n   */\n  on(event: 'languageChange', listener: (languageName: string) => void): this\n\n  /**\n   * The connection was reset.\n   */\n  on(event: 'resetConnection', listener: () => void): this\n\n  /**\n   * A secure connection has been established.\n   */\n  on(event: 'secure', listener: (cleartext: import('tls').TLSSocket) => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'charsetChange', charset: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'connect', error?: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'databaseChange', databaseName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'debug', messageText: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', error: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'errorMessage', message: import('./token/token').ErrorMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'end'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'infoMessage', message: import('./token/token').InfoMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'languageChange', languageName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'secure', cleartext: import('tls').TLSSocket): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rerouting'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resetConnection'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'retry'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rollbackTransaction'): boolean\n\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  /**\n   * @private\n   */\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n    } else {\n      return instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName!,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then((port) => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n        });\n      }, (err) => {\n        this.clearConnectTimer();\n        if (err.name === 'AbortError') {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n\n        process.nextTick(() => {\n          this.emit('connect', new ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  cleanupConnection(cleanupType: typeof CLEANUP_TYPE[keyof typeof CLEANUP_TYPE]) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n      if (request) {\n        const err = new RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  createDebug() {\n    const debug = new Debug(this.config.options.debug);\n    debug.on('debug', (message) => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  /**\n   * @private\n   */\n  createTokenStreamParser(message: Message, handler: TokenHandler) {\n    return new TokenStreamParser(message, this.debug, handler, this.config.options);\n  }\n\n  connectOnPort(port: number, multiSubnetFailover: boolean, signal: AbortSignal, customConnector?: () => Promise<Socket>) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n\n    const connect = customConnector || (multiSubnetFailover ? connectInParallel : connectInSequence);\n\n    connect(connectOpts, dns.lookup, signal).then((socket) => {\n      process.nextTick(() => {\n        socket.on('error', (error) => { this.socketError(error); });\n        socket.on('close', () => { this.socketClose(); });\n        socket.on('end', () => { this.socketEnd(); });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n\n        this.messageIo = new MessageIO(socket, this.config.options.packetSize, this.debug);\n        this.messageIo.on('secure', (cleartext) => { this.emit('secure', cleartext); });\n\n        this.socket = socket;\n\n        this.closed = false;\n        this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      });\n    }, (err) => {\n      this.clearConnectTimer();\n      if (err.name === 'AbortError') {\n        return;\n      }\n\n      process.nextTick(() => { this.socketError(err); });\n    });\n  }\n\n  /**\n   * @private\n   */\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  /**\n   * @private\n   */\n  createConnectTimer() {\n    const controller = new AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n\n  /**\n   * @private\n   */\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n    const request = this.request as Request;\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  /**\n   * @private\n   */\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  /**\n   * @private\n   */\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new ConnectionError(message, 'ETIMEOUT'));\n  }\n\n  /**\n   * @private\n   */\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request!;\n    request.cancel();\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new RequestError(message, 'ETIMEOUT');\n  }\n\n  /**\n   * @private\n   */\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  transitionTo(newState: State) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  getEventHandler<T extends keyof State['events']>(eventName: T): NonNullable<State['events'][T]> {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler!;\n  }\n\n  /**\n   * @private\n   */\n  dispatchEvent<T extends keyof State['events']>(eventName: T, ...args: Parameters<NonNullable<State['events'][T]>>) {\n    const handler = this.state.events[eventName] as ((this: Connection, ...args: any[]) => void) | undefined;\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketError(error: Error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n\n  /**\n   * @private\n   */\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error: ErrorWithCode = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData!.server + ':' + this.routingData!.port);\n\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  /**\n   * @private\n   */\n  sendPreLogin() {\n    const [ , major, minor, build ] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(version) ?? [ '0.0.0', '0', '0', '0' ];\n\n    const payload = new PreloginPayload({\n      encrypt: this.config.options.encrypt,\n      version: { major: Number(major), minor: Number(minor), build: Number(build), subbuild: 0 }\n    });\n\n    this.messageIo.sendMessage(TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendLogin7Packet() {\n    const payload = new Login7Payload({\n      tdsVersion: versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n\n    const { authentication } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = createNTLMRequest({ domain: authentication.options.domain });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || os.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = libraryName;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n\n    this.routingData = undefined;\n    this.messageIo.sendMessage(TYPE.LOGIN7, payload.toBuffer());\n\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendFedAuthTokenMessage(token: string) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(TYPE.FEDAUTH_TOKEN, data);\n    // sent the fedAuth token message, the rest is similar to standard login 7\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n\n  /**\n   * @private\n   */\n  sendInitialSql() {\n    const payload = new SqlBatchPayload(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n\n    const message = new Message({ type: TYPE.SQL_BATCH });\n    this.messageIo.outgoingMessageStream.write(message);\n    Readable.from(payload).pipe(message);\n  }\n\n  /**\n   * @private\n   */\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  /**\n   * @private\n   */\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSqlBatch(request: Request) {\n    this.makeRequest(request, TYPE.SQL_BATCH, new SqlBatchPayload(request.sqlTextOrProcedure!, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSql(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n  newBulkLoad(table: string, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, options: BulkLoadOptions, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, callbackOrOptions: BulkLoadOptions | BulkLoadCallback, callback?: BulkLoadCallback) {\n    let options: BulkLoadOptions;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions as BulkLoadCallback;\n      options = {};\n    } else {\n      options = callbackOrOptions as BulkLoadOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new BulkLoad(table, this.databaseCollation, this.config.options, options, callback);\n  }\n\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n  execBulkLoad(bulkLoad: BulkLoad, rows: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>): void\n\n  execBulkLoad(bulkLoad: BulkLoad, rows?: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = Readable.from(rows);\n\n      // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n      rowStream.on('error', (err) => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      });\n\n      // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n      bulkLoad.rowToPacketTransform.on('error', (err) => {\n        rowStream.destroy(err);\n      });\n\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new BulkLoadPayload(bulkLoad);\n\n    const request = new Request(bulkLoad.getBulkInsertSql(), (error: (Error & { code?: string }) | null | undefined) => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, TYPE.BULK_LOAD, payload);\n    });\n\n    bulkLoad.once('cancel', onCancel);\n\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n  prepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    request.preparing = true;\n    // TODO: We need to clean up this event handler, otherwise this leaks memory\n    request.on('returnValue', (name: string, value: any) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n  unprepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n  execute(request: Request, parameters?: { [key: string]: unknown }) {\n    const executeParameters: Parameter[] = [];\n\n    executeParameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  callProcedure(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(request.sqlTextOrProcedure!, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  beginTransaction(callback: BeginTransactionCallback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    assertValidIsolationLevel(isolationLevel, 'isolationLevel');\n\n    const transaction = new Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SET TRANSACTION ISOLATION LEVEL ' + (transaction.isolationLevelToTSQL()) + ';BEGIN TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n\n    const request = new Request(undefined, (err) => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n  commitTransaction(callback: CommitTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('COMMIT TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  rollbackTransaction(callback: RollbackTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('ROLLBACK TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  saveTransaction(callback: SaveTransactionCallback, name: string) {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SAVE TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  transaction(cb: (err: Error | null | undefined, txDone?: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void) => void, isolationLevel?: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + (crypto.randomBytes(10).toString('hex'));\n    const txDone: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction((txErr) => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction((txErr) => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new Request('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), (err) => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  /**\n   * @private\n   */\n  makeRequest(request: Request | BulkLoad, packetType: number, payload: (Iterable<Buffer> | AsyncIterable<Buffer>) & { toString: (indent?: string) => string }) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection! = this;\n      request.rowCount! = 0;\n      request.rows! = [];\n      request.rst! = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new RequestError('Canceled.', 'ECANCEL'));\n\n        // set the ignore bit and end the message.\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof Request && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n\n      this.createRequestTimer();\n\n      const message = new Message({ type: packetType, resetConnection: this.resetConnectionOnNextRequest });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function() {\n          return payload!.toString('  ');\n        });\n      });\n\n      const payloadStream = Readable.from(payload);\n      payloadStream.once('error', (error) => {\n        payloadStream.unpipe(message);\n\n        // Only set a request error if no error was set yet.\n        request.error ??= error;\n\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n\n  /**\n   * Cancel currently executed request.\n   */\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n  reset(callback: ResetCallback) {\n    const request = new Request(this.getInitialSql(), (err) => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * @private\n   */\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  /**\n   * @private\n   */\n  getIsolationLevelText(isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    switch (isolationLevel) {\n      case ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\n\nfunction isTransientError(error: AggregateError | ConnectionError): boolean {\n  if (error instanceof AggregateError) {\n    error = error.errors[0];\n  }\n  return (error instanceof ConnectionError) && !!error.isTransient;\n}\n\nexport default Connection;\nmodule.exports = Connection;\n\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function() {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n\n        const preloginPayload = new PreloginPayload(messageBuffer);\n        this.debug.payload(function() {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          try {\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, this.routingData?.server ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n        }\n\n        this.sendLogin7Packet();\n\n        const { authentication } = this.config;\n\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function() {\n      (async () => {\n        while (true) {\n          let message;\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n\n          const handler = new Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n          await once(tokenStreamParser, 'end');\n\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication as NtlmAuthentication;\n\n            const payload = new NTLMResponsePayload({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n\n            this.messageIo.sendMessage(TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function() {\n              return payload.toString('  ');\n            });\n\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await once(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n\n          return;\n        }\n\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication as AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n          const tokenScope = new URL('/.default', fedAuthInfoToken.spn).toString();\n\n          let credentials;\n\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new UsernamePasswordCredential(\n                authentication.options.tenantId ?? 'common',\n                authentication.options.clientId,\n                authentication.options.userName,\n                authentication.options.password\n              );\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? { managedIdentityClientId: authentication.options.clientId } : {};\n              credentials = new DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new ClientSecretCredential(\n                authentication.options.tenantId,\n                authentication.options.clientId,\n                authentication.options.clientSecret\n              );\n              break;\n          }\n\n          let tokenResponse;\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new AggregateError(\n              [new ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n\n\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function() {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        const tokenStreamParser = this.createTokenStreamParser(message, new InitialSqlTokenHandler(this));\n        await once(tokenStreamParser, 'end');\n\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        // request timer is stopped on first data package\n        this.clearRequestTimer();\n\n        const tokenStreamParser = this.createTokenStreamParser(message, new RequestTokenHandler(this, this.request!));\n\n        // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n        if (this.request?.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          tokenStreamParser.pause();\n\n          this.request?.once('resume', onResume);\n        };\n\n        this.request?.on('pause', onPause);\n\n        if (this.request instanceof Request && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof Request && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n\n        const onEndOfMessage = () => {\n          this.request?.removeListener('cancel', this._cancelAfterRequestSent);\n          this.request?.removeListener('cancel', onCancel);\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request as Request;\n          this.request = undefined;\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        this.request?.once('cancel', onCancel);\n      })();\n\n    },\n    exit: function(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new AttentionTokenHandler(this, this.request!);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n\n          const sqlRequest = this.request!;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function() {\n        // Do nothing, as the timer should be cleaned up.\n      },\n      message: function() {\n        // Do nothing\n      },\n      socketError: function() {\n        // Do nothing\n      }\n    }\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,GAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAAE,IAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,UAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAGA,IAAAI,OAAA,GAAAJ,OAAA;AAEA,IAAAK,SAAA,GAAAL,OAAA;AAOA,IAAAM,SAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,MAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,OAAA,GAAAR,OAAA;AACA,IAAAS,eAAA,GAAAT,OAAA;AACA,IAAAU,qBAAA,GAAAV,OAAA;AACA,IAAAW,OAAA,GAAAX,OAAA;AACA,IAAAY,gBAAA,GAAAb,sBAAA,CAAAC,OAAA;AACA,IAAAa,cAAA,GAAAd,sBAAA,CAAAC,OAAA;AACA,IAAAc,YAAA,GAAAf,sBAAA,CAAAC,OAAA;AACA,IAAAe,QAAA,GAAAhB,sBAAA,CAAAC,OAAA;AACA,IAAAgB,kBAAA,GAAAjB,sBAAA,CAAAC,OAAA;AACA,IAAAiB,gBAAA,GAAAlB,sBAAA,CAAAC,OAAA;AACA,IAAAkB,UAAA,GAAAnB,sBAAA,CAAAC,OAAA;AACA,IAAAmB,kBAAA,GAAAnB,OAAA;AACA,IAAAoB,YAAA,GAAApB,OAAA;AACA,IAAAqB,OAAA,GAAArB,OAAA;AACA,IAAAsB,UAAA,GAAAtB,OAAA;AACA,IAAAuB,QAAA,GAAAvB,OAAA;AACA,IAAAwB,YAAA,GAAAxB,OAAA;AACA,IAAAyB,QAAA,GAAA1B,sBAAA,CAAAC,OAAA;AAEA,IAAA0B,KAAA,GAAA1B,OAAA;AAGA,IAAA2B,oBAAA,GAAA3B,OAAA;AACA,IAAA4B,SAAA,GAAA5B,OAAA;AACA,IAAA6B,gBAAA,GAAA7B,OAAA;AAGA,IAAA8B,iBAAA,GAAA/B,sBAAA,CAAAC,OAAA;AACA,IAAA+B,QAAA,GAAA/B,OAAA;AACA,IAAAgC,IAAA,GAAAhC,OAAA;AACA,IAAAiC,QAAA,GAAAjC,OAAA;;;;;;;AAoGA;AACA;AACA;AACA,IAAMkC,wBAAwB,GAAG,KAAK,IAAtC;AACA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,KAAK,IAArC;AACA;AACA;AACA;;AACA,IAAMC,8BAA8B,GAAG,KAAK,IAA5C;AACA;AACA;AACA;;AACA,IAAMC,sBAAsB,GAAG,IAAI,IAAnC;AACA;AACA;AACA;;AACA,IAAMC,8BAA8B,GAAG,GAAvC;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAG,IAAI,IAAhC;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,UAAzB;AACA;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG,IAArB;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAG,KAA5B;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,YAAzB;AACA;AACA;AACA;;AACA,IAAMC,kBAAkB,GAAG,KAA3B;;AAgpBA;AACA;AACA;AACA,IAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CADW;EAEnBC,QAAQ,EAAE,CAFS;EAGnBC,KAAK,EAAE;AAHY,CAArB;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,IAoBMC,UAAN,0BAAAC,oBAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,oBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EACE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAuBE;AACF;AACA;;EAGE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAGE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;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"},"metadata":{},"sourceType":"script"}