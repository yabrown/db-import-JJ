{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Name of the TLS Policy\n */\nexport var tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings) {\n  return {\n    name: tlsPolicyName,\n    sendRequest: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, next) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Users may define a request tlsSettings, honor those over the client level one\n              if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n              }\n              return _context.abrupt(\"return\", next(req));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function sendRequest(_x, _x2) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  };\n}","map":{"version":3,"names":["tlsPolicyName","tlsPolicy","tlsSettings","name","sendRequest","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","next","wrap","_callee$","_context","prev","abrupt","stop","_x","_x2","apply","arguments"],"sources":["../../../src/policies/tlsPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelinePolicy } from \"../pipeline\";\nimport { TlsSettings } from \"../interfaces\";\n\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings?: TlsSettings): PipelinePolicy {\n  return {\n    name: tlsPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define a request tlsSettings, honor those over the client level one\n      if (!req.tlsSettings) {\n        req.tlsSettings = tlsSettings;\n      }\n      return next(req);\n    },\n  };\n}\n"],"mappings":";;AAAA;AACA;AAKA;;;AAGA,OAAO,IAAMA,aAAa,GAAG,WAAW;AAExC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,WAAyB;EACjD,OAAO;IACLC,IAAI,EAAEH,aAAa;IACnBI,WAAW;MAAA,IAAAC,YAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QAAOC,GAAG,EAAEC,IAAI;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAH,IAAA;YAAA;cAC3B;cACA,IAAI,CAACD,GAAG,CAACR,WAAW,EAAE;gBACpBQ,GAAG,CAACR,WAAW,GAAGA,WAAW;;cAC9B,OAAAY,QAAA,CAAAE,MAAA,WACML,IAAI,CAACD,GAAG,CAAC;YAAA;YAAA;cAAA,OAAAI,QAAA,CAAAG,IAAA;UAAA;QAAA,GAAAR,OAAA;MAAA,CACjB;MAAA,SAAAL,YAAAc,EAAA,EAAAC,GAAA;QAAA,OAAAd,YAAA,CAAAe,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAjB,WAAA;IAAA;GACF;AACH"},"metadata":{},"sourceType":"module"}