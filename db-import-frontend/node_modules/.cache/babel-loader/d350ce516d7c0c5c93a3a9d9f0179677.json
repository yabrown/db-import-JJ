{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _errors = require(\"./errors\");\nvar _types = require(\"./always-encrypted/types\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nvar Request = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Request, _events$EventEmitter);\n  var _super = _createSuper(Request);\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n  function Request(sqlTextOrProcedure, callback, options) {\n    var _this;\n    _classCallCheck(this, Request);\n    _this = _super.call(this);\n    _this.sqlTextOrProcedure = void 0;\n    _this.parameters = void 0;\n    _this.parametersByName = void 0;\n    _this.preparing = void 0;\n    _this.canceled = void 0;\n    _this.paused = void 0;\n    _this.userCallback = void 0;\n    _this.handle = void 0;\n    _this.error = void 0;\n    _this.connection = void 0;\n    _this.timeout = void 0;\n    _this.rows = void 0;\n    _this.rst = void 0;\n    _this.rowCount = void 0;\n    _this.callback = void 0;\n    _this.shouldHonorAE = void 0;\n    _this.statementColumnEncryptionSetting = void 0;\n    _this.cryptoMetadataLoaded = void 0;\n    _this.sqlTextOrProcedure = sqlTextOrProcedure;\n    _this.parameters = [];\n    _this.parametersByName = {};\n    _this.preparing = false;\n    _this.handle = undefined;\n    _this.canceled = false;\n    _this.paused = false;\n    _this.error = undefined;\n    _this.connection = undefined;\n    _this.timeout = undefined;\n    _this.userCallback = callback;\n    _this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    _this.cryptoMetadataLoaded = false;\n    _this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n    return _this;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n  _createClass(Request, [{\n    key: \"on\",\n    value:\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * @private\n     */\n\n    /**\n     * This event, describing result set columns, will be emitted before row\n     * events are emitted. This event may be emited multiple times when more\n     * than one recordset is produced by the statement.\n     *\n     * An array like object, where the columns can be accessed either by index\n     * or name. Columns with a name that is an integer are not accessible by name,\n     * as it would be interpreted as an array index.\n     */\n\n    /**\n     * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n     */\n\n    /**\n     * The request encountered an error and has not been prepared.\n     */\n\n    /**\n     * A row resulting from execution of the SQL statement.\n     */\n\n    /**\n     * All rows from a result set have been provided (through `row` events).\n     *\n     * This token is used to indicate the completion of a SQL statement.\n     * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n     * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n     * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n     *\n     * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n     * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n     */\n\n    /**\n     * `request.on('doneInProc', function (rowCount, more, rows) { });`\n     *\n     * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n     * in a stored procedure have been provided (through `row` events).\n     *\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\n     */\n\n    /**\n     * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n     * executed through SQL statements.\\\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\n     */\n\n    /**\n     * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n     * See also `Using Parameters`.\n     */\n\n    /**\n     * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n     */\n    function on(event, listener) {\n      return _get(_getPrototypeOf(Request.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return (_get2 = _get(_getPrototypeOf(Request.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n  }, {\n    key: \"addParameter\",\n    value: function addParameter(name, type, value, options) {\n      var _ref = options !== null && options !== void 0 ? options : {},\n        _ref$output = _ref.output,\n        output = _ref$output === void 0 ? false : _ref$output,\n        length = _ref.length,\n        precision = _ref.precision,\n        scale = _ref.scale;\n      var parameter = {\n        type: type,\n        name: name,\n        value: value,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale\n      };\n      this.parameters.push(parameter);\n      this.parametersByName[name] = parameter;\n    }\n    /**\n     * @param name\n     *   The parameter name. This should correspond to a parameter in the SQL,\n     *   or a parameter that a called procedure expects.\n     *\n     * @param type\n     *   One of the supported data types.\n     *\n     * @param value\n     *   The value that the parameter is to be given. The Javascript type of the\n     *   argument should match that documented for data types\n     *\n     * @param options\n     *   Additional type options. Optional.\n     */\n  }, {\n    key: \"addOutputParameter\",\n    value: function addOutputParameter(name, type, value, options) {\n      this.addParameter(name, type, value, _objectSpread(_objectSpread({}, options), {}, {\n        output: true\n      }));\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"makeParamsParameter\",\n    value: function makeParamsParameter(parameters) {\n      var paramsParameter = '';\n      for (var i = 0, len = parameters.length; i < len; i++) {\n        var parameter = parameters[i];\n        if (paramsParameter.length > 0) {\n          paramsParameter += ', ';\n        }\n        paramsParameter += '@' + parameter.name + ' ';\n        paramsParameter += parameter.type.declaration(parameter);\n        if (parameter.output) {\n          paramsParameter += ' OUTPUT';\n        }\n      }\n      return paramsParameter;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters(collation) {\n      for (var i = 0, len = this.parameters.length; i < len; i++) {\n        var parameter = this.parameters[i];\n        try {\n          parameter.value = parameter.type.validate(parameter.value, collation);\n        } catch (error) {\n          throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n        }\n      }\n    }\n    /**\n     * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n     * If this request is already in a paused state, calling [[pause]] has no effect.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n      this.emit('pause');\n      this.paused = true;\n    }\n    /**\n     * Resumes the flow of data from the database.\n     * If this request is not in a paused state, calling [[resume]] has no effect.\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n      this.paused = false;\n      this.emit('resume');\n    }\n    /**\n     * Cancels a request while waiting for a server response.\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n      this.canceled = true;\n      this.emit('cancel');\n    }\n    /**\n     * Sets a timeout for this request.\n     *\n     * @param timeout\n     *   The number of milliseconds before the request is considered failed,\n     *   or `0` for no timeout. When no timeout is set for the request,\n     *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n  return Request;\n}(_events.EventEmitter);\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"names":["_events","require","_errors","_types","Request","_events$EventEmitter","_inherits","_super","_createSuper","sqlTextOrProcedure","callback","options","_this","_classCallCheck","call","parameters","parametersByName","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","shouldHonorAE","statementColumnEncryptionSetting","cryptoMetadataLoaded","undefined","SQLServerStatementColumnEncryptionSetting","UseConnectionSetting","err","emit","_createClass","key","value","on","event","listener","_get","_getPrototypeOf","prototype","_get2","_len","arguments","length","args","Array","_key","apply","concat","addParameter","name","type","_ref","_ref$output","output","precision","scale","parameter","push","addOutputParameter","_objectSpread","makeParamsParameter","paramsParameter","i","len","declaration","validateParameters","collation","validate","RequestError","message","pause","resume","cancel","setTimeout","EventEmitter","module","exports"],"sources":["../src/request.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { Parameter, DataType } from './data-type';\nimport { RequestError } from './errors';\n\nimport Connection from './connection';\nimport { Metadata } from './metadata-parser';\nimport { SQLServerStatementColumnEncryptionSetting } from './always-encrypted/types';\nimport { ColumnMetadata } from './token/colmetadata-token-parser';\nimport { Collation } from './collation';\n\n/**\n * The callback is called when the request has completed, either successfully or with an error.\n * If an error occurs during execution of the statement(s), then `err` will describe the error.\n *\n * As only one request at a time may be executed on a connection, another request should not\n * be initiated until this callback is called.\n *\n * This callback is called before `requestCompleted` is emitted.\n */\ntype CompletionCallback =\n  /**\n   * @param error\n   *   If an error occured, an error object.\n   *\n   * @param rowCount\n   *   The number of rows emitted as result of executing the SQL statement.\n   *\n   * @param rows\n   *   Rows as a result of executing the SQL statement.\n   *   Will only be available if [[ConnectionOptions.rowCollectionOnRequestCompletion]] is `true`.\n   */\n  // TODO: Figure out how to type the `rows` parameter here.\n  (error: Error | null | undefined, rowCount?: number, rows?: any) => void;\n\nexport interface ParameterOptions {\n  output?: boolean;\n  length?: number;\n  precision?: number;\n  scale?: number;\n}\n\ninterface RequestOptions {\n  statementColumnEncryptionSetting?: SQLServerStatementColumnEncryptionSetting;\n}\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends EventEmitter {\n  /**\n   * @private\n   */\n  sqlTextOrProcedure: string | undefined;\n  /**\n   * @private\n   */\n  parameters: Parameter[];\n  /**\n   * @private\n   */\n  parametersByName: { [key: string]: Parameter };\n  /**\n   * @private\n   */\n  preparing: boolean;\n  /**\n   * @private\n   */\n  canceled: boolean;\n  /**\n   * @private\n   */\n  paused: boolean;\n  /**\n   * @private\n   */\n  userCallback: CompletionCallback;\n  /**\n   * @private\n   */\n  handle: number | undefined;\n  /**\n   * @private\n   */\n  error: Error | undefined;\n  /**\n   * @private\n   */\n  connection: Connection | undefined;\n  /**\n   * @private\n   */\n  timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  rows?: Array<any>;\n  /**\n   * @private\n   */\n  rst?: Array<any>;\n  /**\n   * @private\n   */\n  rowCount?: number;\n\n  /**\n   * @private\n   */\n  callback: CompletionCallback;\n\n\n  shouldHonorAE?: boolean;\n  statementColumnEncryptionSetting: SQLServerStatementColumnEncryptionSetting;\n  cryptoMetadataLoaded: boolean;\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n  on(\n    event: 'columnMetadata',\n    listener:\n    (columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }) => void\n  ): this\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n  on(event: 'prepared', listener: () => void): this\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n  on(\n    event: 'row',\n    listener:\n      /**\n       * An array or object (depends on [[ConnectionOptions.useColumnNames]]), where the columns can be accessed by index/name.\n       * Each column has two properties, `metadata` and `value`：\n       *\n       * * `metadata`\n       *\n       *    The same data that is exposed in the `columnMetadata` event.\n       *\n       * * `value`\n       *\n       *    The column's value. It will be `null` for a `NULL`.\n       *    If there are multiple columns with the same name, then this will be an array of the values.\n       */\n      (columns: any) => void\n  ): this\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n  on(\n    event: 'done',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneInProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]) => void\n  ): this\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n  on(\n    event: 'returnValue',\n    listener:\n      /**\n       * @param parameterName\n       *   The parameter name. (Does not start with '@'.)\n       *\n       * @param value\n       *   The parameter's output value.\n       *\n       * @param metadata\n       *   The same data that is exposed in the `columnMetaData` event.\n       */\n      (parameterName: string, value: unknown, metadata: Metadata) => void\n  ): this\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(\n    event: 'order',\n    listener:\n      /**\n       * @param orderColumns\n       *   An array of column numbers in the result set by which data is ordered.\n       */\n      (orderColumns: number[]) => void\n  ): this\n\n  on(event: 'requestCompleted', listener: () => void): this\n\n  on(event: 'cancel', listener: () => void): this\n\n  on(event: 'pause', listener: () => void): this\n\n  on(event: 'resume', listener: () => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'columnMetadata', columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }): boolean\n  /**\n   * @private\n   */\n  emit(event: 'prepared'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', err: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'row', columns: any): boolean\n  /**\n   * @private\n   */\n  emit(event: 'done', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneInProc', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneProc', rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'returnValue', parameterName: string, value: unknown, metadata: Metadata): boolean\n  /**\n   * @private\n   */\n  emit(event: 'requestCompleted'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'cancel'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'pause'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resume'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'order', orderColumns: number[]): boolean\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n  constructor(sqlTextOrProcedure: string | undefined, callback: CompletionCallback, options?: RequestOptions) {\n    super();\n\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = (options && options.statementColumnEncryptionSetting) || SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n    this.callback = function(err: Error | undefined | null, rowCount?: number, rows?: any) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n  addParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    const { output = false, length, precision, scale } = options ?? {};\n\n    const parameter: Parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  addOutputParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    this.addParameter(name, type, value, { ...options, output: true });\n  }\n\n  /**\n   * @private\n   */\n  makeParamsParameter(parameters: Parameter[]) {\n    let paramsParameter = '';\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n    return paramsParameter;\n  }\n\n  /**\n   * @private\n   */\n  validateParameters(collation: Collation | undefined) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error: any) {\n        throw new RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    this.emit('pause');\n    this.paused = true;\n  }\n\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.emit('resume');\n  }\n\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n}\n\nexport default Request;\nmodule.exports = Request;\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAIA,IAAAE,MAAA,GAAAF,OAAA;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IASMG,OAAN,0BAAAC,oBAAA;EAAAC,SAAA,CAAAF,OAAA,EAAAC,oBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAoSE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE,SAAAA,QAAYK,kBAAD,EAAyCC,QAAzC,EAAuEC,OAAvE,EAAiG;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,OAAA;IAC1GQ,KAAA,GAAAL,MAAA,CAAAO,IAAA;IAD0GF,KAAA,CAvS5GH,kBAuS4G;IAAAG,KAAA,CAnS5GG,UAmS4G;IAAAH,KAAA,CA/R5GI,gBA+R4G;IAAAJ,KAAA,CA3R5GK,SA2R4G;IAAAL,KAAA,CAvR5GM,QAuR4G;IAAAN,KAAA,CAnR5GO,MAmR4G;IAAAP,KAAA,CA/Q5GQ,YA+Q4G;IAAAR,KAAA,CA3Q5GS,MA2Q4G;IAAAT,KAAA,CAvQ5GU,KAuQ4G;IAAAV,KAAA,CAnQ5GW,UAmQ4G;IAAAX,KAAA,CA/P5GY,OA+P4G;IAAAZ,KAAA,CA1P5Ga,IA0P4G;IAAAb,KAAA,CAtP5Gc,GAsP4G;IAAAd,KAAA,CAlP5Ge,QAkP4G;IAAAf,KAAA,CA7O5GF,QA6O4G;IAAAE,KAAA,CA1O5GgB,aA0O4G;IAAAhB,KAAA,CAzO5GiB,gCAyO4G;IAAAjB,KAAA,CAxO5GkB,oBAwO4G;IAG1GlB,KAAA,CAAKH,kBAAL,GAA0BA,kBAA1B;IACAG,KAAA,CAAKG,UAAL,GAAkB,EAAlB;IACAH,KAAA,CAAKI,gBAAL,GAAwB,EAAxB;IACAJ,KAAA,CAAKK,SAAL,GAAiB,KAAjB;IACAL,KAAA,CAAKS,MAAL,GAAcU,SAAd;IACAnB,KAAA,CAAKM,QAAL,GAAgB,KAAhB;IACAN,KAAA,CAAKO,MAAL,GAAc,KAAd;IACAP,KAAA,CAAKU,KAAL,GAAaS,SAAb;IACAnB,KAAA,CAAKW,UAAL,GAAkBQ,SAAlB;IACAnB,KAAA,CAAKY,OAAL,GAAeO,SAAf;IACAnB,KAAA,CAAKQ,YAAL,GAAoBV,QAApB;IACAE,KAAA,CAAKiB,gCAAL,GAAyClB,OAAO,IAAIA,OAAO,CAACkB,gCAApB,IAAyD1B,MAAA,CAAA6B,yCAAA,CAA0CC,oBAA3I;IACArB,KAAA,CAAKkB,oBAAL,GAA4B,KAA5B;IACAlB,KAAA,CAAKF,QAAL,GAAgB,UAASwB,GAAT,EAAwCP,QAAxC,EAA2DF,IAA3D,EAAuE;MACrF,IAAI,KAAKR,SAAT,EAAoB;QAClB,KAAKA,SAAL,GAAiB,KAAjB;QACA,IAAIiB,GAAJ,EAAS;UACP,KAAKC,IAAL,CAAU,OAAV,EAAmBD,GAAnB;QACD,CAFD,MAEO;UACL,KAAKC,IAAL,CAAU,UAAV;QACD;MACF,CAPD,MAOO;QACL,KAAKf,YAAL,CAAkBc,GAAlB,EAAuBP,QAAvB,EAAiCF,IAAjC;QACA,KAAKU,IAAL,CAAU,kBAAV;MACD;IACF,CAZD;IAAA,OAAAvB,KAAA;EAaD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EAAAwB,YAAA,CAAAhC,OAAA;IAAAiC,GAAA;IAAAC,KAAA;IAxVA;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAGE;AACF;AACA;;IAEE;AACF;AACA;;IAEE;AACF;AACA;;IAGE;AACF;AACA;;IAQE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAOE;AACF;AACA;;IAGE;AACF;AACA;;IAGE;AACF;AACA;;IAoBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAkBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;IAkBE;AACF;AACA;AACA;AACA;;IAkBE;AACF;AACA;AACA;;IAiBE;AACF;AACA;IAmBE,SAAAC,GAAGC,KAAD,EAAyBC,QAAzB,EAA6D;MAC7D,OAAAC,IAAA,CAAAC,eAAA,CAAAvC,OAAA,CAAAwC,SAAA,eAAA9B,IAAA,OAAgB0B,KAAT,EAAgBC,QAAhB;IACR;IAED;AACF;AACA;EAFE;IAAAJ,GAAA;IAAAC,KAAA,EAoDA,SAAAH,KAAKK,KAAD,EAAyC;MAAA,IAAAK,KAAA;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAbC,IAA5B,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAA4BF,IAA5B,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MACF,QAAAN,KAAA,GAAAH,IAAA,CAAAC,eAAA,CAAAvC,OAAA,CAAAwC,SAAA,kBAAA9B,IAAA,CAAAsC,KAAA,CAAAP,KAAA,SAAkBL,KAAX,EAAAa,MAAA,CAAqBJ,IAArB;IACR;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAwDD,SAAAgB,aAAaC,IAAD,EAAeC,IAAf,EAA+BlB,KAA/B,EAAgD3B,OAAhD,EAA6F;MACvG,IAAA8C,IAAA,GAAqD9C,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAhE;QAAA+C,WAAA,GAAAD,IAAA,CAAQE,MAAM;QAANA,MAAM,GAAAD,WAAA,cAAG,KAAX,GAAAA,WAAA;QAAkBV,MAAlB,GAAAS,IAAA,CAAkBT,MAAlB;QAA0BY,SAA1B,GAAAH,IAAA,CAA0BG,SAA1B;QAAqCC,KAAA,GAAAJ,IAAA,CAAAI,KAAA;MAE3C,IAAMC,SAAoB,GAAG;QAC3BN,IAAI,EAAEA,IADqB;QAE3BD,IAAI,EAAEA,IAFqB;QAG3BjB,KAAK,EAAEA,KAHoB;QAI3BqB,MAAM,EAAEA,MAJmB;QAK3BX,MAAM,EAAEA,MALmB;QAM3BY,SAAS,EAAEA,SANgB;QAO3BC,KAAK,EAAEA;MAPoB,CAA7B;MAUA,KAAK9C,UAAL,CAAgBgD,IAAhB,CAAqBD,SAArB;MACA,KAAK9C,gBAAL,CAAsBuC,IAAtB,IAA8BO,SAA9B;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdE;IAAAzB,GAAA;IAAAC,KAAA,EAeA,SAAA0B,mBAAmBT,IAAD,EAAeC,IAAf,EAA+BlB,KAA/B,EAAgD3B,OAAhD,EAA6F;MAC7G,KAAK2C,YAAL,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BlB,KAA9B,EAAA2B,aAAA,CAAAA,aAAA,KAA0CtD,OAAL;QAAcgD,MAAM,EAAE;MAAA,EAA3D;IACD;IAED;AACF;AACA;EAFE;IAAAtB,GAAA;IAAAC,KAAA,EAGA,SAAA4B,oBAAoBnD,UAAD,EAA0B;MAC3C,IAAIoD,eAAe,GAAG,EAAtB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGtD,UAAU,CAACiC,MAAjC,EAAyCoB,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,EAAnD,EAAuD;QACrD,IAAMN,SAAS,GAAG/C,UAAU,CAACqD,CAAD,CAA5B;QACA,IAAID,eAAe,CAACnB,MAAhB,GAAyB,CAA7B,EAAgC;UAC9BmB,eAAe,IAAI,IAAnB;QACD;QACDA,eAAe,IAAI,MAAML,SAAS,CAACP,IAAhB,GAAuB,GAA1C;QACAY,eAAe,IAAIL,SAAS,CAACN,IAAV,CAAec,WAAf,CAA2BR,SAA3B,CAAnB;QACA,IAAIA,SAAS,CAACH,MAAd,EAAsB;UACpBQ,eAAe,IAAI,SAAnB;QACD;MACF;MACD,OAAOA,eAAP;IACD;IAED;AACF;AACA;EAFE;IAAA9B,GAAA;IAAAC,KAAA,EAGA,SAAAiC,mBAAmBC,SAAD,EAAmC;MACnD,KAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKtD,UAAL,CAAgBiC,MAAtC,EAA8CoB,CAAC,GAAGC,GAAlD,EAAuDD,CAAC,EAAxD,EAA4D;QAC1D,IAAMN,SAAS,GAAG,KAAK/C,UAAL,CAAgBqD,CAAhB,CAAlB;QAEA,IAAI;UACFN,SAAS,CAACxB,KAAV,GAAkBwB,SAAS,CAACN,IAAV,CAAeiB,QAAf,CAAwBX,SAAS,CAACxB,KAAlC,EAAyCkC,SAAzC,CAAlB;QACD,CAFD,CAEE,OAAOlD,KAAP,EAAmB;UACnB,MAAM,IAAIpB,OAAA,CAAAwE,YAAJ,CAAiB,uCAAuCZ,SAAS,CAACP,IAAjD,GAAwD,MAAxD,GAAiEjC,KAAK,CAACqD,OAAxF,EAAiG,QAAjG,CAAN;QACD;MACF;IACF;IAED;AACF;AACA;AACA;EAHE;IAAAtC,GAAA;IAAAC,KAAA,EAIA,SAAAsC,MAAA,EAAQ;MACN,IAAI,KAAKzD,MAAT,EAAiB;QACf;MACD;MACD,KAAKgB,IAAL,CAAU,OAAV;MACA,KAAKhB,MAAL,GAAc,IAAd;IACD;IAED;AACF;AACA;AACA;EAHE;IAAAkB,GAAA;IAAAC,KAAA,EAIA,SAAAuC,OAAA,EAAS;MACP,IAAI,CAAC,KAAK1D,MAAV,EAAkB;QAChB;MACD;MACD,KAAKA,MAAL,GAAc,KAAd;MACA,KAAKgB,IAAL,CAAU,QAAV;IACD;IAED;AACF;AACA;EAFE;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAwC,OAAA,EAAS;MACP,IAAI,KAAK5D,QAAT,EAAmB;QACjB;MACD;MAED,KAAKA,QAAL,GAAgB,IAAhB;MACA,KAAKiB,IAAL,CAAU,QAAV;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAE,GAAA;IAAAC,KAAA,EAQA,SAAAyC,WAAWvD,OAAD,EAAmB;MAC3B,KAAKA,OAAL,GAAeA,OAAf;IACD;EAAA;EAAA,OAAApB,OAAA;AAAA,EA9cmBJ,OAAA,CAAAgF,YAAtB;eAide5E,O;;AACf6E,MAAM,CAACC,OAAP,GAAiB9E,OAAjB"},"metadata":{},"sourceType":"script"}