{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);\nvar inspect = require('object-inspect');\nvar hasSymbols = require('has-symbols')();\nvar getIteratorMethod = require('../helpers/getIteratorMethod');\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\nvar Call = require('./Call');\nvar GetMethod = require('./GetMethod');\nvar IsArray = require('./IsArray');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/11.0/#sec-getiterator\n\nmodule.exports = function GetIterator(obj, hint, method) {\n  var actualHint = hint;\n  if (arguments.length < 2) {\n    actualHint = 'sync';\n  }\n  if (actualHint !== 'sync' && actualHint !== 'async') {\n    throw new $TypeError(\"Assertion failed: `hint` must be one of 'sync' or 'async', got \" + inspect(hint));\n  }\n  var actualMethod = method;\n  if (arguments.length < 3) {\n    if (actualHint === 'async') {\n      if (hasSymbols && $asyncIterator) {\n        actualMethod = GetMethod(obj, $asyncIterator);\n      }\n      if (actualMethod === undefined) {\n        throw new $SyntaxError(\"async from sync iterators aren't currently supported\");\n      }\n    } else {\n      actualMethod = getIteratorMethod({\n        AdvanceStringIndex: AdvanceStringIndex,\n        GetMethod: GetMethod,\n        IsArray: IsArray\n      }, obj);\n    }\n  }\n  var iterator = Call(actualMethod, obj);\n  if (Type(iterator) !== 'Object') {\n    throw new $TypeError('iterator must return an object');\n  }\n  return iterator;\n\n  // TODO: This should return an IteratorRecord\n  /*\n  var nextMethod = GetV(iterator, 'next');\n  return {\n  \t'[[Iterator]]': iterator,\n  \t'[[NextMethod]]': nextMethod,\n  \t'[[Done]]': false\n  };\n  */\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$SyntaxError","$asyncIterator","inspect","hasSymbols","getIteratorMethod","AdvanceStringIndex","Call","GetMethod","IsArray","Type","module","exports","GetIterator","obj","hint","method","actualHint","arguments","length","actualMethod","undefined","iterator"],"sources":["/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/es-abstract/2022/GetIterator.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);\n\nvar inspect = require('object-inspect');\nvar hasSymbols = require('has-symbols')();\n\nvar getIteratorMethod = require('../helpers/getIteratorMethod');\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\nvar Call = require('./Call');\nvar GetMethod = require('./GetMethod');\nvar IsArray = require('./IsArray');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/11.0/#sec-getiterator\n\nmodule.exports = function GetIterator(obj, hint, method) {\n\tvar actualHint = hint;\n\tif (arguments.length < 2) {\n\t\tactualHint = 'sync';\n\t}\n\tif (actualHint !== 'sync' && actualHint !== 'async') {\n\t\tthrow new $TypeError(\"Assertion failed: `hint` must be one of 'sync' or 'async', got \" + inspect(hint));\n\t}\n\n\tvar actualMethod = method;\n\tif (arguments.length < 3) {\n\t\tif (actualHint === 'async') {\n\t\t\tif (hasSymbols && $asyncIterator) {\n\t\t\t\tactualMethod = GetMethod(obj, $asyncIterator);\n\t\t\t}\n\t\t\tif (actualMethod === undefined) {\n\t\t\t\tthrow new $SyntaxError(\"async from sync iterators aren't currently supported\");\n\t\t\t}\n\t\t} else {\n\t\t\tactualMethod = getIteratorMethod(\n\t\t\t\t{\n\t\t\t\t\tAdvanceStringIndex: AdvanceStringIndex,\n\t\t\t\t\tGetMethod: GetMethod,\n\t\t\t\t\tIsArray: IsArray\n\t\t\t\t},\n\t\t\t\tobj\n\t\t\t);\n\t\t}\n\t}\n\tvar iterator = Call(actualMethod, obj);\n\tif (Type(iterator) !== 'Object') {\n\t\tthrow new $TypeError('iterator must return an object');\n\t}\n\n\treturn iterator;\n\n\t// TODO: This should return an IteratorRecord\n\t/*\n\tvar nextMethod = GetV(iterator, 'next');\n\treturn {\n\t\t'[[Iterator]]': iterator,\n\t\t'[[NextMethod]]': nextMethod,\n\t\t'[[Done]]': false\n\t};\n\t*/\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAa,CAAC;AAC5C,IAAIG,YAAY,GAAGH,YAAY,CAAC,eAAe,CAAC;AAChD,IAAII,cAAc,GAAGJ,YAAY,CAAC,wBAAwB,EAAE,IAAI,CAAC;AAEjE,IAAIK,OAAO,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIK,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AAEzC,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,8BAA8B,CAAC;AAC/D,IAAIO,kBAAkB,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AACxD,IAAIQ,IAAI,GAAGR,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIS,SAAS,GAAGT,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIU,OAAO,GAAGV,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIW,IAAI,GAAGX,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAY,MAAM,CAACC,OAAO,GAAG,SAASC,WAAWA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAE;EACxD,IAAIC,UAAU,GAAGF,IAAI;EACrB,IAAIG,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACzBF,UAAU,GAAG,MAAM;EACpB;EACA,IAAIA,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,OAAO,EAAE;IACpD,MAAM,IAAIjB,UAAU,CAAC,iEAAiE,GAAGG,OAAO,CAACY,IAAI,CAAC,CAAC;EACxG;EAEA,IAAIK,YAAY,GAAGJ,MAAM;EACzB,IAAIE,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,IAAIF,UAAU,KAAK,OAAO,EAAE;MAC3B,IAAIb,UAAU,IAAIF,cAAc,EAAE;QACjCkB,YAAY,GAAGZ,SAAS,CAACM,GAAG,EAAEZ,cAAc,CAAC;MAC9C;MACA,IAAIkB,YAAY,KAAKC,SAAS,EAAE;QAC/B,MAAM,IAAIpB,YAAY,CAAC,sDAAsD,CAAC;MAC/E;IACD,CAAC,MAAM;MACNmB,YAAY,GAAGf,iBAAiB,CAC/B;QACCC,kBAAkB,EAAEA,kBAAkB;QACtCE,SAAS,EAAEA,SAAS;QACpBC,OAAO,EAAEA;MACV,CAAC,EACDK,GACD,CAAC;IACF;EACD;EACA,IAAIQ,QAAQ,GAAGf,IAAI,CAACa,YAAY,EAAEN,GAAG,CAAC;EACtC,IAAIJ,IAAI,CAACY,QAAQ,CAAC,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAItB,UAAU,CAAC,gCAAgC,CAAC;EACvD;EAEA,OAAOsB,QAAQ;;EAEf;EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"script"}