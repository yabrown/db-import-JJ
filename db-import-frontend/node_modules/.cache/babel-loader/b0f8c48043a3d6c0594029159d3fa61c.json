{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext\";\nexport function createDefaultTracingSpan() {\n  return {\n    end: function end() {\n      // noop\n    },\n    isRecording: function isRecording() {\n      return false;\n    },\n    recordException: function recordException() {\n      // noop\n    },\n    setAttribute: function setAttribute() {\n      // noop\n    },\n    setStatus: function setStatus() {\n      // noop\n    }\n  };\n}\nexport function createDefaultInstrumenter() {\n  return {\n    createRequestHeaders: function createRequestHeaders() {\n      return {};\n    },\n    parseTraceparentHeader: function parseTraceparentHeader() {\n      return undefined;\n    },\n    startSpan: function startSpan(_name, spanOptions) {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({\n          parentContext: spanOptions.tracingContext\n        })\n      };\n    },\n    withContext: function withContext(_context, callback) {\n      for (var _len = arguments.length, callbackArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        callbackArgs[_key - 2] = arguments[_key];\n      }\n      return callback.apply(void 0, callbackArgs);\n    }\n  };\n}\n/** @internal */\nvar instrumenterImplementation;\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n  instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n  if (!instrumenterImplementation) {\n    instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return instrumenterImplementation;\n}","map":{"version":3,"names":["createTracingContext","createDefaultTracingSpan","end","isRecording","recordException","setAttribute","setStatus","createDefaultInstrumenter","createRequestHeaders","parseTraceparentHeader","undefined","startSpan","_name","spanOptions","span","tracingContext","parentContext","withContext","_context","callback","_len","arguments","length","callbackArgs","Array","_key","apply","instrumenterImplementation","useInstrumenter","instrumenter","getInstrumenter"],"sources":["../../src/instrumenter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Instrumenter, InstrumenterSpanOptions, TracingContext, TracingSpan } from \"./interfaces\";\nimport { createTracingContext } from \"./tracingContext\";\n\nexport function createDefaultTracingSpan(): TracingSpan {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n  };\n}\n\nexport function createDefaultInstrumenter(): Instrumenter {\n  return {\n    createRequestHeaders: (): Record<string, string> => {\n      return {};\n    },\n    parseTraceparentHeader: (): TracingContext | undefined => {\n      return undefined;\n    },\n    startSpan: (\n      _name: string,\n      spanOptions: InstrumenterSpanOptions\n    ): { span: TracingSpan; tracingContext: TracingContext } => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n      };\n    },\n    withContext<\n      CallbackArgs extends unknown[],\n      Callback extends (...args: CallbackArgs) => ReturnType<Callback>\n    >(\n      _context: TracingContext,\n      callback: Callback,\n      ...callbackArgs: CallbackArgs\n    ): ReturnType<Callback> {\n      return callback(...callbackArgs);\n    },\n  };\n}\n\n/** @internal */\nlet instrumenterImplementation: Instrumenter | undefined;\n\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter: Instrumenter): void {\n  instrumenterImplementation = instrumenter;\n}\n\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter(): Instrumenter {\n  if (!instrumenterImplementation) {\n    instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return instrumenterImplementation;\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,kBAAkB;AAEvD,OAAM,SAAUC,wBAAwBA,CAAA;EACtC,OAAO;IACLC,GAAG,EAAE,SAAAA,IAAA,EAAK;MACR;IAAA,CACD;IACDC,WAAW,EAAE,SAAAA,YAAA;MAAA,OAAM,KAAK;IAAA;IACxBC,eAAe,EAAE,SAAAA,gBAAA,EAAK;MACpB;IAAA,CACD;IACDC,YAAY,EAAE,SAAAA,aAAA,EAAK;MACjB;IAAA,CACD;IACDC,SAAS,EAAE,SAAAA,UAAA,EAAK;MACd;IAAA;GAEH;AACH;AAEA,OAAM,SAAUC,yBAAyBA,CAAA;EACvC,OAAO;IACLC,oBAAoB,EAAE,SAAAA,qBAAA,EAA6B;MACjD,OAAO,EAAE;IACX,CAAC;IACDC,sBAAsB,EAAE,SAAAA,uBAAA,EAAiC;MACvD,OAAOC,SAAS;IAClB,CAAC;IACDC,SAAS,EAAE,SAAAA,UACTC,KAAa,EACbC,WAAoC,EACqB;MACzD,OAAO;QACLC,IAAI,EAAEb,wBAAwB,EAAE;QAChCc,cAAc,EAAEf,oBAAoB,CAAC;UAAEgB,aAAa,EAAEH,WAAW,CAACE;QAAc,CAAE;OACnF;IACH,CAAC;IACDE,WAAW,WAAAA,YAITC,QAAwB,EACxBC,QAAkB,EACW;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA1BC,YAA0B,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAA1BF,YAA0B,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAE7B,OAAON,QAAQ,CAAAO,KAAA,SAAIH,YAAY,CAAC;IAClC;GACD;AACH;AAEA;AACA,IAAII,0BAAoD;AAExD;;;;;AAKA,OAAM,SAAUC,eAAeA,CAACC,YAA0B;EACxDF,0BAA0B,GAAGE,YAAY;AAC3C;AAEA;;;;;AAKA,OAAM,SAAUC,eAAeA,CAAA;EAC7B,IAAI,CAACH,0BAA0B,EAAE;IAC/BA,0BAA0B,GAAGpB,yBAAyB,EAAE;;EAE1D,OAAOoB,0BAA0B;AACnC"},"metadata":{},"sourceType":"module"}