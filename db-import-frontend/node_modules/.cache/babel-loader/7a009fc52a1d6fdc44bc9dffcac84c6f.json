{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _require = require('util'),\n  promisify = _require.promisify;\nvar handler = {\n  get: function get(target, prop, receiver) {\n    if (typeof target[prop] !== 'function') {\n      return target[prop];\n    }\n    if (target[prop][promisify.custom]) {\n      return function () {\n        return Reflect.get(target, prop, receiver)[promisify.custom].apply(target, arguments);\n      };\n    }\n    return function () {\n      var _arguments = arguments;\n      return new Promise(function (resolve, reject) {\n        Reflect.get(target, prop, receiver).apply(target, [].concat(_toConsumableArray(_arguments), [function (err, result) {\n          if (err) {\n            return reject(err);\n          }\n          resolve(result);\n        }]));\n      });\n    };\n  }\n};\nmodule.exports = function (thingToPromisify) {\n  if (typeof thingToPromisify === 'function') {\n    return promisify(thingToPromisify);\n  }\n  if (typeof thingToPromisify === 'object') {\n    return new Proxy(thingToPromisify, handler);\n  }\n  throw new TypeError('Can only promisify functions or objects');\n};","map":{"version":3,"names":["_toConsumableArray","require","default","_require","promisify","handler","get","target","prop","receiver","custom","Reflect","apply","arguments","_arguments","Promise","resolve","reject","concat","err","result","module","exports","thingToPromisify","Proxy","TypeError"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/@gar/promisify/index.js"],"sourcesContent":["'use strict'\n\nconst { promisify } = require('util')\n\nconst handler = {\n  get: function (target, prop, receiver) {\n    if (typeof target[prop] !== 'function') {\n      return target[prop]\n    }\n    if (target[prop][promisify.custom]) {\n      return function () {\n        return Reflect.get(target, prop, receiver)[promisify.custom].apply(target, arguments)\n      }\n    }\n    return function () {\n      return new Promise((resolve, reject) => {\n        Reflect.get(target, prop, receiver).apply(target, [...arguments, function (err, result) {\n          if (err) {\n            return reject(err)\n          }\n          resolve(result)\n        }])\n      })\n    }\n  }\n}\n\nmodule.exports = function (thingToPromisify) {\n  if (typeof thingToPromisify === 'function') {\n    return promisify(thingToPromisify)\n  }\n  if (typeof thingToPromisify === 'object') {\n    return new Proxy(thingToPromisify, handler)\n  }\n  throw new TypeError('Can only promisify functions or objects')\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,kBAAA,GAAAC,OAAA,+FAAAC,OAAA;AAEZ,IAAAC,QAAA,GAAsBF,OAAO,CAAC,MAAM,CAAC;EAA7BG,SAAS,GAAAD,QAAA,CAATC,SAAS;AAEjB,IAAMC,OAAO,GAAG;EACdC,GAAG,EAAE,SAAAA,IAAUC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE;IACrC,IAAI,OAAOF,MAAM,CAACC,IAAI,CAAC,KAAK,UAAU,EAAE;MACtC,OAAOD,MAAM,CAACC,IAAI,CAAC;IACrB;IACA,IAAID,MAAM,CAACC,IAAI,CAAC,CAACJ,SAAS,CAACM,MAAM,CAAC,EAAE;MAClC,OAAO,YAAY;QACjB,OAAOC,OAAO,CAACL,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC,CAACL,SAAS,CAACM,MAAM,CAAC,CAACE,KAAK,CAACL,MAAM,EAAEM,SAAS,CAAC;MACvF,CAAC;IACH;IACA,OAAO,YAAY;MAAA,IAAAC,UAAA,GAAAD,SAAA;MACjB,OAAO,IAAIE,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCN,OAAO,CAACL,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC,CAACG,KAAK,CAACL,MAAM,KAAAW,MAAA,CAAAlB,kBAAA,CAAMa,UAAS,IAAE,UAAUM,GAAG,EAAEC,MAAM,EAAE;UACtF,IAAID,GAAG,EAAE;YACP,OAAOF,MAAM,CAACE,GAAG,CAAC;UACpB;UACAH,OAAO,CAACI,MAAM,CAAC;QACjB,CAAC,EAAC,CAAC;MACL,CAAC,CAAC;IACJ,CAAC;EACH;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG,UAAUC,gBAAgB,EAAE;EAC3C,IAAI,OAAOA,gBAAgB,KAAK,UAAU,EAAE;IAC1C,OAAOnB,SAAS,CAACmB,gBAAgB,CAAC;EACpC;EACA,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;IACxC,OAAO,IAAIC,KAAK,CAACD,gBAAgB,EAAElB,OAAO,CAAC;EAC7C;EACA,MAAM,IAAIoB,SAAS,CAAC,yCAAyC,CAAC;AAChE,CAAC"},"metadata":{},"sourceType":"script"}