{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _objectSpread = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar crypto = require('crypto');\nvar MiniPass = require('minipass');\nvar SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512'];\n\n// TODO: this should really be a hardcoded list of algorithms we support,\n// rather than [a-z0-9].\nvar BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;\nvar SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\\S*]*)$/;\nvar STRICT_SRI_REGEX = /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/;\nvar VCHAR_REGEX = /^[\\x21-\\x7E]+$/;\nvar defaultOpts = {\n  algorithms: ['sha512'],\n  error: false,\n  options: [],\n  pickAlgorithm: getPrioritizedHash,\n  sep: ' ',\n  single: false,\n  strict: false\n};\nvar ssriOpts = function ssriOpts() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _objectSpread(_objectSpread({}, defaultOpts), opts);\n};\nvar getOptString = function getOptString(options) {\n  return !options || !options.length ? '' : \"?\".concat(options.join('?'));\n};\nvar _onEnd = Symbol('_onEnd');\nvar _getOptions = Symbol('_getOptions');\nvar IntegrityStream = /*#__PURE__*/function (_MiniPass) {\n  _inherits(IntegrityStream, _MiniPass);\n  var _super = _createSuper(IntegrityStream);\n  function IntegrityStream(opts) {\n    var _this;\n    _classCallCheck(this, IntegrityStream);\n    _this = _super.call(this);\n    _this.size = 0;\n    _this.opts = opts;\n\n    // may be overridden later, but set now for class consistency\n    _this[_getOptions]();\n\n    // options used for calculating stream.  can't be changed.\n    var _opts$algorithms = opts.algorithms,\n      algorithms = _opts$algorithms === void 0 ? defaultOpts.algorithms : _opts$algorithms;\n    _this.algorithms = Array.from(new Set(algorithms.concat(_this.algorithm ? [_this.algorithm] : [])));\n    _this.hashes = _this.algorithms.map(crypto.createHash);\n    return _this;\n  }\n  _createClass(IntegrityStream, [{\n    key: _getOptions,\n    value: function value() {\n      var _defaultOpts$this$opt = _objectSpread(_objectSpread({}, defaultOpts), this.opts),\n        integrity = _defaultOpts$this$opt.integrity,\n        size = _defaultOpts$this$opt.size,\n        options = _defaultOpts$this$opt.options;\n\n      // For verification\n      this.sri = integrity ? parse(integrity, this.opts) : null;\n      this.expectedSize = size;\n      this.goodSri = this.sri ? !!Object.keys(this.sri).length : false;\n      this.algorithm = this.goodSri ? this.sri.pickAlgorithm(this.opts) : null;\n      this.digests = this.goodSri ? this.sri[this.algorithm] : null;\n      this.optString = getOptString(options);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(ev, data) {\n      if (ev === 'end') this[_onEnd]();\n      return _get(_getPrototypeOf(IntegrityStream.prototype), \"emit\", this).call(this, ev, data);\n    }\n  }, {\n    key: \"write\",\n    value: function write(data) {\n      this.size += data.length;\n      this.hashes.forEach(function (h) {\n        return h.update(data);\n      });\n      return _get(_getPrototypeOf(IntegrityStream.prototype), \"write\", this).call(this, data);\n    }\n  }, {\n    key: _onEnd,\n    value: function value() {\n      var _this2 = this;\n      if (!this.goodSri) {\n        this[_getOptions]();\n      }\n      var newSri = parse(this.hashes.map(function (h, i) {\n        return \"\".concat(_this2.algorithms[i], \"-\").concat(h.digest('base64')).concat(_this2.optString);\n      }).join(' '), this.opts);\n      // Integrity verification mode\n      var match = this.goodSri && newSri.match(this.sri, this.opts);\n      if (typeof this.expectedSize === 'number' && this.size !== this.expectedSize) {\n        var err = new Error(\"stream size mismatch when checking \".concat(this.sri, \".\\n  Wanted: \").concat(this.expectedSize, \"\\n  Found: \").concat(this.size));\n        err.code = 'EBADSIZE';\n        err.found = this.size;\n        err.expected = this.expectedSize;\n        err.sri = this.sri;\n        this.emit('error', err);\n      } else if (this.sri && !match) {\n        var _err = new Error(\"\".concat(this.sri, \" integrity checksum failed when using \").concat(this.algorithm, \": wanted \").concat(this.digests, \" but got \").concat(newSri, \". (\").concat(this.size, \" bytes)\"));\n        _err.code = 'EINTEGRITY';\n        _err.found = newSri;\n        _err.expected = this.digests;\n        _err.algorithm = this.algorithm;\n        _err.sri = this.sri;\n        this.emit('error', _err);\n      } else {\n        this.emit('size', this.size);\n        this.emit('integrity', newSri);\n        match && this.emit('verified', match);\n      }\n    }\n  }]);\n  return IntegrityStream;\n}(MiniPass);\nvar Hash = /*#__PURE__*/function () {\n  function Hash(hash, opts) {\n    _classCallCheck(this, Hash);\n    opts = ssriOpts(opts);\n    var strict = !!opts.strict;\n    this.source = hash.trim();\n\n    // set default values so that we make V8 happy to\n    // always see a familiar object template.\n    this.digest = '';\n    this.algorithm = '';\n    this.options = [];\n\n    // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n    var match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);\n    if (!match) {\n      return;\n    }\n    if (strict && !SPEC_ALGORITHMS.some(function (a) {\n      return a === match[1];\n    })) {\n      return;\n    }\n    this.algorithm = match[1];\n    this.digest = match[2];\n    var rawOpts = match[3];\n    if (rawOpts) {\n      this.options = rawOpts.slice(1).split('?');\n    }\n  }\n  _createClass(Hash, [{\n    key: \"isHash\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"hexDigest\",\n    value: function hexDigest() {\n      return this.digest && Buffer.from(this.digest, 'base64').toString('hex');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(opts) {\n      var _this3 = this;\n      opts = ssriOpts(opts);\n      if (opts.strict) {\n        // Strict mode enforces the standard as close to the foot of the\n        // letter as it can.\n        if (!(\n        // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(function (x) {\n          return x === _this3.algorithm;\n        }) &&\n        // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) &&\n        // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        this.options.every(function (opt) {\n          return opt.match(VCHAR_REGEX);\n        }))) {\n          return '';\n        }\n      }\n      var options = this.options && this.options.length ? \"?\".concat(this.options.join('?')) : '';\n      return \"\".concat(this.algorithm, \"-\").concat(this.digest).concat(options);\n    }\n  }]);\n  return Hash;\n}();\nvar Integrity = /*#__PURE__*/function () {\n  function Integrity() {\n    _classCallCheck(this, Integrity);\n  }\n  _createClass(Integrity, [{\n    key: \"isIntegrity\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return Object.keys(this).length === 0;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(opts) {\n      var _this4 = this;\n      opts = ssriOpts(opts);\n      var sep = opts.sep || ' ';\n      if (opts.strict) {\n        // Entries must be separated by whitespace, according to spec.\n        sep = sep.replace(/\\S+/g, ' ');\n      }\n      return Object.keys(this).map(function (k) {\n        return _this4[k].map(function (hash) {\n          return Hash.prototype.toString.call(hash, opts);\n        }).filter(function (x) {\n          return x.length;\n        }).join(sep);\n      }).filter(function (x) {\n        return x.length;\n      }).join(sep);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(integrity, opts) {\n      opts = ssriOpts(opts);\n      var other = typeof integrity === 'string' ? integrity : stringify(integrity, opts);\n      return parse(\"\".concat(this.toString(opts), \" \").concat(other), opts);\n    }\n  }, {\n    key: \"hexDigest\",\n    value: function hexDigest() {\n      return parse(this, {\n        single: true\n      }).hexDigest();\n    }\n\n    // add additional hashes to an integrity value, but prevent\n    // *changing* an existing integrity hash.\n  }, {\n    key: \"merge\",\n    value: function merge(integrity, opts) {\n      var _this5 = this;\n      opts = ssriOpts(opts);\n      var other = parse(integrity, opts);\n      var _loop = function _loop(algo) {\n        if (_this5[algo]) {\n          if (!_this5[algo].find(function (hash) {\n            return other[algo].find(function (otherhash) {\n              return hash.digest === otherhash.digest;\n            });\n          })) {\n            throw new Error('hashes do not match, cannot update integrity');\n          }\n        } else {\n          _this5[algo] = other[algo];\n        }\n      };\n      for (var algo in other) {\n        _loop(algo);\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(integrity, opts) {\n      opts = ssriOpts(opts);\n      var other = parse(integrity, opts);\n      var algo = other.pickAlgorithm(opts);\n      return this[algo] && other[algo] && this[algo].find(function (hash) {\n        return other[algo].find(function (otherhash) {\n          return hash.digest === otherhash.digest;\n        });\n      }) || false;\n    }\n  }, {\n    key: \"pickAlgorithm\",\n    value: function pickAlgorithm(opts) {\n      opts = ssriOpts(opts);\n      var pickAlgorithm = opts.pickAlgorithm;\n      var keys = Object.keys(this);\n      return keys.reduce(function (acc, algo) {\n        return pickAlgorithm(acc, algo) || acc;\n      });\n    }\n  }]);\n  return Integrity;\n}();\nmodule.exports.parse = parse;\nfunction parse(sri, opts) {\n  if (!sri) return null;\n  opts = ssriOpts(opts);\n  if (typeof sri === 'string') {\n    return _parse(sri, opts);\n  } else if (sri.algorithm && sri.digest) {\n    var fullSri = new Integrity();\n    fullSri[sri.algorithm] = [sri];\n    return _parse(stringify(fullSri, opts), opts);\n  } else {\n    return _parse(stringify(sri, opts), opts);\n  }\n}\nfunction _parse(integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts);\n  }\n  var hashes = integrity.trim().split(/\\s+/).reduce(function (acc, string) {\n    var hash = new Hash(string, opts);\n    if (hash.algorithm && hash.digest) {\n      var algo = hash.algorithm;\n      if (!acc[algo]) {\n        acc[algo] = [];\n      }\n      acc[algo].push(hash);\n    }\n    return acc;\n  }, new Integrity());\n  return hashes.isEmpty() ? null : hashes;\n}\nmodule.exports.stringify = stringify;\nfunction stringify(obj, opts) {\n  opts = ssriOpts(opts);\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts);\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts);\n  } else {\n    return Integrity.prototype.toString.call(obj, opts);\n  }\n}\nmodule.exports.fromHex = fromHex;\nfunction fromHex(hexDigest, algorithm, opts) {\n  opts = ssriOpts(opts);\n  var optString = getOptString(opts.options);\n  return parse(\"\".concat(algorithm, \"-\").concat(Buffer.from(hexDigest, 'hex').toString('base64')).concat(optString), opts);\n}\nmodule.exports.fromData = fromData;\nfunction fromData(data, opts) {\n  opts = ssriOpts(opts);\n  var algorithms = opts.algorithms;\n  var optString = getOptString(opts.options);\n  return algorithms.reduce(function (acc, algo) {\n    var digest = crypto.createHash(algo).update(data).digest('base64');\n    var hash = new Hash(\"\".concat(algo, \"-\").concat(digest).concat(optString), opts);\n    /* istanbul ignore else - it would be VERY strange if the string we\n     * just calculated with an algo did not have an algo or digest.\n     */\n    if (hash.algorithm && hash.digest) {\n      var _algo = hash.algorithm;\n      if (!acc[_algo]) {\n        acc[_algo] = [];\n      }\n      acc[_algo].push(hash);\n    }\n    return acc;\n  }, new Integrity());\n}\nmodule.exports.fromStream = fromStream;\nfunction fromStream(stream, opts) {\n  opts = ssriOpts(opts);\n  var istream = integrityStream(opts);\n  return new Promise(function (resolve, reject) {\n    stream.pipe(istream);\n    stream.on('error', reject);\n    istream.on('error', reject);\n    var sri;\n    istream.on('integrity', function (s) {\n      sri = s;\n    });\n    istream.on('end', function () {\n      return resolve(sri);\n    });\n    istream.on('data', function () {});\n  });\n}\nmodule.exports.checkData = checkData;\nfunction checkData(data, sri, opts) {\n  opts = ssriOpts(opts);\n  sri = parse(sri, opts);\n  if (!sri || !Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(new Error('No valid integrity hashes to check against'), {\n        code: 'EINTEGRITY'\n      });\n    } else {\n      return false;\n    }\n  }\n  var algorithm = sri.pickAlgorithm(opts);\n  var digest = crypto.createHash(algorithm).update(data).digest('base64');\n  var newSri = parse({\n    algorithm: algorithm,\n    digest: digest\n  });\n  var match = newSri.match(sri, opts);\n  if (match || !opts.error) {\n    return match;\n  } else if (typeof opts.size === 'number' && data.length !== opts.size) {\n    var err = new Error(\"data size mismatch when checking \".concat(sri, \".\\n  Wanted: \").concat(opts.size, \"\\n  Found: \").concat(data.length));\n    err.code = 'EBADSIZE';\n    err.found = data.length;\n    err.expected = opts.size;\n    err.sri = sri;\n    throw err;\n  } else {\n    var _err2 = new Error(\"Integrity checksum failed when using \".concat(algorithm, \": Wanted \").concat(sri, \", but got \").concat(newSri, \". (\").concat(data.length, \" bytes)\"));\n    _err2.code = 'EINTEGRITY';\n    _err2.found = newSri;\n    _err2.expected = sri;\n    _err2.algorithm = algorithm;\n    _err2.sri = sri;\n    throw _err2;\n  }\n}\nmodule.exports.checkStream = checkStream;\nfunction checkStream(stream, sri, opts) {\n  opts = ssriOpts(opts);\n  opts.integrity = sri;\n  sri = parse(sri, opts);\n  if (!sri || !Object.keys(sri).length) {\n    return Promise.reject(Object.assign(new Error('No valid integrity hashes to check against'), {\n      code: 'EINTEGRITY'\n    }));\n  }\n  var checker = integrityStream(opts);\n  return new Promise(function (resolve, reject) {\n    stream.pipe(checker);\n    stream.on('error', reject);\n    checker.on('error', reject);\n    var sri;\n    checker.on('verified', function (s) {\n      sri = s;\n    });\n    checker.on('end', function () {\n      return resolve(sri);\n    });\n    checker.on('data', function () {});\n  });\n}\nmodule.exports.integrityStream = integrityStream;\nfunction integrityStream() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new IntegrityStream(opts);\n}\nmodule.exports.create = createIntegrity;\nfunction createIntegrity(opts) {\n  opts = ssriOpts(opts);\n  var algorithms = opts.algorithms;\n  var optString = getOptString(opts.options);\n  var hashes = algorithms.map(crypto.createHash);\n  return {\n    update: function update(chunk, enc) {\n      hashes.forEach(function (h) {\n        return h.update(chunk, enc);\n      });\n      return this;\n    },\n    digest: function digest(enc) {\n      var integrity = algorithms.reduce(function (acc, algo) {\n        var digest = hashes.shift().digest('base64');\n        var hash = new Hash(\"\".concat(algo, \"-\").concat(digest).concat(optString), opts);\n        /* istanbul ignore else - it would be VERY strange if the hash we\n         * just calculated with an algo did not have an algo or digest.\n         */\n        if (hash.algorithm && hash.digest) {\n          var _algo2 = hash.algorithm;\n          if (!acc[_algo2]) {\n            acc[_algo2] = [];\n          }\n          acc[_algo2].push(hash);\n        }\n        return acc;\n      }, new Integrity());\n      return integrity;\n    }\n  };\n}\nvar NODE_HASHES = new Set(crypto.getHashes());\n\n// This is a Best Effort™ at a reasonable priority for hash algos\nvar DEFAULT_PRIORITY = ['md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n// TODO - it's unclear _which_ of these Node will actually use as its name\n//        for the algorithm, so we guesswork it based on the OpenSSL names.\n'sha3', 'sha3-256', 'sha3-384', 'sha3-512', 'sha3_256', 'sha3_384', 'sha3_512'].filter(function (algo) {\n  return NODE_HASHES.has(algo);\n});\nfunction getPrioritizedHash(algo1, algo2) {\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;\n}","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_get","_getPrototypeOf","_inherits","_createSuper","_objectSpread","crypto","MiniPass","SPEC_ALGORITHMS","BASE64_REGEX","SRI_REGEX","STRICT_SRI_REGEX","VCHAR_REGEX","defaultOpts","algorithms","error","options","pickAlgorithm","getPrioritizedHash","sep","single","strict","ssriOpts","opts","arguments","length","undefined","getOptString","concat","join","_onEnd","Symbol","_getOptions","IntegrityStream","_MiniPass","_super","_this","call","size","_opts$algorithms","Array","from","Set","algorithm","hashes","map","createHash","key","value","_defaultOpts$this$opt","integrity","sri","parse","expectedSize","goodSri","Object","keys","digests","optString","emit","ev","data","prototype","write","forEach","h","update","_this2","newSri","i","digest","match","err","Error","code","found","expected","Hash","hash","source","trim","some","a","rawOpts","slice","split","get","hexDigest","Buffer","toString","toJSON","_this3","x","every","opt","Integrity","isEmpty","_this4","replace","k","filter","other","stringify","merge","_this5","_loop","algo","find","otherhash","reduce","acc","module","exports","_parse","fullSri","string","push","obj","fromHex","fromData","fromStream","stream","istream","integrityStream","Promise","resolve","reject","pipe","on","s","checkData","assign","checkStream","checker","create","createIntegrity","chunk","enc","shift","NODE_HASHES","getHashes","DEFAULT_PRIORITY","has","algo1","algo2","indexOf","toLowerCase"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/ssri/index.js"],"sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\nconst MiniPass = require('minipass')\n\nconst SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512']\n\n// TODO: this should really be a hardcoded list of algorithms we support,\n// rather than [a-z0-9].\nconst BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i\nconst SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\\S*]*)$/\nconst STRICT_SRI_REGEX = /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/\nconst VCHAR_REGEX = /^[\\x21-\\x7E]+$/\n\nconst defaultOpts = {\n  algorithms: ['sha512'],\n  error: false,\n  options: [],\n  pickAlgorithm: getPrioritizedHash,\n  sep: ' ',\n  single: false,\n  strict: false\n}\n\nconst ssriOpts = (opts = {}) => ({ ...defaultOpts, ...opts })\n\nconst getOptString = options => !options || !options.length\n  ? ''\n  : `?${options.join('?')}`\n\nconst _onEnd = Symbol('_onEnd')\nconst _getOptions = Symbol('_getOptions')\nclass IntegrityStream extends MiniPass {\n  constructor (opts) {\n    super()\n    this.size = 0\n    this.opts = opts\n\n    // may be overridden later, but set now for class consistency\n    this[_getOptions]()\n\n    // options used for calculating stream.  can't be changed.\n    const { algorithms = defaultOpts.algorithms } = opts\n    this.algorithms = Array.from(\n      new Set(algorithms.concat(this.algorithm ? [this.algorithm] : []))\n    )\n    this.hashes = this.algorithms.map(crypto.createHash)\n  }\n\n  [_getOptions] () {\n    const {\n      integrity,\n      size,\n      options\n    } = { ...defaultOpts, ...this.opts }\n\n    // For verification\n    this.sri = integrity ? parse(integrity, this.opts) : null\n    this.expectedSize = size\n    this.goodSri = this.sri ? !!Object.keys(this.sri).length : false\n    this.algorithm = this.goodSri ? this.sri.pickAlgorithm(this.opts) : null\n    this.digests = this.goodSri ? this.sri[this.algorithm] : null\n    this.optString = getOptString(options)\n  }\n\n  emit (ev, data) {\n    if (ev === 'end') this[_onEnd]()\n    return super.emit(ev, data)\n  }\n\n  write (data) {\n    this.size += data.length\n    this.hashes.forEach(h => h.update(data))\n    return super.write(data)\n  }\n\n  [_onEnd] () {\n    if (!this.goodSri) {\n      this[_getOptions]()\n    }\n    const newSri = parse(this.hashes.map((h, i) => {\n      return `${this.algorithms[i]}-${h.digest('base64')}${this.optString}`\n    }).join(' '), this.opts)\n    // Integrity verification mode\n    const match = this.goodSri && newSri.match(this.sri, this.opts)\n    if (typeof this.expectedSize === 'number' && this.size !== this.expectedSize) {\n      const err = new Error(`stream size mismatch when checking ${this.sri}.\\n  Wanted: ${this.expectedSize}\\n  Found: ${this.size}`)\n      err.code = 'EBADSIZE'\n      err.found = this.size\n      err.expected = this.expectedSize\n      err.sri = this.sri\n      this.emit('error', err)\n    } else if (this.sri && !match) {\n      const err = new Error(`${this.sri} integrity checksum failed when using ${this.algorithm}: wanted ${this.digests} but got ${newSri}. (${this.size} bytes)`)\n      err.code = 'EINTEGRITY'\n      err.found = newSri\n      err.expected = this.digests\n      err.algorithm = this.algorithm\n      err.sri = this.sri\n      this.emit('error', err)\n    } else {\n      this.emit('size', this.size)\n      this.emit('integrity', newSri)\n      match && this.emit('verified', match)\n    }\n  }\n}\n\nclass Hash {\n  get isHash () { return true }\n  constructor (hash, opts) {\n    opts = ssriOpts(opts)\n    const strict = !!opts.strict\n    this.source = hash.trim()\n\n    // set default values so that we make V8 happy to\n    // always see a familiar object template.\n    this.digest = ''\n    this.algorithm = ''\n    this.options = []\n\n    // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n    const match = this.source.match(\n      strict\n        ? STRICT_SRI_REGEX\n        : SRI_REGEX\n    )\n    if (!match) { return }\n    if (strict && !SPEC_ALGORITHMS.some(a => a === match[1])) { return }\n    this.algorithm = match[1]\n    this.digest = match[2]\n\n    const rawOpts = match[3]\n    if (rawOpts) {\n      this.options = rawOpts.slice(1).split('?')\n    }\n  }\n\n  hexDigest () {\n    return this.digest && Buffer.from(this.digest, 'base64').toString('hex')\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  toString (opts) {\n    opts = ssriOpts(opts)\n    if (opts.strict) {\n      // Strict mode enforces the standard as close to the foot of the\n      // letter as it can.\n      if (!(\n        // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(x => x === this.algorithm) &&\n        // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) &&\n        // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        this.options.every(opt => opt.match(VCHAR_REGEX))\n      )) {\n        return ''\n      }\n    }\n    const options = this.options && this.options.length\n      ? `?${this.options.join('?')}`\n      : ''\n    return `${this.algorithm}-${this.digest}${options}`\n  }\n}\n\nclass Integrity {\n  get isIntegrity () { return true }\n  toJSON () {\n    return this.toString()\n  }\n\n  isEmpty () {\n    return Object.keys(this).length === 0\n  }\n\n  toString (opts) {\n    opts = ssriOpts(opts)\n    let sep = opts.sep || ' '\n    if (opts.strict) {\n      // Entries must be separated by whitespace, according to spec.\n      sep = sep.replace(/\\S+/g, ' ')\n    }\n    return Object.keys(this).map(k => {\n      return this[k].map(hash => {\n        return Hash.prototype.toString.call(hash, opts)\n      }).filter(x => x.length).join(sep)\n    }).filter(x => x.length).join(sep)\n  }\n\n  concat (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = typeof integrity === 'string'\n      ? integrity\n      : stringify(integrity, opts)\n    return parse(`${this.toString(opts)} ${other}`, opts)\n  }\n\n  hexDigest () {\n    return parse(this, { single: true }).hexDigest()\n  }\n\n  // add additional hashes to an integrity value, but prevent\n  // *changing* an existing integrity hash.\n  merge (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = parse(integrity, opts)\n    for (const algo in other) {\n      if (this[algo]) {\n        if (!this[algo].find(hash =>\n          other[algo].find(otherhash =>\n            hash.digest === otherhash.digest))) {\n          throw new Error('hashes do not match, cannot update integrity')\n        }\n      } else {\n        this[algo] = other[algo]\n      }\n    }\n  }\n\n  match (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = parse(integrity, opts)\n    const algo = other.pickAlgorithm(opts)\n    return (\n      this[algo] &&\n      other[algo] &&\n      this[algo].find(hash =>\n        other[algo].find(otherhash =>\n          hash.digest === otherhash.digest\n        )\n      )\n    ) || false\n  }\n\n  pickAlgorithm (opts) {\n    opts = ssriOpts(opts)\n    const pickAlgorithm = opts.pickAlgorithm\n    const keys = Object.keys(this)\n    return keys.reduce((acc, algo) => {\n      return pickAlgorithm(acc, algo) || acc\n    })\n  }\n}\n\nmodule.exports.parse = parse\nfunction parse (sri, opts) {\n  if (!sri) return null\n  opts = ssriOpts(opts)\n  if (typeof sri === 'string') {\n    return _parse(sri, opts)\n  } else if (sri.algorithm && sri.digest) {\n    const fullSri = new Integrity()\n    fullSri[sri.algorithm] = [sri]\n    return _parse(stringify(fullSri, opts), opts)\n  } else {\n    return _parse(stringify(sri, opts), opts)\n  }\n}\n\nfunction _parse (integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts)\n  }\n  const hashes = integrity.trim().split(/\\s+/).reduce((acc, string) => {\n    const hash = new Hash(string, opts)\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n  return hashes.isEmpty() ? null : hashes\n}\n\nmodule.exports.stringify = stringify\nfunction stringify (obj, opts) {\n  opts = ssriOpts(opts)\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts)\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts)\n  } else {\n    return Integrity.prototype.toString.call(obj, opts)\n  }\n}\n\nmodule.exports.fromHex = fromHex\nfunction fromHex (hexDigest, algorithm, opts) {\n  opts = ssriOpts(opts)\n  const optString = getOptString(opts.options)\n  return parse(\n    `${algorithm}-${\n      Buffer.from(hexDigest, 'hex').toString('base64')\n    }${optString}`, opts\n  )\n}\n\nmodule.exports.fromData = fromData\nfunction fromData (data, opts) {\n  opts = ssriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = getOptString(opts.options)\n  return algorithms.reduce((acc, algo) => {\n    const digest = crypto.createHash(algo).update(data).digest('base64')\n    const hash = new Hash(\n      `${algo}-${digest}${optString}`,\n      opts\n    )\n    /* istanbul ignore else - it would be VERY strange if the string we\n     * just calculated with an algo did not have an algo or digest.\n     */\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.fromStream = fromStream\nfunction fromStream (stream, opts) {\n  opts = ssriOpts(opts)\n  const istream = integrityStream(opts)\n  return new Promise((resolve, reject) => {\n    stream.pipe(istream)\n    stream.on('error', reject)\n    istream.on('error', reject)\n    let sri\n    istream.on('integrity', s => { sri = s })\n    istream.on('end', () => resolve(sri))\n    istream.on('data', () => {})\n  })\n}\n\nmodule.exports.checkData = checkData\nfunction checkData (data, sri, opts) {\n  opts = ssriOpts(opts)\n  sri = parse(sri, opts)\n  if (!sri || !Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(\n        new Error('No valid integrity hashes to check against'), {\n          code: 'EINTEGRITY'\n        }\n      )\n    } else {\n      return false\n    }\n  }\n  const algorithm = sri.pickAlgorithm(opts)\n  const digest = crypto.createHash(algorithm).update(data).digest('base64')\n  const newSri = parse({ algorithm, digest })\n  const match = newSri.match(sri, opts)\n  if (match || !opts.error) {\n    return match\n  } else if (typeof opts.size === 'number' && (data.length !== opts.size)) {\n    const err = new Error(`data size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${data.length}`)\n    err.code = 'EBADSIZE'\n    err.found = data.length\n    err.expected = opts.size\n    err.sri = sri\n    throw err\n  } else {\n    const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`)\n    err.code = 'EINTEGRITY'\n    err.found = newSri\n    err.expected = sri\n    err.algorithm = algorithm\n    err.sri = sri\n    throw err\n  }\n}\n\nmodule.exports.checkStream = checkStream\nfunction checkStream (stream, sri, opts) {\n  opts = ssriOpts(opts)\n  opts.integrity = sri\n  sri = parse(sri, opts)\n  if (!sri || !Object.keys(sri).length) {\n    return Promise.reject(Object.assign(\n      new Error('No valid integrity hashes to check against'), {\n        code: 'EINTEGRITY'\n      }\n    ))\n  }\n  const checker = integrityStream(opts)\n  return new Promise((resolve, reject) => {\n    stream.pipe(checker)\n    stream.on('error', reject)\n    checker.on('error', reject)\n    let sri\n    checker.on('verified', s => { sri = s })\n    checker.on('end', () => resolve(sri))\n    checker.on('data', () => {})\n  })\n}\n\nmodule.exports.integrityStream = integrityStream\nfunction integrityStream (opts = {}) {\n  return new IntegrityStream(opts)\n}\n\nmodule.exports.create = createIntegrity\nfunction createIntegrity (opts) {\n  opts = ssriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = getOptString(opts.options)\n\n  const hashes = algorithms.map(crypto.createHash)\n\n  return {\n    update: function (chunk, enc) {\n      hashes.forEach(h => h.update(chunk, enc))\n      return this\n    },\n    digest: function (enc) {\n      const integrity = algorithms.reduce((acc, algo) => {\n        const digest = hashes.shift().digest('base64')\n        const hash = new Hash(\n          `${algo}-${digest}${optString}`,\n          opts\n        )\n        /* istanbul ignore else - it would be VERY strange if the hash we\n         * just calculated with an algo did not have an algo or digest.\n         */\n        if (hash.algorithm && hash.digest) {\n          const algo = hash.algorithm\n          if (!acc[algo]) { acc[algo] = [] }\n          acc[algo].push(hash)\n        }\n        return acc\n      }, new Integrity())\n\n      return integrity\n    }\n  }\n}\n\nconst NODE_HASHES = new Set(crypto.getHashes())\n\n// This is a Best Effort™ at a reasonable priority for hash algos\nconst DEFAULT_PRIORITY = [\n  'md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n  // TODO - it's unclear _which_ of these Node will actually use as its name\n  //        for the algorithm, so we guesswork it based on the OpenSSL names.\n  'sha3',\n  'sha3-256', 'sha3-384', 'sha3-512',\n  'sha3_256', 'sha3_384', 'sha3_512'\n].filter(algo => NODE_HASHES.has(algo))\n\nfunction getPrioritizedHash (algo1, algo2) {\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())\n    ? algo1\n    : algo2\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}