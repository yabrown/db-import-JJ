{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _a.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, requestId, responseHandler;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _b.sent();\n            requestId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_a = {}, _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _a));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _a.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["AuthorizationCodeClient","_super","__extends","configuration","_this","call","includeRedirectUri","prototype","getAuthCodeUrl","request","createAuthCodeUrlQueryString","queryString","_a","sent","UrlString","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","logger","info","StringUtils","isEmpty","code","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","response","_b","requestId","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","__assign","getLogoutUri","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","ccsCredential","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","endpoint","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","correlationId","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","requestScopes","__spreadArrays","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","extraQueryParameters","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint","BaseClient"],"sources":["../../src/client/AuthorizationCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys, HeaderNames } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { RequestValidator } from \"../request/RequestValidator\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    protected includeRedirectUri: boolean = true;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = await this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(\n            response.body, \n            this.authority, \n            reqTimestamp, \n            request, \n            authCodePayload,\n            undefined,\n            undefined,\n            undefined,\n            requestId\n        );\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private async createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        if(request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        return account.idTokenClaims?.sid || null;\n    }\n\n    private extractLoginHint(account: AccountInfo): string | null {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}