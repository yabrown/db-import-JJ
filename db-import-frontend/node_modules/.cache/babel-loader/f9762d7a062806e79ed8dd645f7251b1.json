{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar Utils = require(\"../../utils\");\nvar Transaction = require(\"../../transaction\");\nvar _ = require(\"lodash\");\nvar MySqlQueryGenerator = require(\"../mysql/query-generator\");\nvar AbstractQueryGenerator = require(\"../abstract/query-generator\");\nvar SQLiteQueryGenerator = /*#__PURE__*/function (_MySqlQueryGenerator) {\n  _inherits(SQLiteQueryGenerator, _MySqlQueryGenerator);\n  var _super = _createSuper(SQLiteQueryGenerator);\n  function SQLiteQueryGenerator() {\n    _classCallCheck(this, SQLiteQueryGenerator);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SQLiteQueryGenerator, [{\n    key: \"createSchema\",\n    value: function createSchema() {\n      return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery() {\n      return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n    }\n  }, {\n    key: \"versionQuery\",\n    value: function versionQuery() {\n      return \"SELECT sqlite_version() as `version`\";\n    }\n  }, {\n    key: \"createTableQuery\",\n    value: function createTableQuery(tableName, attributes, options) {\n      var _this = this;\n      options = options || {};\n      var primaryKeys = [];\n      var needsMultiplePrimaryKeys = Object.values(attributes).filter(function (definition) {\n        return definition.includes(\"PRIMARY KEY\");\n      }).length > 1;\n      var attrArray = [];\n      for (var attr in attributes) {\n        if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n          var dataType = attributes[attr];\n          var containsAutoIncrement = dataType.includes(\"AUTOINCREMENT\");\n          var dataTypeString = dataType;\n          if (dataType.includes(\"PRIMARY KEY\")) {\n            if (dataType.includes(\"INT\")) {\n              dataTypeString = containsAutoIncrement ? \"INTEGER PRIMARY KEY AUTOINCREMENT\" : \"INTEGER PRIMARY KEY\";\n              if (dataType.includes(\" REFERENCES\")) {\n                dataTypeString += dataType.substr(dataType.indexOf(\" REFERENCES\"));\n              }\n            }\n            if (needsMultiplePrimaryKeys) {\n              primaryKeys.push(attr);\n              if (dataType.includes(\"NOT NULL\")) {\n                dataTypeString = dataType.replace(\" PRIMARY KEY\", \"\");\n              } else {\n                dataTypeString = dataType.replace(\"PRIMARY KEY\", \"NOT NULL\");\n              }\n            }\n          }\n          attrArray.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(dataTypeString));\n        }\n      }\n      var table = this.quoteTable(tableName);\n      var attrStr = attrArray.join(\", \");\n      var pkString = primaryKeys.map(function (pk) {\n        return _this.quoteIdentifier(pk);\n      }).join(\", \");\n      if (options.uniqueKeys) {\n        _.each(options.uniqueKeys, function (columns) {\n          if (columns.customIndex) {\n            attrStr += \", UNIQUE (\".concat(columns.fields.map(function (field) {\n              return _this.quoteIdentifier(field);\n            }).join(\", \"), \")\");\n          }\n        });\n      }\n      if (pkString.length > 0) {\n        attrStr += \", PRIMARY KEY (\".concat(pkString, \")\");\n      }\n      var sql = \"CREATE TABLE IF NOT EXISTS \".concat(table, \" (\").concat(attrStr, \");\");\n      return this.replaceBooleanDefaults(sql);\n    }\n  }, {\n    key: \"booleanValue\",\n    value: function booleanValue(value) {\n      return value ? 1 : 0;\n    }\n  }, {\n    key: \"_checkValidJsonStatement\",\n    value: function _checkValidJsonStatement(stmt) {\n      if (typeof stmt !== \"string\") {\n        return false;\n      }\n      var jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n      var tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n      var currentIndex = 0;\n      var openingBrackets = 0;\n      var closingBrackets = 0;\n      var hasJsonFunction = false;\n      var hasInvalidToken = false;\n      while (currentIndex < stmt.length) {\n        var string = stmt.substr(currentIndex);\n        var functionMatches = jsonFunctionRegex.exec(string);\n        if (functionMatches) {\n          currentIndex += functionMatches[0].indexOf(\"(\");\n          hasJsonFunction = true;\n          continue;\n        }\n        var tokenMatches = tokenCaptureRegex.exec(string);\n        if (tokenMatches) {\n          var capturedToken = tokenMatches[1];\n          if (capturedToken === \"(\") {\n            openingBrackets++;\n          } else if (capturedToken === \")\") {\n            closingBrackets++;\n          } else if (capturedToken === \";\") {\n            hasInvalidToken = true;\n            break;\n          }\n          currentIndex += tokenMatches[0].length;\n          continue;\n        }\n        break;\n      }\n      hasInvalidToken |= openingBrackets !== closingBrackets;\n      if (hasJsonFunction && hasInvalidToken) {\n        throw new Error(\"Invalid json statement: \".concat(stmt));\n      }\n      return hasJsonFunction;\n    }\n  }, {\n    key: \"_toJSONValue\",\n    value: function _toJSONValue(value) {\n      if (value instanceof Date) {\n        return value.toISOString();\n      }\n      if (Array.isArray(value) && value[0] instanceof Date) {\n        return value.map(function (val) {\n          return val.toISOString();\n        });\n      }\n      return value;\n    }\n  }, {\n    key: \"handleSequelizeMethod\",\n    value: function handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n      if (smth instanceof Utils.Json) {\n        return _get(_getPrototypeOf(SQLiteQueryGenerator.prototype), \"handleSequelizeMethod\", this).call(this, smth, tableName, factory, options, prepend);\n      }\n      if (smth instanceof Utils.Cast) {\n        if (/timestamp/i.test(smth.type)) {\n          smth.type = \"datetime\";\n        }\n      }\n      return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n    }\n  }, {\n    key: \"addColumnQuery\",\n    value: function addColumnQuery(table, key, dataType) {\n      var attributes = {};\n      attributes[key] = dataType;\n      var fields = this.attributesToSQL(attributes, {\n        context: \"addColumn\"\n      });\n      var attribute = \"\".concat(this.quoteIdentifier(key), \" \").concat(fields[key]);\n      var sql = \"ALTER TABLE \".concat(this.quoteTable(table), \" ADD \").concat(attribute, \";\");\n      return this.replaceBooleanDefaults(sql);\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery() {\n      return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery(tableName, attrValueHash, where, options, attributes) {\n      options = options || {};\n      _.defaults(options, this.options);\n      attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n      var modelAttributeMap = {};\n      var values = [];\n      var bind = [];\n      var bindParam = options.bindParam || this.bindParam(bind);\n      if (attributes) {\n        _.each(attributes, function (attribute, key) {\n          modelAttributeMap[key] = attribute;\n          if (attribute.field) {\n            modelAttributeMap[attribute.field] = attribute;\n          }\n        });\n      }\n      for (var key in attrValueHash) {\n        var value = attrValueHash[key];\n        if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n          values.push(\"\".concat(this.quoteIdentifier(key), \"=\").concat(this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n            context: \"UPDATE\"\n          })));\n        } else {\n          values.push(\"\".concat(this.quoteIdentifier(key), \"=\").concat(this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n            context: \"UPDATE\"\n          }, bindParam)));\n        }\n      }\n      var query;\n      var whereOptions = __spreadProps(__spreadValues({}, options), {\n        bindParam: bindParam\n      });\n      if (options.limit) {\n        query = \"UPDATE \".concat(this.quoteTable(tableName), \" SET \").concat(values.join(\",\"), \" WHERE rowid IN (SELECT rowid FROM \").concat(this.quoteTable(tableName), \" \").concat(this.whereQuery(where, whereOptions), \" LIMIT \").concat(this.escape(options.limit), \")\");\n      } else {\n        query = \"UPDATE \".concat(this.quoteTable(tableName), \" SET \").concat(values.join(\",\"), \" \").concat(this.whereQuery(where, whereOptions));\n      }\n      return {\n        query: query,\n        bind: bind\n      };\n    }\n  }, {\n    key: \"truncateTableQuery\",\n    value: function truncateTableQuery(tableName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return [\"DELETE FROM \".concat(this.quoteTable(tableName)), options.restartIdentity ? \"; DELETE FROM \".concat(this.quoteTable(\"sqlite_sequence\"), \" WHERE \").concat(this.quoteIdentifier(\"name\"), \" = \").concat(Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), \"`\"), \"'\"), \";\") : \"\"].join(\"\");\n    }\n  }, {\n    key: \"deleteQuery\",\n    value: function deleteQuery(tableName, where) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var model = arguments.length > 3 ? arguments[3] : undefined;\n      _.defaults(options, this.options);\n      var whereClause = this.getWhereConditions(where, null, model, options);\n      if (whereClause) {\n        whereClause = \"WHERE \".concat(whereClause);\n      }\n      if (options.limit) {\n        whereClause = \"WHERE rowid IN (SELECT rowid FROM \".concat(this.quoteTable(tableName), \" \").concat(whereClause, \" LIMIT \").concat(this.escape(options.limit), \")\");\n      }\n      return \"DELETE FROM \".concat(this.quoteTable(tableName), \" \").concat(whereClause);\n    }\n  }, {\n    key: \"attributesToSQL\",\n    value: function attributesToSQL(attributes) {\n      var result = {};\n      for (var name in attributes) {\n        var dataType = attributes[name];\n        var fieldName = dataType.field || name;\n        if (_.isObject(dataType)) {\n          var sql = dataType.type.toString();\n          if (Object.prototype.hasOwnProperty.call(dataType, \"allowNull\") && !dataType.allowNull) {\n            sql += \" NOT NULL\";\n          }\n          if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n            sql += \" DEFAULT \".concat(this.escape(dataType.defaultValue, dataType));\n          }\n          if (dataType.unique === true) {\n            sql += \" UNIQUE\";\n          }\n          if (dataType.primaryKey) {\n            sql += \" PRIMARY KEY\";\n            if (dataType.autoIncrement) {\n              sql += \" AUTOINCREMENT\";\n            }\n          }\n          if (dataType.references) {\n            var referencesTable = this.quoteTable(dataType.references.model);\n            var referencesKey = void 0;\n            if (dataType.references.key) {\n              referencesKey = this.quoteIdentifier(dataType.references.key);\n            } else {\n              referencesKey = this.quoteIdentifier(\"id\");\n            }\n            sql += \" REFERENCES \".concat(referencesTable, \" (\").concat(referencesKey, \")\");\n            if (dataType.onDelete) {\n              sql += \" ON DELETE \".concat(dataType.onDelete.toUpperCase());\n            }\n            if (dataType.onUpdate) {\n              sql += \" ON UPDATE \".concat(dataType.onUpdate.toUpperCase());\n            }\n          }\n          result[fieldName] = sql;\n        } else {\n          result[fieldName] = dataType;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"showIndexesQuery\",\n    value: function showIndexesQuery(tableName) {\n      return \"PRAGMA INDEX_LIST(\".concat(this.quoteTable(tableName), \")\");\n    }\n  }, {\n    key: \"showConstraintsQuery\",\n    value: function showConstraintsQuery(tableName, constraintName) {\n      var sql = \"SELECT sql FROM sqlite_master WHERE tbl_name='\".concat(tableName, \"'\");\n      if (constraintName) {\n        sql += \" AND sql LIKE '%\".concat(constraintName, \"%'\");\n      }\n      return \"\".concat(sql, \";\");\n    }\n  }, {\n    key: \"removeIndexQuery\",\n    value: function removeIndexQuery(tableName, indexNameOrAttributes) {\n      var indexName = indexNameOrAttributes;\n      if (typeof indexName !== \"string\") {\n        indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join(\"_\")));\n      }\n      return \"DROP INDEX IF EXISTS \".concat(this.quoteIdentifier(indexName));\n    }\n  }, {\n    key: \"describeTableQuery\",\n    value: function describeTableQuery(tableName, schema, schemaDelimiter) {\n      var table = {\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter,\n        tableName: tableName\n      };\n      return \"PRAGMA TABLE_INFO(\".concat(this.quoteTable(this.addSchema(table)), \");\");\n    }\n  }, {\n    key: \"describeCreateTableQuery\",\n    value: function describeCreateTableQuery(tableName) {\n      return \"SELECT sql FROM sqlite_master WHERE tbl_name='\".concat(tableName, \"';\");\n    }\n  }, {\n    key: \"removeColumnQuery\",\n    value: function removeColumnQuery(tableName, attributes) {\n      var _this2 = this;\n      attributes = this.attributesToSQL(attributes);\n      var backupTableName;\n      if (typeof tableName === \"object\") {\n        backupTableName = {\n          tableName: \"\".concat(tableName.tableName, \"_backup\"),\n          schema: tableName.schema\n        };\n      } else {\n        backupTableName = \"\".concat(tableName, \"_backup\");\n      }\n      var quotedTableName = this.quoteTable(tableName);\n      var quotedBackupTableName = this.quoteTable(backupTableName);\n      var attributeNames = Object.keys(attributes).map(function (attr) {\n        return _this2.quoteIdentifier(attr);\n      }).join(\", \");\n      return \"\".concat(this.createTableQuery(backupTableName, attributes), \"INSERT INTO \").concat(quotedBackupTableName, \" SELECT \").concat(attributeNames, \" FROM \").concat(quotedTableName, \";DROP TABLE \").concat(quotedTableName, \";\").concat(this.createTableQuery(tableName, attributes), \"INSERT INTO \").concat(quotedTableName, \" SELECT \").concat(attributeNames, \" FROM \").concat(quotedBackupTableName, \";DROP TABLE \").concat(quotedBackupTableName, \";\");\n    }\n  }, {\n    key: \"_alterConstraintQuery\",\n    value: function _alterConstraintQuery(tableName, attributes, createTableSql) {\n      var _this3 = this;\n      var backupTableName;\n      attributes = this.attributesToSQL(attributes);\n      if (typeof tableName === \"object\") {\n        backupTableName = {\n          tableName: \"\".concat(tableName.tableName, \"_backup\"),\n          schema: tableName.schema\n        };\n      } else {\n        backupTableName = \"\".concat(tableName, \"_backup\");\n      }\n      var quotedTableName = this.quoteTable(tableName);\n      var quotedBackupTableName = this.quoteTable(backupTableName);\n      var attributeNames = Object.keys(attributes).map(function (attr) {\n        return _this3.quoteIdentifier(attr);\n      }).join(\", \");\n      return \"\".concat(createTableSql.replace(\"CREATE TABLE \".concat(quotedTableName), \"CREATE TABLE \".concat(quotedBackupTableName)).replace(\"CREATE TABLE \".concat(quotedTableName.replace(/`/g, '\"')), \"CREATE TABLE \".concat(quotedBackupTableName)), \"INSERT INTO \").concat(quotedBackupTableName, \" SELECT \").concat(attributeNames, \" FROM \").concat(quotedTableName, \";DROP TABLE \").concat(quotedTableName, \";ALTER TABLE \").concat(quotedBackupTableName, \" RENAME TO \").concat(quotedTableName, \";\");\n    }\n  }, {\n    key: \"renameColumnQuery\",\n    value: function renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n      var _this4 = this;\n      var backupTableName;\n      attributes = this.attributesToSQL(attributes);\n      if (typeof tableName === \"object\") {\n        backupTableName = {\n          tableName: \"\".concat(tableName.tableName, \"_backup\"),\n          schema: tableName.schema\n        };\n      } else {\n        backupTableName = \"\".concat(tableName, \"_backup\");\n      }\n      var quotedTableName = this.quoteTable(tableName);\n      var quotedBackupTableName = this.quoteTable(backupTableName);\n      var attributeNamesImport = Object.keys(attributes).map(function (attr) {\n        return attrNameAfter === attr ? \"\".concat(_this4.quoteIdentifier(attrNameBefore), \" AS \").concat(_this4.quoteIdentifier(attr)) : _this4.quoteIdentifier(attr);\n      }).join(\", \");\n      var attributeNamesExport = Object.keys(attributes).map(function (attr) {\n        return _this4.quoteIdentifier(attr);\n      }).join(\", \");\n      return \"\".concat(this.createTableQuery(backupTableName, attributes), \"INSERT INTO \").concat(quotedBackupTableName, \" SELECT \").concat(attributeNamesImport, \" FROM \").concat(quotedTableName, \";DROP TABLE \").concat(quotedTableName, \";\").concat(this.createTableQuery(tableName, attributes), \"INSERT INTO \").concat(quotedTableName, \" SELECT \").concat(attributeNamesExport, \" FROM \").concat(quotedBackupTableName, \";DROP TABLE \").concat(quotedBackupTableName, \";\");\n    }\n  }, {\n    key: \"startTransactionQuery\",\n    value: function startTransactionQuery(transaction) {\n      if (transaction.parent) {\n        return \"SAVEPOINT \".concat(this.quoteIdentifier(transaction.name), \";\");\n      }\n      return \"BEGIN \".concat(transaction.options.type, \" TRANSACTION;\");\n    }\n  }, {\n    key: \"setIsolationLevelQuery\",\n    value: function setIsolationLevelQuery(value) {\n      switch (value) {\n        case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n          return \"-- SQLite is not able to choose the isolation level REPEATABLE READ.\";\n        case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n          return \"PRAGMA read_uncommitted = ON;\";\n        case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n          return \"PRAGMA read_uncommitted = OFF;\";\n        case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n          return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n        default:\n          throw new Error(\"Unknown isolation level: \".concat(value));\n      }\n    }\n  }, {\n    key: \"replaceBooleanDefaults\",\n    value: function replaceBooleanDefaults(sql) {\n      return sql.replace(/DEFAULT '?false'?/g, \"DEFAULT 0\").replace(/DEFAULT '?true'?/g, \"DEFAULT 1\");\n    }\n  }, {\n    key: \"getForeignKeysQuery\",\n    value: function getForeignKeysQuery(tableName) {\n      return \"PRAGMA foreign_key_list(\".concat(this.quoteTable(this.addSchema(tableName)), \")\");\n    }\n  }, {\n    key: \"tableExistsQuery\",\n    value: function tableExistsQuery(tableName) {\n      return \"SELECT name FROM sqlite_master WHERE type='table' AND name=\".concat(this.escape(this.addSchema(tableName)), \";\");\n    }\n  }, {\n    key: \"quoteIdentifier\",\n    value: function quoteIdentifier(identifier, force) {\n      return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n    }\n  }]);\n  return SQLiteQueryGenerator;\n}(MySqlQueryGenerator);\nmodule.exports = SQLiteQueryGenerator;","map":{"version":3,"names":["Utils","require","Transaction","_","MySqlQueryGenerator","AbstractQueryGenerator","SQLiteQueryGenerator","_MySqlQueryGenerator","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","options","_this","primaryKeys","needsMultiplePrimaryKeys","Object","values","filter","definition","includes","length","attrArray","attr","prototype","hasOwnProperty","call","dataType","containsAutoIncrement","dataTypeString","substr","indexOf","push","replace","concat","quoteIdentifier","table","quoteTable","attrStr","join","pkString","map","pk","uniqueKeys","each","columns","customIndex","fields","field","sql","replaceBooleanDefaults","booleanValue","_checkValidJsonStatement","stmt","jsonFunctionRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","functionMatches","exec","tokenMatches","capturedToken","Error","_toJSONValue","Date","toISOString","Array","isArray","val","handleSequelizeMethod","smth","factory","prepend","Json","_get","_getPrototypeOf","Cast","test","type","addColumnQuery","attributesToSQL","context","attribute","showTablesQuery","updateQuery","attrValueHash","where","defaults","removeNullValuesFromHash","omitNull","modelAttributeMap","bind","bindParam","SequelizeMethod","escape","format","query","whereOptions","__spreadProps","__spreadValues","limit","whereQuery","truncateTableQuery","undefined","restartIdentity","addTicks","removeTicks","deleteQuery","model","whereClause","getWhereConditions","result","name","fieldName","isObject","toString","allowNull","defaultValueSchemable","defaultValue","unique","primaryKey","autoIncrement","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","showIndexesQuery","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","indexName","underscore","describeTableQuery","schema","schemaDelimiter","_schema","_schemaDelimiter","addSchema","describeCreateTableQuery","removeColumnQuery","_this2","backupTableName","quotedTableName","quotedBackupTableName","attributeNames","keys","_alterConstraintQuery","createTableSql","_this3","renameColumnQuery","attrNameBefore","attrNameAfter","_this4","attributeNamesImport","attributeNamesExport","startTransactionQuery","transaction","parent","setIsolationLevelQuery","ISOLATION_LEVELS","REPEATABLE_READ","READ_UNCOMMITTED","READ_COMMITTED","SERIALIZABLE","getForeignKeysQuery","tableExistsQuery","identifier","force","module","exports"],"sources":["../../../src/dialects/sqlite/query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {TableName} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n\n  tableExistsQuery(tableName) {\n    return `SELECT name FROM sqlite_master WHERE type='table' AND name=${this.escape(this.addSchema(tableName))};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}