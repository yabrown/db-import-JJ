{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in username-password client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _c.sent();\n            httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              httpVerToken: httpVerToken\n            });\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createTokenQueryParameters(request);\n        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient);\nexport { UsernamePasswordClient };","map":{"version":3,"names":["UsernamePasswordClient","_super","__extends","configuration","call","prototype","acquireToken","request","atsMeasurement","_a","performanceClient","startMeasurement","correlationId","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_c","sent","httpVerToken","_b","headers","HeaderNames","X_MS_HTTP_VERSION","addStaticFields","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["../../src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { Authority } from \"../authority/Authority\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, HeaderNames } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * Oauth2.0 Password grant client\n * Note: We are only supporting public clients for password grant and for purely testing purposes\n */\nexport class UsernamePasswordClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\n     * password_grant\n     * @param request\n     */\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        // @ts-ignore\n        const atsMeasurement = this.performanceClient?.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\n        this.logger.info(\"in acquireToken call in username-password client\");\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\n        atsMeasurement?.addStaticFields({\n            httpVerToken\n        });\n    \n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n\n        return tokenResponse;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\n            credential: request.username,\n            type: CcsCredentialType.UPN\n        });\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\n\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\n            parameterBuilder.addCcsUpn(request.username);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}