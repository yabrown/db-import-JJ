{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n  if (isObject(e)) {\n    var hasName = typeof e.name === \"string\";\n    var hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    var stringified;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return \"Unknown error \".concat(stringified);\n  }\n}","map":{"version":3,"names":["isObject","isError","e","hasName","name","hasMessage","message","getErrorMessage","stringified","JSON","stringify","String","err","concat"],"sources":["../../src/error.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObject } from \"./object\";\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e: unknown): string {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified: string;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err: any) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,QAAQ,QAAQ,UAAU;AAEnC;;;;AAIA,OAAM,SAAUC,OAAOA,CAACC,CAAU;EAChC,IAAIF,QAAQ,CAACE,CAAC,CAAC,EAAE;IACf,IAAMC,OAAO,GAAG,OAAOD,CAAC,CAACE,IAAI,KAAK,QAAQ;IAC1C,IAAMC,UAAU,GAAG,OAAOH,CAAC,CAACI,OAAO,KAAK,QAAQ;IAChD,OAAOH,OAAO,IAAIE,UAAU;;EAE9B,OAAO,KAAK;AACd;AAEA;;;;;;AAMA,OAAM,SAAUE,eAAeA,CAACL,CAAU;EACxC,IAAID,OAAO,CAACC,CAAC,CAAC,EAAE;IACd,OAAOA,CAAC,CAACI,OAAO;GACjB,MAAM;IACL,IAAIE,WAAmB;IACvB,IAAI;MACF,IAAI,OAAON,CAAC,KAAK,QAAQ,IAAIA,CAAC,EAAE;QAC9BM,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACR,CAAC,CAAC;OAChC,MAAM;QACLM,WAAW,GAAGG,MAAM,CAACT,CAAC,CAAC;;KAE1B,CAAC,OAAOU,GAAQ,EAAE;MACjBJ,WAAW,GAAG,6BAA6B;;IAE7C,wBAAAK,MAAA,CAAwBL,WAAW;;AAEvC"},"metadata":{},"sourceType":"module"}