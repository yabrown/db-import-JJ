{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RegionDiscovery = /** @class */function () {\n  function RegionDiscovery(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3 /*break*/, 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 6,, 7]);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n          case 2:\n            localIMDSVersionResponse = _e.sent();\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            return [4 /*yield*/, this.getCurrentVersion(options)];\n          case 3:\n            currentIMDSVersion = _e.sent();\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2 /*return*/, null];\n            }\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\n          case 4:\n            currentIMDSVersionResponse = _e.sent();\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            _e.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            _e.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2 /*return*/, null];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _e.label = 9;\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n            return [2 /*return*/, autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n          case 2:\n            response = _b.sent();\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2 /*return*/, response.body[\"newest-versions\"][0]];\n            }\n            return [2 /*return*/, null];\n          case 3:\n            _b.sent();\n            return [2 /*return*/, null];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Options for the IMDS endpoint request\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\nexport { RegionDiscovery };","map":{"version":3,"names":["RegionDiscovery","networkInterface","performanceClient","correlationId","prototype","detectRegion","environmentRegion","regionDiscoveryMetadata","_a","addQueueMeasurement","PerformanceEvents","RegionDiscoveryDetectRegion","autodetectedRegionName","options","IMDS_OPTIONS","_b","setPreQueueTime","RegionDiscoveryGetRegionFromIMDS","getRegionFromIMDS","Constants","IMDS_VERSION","localIMDSVersionResponse","_e","sent","status","ResponseCodes","httpSuccess","body","region_source","RegionDiscoverySources","IMDS","httpBadRequest","_c","RegionDiscoveryGetCurrentVersion","getCurrentVersion","currentIMDSVersion","FAILED_AUTO_DETECTION","_d","currentIMDSVersionResponse","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["../../src/authority/RegionDiscovery.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Performance client\n    protected performanceClient: IPerformanceClient | undefined;\n    // CorrelationId\n    protected correlationId: string | undefined;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS: ImdsOptions = {\n        headers: {\n            Metadata: \"true\",\n        },\n    };\n\n    constructor(networkInterface: INetworkModule, performanceClient?: IPerformanceClient, correlationId?: string) {\n        this.networkInterface = networkInterface;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata): Promise<string | null> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        \n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n\n            try {\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                } \n                \n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n                    const currentIMDSVersion = await this.getCurrentVersion(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch(e) {\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            } \n        } else {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string, options: ImdsOptions): Promise<NetworkResponse<string>> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(options: ImdsOptions): Promise<string | null> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}