{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar fs = require('graceful-fs');\nvar log = require('npmlog');\nvar path = require('path');\nfunction parseConfigGypi(config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '');\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '');\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"');\n  return JSON.parse(config);\n}\nfunction getBaseConfigGypi(_x) {\n  return _getBaseConfigGypi.apply(this, arguments);\n}\nfunction _getBaseConfigGypi() {\n  _getBaseConfigGypi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var gyp, nodeDir, shouldReadConfigGypi, baseConfigGypiPath, baseConfigGypi;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          gyp = _ref.gyp, nodeDir = _ref.nodeDir;\n          // try reading $nodeDir/include/node/config.gypi first when:\n          // 1. --dist-url or --nodedir is specified\n          // 2. and --force-process-config is not specified\n          shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config'];\n          if (!(shouldReadConfigGypi && nodeDir)) {\n            _context.next = 14;\n            break;\n          }\n          _context.prev = 3;\n          baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');\n          _context.next = 7;\n          return fs.promises.readFile(baseConfigGypiPath);\n        case 7:\n          baseConfigGypi = _context.sent;\n          return _context.abrupt(\"return\", parseConfigGypi(baseConfigGypi.toString()));\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](3);\n          log.warn('read config.gypi', _context.t0.message);\n        case 14:\n          return _context.abrupt(\"return\", JSON.parse(JSON.stringify(process.config)));\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 11]]);\n  }));\n  return _getBaseConfigGypi.apply(this, arguments);\n}\nfunction getCurrentConfigGypi(_x2) {\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\nfunction _getCurrentConfigGypi() {\n  _getCurrentConfigGypi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n    var gyp, nodeDir, vsInfo, config, defaults, variables;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          gyp = _ref2.gyp, nodeDir = _ref2.nodeDir, vsInfo = _ref2.vsInfo;\n          _context2.next = 3;\n          return getBaseConfigGypi({\n            gyp: gyp,\n            nodeDir: nodeDir\n          });\n        case 3:\n          config = _context2.sent;\n          if (!config.target_defaults) {\n            config.target_defaults = {};\n          }\n          if (!config.variables) {\n            config.variables = {};\n          }\n          defaults = config.target_defaults;\n          variables = config.variables; // don't inherit the \"defaults\" from the base config.gypi.\n          // doing so could cause problems in cases where the `node` executable was\n          // compiled on a different machine (with different lib/include paths) than\n          // the machine where the addon is being built to\n          defaults.cflags = [];\n          defaults.defines = [];\n          defaults.include_dirs = [];\n          defaults.libraries = [];\n\n          // set the default_configuration prop\n          if ('debug' in gyp.opts) {\n            defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n          }\n          if (!defaults.default_configuration) {\n            defaults.default_configuration = 'Release';\n          }\n\n          // set the target_arch variable\n          variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n          if (variables.target_arch === 'arm64') {\n            defaults.msvs_configuration_platform = 'ARM64';\n            defaults.xcode_configuration_platform = 'arm64';\n          }\n\n          // set the node development directory\n          variables.nodedir = nodeDir;\n\n          // disable -T \"thin\" static archives by default\n          variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n          if (process.platform === 'win32') {\n            defaults.msbuild_toolset = vsInfo.toolset;\n            if (vsInfo.sdk) {\n              defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n            }\n            if (variables.target_arch === 'arm64') {\n              if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n                defaults.msvs_enable_marmasm = 1;\n              } else {\n                log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n              }\n            }\n            variables.msbuild_path = vsInfo.msBuild;\n          }\n\n          // loop through the rest of the opts and add the unknown ones as variables.\n          // this allows for module-specific configure flags like:\n          //\n          //   $ node-gyp configure --shared-libxml2\n          Object.keys(gyp.opts).forEach(function (opt) {\n            if (opt === 'argv') {\n              return;\n            }\n            if (opt in gyp.configDefs) {\n              return;\n            }\n            variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n          });\n          return _context2.abrupt(\"return\", config);\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\nfunction createConfigGypi(_x3) {\n  return _createConfigGypi.apply(this, arguments);\n}\nfunction _createConfigGypi() {\n  _createConfigGypi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref3) {\n    var gyp, buildDir, nodeDir, vsInfo, configFilename, configPath, config, boolsToString, prefix, json;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          boolsToString = function _boolsToString(k, v) {\n            if (typeof v === 'boolean') {\n              return String(v);\n            }\n            return v;\n          };\n          gyp = _ref3.gyp, buildDir = _ref3.buildDir, nodeDir = _ref3.nodeDir, vsInfo = _ref3.vsInfo;\n          configFilename = 'config.gypi';\n          configPath = path.resolve(buildDir, configFilename);\n          log.verbose('build/' + configFilename, 'creating config file');\n          _context3.next = 7;\n          return getCurrentConfigGypi({\n            gyp: gyp,\n            nodeDir: nodeDir,\n            vsInfo: vsInfo\n          });\n        case 7:\n          config = _context3.sent;\n          log.silly('build/' + configFilename, config);\n\n          // now write out the config.gypi file to the build/ dir\n          prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n          json = JSON.stringify(config, boolsToString, 2);\n          log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n          _context3.next = 14;\n          return fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'));\n        case 14:\n          return _context3.abrupt(\"return\", configPath);\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _createConfigGypi.apply(this, arguments);\n}\nmodule.exports = createConfigGypi;\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n};","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","fs","log","path","parseConfigGypi","config","replace","JSON","parse","getBaseConfigGypi","_x","_getBaseConfigGypi","apply","arguments","mark","_callee","_ref","gyp","nodeDir","shouldReadConfigGypi","baseConfigGypiPath","baseConfigGypi","wrap","_callee$","_context","prev","next","opts","nodedir","resolve","promises","readFile","sent","abrupt","toString","t0","warn","message","stringify","process","stop","getCurrentConfigGypi","_x2","_getCurrentConfigGypi","_callee2","_ref2","vsInfo","defaults","variables","_callee2$","_context2","target_defaults","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","msvs_configuration_platform","xcode_configuration_platform","standalone_static_library","thin","platform","msbuild_toolset","toolset","sdk","msvs_windows_target_platform_version","versionMajor","msvs_enable_marmasm","msbuild_path","msBuild","Object","keys","forEach","opt","configDefs","createConfigGypi","_x3","_createConfigGypi","_callee3","_ref3","buildDir","configFilename","configPath","boolsToString","prefix","json","_callee3$","_context3","_boolsToString","k","v","String","verbose","silly","writeFile","join","module","exports","test"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/node-gyp/lib/create-config-gypi.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst log = require('npmlog')\nconst path = require('path')\n\nfunction parseConfigGypi (config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '')\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '')\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"')\n  return JSON.parse(config)\n}\n\nasync function getBaseConfigGypi ({ gyp, nodeDir }) {\n  // try reading $nodeDir/include/node/config.gypi first when:\n  // 1. --dist-url or --nodedir is specified\n  // 2. and --force-process-config is not specified\n  const shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config']\n  if (shouldReadConfigGypi && nodeDir) {\n    try {\n      const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi')\n      const baseConfigGypi = await fs.promises.readFile(baseConfigGypiPath)\n      return parseConfigGypi(baseConfigGypi.toString())\n    } catch (err) {\n      log.warn('read config.gypi', err.message)\n    }\n  }\n\n  // fallback to process.config if it is invalid\n  return JSON.parse(JSON.stringify(process.config))\n}\n\nasync function getCurrentConfigGypi ({ gyp, nodeDir, vsInfo }) {\n  const config = await getBaseConfigGypi({ gyp, nodeDir })\n  if (!config.target_defaults) {\n    config.target_defaults = {}\n  }\n  if (!config.variables) {\n    config.variables = {}\n  }\n\n  const defaults = config.target_defaults\n  const variables = config.variables\n\n  // don't inherit the \"defaults\" from the base config.gypi.\n  // doing so could cause problems in cases where the `node` executable was\n  // compiled on a different machine (with different lib/include paths) than\n  // the machine where the addon is being built to\n  defaults.cflags = []\n  defaults.defines = []\n  defaults.include_dirs = []\n  defaults.libraries = []\n\n  // set the default_configuration prop\n  if ('debug' in gyp.opts) {\n    defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n  }\n\n  if (!defaults.default_configuration) {\n    defaults.default_configuration = 'Release'\n  }\n\n  // set the target_arch variable\n  variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n  if (variables.target_arch === 'arm64') {\n    defaults.msvs_configuration_platform = 'ARM64'\n    defaults.xcode_configuration_platform = 'arm64'\n  }\n\n  // set the node development directory\n  variables.nodedir = nodeDir\n\n  // disable -T \"thin\" static archives by default\n  variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n  if (process.platform === 'win32') {\n    defaults.msbuild_toolset = vsInfo.toolset\n    if (vsInfo.sdk) {\n      defaults.msvs_windows_target_platform_version = vsInfo.sdk\n    }\n    if (variables.target_arch === 'arm64') {\n      if (vsInfo.versionMajor > 15 ||\n          (vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9)) {\n        defaults.msvs_enable_marmasm = 1\n      } else {\n        log.warn('Compiling ARM64 assembly is only available in\\n' +\n          'Visual Studio 2017 version 15.9 and above')\n      }\n    }\n    variables.msbuild_path = vsInfo.msBuild\n  }\n\n  // loop through the rest of the opts and add the unknown ones as variables.\n  // this allows for module-specific configure flags like:\n  //\n  //   $ node-gyp configure --shared-libxml2\n  Object.keys(gyp.opts).forEach(function (opt) {\n    if (opt === 'argv') {\n      return\n    }\n    if (opt in gyp.configDefs) {\n      return\n    }\n    variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n  })\n\n  return config\n}\n\nasync function createConfigGypi ({ gyp, buildDir, nodeDir, vsInfo }) {\n  const configFilename = 'config.gypi'\n  const configPath = path.resolve(buildDir, configFilename)\n\n  log.verbose('build/' + configFilename, 'creating config file')\n\n  const config = await getCurrentConfigGypi({ gyp, nodeDir, vsInfo })\n\n  // ensures that any boolean values in config.gypi get stringified\n  function boolsToString (k, v) {\n    if (typeof v === 'boolean') {\n      return String(v)\n    }\n    return v\n  }\n\n  log.silly('build/' + configFilename, config)\n\n  // now write out the config.gypi file to the build/ dir\n  const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n\n  const json = JSON.stringify(config, boolsToString, 2)\n  log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n  await fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'))\n\n  return configPath\n}\n\nmodule.exports = createConfigGypi\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}