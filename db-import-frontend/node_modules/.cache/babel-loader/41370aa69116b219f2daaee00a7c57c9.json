{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar fs = require('../fs.js');\nvar getOptions = require('../common/get-options.js');\nvar node = require('../common/node.js');\nvar polyfill = require('./polyfill.js');\n\n// node 14.14.0 added fs.rm, which allows both the force and recursive options\nvar useNative = node.satisfies('>=14.14.0');\nvar rm = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, opts) {\n    var options;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = getOptions(opts, {\n            copy: ['retryDelay', 'maxRetries', 'recursive', 'force']\n          }); // the polyfill is tested separately from this module, no need to hack\n          // process.version to try to trigger it just for coverage\n          // istanbul ignore next\n          return _context.abrupt(\"return\", useNative ? fs.rm(path, options) : polyfill(path, options));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function rm(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = rm;","map":{"version":3,"names":["fs","require","getOptions","node","polyfill","useNative","satisfies","rm","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","opts","options","wrap","_callee$","_context","prev","next","copy","abrupt","stop","_x","_x2","apply","arguments","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/@npmcli/fs/lib/rm/index.js"],"sourcesContent":["const fs = require('../fs.js')\nconst getOptions = require('../common/get-options.js')\nconst node = require('../common/node.js')\nconst polyfill = require('./polyfill.js')\n\n// node 14.14.0 added fs.rm, which allows both the force and recursive options\nconst useNative = node.satisfies('>=14.14.0')\n\nconst rm = async (path, opts) => {\n  const options = getOptions(opts, {\n    copy: ['retryDelay', 'maxRetries', 'recursive', 'force'],\n  })\n\n  // the polyfill is tested separately from this module, no need to hack\n  // process.version to try to trigger it just for coverage\n  // istanbul ignore next\n  return useNative\n    ? fs.rm(path, options)\n    : polyfill(path, options)\n}\n\nmodule.exports = rm\n"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC9B,IAAMC,UAAU,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACtD,IAAME,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACzC,IAAMG,QAAQ,GAAGH,OAAO,CAAC,eAAe,CAAC;;AAEzC;AACA,IAAMI,SAAS,GAAGF,IAAI,CAACG,SAAS,CAAC,WAAW,CAAC;AAE7C,IAAMC,EAAE;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,IAAI,EAAEC,IAAI;IAAA,IAAAC,OAAA;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACpBL,OAAO,GAAGb,UAAU,CAACY,IAAI,EAAE;YAC/BO,IAAI,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,OAAO;UACzD,CAAC,CAAC,EAEF;UACA;UACA;UAAA,OAAAH,QAAA,CAAAI,MAAA,WACOjB,SAAS,GACZL,EAAE,CAACO,EAAE,CAACM,IAAI,EAAEE,OAAO,CAAC,GACpBX,QAAQ,CAACS,IAAI,EAAEE,OAAO,CAAC;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAK,IAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,CAC5B;EAAA,gBAXKL,EAAEA,CAAAiB,EAAA,EAAAC,GAAA;IAAA,OAAAjB,IAAA,CAAAkB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAWP;AAEDC,MAAM,CAACC,OAAO,GAAGtB,EAAE"},"metadata":{},"sourceType":"script"}