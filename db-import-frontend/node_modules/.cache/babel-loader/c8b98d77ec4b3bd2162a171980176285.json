{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar AbstractConnectionManager = require(\"../abstract/connection-manager\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"connection:pg\");\nvar sequelizeErrors = require(\"../../errors\");\nvar semver = require(\"semver\");\nvar dataTypes = require(\"../../data-types\");\nvar momentTz = require(\"moment-timezone\");\nvar _require2 = require(\"util\"),\n  promisify = _require2.promisify;\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n  var _super = _createSuper(ConnectionManager);\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n    _classCallCheck(this, ConnectionManager);\n    sequelize.config.port = sequelize.config.port || 5432;\n    _this = _super.call(this, dialect, sequelize);\n    var pgLib = _this._loadDialectModule(\"pg\");\n    _this.lib = _this.sequelize.config.native ? pgLib.native : pgLib;\n    _this._clearDynamicOIDs();\n    _this._clearTypeParser();\n    _this.refreshTypeParser(dataTypes.postgres);\n    return _this;\n  }\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      var _this2 = this;\n      var arrayParserBuilder = function arrayParserBuilder(parser2) {\n        return function (value) {\n          return _this2.lib.types.arrayParser.create(value, parser2).parse();\n        };\n      };\n      var rangeParserBuilder = function rangeParserBuilder(parser2) {\n        return function (value) {\n          return dataType.parse(value, {\n            parser: parser2\n          });\n        };\n      };\n      if (dataType.key.toLowerCase() === \"range\") {\n        for (var name in this.nameOidMap) {\n          var entry = this.nameOidMap[name];\n          if (!entry.rangeOid) continue;\n          var rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n          var arrayRangeParser = arrayParserBuilder(rangeParser);\n          this.oidParserMap.set(entry.rangeOid, rangeParser);\n          if (!entry.arrayRangeOid) continue;\n          this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n        }\n        return;\n      }\n      var parser = function parser(value) {\n        return dataType.parse(value);\n      };\n      var arrayParser = arrayParserBuilder(parser);\n      if (dataType.key.toLowerCase() === \"enum\") {\n        this.enumOids.oids.forEach(function (oid) {\n          _this2.oidParserMap.set(oid, parser);\n        });\n        this.enumOids.arrayOids.forEach(function (arrayOid) {\n          _this2.oidParserMap.set(arrayOid, arrayParser);\n        });\n        return;\n      }\n      dataType.types.postgres.forEach(function (name) {\n        if (!_this2.nameOidMap[name]) return;\n        _this2.oidParserMap.set(_this2.nameOidMap[name].oid, parser);\n        if (!_this2.nameOidMap[name].arrayOid) return;\n        _this2.oidParserMap.set(_this2.nameOidMap[name].arrayOid, arrayParser);\n      });\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      this.oidParserMap = /* @__PURE__ */new Map();\n    }\n  }, {\n    key: \"getTypeParser\",\n    value: function getTypeParser(oid) {\n      var _this$lib$types;\n      if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return (_this$lib$types = this.lib.types).getTypeParser.apply(_this$lib$types, [oid].concat(args));\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n        var _this3 = this;\n        var connectionConfig, connection, query, clientMinMessages, isZone;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              config.user = config.username;\n              connectionConfig = _.pick(config, [\"user\", \"password\", \"host\", \"database\", \"port\"]);\n              connectionConfig.types = {\n                getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n              };\n              if (config.dialectOptions) {\n                _.merge(connectionConfig, _.pick(config.dialectOptions, [\"application_name\", \"ssl\", \"client_encoding\", \"binary\", \"keepAlive\", \"statement_timeout\", \"query_timeout\", \"idle_in_transaction_session_timeout\", \"lock_timeout\", \"options\"]));\n              }\n              _context.next = 6;\n              return new Promise(function (resolve, reject) {\n                var responded = false;\n                var connection2 = new _this3.lib.Client(connectionConfig);\n                var parameterHandler = function parameterHandler(message) {\n                  switch (message.parameterName) {\n                    case \"server_version\":\n                      if (_this3.sequelize.options.databaseVersion === 0) {\n                        var version = semver.coerce(message.parameterValue).version;\n                        _this3.sequelize.options.databaseVersion = semver.valid(version) ? version : _this3.dialect.defaultVersion;\n                      }\n                      break;\n                    case \"standard_conforming_strings\":\n                      connection2[\"standard_conforming_strings\"] = message.parameterValue;\n                      break;\n                  }\n                };\n                var endHandler = function endHandler() {\n                  debug(\"connection timeout\");\n                  if (!responded) {\n                    reject(new sequelizeErrors.ConnectionTimedOutError(new Error(\"Connection timed out\")));\n                  }\n                };\n                connection2.once(\"end\", endHandler);\n                if (!_this3.sequelize.config.native) {\n                  connection2.connection.on(\"parameterStatus\", parameterHandler);\n                }\n                connection2.connect(function (err) {\n                  responded = true;\n                  if (!_this3.sequelize.config.native) {\n                    connection2.connection.removeListener(\"parameterStatus\", parameterHandler);\n                  }\n                  if (err) {\n                    if (err.code) {\n                      switch (err.code) {\n                        case \"ECONNREFUSED\":\n                          reject(new sequelizeErrors.ConnectionRefusedError(err));\n                          break;\n                        case \"ENOTFOUND\":\n                          reject(new sequelizeErrors.HostNotFoundError(err));\n                          break;\n                        case \"EHOSTUNREACH\":\n                          reject(new sequelizeErrors.HostNotReachableError(err));\n                          break;\n                        case \"EINVAL\":\n                          reject(new sequelizeErrors.InvalidConnectionError(err));\n                          break;\n                        default:\n                          reject(new sequelizeErrors.ConnectionError(err));\n                          break;\n                      }\n                    } else {\n                      reject(new sequelizeErrors.ConnectionError(err));\n                    }\n                  } else {\n                    debug(\"connection acquired\");\n                    connection2.removeListener(\"end\", endHandler);\n                    resolve(connection2);\n                  }\n                });\n              });\n            case 6:\n              connection = _context.sent;\n              connection.on(\"error\", function (error) {\n                connection._invalid = true;\n                debug(\"connection error \".concat(error.code || error.message));\n                _this3.pool.destroy(connection);\n              });\n              query = \"\";\n              if (this.sequelize.options.standardConformingStrings !== false && connection[\"standard_conforming_strings\"] !== \"on\") {\n                query += \"SET standard_conforming_strings=on;\";\n              }\n              if (this.sequelize.options.clientMinMessages !== void 0) {\n                console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n                console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n              }\n              if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === \"ignore\" || this.sequelize.options.clientMinMessages === false)) {\n                clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || \"warning\";\n                query += \"SET client_min_messages TO \".concat(clientMinMessages, \";\");\n              }\n              if (!this.sequelize.config.keepDefaultTimezone) {\n                isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n                if (isZone) {\n                  query += \"SET TIME ZONE '\".concat(this.sequelize.options.timezone, \"';\");\n                } else {\n                  query += \"SET TIME ZONE INTERVAL '\".concat(this.sequelize.options.timezone, \"' HOUR TO MINUTE;\");\n                }\n              }\n              if (!query) {\n                _context.next = 16;\n                break;\n              }\n              _context.next = 16;\n              return connection.query(query);\n            case 16:\n              if (!(Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0)) {\n                _context.next = 19;\n                break;\n              }\n              _context.next = 19;\n              return this._refreshDynamicOIDs(connection);\n            case 19:\n              return _context.abrupt(\"return\", connection);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!connection._ending) {\n                _context2.next = 3;\n                break;\n              }\n              debug(\"connection tried to disconnect but was already at ENDING state\");\n              return _context2.abrupt(\"return\");\n            case 3:\n              _context2.next = 5;\n              return promisify(function (callback) {\n                return connection.end(callback);\n              })();\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return !connection._invalid && !connection._ending;\n    }\n  }, {\n    key: \"_refreshDynamicOIDs\",\n    value: function () {\n      var _refreshDynamicOIDs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connection) {\n        var databaseVersion, supportedVersion, results, result, newNameOidMap, newEnumOids, _iterator, _step, row;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              databaseVersion = this.sequelize.options.databaseVersion;\n              supportedVersion = \"8.3.0\";\n              if (!((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false)) {\n                _context3.next = 4;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.next = 6;\n              return (connection || this.sequelize).query(\"WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));\");\n            case 6:\n              results = _context3.sent;\n              result = Array.isArray(results) ? results.pop() : results;\n              if (Array.isArray(result)) {\n                if (result[0].command === \"SET\") {\n                  result = result.pop();\n                }\n              }\n              newNameOidMap = {};\n              newEnumOids = {\n                oids: [],\n                arrayOids: []\n              };\n              _iterator = _createForOfIteratorHelper(result.rows);\n              _context3.prev = 12;\n              _iterator.s();\n            case 14:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 25;\n                break;\n              }\n              row = _step.value;\n              if (!(row.typtype === \"e\")) {\n                _context3.next = 20;\n                break;\n              }\n              newEnumOids.oids.push(row.oid);\n              if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n              return _context3.abrupt(\"continue\", 23);\n            case 20:\n              newNameOidMap[row.typname] = {\n                oid: row.oid\n              };\n              if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n              if (row.rngtypid) {\n                newNameOidMap[row.typname].rangeOid = row.rngtypid;\n                if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n              }\n            case 23:\n              _context3.next = 14;\n              break;\n            case 25:\n              _context3.next = 30;\n              break;\n            case 27:\n              _context3.prev = 27;\n              _context3.t0 = _context3[\"catch\"](12);\n              _iterator.e(_context3.t0);\n            case 30:\n              _context3.prev = 30;\n              _iterator.f();\n              return _context3.finish(30);\n            case 33:\n              this.nameOidMap = newNameOidMap;\n              this.enumOids = newEnumOids;\n              this.refreshTypeParser(dataTypes.postgres);\n            case 36:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[12, 27, 30, 33]]);\n      }));\n      function _refreshDynamicOIDs(_x3) {\n        return _refreshDynamicOIDs2.apply(this, arguments);\n      }\n      return _refreshDynamicOIDs;\n    }()\n  }, {\n    key: \"_clearDynamicOIDs\",\n    value: function _clearDynamicOIDs() {\n      this.nameOidMap = {};\n      this.enumOids = {\n        oids: [],\n        arrayOids: []\n      };\n    }\n  }]);\n  return ConnectionManager;\n}(AbstractConnectionManager);\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["_","require","AbstractConnectionManager","_require","logger","debug","debugContext","sequelizeErrors","semver","dataTypes","momentTz","_require2","promisify","ConnectionManager","_AbstractConnectionMa","_inherits","_super","_createSuper","dialect","sequelize","_this","_classCallCheck","config","port","call","pgLib","_loadDialectModule","lib","native","_clearDynamicOIDs","_clearTypeParser","refreshTypeParser","postgres","_createClass","key","value","_refreshTypeParser","dataType","_this2","arrayParserBuilder","parser2","types","arrayParser","create","parse","rangeParserBuilder","parser","toLowerCase","name","nameOidMap","entry","rangeOid","rangeParser","getTypeParser","oid","arrayRangeParser","oidParserMap","set","arrayRangeOid","enumOids","oids","forEach","arrayOids","arrayOid","Map","_this$lib$types","get","_len","arguments","length","args","Array","_key","apply","concat","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","connectionConfig","connection","query","clientMinMessages","isZone","wrap","_callee$","_context","prev","next","user","username","pick","prototype","bind","dialectOptions","merge","Promise","resolve","reject","responded","connection2","Client","parameterHandler","message","parameterName","options","databaseVersion","version","coerce","parameterValue","valid","defaultVersion","endHandler","ConnectionTimedOutError","Error","once","on","connect","err","removeListener","code","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","sent","error","_invalid","pool","destroy","standardConformingStrings","console","warn","keepDefaultTimezone","tz","zone","timezone","Object","keys","_refreshDynamicOIDs","abrupt","stop","_x","_disconnect","_callee2","_callee2$","_context2","_ending","callback","end","disconnect","_x2","validate","_refreshDynamicOIDs2","_callee3","supportedVersion","results","result","newNameOidMap","newEnumOids","_iterator","_step","row","_callee3$","_context3","gte","isArray","pop","command","_createForOfIteratorHelper","rows","s","n","done","typtype","push","typarray","typname","rngtypid","rngtyparray","t0","e","f","finish","_x3","module","exports","default"],"sources":["../../../src/dialects/postgres/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n          'lock_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}