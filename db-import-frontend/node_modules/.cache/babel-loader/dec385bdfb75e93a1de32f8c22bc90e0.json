{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar sequelizeErrors = require(\"../../errors\");\nvar QueryTypes = require(\"../../query-types\");\nvar _require = require(\"../abstract/query-interface\"),\n  QueryInterface = _require.QueryInterface;\nvar _require2 = require(\"../../utils\"),\n  cloneDeep = _require2.cloneDeep;\nvar _ = require(\"lodash\");\nvar SQLiteQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(SQLiteQueryInterface, _QueryInterface);\n  var _super = _createSuper(SQLiteQueryInterface);\n  function SQLiteQueryInterface() {\n    _classCallCheck(this, SQLiteQueryInterface);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SQLiteQueryInterface, [{\n    key: \"removeColumn\",\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tableName, attributeName, options) {\n        var fields, sql, subQueries, _iterator2, _step2, subQuery;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              _context.next = 3;\n              return this.describeTable(tableName, options);\n            case 3:\n              fields = _context.sent;\n              delete fields[attributeName];\n              sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n              subQueries = sql.split(\";\").filter(function (q) {\n                return q !== \"\";\n              });\n              _iterator2 = _createForOfIteratorHelper(subQueries);\n              _context.prev = 8;\n              _iterator2.s();\n            case 10:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 16;\n                break;\n              }\n              subQuery = _step2.value;\n              _context.next = 14;\n              return this.sequelize.query(\"\".concat(subQuery, \";\"), __spreadValues({\n                raw: true\n              }, options));\n            case 14:\n              _context.next = 10;\n              break;\n            case 16:\n              _context.next = 21;\n              break;\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](8);\n              _iterator2.e(_context.t0);\n            case 21:\n              _context.prev = 21;\n              _iterator2.f();\n              return _context.finish(21);\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[8, 18, 21, 24]]);\n      }));\n      function removeColumn(_x, _x2, _x3) {\n        return _removeColumn.apply(this, arguments);\n      }\n      return removeColumn;\n    }()\n  }, {\n    key: \"changeColumn\",\n    value: function () {\n      var _changeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tableName, attributeName, dataTypeOrOptions, options) {\n        var fields, sql, subQueries, _iterator3, _step3, subQuery;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n              _context2.next = 3;\n              return this.describeTable(tableName, options);\n            case 3:\n              fields = _context2.sent;\n              Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n              sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n              subQueries = sql.split(\";\").filter(function (q) {\n                return q !== \"\";\n              });\n              _iterator3 = _createForOfIteratorHelper(subQueries);\n              _context2.prev = 8;\n              _iterator3.s();\n            case 10:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 16;\n                break;\n              }\n              subQuery = _step3.value;\n              _context2.next = 14;\n              return this.sequelize.query(\"\".concat(subQuery, \";\"), __spreadValues({\n                raw: true\n              }, options));\n            case 14:\n              _context2.next = 10;\n              break;\n            case 16:\n              _context2.next = 21;\n              break;\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](8);\n              _iterator3.e(_context2.t0);\n            case 21:\n              _context2.prev = 21;\n              _iterator3.f();\n              return _context2.finish(21);\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[8, 18, 21, 24]]);\n      }));\n      function changeColumn(_x4, _x5, _x6, _x7) {\n        return _changeColumn.apply(this, arguments);\n      }\n      return changeColumn;\n    }()\n  }, {\n    key: \"renameColumn\",\n    value: function () {\n      var _renameColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tableName, attrNameBefore, attrNameAfter, options) {\n        var fields, sql, subQueries, _iterator4, _step4, subQuery;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = options || {};\n              _context3.next = 3;\n              return this.assertTableHasColumn(tableName, attrNameBefore, options);\n            case 3:\n              fields = _context3.sent;\n              fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);\n              delete fields[attrNameBefore];\n              sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n              subQueries = sql.split(\";\").filter(function (q) {\n                return q !== \"\";\n              });\n              _iterator4 = _createForOfIteratorHelper(subQueries);\n              _context3.prev = 9;\n              _iterator4.s();\n            case 11:\n              if ((_step4 = _iterator4.n()).done) {\n                _context3.next = 17;\n                break;\n              }\n              subQuery = _step4.value;\n              _context3.next = 15;\n              return this.sequelize.query(\"\".concat(subQuery, \";\"), __spreadValues({\n                raw: true\n              }, options));\n            case 15:\n              _context3.next = 11;\n              break;\n            case 17:\n              _context3.next = 22;\n              break;\n            case 19:\n              _context3.prev = 19;\n              _context3.t0 = _context3[\"catch\"](9);\n              _iterator4.e(_context3.t0);\n            case 22:\n              _context3.prev = 22;\n              _iterator4.f();\n              return _context3.finish(22);\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[9, 19, 22, 25]]);\n      }));\n      function renameColumn(_x8, _x9, _x10, _x11) {\n        return _renameColumn.apply(this, arguments);\n      }\n      return renameColumn;\n    }()\n  }, {\n    key: \"removeConstraint\",\n    value: function () {\n      var _removeConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tableName, constraintName, options) {\n        var _this = this;\n        var createTableSql, constraints, constraint, constraintSnippet, referenceTableName, referenceTableKeys, fields, sql, subQueries, _iterator5, _step5, subQuery;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.showConstraint(tableName, constraintName);\n            case 2:\n              constraints = _context4.sent;\n              constraint = constraints.find(function (constaint) {\n                return constaint.constraintName === constraintName;\n              });\n              if (constraint) {\n                _context4.next = 6;\n                break;\n              }\n              throw new sequelizeErrors.UnknownConstraintError({\n                message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n                constraint: constraintName,\n                table: tableName\n              });\n            case 6:\n              createTableSql = constraint.sql;\n              constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n              constraintSnippet = \", CONSTRAINT \".concat(constraint.constraintName, \" \").concat(constraint.constraintType, \" \").concat(constraint.constraintCondition);\n              if (constraint.constraintType === \"FOREIGN KEY\") {\n                referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n                constraint.referenceTableKeys = constraint.referenceTableKeys.map(function (columnName) {\n                  return _this.queryGenerator.quoteIdentifier(columnName);\n                });\n                referenceTableKeys = constraint.referenceTableKeys.join(\", \");\n                constraintSnippet += \" REFERENCES \".concat(referenceTableName, \" (\").concat(referenceTableKeys, \")\");\n                constraintSnippet += \" ON UPDATE \".concat(constraint.updateAction);\n                constraintSnippet += \" ON DELETE \".concat(constraint.deleteAction);\n              }\n              createTableSql = createTableSql.replace(constraintSnippet, \"\");\n              createTableSql += \";\";\n              _context4.next = 14;\n              return this.describeTable(tableName, options);\n            case 14:\n              fields = _context4.sent;\n              sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n              subQueries = sql.split(\";\").filter(function (q) {\n                return q !== \"\";\n              });\n              _iterator5 = _createForOfIteratorHelper(subQueries);\n              _context4.prev = 18;\n              _iterator5.s();\n            case 20:\n              if ((_step5 = _iterator5.n()).done) {\n                _context4.next = 26;\n                break;\n              }\n              subQuery = _step5.value;\n              _context4.next = 24;\n              return this.sequelize.query(\"\".concat(subQuery, \";\"), __spreadValues({\n                raw: true\n              }, options));\n            case 24:\n              _context4.next = 20;\n              break;\n            case 26:\n              _context4.next = 31;\n              break;\n            case 28:\n              _context4.prev = 28;\n              _context4.t0 = _context4[\"catch\"](18);\n              _iterator5.e(_context4.t0);\n            case 31:\n              _context4.prev = 31;\n              _iterator5.f();\n              return _context4.finish(31);\n            case 34:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[18, 28, 31, 34]]);\n      }));\n      function removeConstraint(_x12, _x13, _x14) {\n        return _removeConstraint.apply(this, arguments);\n      }\n      return removeConstraint;\n    }()\n  }, {\n    key: \"addConstraint\",\n    value: function () {\n      var _addConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tableName, options) {\n        var constraintSnippet, describeCreateTableSql, constraints, sql, index, createTableSql, fields, subQueries, _iterator6, _step6, subQuery;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (options.fields) {\n                _context5.next = 2;\n                break;\n              }\n              throw new Error(\"Fields must be specified through options.fields\");\n            case 2:\n              if (options.type) {\n                _context5.next = 4;\n                break;\n              }\n              throw new Error(\"Constraint type must be specified through options.type\");\n            case 4:\n              options = cloneDeep(options);\n              constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n              describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n              _context5.next = 9;\n              return this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), {\n                type: QueryTypes.SELECT,\n                raw: true\n              }));\n            case 9:\n              constraints = _context5.sent;\n              sql = constraints[0].sql;\n              index = sql.length - 1;\n              createTableSql = \"\".concat(sql.substr(0, index), \", \").concat(constraintSnippet, \")\").concat(sql.substr(index + 1), \";\");\n              _context5.next = 15;\n              return this.describeTable(tableName, options);\n            case 15:\n              fields = _context5.sent;\n              sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n              subQueries = sql.split(\";\").filter(function (q) {\n                return q !== \"\";\n              });\n              _iterator6 = _createForOfIteratorHelper(subQueries);\n              _context5.prev = 19;\n              _iterator6.s();\n            case 21:\n              if ((_step6 = _iterator6.n()).done) {\n                _context5.next = 27;\n                break;\n              }\n              subQuery = _step6.value;\n              _context5.next = 25;\n              return this.sequelize.query(\"\".concat(subQuery, \";\"), __spreadValues({\n                raw: true\n              }, options));\n            case 25:\n              _context5.next = 21;\n              break;\n            case 27:\n              _context5.next = 32;\n              break;\n            case 29:\n              _context5.prev = 29;\n              _context5.t0 = _context5[\"catch\"](19);\n              _iterator6.e(_context5.t0);\n            case 32:\n              _context5.prev = 32;\n              _iterator6.f();\n              return _context5.finish(32);\n            case 35:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[19, 29, 32, 35]]);\n      }));\n      function addConstraint(_x15, _x16) {\n        return _addConstraint.apply(this, arguments);\n      }\n      return addConstraint;\n    }()\n  }, {\n    key: \"getForeignKeyReferencesForTable\",\n    value: function () {\n      var _getForeignKeyReferencesForTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(tableName, options) {\n        var database, query, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              database = this.sequelize.config.database;\n              query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n              _context6.next = 4;\n              return this.sequelize.query(query, options);\n            case 4:\n              result = _context6.sent;\n              return _context6.abrupt(\"return\", result.map(function (row) {\n                return {\n                  tableName: tableName,\n                  columnName: row.from,\n                  referencedTableName: row.table,\n                  referencedColumnName: row.to,\n                  tableCatalog: database,\n                  referencedTableCatalog: database\n                };\n              }));\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getForeignKeyReferencesForTable(_x17, _x18) {\n        return _getForeignKeyReferencesForTable.apply(this, arguments);\n      }\n      return getForeignKeyReferencesForTable;\n    }()\n  }, {\n    key: \"dropAllTables\",\n    value: function () {\n      var _dropAllTables = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {\n        var skip, tableNames;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              options = options || {};\n              skip = options.skip || [];\n              _context7.next = 4;\n              return this.showAllTables(options);\n            case 4:\n              tableNames = _context7.sent;\n              _context7.next = 7;\n              return this.sequelize.query(\"PRAGMA foreign_keys = OFF\", options);\n            case 7:\n              _context7.next = 9;\n              return this._dropAllTables(tableNames, skip, options);\n            case 9:\n              _context7.next = 11;\n              return this.sequelize.query(\"PRAGMA foreign_keys = ON\", options);\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function dropAllTables(_x19) {\n        return _dropAllTables.apply(this, arguments);\n      }\n      return dropAllTables;\n    }()\n  }, {\n    key: \"describeTable\",\n    value: function () {\n      var _describeTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tableName, options) {\n        var schema, schemaDelimiter, sql, sqlIndexes, data, indexes, prop, _iterator7, _step7, index, _iterator9, _step9, field, foreignKeys, _iterator8, _step8, foreignKey;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              schema = null;\n              schemaDelimiter = null;\n              if (typeof options === \"string\") {\n                schema = options;\n              } else if (typeof options === \"object\" && options !== null) {\n                schema = options.schema || null;\n                schemaDelimiter = options.schemaDelimiter || null;\n              }\n              if (typeof tableName === \"object\" && tableName !== null) {\n                schema = tableName.schema;\n                tableName = tableName.tableName;\n              }\n              sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n              options = __spreadProps(__spreadValues({}, options), {\n                type: QueryTypes.DESCRIBE\n              });\n              sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n              _context8.prev = 7;\n              _context8.next = 10;\n              return this.sequelize.query(sql, options);\n            case 10:\n              data = _context8.sent;\n              if (!_.isEmpty(data)) {\n                _context8.next = 13;\n                break;\n              }\n              throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n            case 13:\n              _context8.next = 15;\n              return this.sequelize.query(sqlIndexes, options);\n            case 15:\n              indexes = _context8.sent;\n              for (prop in data) {\n                data[prop].unique = false;\n              }\n              _iterator7 = _createForOfIteratorHelper(indexes);\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  index = _step7.value;\n                  _iterator9 = _createForOfIteratorHelper(index.fields);\n                  try {\n                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                      field = _step9.value;\n                      if (index.unique !== void 0) {\n                        data[field.attribute].unique = index.unique;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator9.e(err);\n                  } finally {\n                    _iterator9.f();\n                  }\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              _context8.next = 21;\n              return this.getForeignKeyReferencesForTable(tableName, options);\n            case 21:\n              foreignKeys = _context8.sent;\n              _iterator8 = _createForOfIteratorHelper(foreignKeys);\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  foreignKey = _step8.value;\n                  data[foreignKey.columnName].references = {\n                    model: foreignKey.referencedTableName,\n                    key: foreignKey.referencedColumnName\n                  };\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              return _context8.abrupt(\"return\", data);\n            case 27:\n              _context8.prev = 27;\n              _context8.t0 = _context8[\"catch\"](7);\n              if (!(_context8.t0.original && _context8.t0.original.code === \"ER_NO_SUCH_TABLE\")) {\n                _context8.next = 31;\n                break;\n              }\n              throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n            case 31:\n              throw _context8.t0;\n            case 32:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[7, 27]]);\n      }));\n      function describeTable(_x20, _x21) {\n        return _describeTable.apply(this, arguments);\n      }\n      return describeTable;\n    }()\n  }]);\n  return SQLiteQueryInterface;\n}(QueryInterface);\nexports.SQLiteQueryInterface = SQLiteQueryInterface;","map":{"version":3,"names":["sequelizeErrors","require","QueryTypes","_require","QueryInterface","_require2","cloneDeep","_","SQLiteQueryInterface","_QueryInterface","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_removeColumn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tableName","attributeName","options","fields","sql","subQueries","_iterator2","_step2","subQuery","wrap","_callee$","_context","prev","next","describeTable","sent","queryGenerator","removeColumnQuery","split","filter","q","_createForOfIteratorHelper","s","n","done","sequelize","query","concat","__spreadValues","raw","t0","e","f","finish","stop","removeColumn","_x","_x2","_x3","_changeColumn","_callee2","dataTypeOrOptions","_iterator3","_step3","_callee2$","_context2","Object","assign","normalizeAttribute","changeColumn","_x4","_x5","_x6","_x7","_renameColumn","_callee3","attrNameBefore","attrNameAfter","_iterator4","_step4","_callee3$","_context3","assertTableHasColumn","renameColumnQuery","renameColumn","_x8","_x9","_x10","_x11","_removeConstraint","_callee4","constraintName","_this","createTableSql","constraints","constraint","constraintSnippet","referenceTableName","referenceTableKeys","_iterator5","_step5","_callee4$","_context4","showConstraint","find","constaint","UnknownConstraintError","message","table","quoteIdentifier","constraintType","constraintCondition","quoteTable","map","columnName","join","updateAction","deleteAction","replace","_alterConstraintQuery","removeConstraint","_x12","_x13","_x14","_addConstraint","_callee5","describeCreateTableSql","index","_iterator6","_step6","_callee5$","_context5","Error","type","getConstraintSnippet","describeCreateTableQuery","__spreadProps","SELECT","length","substr","addConstraint","_x15","_x16","_getForeignKeyReferencesForTable","_callee6","database","result","_callee6$","_context6","config","getForeignKeysQuery","abrupt","row","from","referencedTableName","referencedColumnName","to","tableCatalog","referencedTableCatalog","getForeignKeyReferencesForTable","_x17","_x18","_dropAllTables","_callee7","skip","tableNames","_callee7$","_context7","showAllTables","dropAllTables","_x19","_describeTable","_callee8","schema","schemaDelimiter","sqlIndexes","data","indexes","prop","_iterator7","_step7","_iterator9","_step9","field","foreignKeys","_iterator8","_step8","foreignKey","_callee8$","_context8","describeTableQuery","DESCRIBE","showIndexesQuery","isEmpty","unique","attribute","err","references","model","original","code","_x20","_x21","exports"],"sources":["../../../src/dialects/sqlite/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}