{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n  var tenantId = options.tenantId || DefaultTenantId;\n  var authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority: authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport var MsalBrowser = /*#__PURE__*/function (_MsalBaseUtilities) {\n  _inherits(MsalBrowser, _MsalBaseUtilities);\n  var _super = _createSuper(MsalBrowser);\n  function MsalBrowser(options) {\n    var _this;\n    _classCallCheck(this, MsalBrowser);\n    _this = _super.call(this, options);\n    _this.logger = options.logger;\n    _this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    _this.clientId = options.clientId;\n    _this.tenantId = resolveTenantId(_this.logger, options.tenantId, options.clientId);\n    _this.authorityHost = options.authorityHost;\n    _this.msalConfig = defaultBrowserMsalConfig(options);\n    _this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n    if (options.authenticationRecord) {\n      _this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: _this.tenantId\n      });\n    }\n    return _this;\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n  _createClass(MsalBrowser, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * Clears MSAL's cache.\n     */\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              (_a = this.app) === null || _a === void 0 ? void 0 : _a.logout();\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n    /**\n     * Attempts to retrieve an authenticated token from MSAL.\n     */\n  }, {\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(scopes) {\n        var _this2 = this;\n        var options,\n          tenantId,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n              if (!options.authority) {\n                options.authority = getAuthority(tenantId, this.authorityHost);\n              }\n              // We ensure that redirection is handled at this point.\n              _context3.next = 5;\n              return this.handleRedirect();\n            case 5:\n              _context3.next = 7;\n              return this.getActiveAccount();\n            case 7:\n              _context3.t0 = !_context3.sent;\n              if (!_context3.t0) {\n                _context3.next = 10;\n                break;\n              }\n              _context3.t0 = !this.disableAutomaticAuthentication;\n            case 10:\n              if (!_context3.t0) {\n                _context3.next = 13;\n                break;\n              }\n              _context3.next = 13;\n              return this.login(scopes);\n            case 13:\n              return _context3.abrupt(\"return\", this.getTokenSilent(scopes).catch(function (err) {\n                if (err.name !== \"AuthenticationRequiredError\") {\n                  throw err;\n                }\n                if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n                  throw new AuthenticationRequiredError({\n                    scopes: scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n                  });\n                }\n                _this2.logger.info(\"Silent authentication failed, falling back to interactive method \".concat(_this2.loginStyle));\n                return _this2.doGetToken(scopes);\n              }));\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getToken(_x) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }]);\n  return MsalBrowser;\n}(MsalBaseUtilities);","map":{"version":3,"names":["DefaultTenantId","resolveTenantId","processMultiTenantRequest","AuthenticationRequiredError","CredentialUnavailableError","MsalBaseUtilities","getAuthority","getKnownAuthorities","defaultBrowserMsalConfig","options","tenantId","authority","authorityHost","auth","clientId","knownAuthorities","redirectUri","self","location","origin","MsalBrowser","_MsalBaseUtilities","_inherits","_super","_createSuper","_this","_classCallCheck","call","logger","loginStyle","msalConfig","disableAutomaticAuthentication","authenticationRecord","account","Object","assign","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","init","apply","arguments","_logout","_callee2","_a","_callee2$","_context2","app","logout","_getToken","_callee3","scopes","_this2","_args3","_callee3$","_context3","length","undefined","handleRedirect","getActiveAccount","t0","sent","login","abrupt","getTokenSilent","catch","err","name","getTokenOptions","message","info","concat","doGetToken","getToken","_x"],"sources":["../../../../src/msal/browserFlows/msalBrowserCommon.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\nimport { AccessToken } from \"@azure/core-auth\";\n\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { BrowserLoginStyle } from \"../../credentials/interactiveBrowserCredentialOptions\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\nimport { MsalFlow, MsalFlowOptions } from \"../flows\";\nimport { AuthenticationRecord } from \"../types\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\n\n/**\n * Union of the constructor parameters that all MSAL flow types take.\n * Some properties might not be used by some flow types.\n */\nexport interface MsalBrowserFlowOptions extends MsalFlowOptions {\n  redirectUri?: string;\n  loginStyle: BrowserLoginStyle;\n  loginHint?: string;\n}\n\n/**\n * The common methods we use to work with the MSAL browser flows.\n * @internal\n */\nexport interface MsalBrowserFlow extends MsalFlow {\n  login(scopes?: string[]): Promise<AuthenticationRecord | undefined>;\n  handleRedirect(): Promise<AuthenticationRecord | undefined>;\n}\n\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(\n  options: MsalBrowserFlowOptions\n): msalBrowser.Configuration {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId!,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin,\n    },\n  };\n}\n\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport abstract class MsalBrowser extends MsalBaseUtilities implements MsalBrowserFlow {\n  protected loginStyle: BrowserLoginStyle;\n  protected clientId: string;\n  protected tenantId: string;\n  protected authorityHost?: string;\n  protected account: AuthenticationRecord | undefined;\n  protected msalConfig: msalBrowser.Configuration;\n  protected disableAutomaticAuthentication?: boolean;\n  protected app?: msalBrowser.PublicClientApplication;\n\n  constructor(options: MsalBrowserFlowOptions) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init(): Promise<void> {\n    // Nothing to do here.\n  }\n\n  /**\n   * Attempts to handle a redirection request the least amount of times possible.\n   */\n  public abstract handleRedirect(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout(): Promise<void> {\n    this.app?.logout();\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public abstract getActiveAccount(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public abstract login(scopes?: string | string[]): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public abstract getTokenSilent(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected abstract doGetToken(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  public async getToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {}\n  ): Promise<AccessToken> {\n    const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch((err) => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options?.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message:\n            \"Automatic authentication has been disabled. You may call the authentication() method.\",\n        });\n      }\n      this.logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`\n      );\n      return this.doGetToken(scopes);\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}