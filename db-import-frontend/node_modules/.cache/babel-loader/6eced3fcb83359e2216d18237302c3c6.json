{"ast":null,"code":"var _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n// hoisted class for cyclic dependency\nvar Range = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Range(range, options) {\n    var _this = this;\n    _classCallCheck(this, Range);\n    options = parseOptions(options);\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease;\n\n    // First, split based on boolean or ||\n    this.raw = range;\n    this.set = range.split('||')\n    // map the range to a 2d array of comparators\n    .map(function (r) {\n      return _this.parseRange(r.trim());\n    })\n    // throw out any comparator lists that are empty\n    // this generally means that it was not a valid range, which is allowed\n    // in loose mode, but will still throw if the WHOLE range is invalid.\n    .filter(function (c) {\n      return c.length;\n    });\n    if (!this.set.length) {\n      throw new TypeError(\"Invalid SemVer Range: \".concat(range));\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      var first = this.set[0];\n      this.set = this.set.filter(function (c) {\n        return !isNullSet(c[0]);\n      });\n      if (this.set.length === 0) {\n        this.set = [first];\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        var _iterator = _createForOfIteratorHelper(this.set),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n            if (c.length === 1 && isAny(c[0])) {\n              this.set = [c];\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    this.format();\n  }\n  _createClass(Range, [{\n    key: \"format\",\n    value: function format() {\n      this.range = this.set.map(function (comps) {\n        return comps.join(' ').trim();\n      }).join('||').trim();\n      return this.range;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.range;\n    }\n  }, {\n    key: \"parseRange\",\n    value: function parseRange(range) {\n      var _this2 = this;\n      range = range.trim();\n\n      // memoize range parsing for performance.\n      // this is a very hot path, and fully deterministic.\n      var memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);\n      var memoKey = memoOpts + ':' + range;\n      var cached = cache.get(memoKey);\n      if (cached) {\n        return cached;\n      }\n      var loose = this.options.loose;\n      // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n      debug('hyphen replace', range);\n      // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n      debug('comparator trim', range);\n\n      // `~ 1.2.3` => `~1.2.3`\n      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n\n      // `^ 1.2.3` => `^1.2.3`\n      range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n\n      // normalize spaces\n      range = range.split(/\\s+/).join(' ');\n\n      // At this point, the range is completely trimmed and\n      // ready to be split into comparators.\n\n      var rangeList = range.split(' ').map(function (comp) {\n        return parseComparator(comp, _this2.options);\n      }).join(' ').split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(function (comp) {\n        return replaceGTE0(comp, _this2.options);\n      });\n      if (loose) {\n        // in loose mode, throw out any that are not valid comparators\n        rangeList = rangeList.filter(function (comp) {\n          debug('loose invalid filter', comp, _this2.options);\n          return !!comp.match(re[t.COMPARATORLOOSE]);\n        });\n      }\n      debug('range list', rangeList);\n\n      // if any comparators are the null set, then replace with JUST null set\n      // if more than one comparator, remove any * comparators\n      // also, don't include the same comparator more than once\n      var rangeMap = new Map();\n      var comparators = rangeList.map(function (comp) {\n        return new Comparator(comp, _this2.options);\n      });\n      var _iterator2 = _createForOfIteratorHelper(comparators),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var comp = _step2.value;\n          if (isNullSet(comp)) {\n            return [comp];\n          }\n          rangeMap.set(comp.value, comp);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (rangeMap.size > 1 && rangeMap.has('')) {\n        rangeMap.delete('');\n      }\n      var result = _toConsumableArray(rangeMap.values());\n      cache.set(memoKey, result);\n      return result;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range, options) {\n      if (!(range instanceof Range)) {\n        throw new TypeError('a Range is required');\n      }\n      return this.set.some(function (thisComparators) {\n        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options);\n            });\n          });\n        });\n      });\n    }\n\n    // if ANY of the sets match ALL of its comparators, then pass\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      if (!version) {\n        return false;\n      }\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n      for (var i = 0; i < this.set.length; i++) {\n        if (testSet(this.set[i], version, this.options)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }]);\n  return Range;\n}();\nmodule.exports = Range;\nvar LRU = require('lru-cache');\nvar cache = new LRU({\n  max: 1000\n});\nvar parseOptions = require('../internal/parse-options');\nvar Comparator = require('./comparator');\nvar debug = require('../internal/debug');\nvar SemVer = require('./semver');\nvar _require = require('../internal/re'),\n  re = _require.re,\n  t = _require.t,\n  comparatorTrimReplace = _require.comparatorTrimReplace,\n  tildeTrimReplace = _require.tildeTrimReplace,\n  caretTrimReplace = _require.caretTrimReplace;\nvar _require2 = require('../internal/constants'),\n  FLAG_INCLUDE_PRERELEASE = _require2.FLAG_INCLUDE_PRERELEASE,\n  FLAG_LOOSE = _require2.FLAG_LOOSE;\nvar isNullSet = function isNullSet(c) {\n  return c.value === '<0.0.0-0';\n};\nvar isAny = function isAny(c) {\n  return c.value === '';\n};\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nvar isSatisfiable = function isSatisfiable(comparators, options) {\n  var result = true;\n  var remainingComparators = comparators.slice();\n  var testComparator = remainingComparators.pop();\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n  return result;\n};\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nvar parseComparator = function parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\nvar isX = function isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n};\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nvar replaceTildes = function replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (c) {\n    return replaceTilde(c, options);\n  }).join(' ');\n};\nvar replaceTilde = function replaceTilde(comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0 <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".0 <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n    debug('tilde return', ret);\n    return ret;\n  });\n};\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nvar replaceCarets = function replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (c) {\n    return replaceCaret(c, options);\n  }).join(' ');\n};\nvar replaceCaret = function replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  var z = options.includePrerelease ? '-0' : '';\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    }\n    debug('caret return', ret);\n    return ret;\n  });\n};\nvar replaceXRanges = function replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function (c) {\n    return replaceXRange(c, options);\n  }).join(' ');\n};\nvar replaceXRange = function replaceXRange(comp, options) {\n  comp = comp.trim();\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : '';\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n      p = 0;\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n      if (gtlt === '<') {\n        pr = '-0';\n      }\n      ret = \"\".concat(gtlt + M, \".\").concat(m, \".\").concat(p).concat(pr);\n    } else if (xm) {\n      ret = \">=\".concat(M, \".0.0\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (xp) {\n      ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n    debug('xRange return', ret);\n    return ret;\n  });\n};\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nvar replaceStars = function replaceStars(comp, options) {\n  debug('replaceStars', comp, options);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '');\n};\nvar replaceGTE0 = function replaceGTE0(comp, options) {\n  debug('replaceGTE0', comp, options);\n  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');\n};\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nvar hyphenReplace = function hyphenReplace(incPr) {\n  return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) {\n      from = '';\n    } else if (isX(fm)) {\n      from = \">=\".concat(fM, \".0.0\").concat(incPr ? '-0' : '');\n    } else if (isX(fp)) {\n      from = \">=\".concat(fM, \".\").concat(fm, \".0\").concat(incPr ? '-0' : '');\n    } else if (fpr) {\n      from = \">=\".concat(from);\n    } else {\n      from = \">=\".concat(from).concat(incPr ? '-0' : '');\n    }\n    if (isX(tM)) {\n      to = '';\n    } else if (isX(tm)) {\n      to = \"<\".concat(+tM + 1, \".0.0-0\");\n    } else if (isX(tp)) {\n      to = \"<\".concat(tM, \".\").concat(+tm + 1, \".0-0\");\n    } else if (tpr) {\n      to = \"<=\".concat(tM, \".\").concat(tm, \".\").concat(tp, \"-\").concat(tpr);\n    } else if (incPr) {\n      to = \"<\".concat(tM, \".\").concat(tm, \".\").concat(+tp + 1, \"-0\");\n    } else {\n      to = \"<=\".concat(to);\n    }\n    return \"\".concat(from, \" \").concat(to).trim();\n  };\n};\nvar testSet = function testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var _i = 0; _i < set.length; _i++) {\n      debug(set[_i].semver);\n      if (set[_i].semver === Comparator.ANY) {\n        continue;\n      }\n      if (set[_i].semver.prerelease.length > 0) {\n        var allowed = set[_i].semver;\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["Range","range","options","_this","_classCallCheck","parseOptions","loose","includePrerelease","raw","Comparator","value","set","format","split","map","r","parseRange","trim","filter","c","length","TypeError","concat","first","isNullSet","_iterator","_createForOfIteratorHelper","_step","s","n","done","isAny","err","e","f","_createClass","key","comps","join","toString","_this2","memoOpts","FLAG_INCLUDE_PRERELEASE","FLAG_LOOSE","memoKey","cached","cache","get","hr","re","t","HYPHENRANGELOOSE","HYPHENRANGE","replace","hyphenReplace","debug","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","rangeList","comp","parseComparator","replaceGTE0","match","COMPARATORLOOSE","rangeMap","Map","comparators","_iterator2","_step2","size","has","delete","result","_toConsumableArray","values","intersects","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","test","version","SemVer","er","i","testSet","module","exports","LRU","require","max","_require","_require2","remainingComparators","slice","testComparator","pop","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","toLowerCase","replaceTilde","TILDELOOSE","TILDE","_","M","m","p","pr","ret","replaceCaret","CARETLOOSE","CARET","z","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","prerelease","semver","ANY","allowed","major","minor","patch"],"sources":["/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/semver/classes/range.js"],"sourcesContent":["// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}