{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar AbstractDialect = require(\"../abstract\");\nvar ConnectionManager = require(\"./connection-manager\");\nvar Query = require(\"./query\");\nvar QueryGenerator = require(\"./query-generator\");\nvar DataTypes = require(\"../../data-types\").sqlite;\nvar _require = require(\"./query-interface\"),\n  SQLiteQueryInterface = _require.SQLiteQueryInterface;\nvar SqliteDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(SqliteDialect, _AbstractDialect);\n  var _super = _createSuper(SqliteDialect);\n  function SqliteDialect(sequelize) {\n    var _this;\n    _classCallCheck(this, SqliteDialect);\n    _this = _super.call(this);\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_this),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new SQLiteQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n  return _createClass(SqliteDialect);\n}(AbstractDialect);\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: false,\n  \"DEFAULT VALUES\": true,\n  \"UNION ALL\": false,\n  \"RIGHT JOIN\": false,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true,\n    onConflictWhere: true\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","_require","SQLiteQueryInterface","SqliteDialect","_AbstractDialect","_inherits","_super","_createSuper","sequelize","_this","_classCallCheck","call","connectionManager","_assertThisInitialized","queryGenerator","_dialect","queryInterface","_createClass","prototype","supports","merge","cloneDeep","DEFAULT","inserts","ignoreDuplicates","updateOnDuplicate","conflictFields","onConflictWhere","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["../../../src/dialects/sqlite/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"],"mappings":";;;;;;;AAEA,IAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,IAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,IAAME,iBAAA,GAAoBF,OAAA,CAAQ;AAClC,IAAMG,KAAA,GAAQH,OAAA,CAAQ;AACtB,IAAMI,cAAA,GAAiBJ,OAAA,CAAQ;AAC/B,IAAMK,SAAA,GAAYL,OAAA,CAAQ,oBAAoBM,MAAA;AAC9C,IAAAC,QAAA,GAAiCP,OAAA,CAAQ;EAAjCQ,oBAAA,GAAAD,QAAA,CAAAC,oBAAA;AAAiC,IAEzCC,aAAA,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EACE,SAAAA,cAAYK,SAAA,EAAW;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,aAAA;IACrBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IACAF,KAAA,CAAKD,SAAA,GAAYA,SAAA;IACjBC,KAAA,CAAKG,iBAAA,GAAoB,IAAIhB,iBAAA,CAAAiB,sBAAA,CAAAJ,KAAA,GAAwBD,SAAA;IACrDC,KAAA,CAAKK,cAAA,GAAiB,IAAIhB,cAAA,CAAe;MACvCiB,QAAA,EAAAF,sBAAA,CAAAJ,KAAA,CAAU;MACVD,SAAA,EAAAA;IAAA;IAGFC,KAAA,CAAKO,cAAA,GAAiB,IAAId,oBAAA,CACxBM,SAAA,EACAC,KAAA,CAAKK,cAAA;IAAA,OAAAL,KAAA;EAAA;EAAA,OAAAQ,YAAA,CAAAd,aAAA;AAAA,EAZiBR,eAAA;AAiB5BQ,aAAA,CAAce,SAAA,CAAUC,QAAA,GAAW1B,CAAA,CAAE2B,KAAA,CACnC3B,CAAA,CAAE4B,SAAA,CAAU1B,eAAA,CAAgBuB,SAAA,CAAUC,QAAA,GACtC;EACEG,OAAA,EAAS;EACT,kBAAkB;EAClB,aAAa;EACb,cAAc;EACdC,OAAA,EAAS;IACPC,gBAAA,EAAkB;IAClBC,iBAAA,EAAmB;IACnBC,cAAA,EAAgB;IAChBC,eAAA,EAAiB;EAAA;EAEnBC,KAAA,EAAO;IACLC,KAAA,EAAO;IACPC,KAAA,EAAO;IACPC,aAAA,EAAe;EAAA;EAEjBC,kBAAA,EAAoB;IAClBC,IAAA,EAAM;EAAA;EAERC,WAAA,EAAa;IACXC,aAAA,EAAe;IACfC,cAAA,EAAgB;EAAA;EAElBC,YAAA,EAAc;EACdC,IAAA,EAAM;AAAA;AAIVnC,aAAA,CAAce,SAAA,CAAUqB,cAAA,GAAiB;AACzCpC,aAAA,CAAce,SAAA,CAAUrB,KAAA,GAAQA,KAAA;AAChCM,aAAA,CAAce,SAAA,CAAUnB,SAAA,GAAYA,SAAA;AACpCI,aAAA,CAAce,SAAA,CAAUsB,IAAA,GAAO;AAC/BrC,aAAA,CAAce,SAAA,CAAUuB,SAAA,GAAY;AACpCtC,aAAA,CAAce,SAAA,CAAUwB,cAAA,GAAiBvC,aAAA,CAAce,SAAA,CAAUuB,SAAA;AACjEtC,aAAA,CAAce,SAAA,CAAUyB,eAAA,GAAkBxC,aAAA,CAAce,SAAA,CAAUuB,SAAA;AAElEG,MAAA,CAAOC,OAAA,GAAU1C,aAAA;AACjByC,MAAA,CAAOC,OAAA,CAAQ1C,aAAA,GAAgBA,aAAA;AAC/ByC,MAAA,CAAOC,OAAA,CAAQC,OAAA,GAAU3C,aAAA"},"metadata":{},"sourceType":"script"}