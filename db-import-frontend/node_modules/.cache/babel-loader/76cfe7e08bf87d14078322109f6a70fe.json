{"ast":null,"code":"var SemVer = require('../classes/semver');\nvar parse = require('./parse');\nvar _require = require('../internal/re'),\n  re = _require.re,\n  t = _require.t;\nvar coerce = function coerce(version, options) {\n  if (version instanceof SemVer) {\n    return version;\n  }\n  if (typeof version === 'number') {\n    version = String(version);\n  }\n  if (typeof version !== 'string') {\n    return null;\n  }\n  options = options || {};\n  var match = null;\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE]);\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var next;\n    while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {\n      if (!match || next.index + next[0].length !== match.index + match[0].length) {\n        match = next;\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1;\n  }\n  if (match === null) {\n    return null;\n  }\n  return parse(\"\".concat(match[2], \".\").concat(match[3] || '0', \".\").concat(match[4] || '0'), options);\n};\nmodule.exports = coerce;","map":{"version":3,"names":["SemVer","require","parse","_require","re","t","coerce","version","options","String","match","rtl","COERCE","next","COERCERTL","exec","index","length","lastIndex","concat","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/semver/functions/coerce.js"],"sourcesContent":["const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    let next\n    while ((next = re[t.COERCERTL].exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)\n}\nmodule.exports = coerce\n"],"mappings":"AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC3C,IAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAChC,IAAAE,QAAA,GAAkBF,OAAO,CAAC,gBAAgB,CAAC;EAAnCG,EAAE,GAAAD,QAAA,CAAFC,EAAE;EAAEC,CAAC,GAAAF,QAAA,CAADE,CAAC;AAEb,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAIC,OAAO,EAAEC,OAAO,EAAK;EACnC,IAAID,OAAO,YAAYP,MAAM,EAAE;IAC7B,OAAOO,OAAO;EAChB;EAEA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/BA,OAAO,GAAGE,MAAM,CAACF,OAAO,CAAC;EAC3B;EAEA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAO,IAAI;EACb;EAEAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIE,KAAK,GAAG,IAAI;EAChB,IAAI,CAACF,OAAO,CAACG,GAAG,EAAE;IAChBD,KAAK,GAAGH,OAAO,CAACG,KAAK,CAACN,EAAE,CAACC,CAAC,CAACO,MAAM,CAAC,CAAC;EACrC,CAAC,MAAM;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,IAAI;IACR,OAAO,CAACA,IAAI,GAAGT,EAAE,CAACC,CAAC,CAACS,SAAS,CAAC,CAACC,IAAI,CAACR,OAAO,CAAC,MACvC,CAACG,KAAK,IAAIA,KAAK,CAACM,KAAK,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM,KAAKV,OAAO,CAACU,MAAM,CAAC,EAC9D;MACA,IAAI,CAACP,KAAK,IACJG,IAAI,CAACG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM,KAAKP,KAAK,CAACM,KAAK,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM,EAAE;QACnEP,KAAK,GAAGG,IAAI;MACd;MACAT,EAAE,CAACC,CAAC,CAACS,SAAS,CAAC,CAACI,SAAS,GAAGL,IAAI,CAACG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM;IAC1E;IACA;IACAb,EAAE,CAACC,CAAC,CAACS,SAAS,CAAC,CAACI,SAAS,GAAG,CAAC,CAAC;EAChC;EAEA,IAAIR,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;EACb;EAEA,OAAOR,KAAK,IAAAiB,MAAA,CAAIT,KAAK,CAAC,CAAC,CAAC,OAAAS,MAAA,CAAIT,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,OAAAS,MAAA,CAAIT,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,GAAIF,OAAO,CAAC;AAC5E,CAAC;AACDY,MAAM,CAACC,OAAO,GAAGf,MAAM"},"metadata":{},"sourceType":"script"}