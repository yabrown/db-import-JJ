{"ast":null,"code":"'use strict';\n\nvar _wrapNativeSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _objectSpread = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require('util'),\n  inspect = _require.inspect;\n\n// adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n\n// close copy of node's internal SystemError class.\nvar SystemError = /*#__PURE__*/function (_Symbol$for) {\n  function SystemError(code, prefix, context) {\n    _classCallCheck(this, SystemError);\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    var message = \"\".concat(prefix, \": \").concat(context.syscall, \" returned \") + \"\".concat(context.code, \" (\").concat(context.message, \")\");\n    if (context.path !== undefined) {\n      message += \" \".concat(context.path);\n    }\n    if (context.dest !== undefined) {\n      message += \" => \".concat(context.dest);\n    }\n    this.code = code;\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false\n      },\n      errno: {\n        get: function get() {\n          return context.errno;\n        },\n        set: function set(value) {\n          context.errno = value;\n        },\n        enumerable: true,\n        configurable: true\n      },\n      syscall: {\n        get: function get() {\n          return context.syscall;\n        },\n        set: function set(value) {\n          context.syscall = value;\n        },\n        enumerable: true,\n        configurable: true\n      }\n    });\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get: function get() {\n          return context.path;\n        },\n        set: function set(value) {\n          context.path = value;\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get: function get() {\n          return context.dest;\n        },\n        set: function set(value) {\n          context.dest = value;\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }\n  _createClass(SystemError, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \" [\").concat(this.code, \"]: \").concat(this.message);\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value(_recurseTimes, ctx) {\n      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {\n        getters: true,\n        customInspect: false\n      }));\n    }\n  }]);\n  return SystemError;\n}(Symbol.for('nodejs.util.inspect.custom'));\nfunction E(code, message) {\n  module.exports[code] = /*#__PURE__*/function (_SystemError) {\n    _inherits(NodeError, _SystemError);\n    var _super = _createSuper(NodeError);\n    function NodeError(ctx) {\n      _classCallCheck(this, NodeError);\n      return _super.call(this, code, message, ctx);\n    }\n    return _createClass(NodeError);\n  }(SystemError);\n}\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory');\nE('ERR_FS_CP_EEXIST', 'Target already exists');\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest');\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe');\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory');\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file');\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self');\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type');\nE('ERR_FS_EISDIR', 'Path is a directory');\nmodule.exports.ERR_INVALID_ARG_TYPE = /*#__PURE__*/function (_Error) {\n  _inherits(ERR_INVALID_ARG_TYPE, _Error);\n  var _super2 = _createSuper(ERR_INVALID_ARG_TYPE);\n  function ERR_INVALID_ARG_TYPE(name, expected, actual) {\n    var _this;\n    _classCallCheck(this, ERR_INVALID_ARG_TYPE);\n    _this = _super2.call(this);\n    _this.code = 'ERR_INVALID_ARG_TYPE';\n    _this.message = \"The \".concat(name, \" argument must be \").concat(expected, \". Received \").concat(typeof actual);\n    return _this;\n  }\n  return _createClass(ERR_INVALID_ARG_TYPE);\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"names":["_wrapNativeSuper","require","default","_inherits","_createSuper","_objectSpread","_classCallCheck","_createClass","_require","inspect","SystemError","_Symbol$for","code","prefix","context","message","concat","syscall","path","undefined","dest","Object","defineProperties","name","value","enumerable","writable","configurable","info","errno","get","set","defineProperty","key","toString","_recurseTimes","ctx","getters","customInspect","Symbol","for","E","module","exports","_SystemError","NodeError","_super","call","ERR_INVALID_ARG_TYPE","_Error","_super2","expected","actual","_this","Error"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/@npmcli/fs/lib/errors.js"],"sourcesContent":["'use strict'\nconst { inspect } = require('util')\n\n// adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n\n// close copy of node's internal SystemError class.\nclass SystemError {\n  constructor (code, prefix, context) {\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    let message = `${prefix}: ${context.syscall} returned ` +\n                  `${context.code} (${context.message})`\n\n    if (context.path !== undefined) {\n      message += ` ${context.path}`\n    }\n    if (context.dest !== undefined) {\n      message += ` => ${context.dest}`\n    }\n\n    this.code = code\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false,\n      },\n      errno: {\n        get () {\n          return context.errno\n        },\n        set (value) {\n          context.errno = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n      syscall: {\n        get () {\n          return context.syscall\n        },\n        set (value) {\n          context.syscall = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n    })\n\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get () {\n          return context.path\n        },\n        set (value) {\n          context.path = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get () {\n          return context.dest\n        },\n        set (value) {\n          context.dest = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] (_recurseTimes, ctx) {\n    return inspect(this, {\n      ...ctx,\n      getters: true,\n      customInspect: false,\n    })\n  }\n}\n\nfunction E (code, message) {\n  module.exports[code] = class NodeError extends SystemError {\n    constructor (ctx) {\n      super(code, message, ctx)\n    }\n  }\n}\n\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory')\nE('ERR_FS_CP_EEXIST', 'Target already exists')\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest')\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe')\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory')\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file')\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self')\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type')\nE('ERR_FS_EISDIR', 'Path is a directory')\n\nmodule.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends Error {\n  constructor (name, expected, actual) {\n    super()\n    this.code = 'ERR_INVALID_ARG_TYPE'\n    this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}