{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __spread } from '../_virtual/_tslib.js';\nimport { CredentialType, RefreshTokenEntity, CacheManager, AccessTokenEntity, IdTokenEntity, AccountEntity, ClientAuthError, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, Constants, PersistentCacheKeys, ThrottlingEntity, StringUtils, ProtocolUtils, CcsCredentialType, IdToken, DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, StaticCacheKeys, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\nvar BrowserCacheManager = /** @class */function (_super) {\n  __extends(BrowserCacheManager, _super);\n  function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\n    var _this = _super.call(this, clientId, cryptoImpl, logger) || this;\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    _this.cacheConfig = cacheConfig;\n    _this.logger = logger;\n    _this.internalStorage = new MemoryStorage();\n    _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\n    _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.temporaryCacheLocation, _this.cacheConfig.cacheLocation);\n    // Migrate cache entries from older versions of MSAL.\n    if (cacheConfig.cacheMigrationEnabled) {\n      _this.migrateCacheEntries();\n      _this.createKeyMaps();\n    }\n    return _this;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n  BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n    }\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  };\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\r\n   * @param temporaryCacheLocation\r\n   * @param cacheLocation\r\n   */\n  BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (temporaryCacheLocation, cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          /*\r\n           * When users do not explicitly choose their own temporaryCacheLocation,\r\n           * temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n           */\n          return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  };\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n  BrowserCacheManager.prototype.migrateCacheEntries = function () {\n    var _this = this;\n    var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\n    var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\n    var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\n    var idTokenValue = this.browserStorage.getItem(idTokenKey);\n    var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    var errorValue = this.browserStorage.getItem(errorKey);\n    var errorDescValue = this.browserStorage.getItem(errorDescKey);\n    var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach(function (cacheKey, index) {\n      return _this.migrateCacheEntry(cacheKey, values[index]);\n    });\n  };\n  /**\r\n   * Utility function to help with migration.\r\n   * @param newKey\r\n   * @param value\r\n   * @param storeAuthStateInCookie\r\n   */\n  BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  };\n  /**\r\n   * Searches all cache entries for MSAL accounts and creates the account key map\r\n   * This is used to migrate users from older versions of MSAL which did not create the map.\r\n   * @returns\r\n   */\n  BrowserCacheManager.prototype.createKeyMaps = function () {\n    var _this = this;\n    this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n    var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    var tokenKeys = this.getItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId);\n    if (accountKeys && tokenKeys) {\n      this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n      // Key maps already exist, no need to iterate through cache\n      return;\n    }\n    var allKeys = this.browserStorage.getKeys();\n    allKeys.forEach(function (key) {\n      if (_this.isCredentialKey(key)) {\n        // Get item, parse, validate and write key to map\n        var value = _this.getItem(key);\n        if (value) {\n          var credObj = _this.validateAndParseJson(value);\n          if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n            switch (credObj[\"credentialType\"]) {\n              case CredentialType.ID_TOKEN:\n                if (IdTokenEntity.isIdTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - idToken with key: \" + key + \" found, saving key to token key map\");\n                  var idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);\n                  var newKey = _this.updateCredentialCacheKey(key, idTokenEntity);\n                  _this.addTokenKey(newKey, CredentialType.ID_TOKEN);\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed idToken validation on key: \" + key);\n                }\n                break;\n              case CredentialType.ACCESS_TOKEN:\n              case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                if (AccessTokenEntity.isAccessTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - accessToken with key: \" + key + \" found, saving key to token key map\");\n                  var accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);\n                  var newKey = _this.updateCredentialCacheKey(key, accessTokenEntity);\n                  _this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed accessToken validation on key: \" + key);\n                }\n                break;\n              case CredentialType.REFRESH_TOKEN:\n                if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - refreshToken with key: \" + key + \" found, saving key to token key map\");\n                  var refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);\n                  var newKey = _this.updateCredentialCacheKey(key, refreshTokenEntity);\n                  _this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: \" + key);\n                }\n                break;\n              // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n            }\n          }\n        }\n      }\n\n      if (_this.isAccountKey(key)) {\n        var value = _this.getItem(key);\n        if (value) {\n          var accountObj = _this.validateAndParseJson(value);\n          if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\n            _this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n            _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - account with key: \" + key + \" found, saving key to account key map\");\n            _this.addAccountKeyToMap(key);\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n  BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\n    try {\n      var parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getItem = function (key) {\n    return this.browserStorage.getItem(key);\n  };\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setItem = function (key, value) {\n    this.browserStorage.setItem(key, value);\n  };\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n  BrowserCacheManager.prototype.getAccount = function (accountKey) {\n    this.logger.trace(\"BrowserCacheManager.getAccount called\");\n    var account = this.getItem(accountKey);\n    if (!account) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    var parsedAccount = this.validateAndParseJson(account);\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  };\n  /**\r\n   * set account entity in the platform cache\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setAccount = function (account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    var key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n    this.addAccountKeyToMap(key);\n  };\n  /**\r\n   * Returns the array of account keys currently cached\r\n   * @returns\r\n   */\n  BrowserCacheManager.prototype.getAccountKeys = function () {\n    this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n    var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    if (accountKeys) {\n      return JSON.parse(accountKeys);\n    }\n    this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n    return [];\n  };\n  /**\r\n   * Add a new account to the key map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.addAccountKeyToMap = function (key) {\n    this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n    this.logger.tracePii(\"BrowserCacheManager.addAccountKeyToMap called with key: \" + key);\n    var accountKeys = this.getAccountKeys();\n    if (accountKeys.indexOf(key) === -1) {\n      // Only add key if it does not already exist in the map\n      accountKeys.push(key);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n    }\n  };\n  /**\r\n   * Remove an account from the key map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeAccountKeyFromMap = function (key) {\n    this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n    this.logger.tracePii(\"BrowserCacheManager.removeAccountKeyFromMap called with key: \" + key);\n    var accountKeys = this.getAccountKeys();\n    var removalIndex = accountKeys.indexOf(key);\n    if (removalIndex > -1) {\n      accountKeys.splice(removalIndex, 1);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n    } else {\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n    }\n  };\n  /**\r\n   * Extends inherited removeAccount function to include removal of the account key from the map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeAccount = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        _super.prototype.removeAccount.call(this, key);\n        this.removeAccountKeyFromMap(key);\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\r\n   * Removes given idToken from the cache and from the key map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeIdToken = function (key) {\n    _super.prototype.removeIdToken.call(this, key);\n    this.removeTokenKey(key, CredentialType.ID_TOKEN);\n  };\n  /**\r\n   * Removes given accessToken from the cache and from the key map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeAccessToken = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        _super.prototype.removeAccessToken.call(this, key);\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\r\n   * Removes given refreshToken from the cache and from the key map\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeRefreshToken = function (key) {\n    _super.prototype.removeRefreshToken.call(this, key);\n    this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n  };\n  /**\r\n   * Gets the keys for the cached tokens associated with this clientId\r\n   * @returns\r\n   */\n  BrowserCacheManager.prototype.getTokenKeys = function () {\n    this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n    var item = this.getItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId);\n    if (item) {\n      var tokenKeys = this.validateAndParseJson(item);\n      if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n        return tokenKeys;\n      } else {\n        this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n      }\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n    }\n    return {\n      idToken: [],\n      accessToken: [],\n      refreshToken: []\n    };\n  };\n  /**\r\n   * Adds the given key to the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n  BrowserCacheManager.prototype.addTokenKey = function (key, type) {\n    this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n    var tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        if (tokenKeys.idToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n          tokenKeys.idToken.push(key);\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        if (tokenKeys.accessToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n          tokenKeys.accessToken.push(key);\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        if (tokenKeys.refreshToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n          tokenKeys.refreshToken.push(key);\n        }\n        break;\n      default:\n        this.logger.error(\"BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: \" + type);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n    this.setItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId, JSON.stringify(tokenKeys));\n  };\n  /**\r\n   * Removes the given key from the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n  BrowserCacheManager.prototype.removeTokenKey = function (key, type) {\n    this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n    var tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: \" + key + \" from map\");\n        var idRemoval = tokenKeys.idToken.indexOf(key);\n        if (idRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n          tokenKeys.idToken.splice(idRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: \" + key + \" from map\");\n        var accessRemoval = tokenKeys.accessToken.indexOf(key);\n        if (accessRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n          tokenKeys.accessToken.splice(accessRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: \" + key + \" from map\");\n        var refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n        if (refreshRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n          tokenKeys.refreshToken.splice(refreshRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      default:\n        this.logger.error(\"BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: \" + type);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n    this.setItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId, JSON.stringify(tokenKeys));\n  };\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n  BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\n    var value = this.getItem(idTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    var parsedIdToken = this.validateAndParseJson(value);\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  };\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n  BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    var idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n    this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n  };\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\n    var value = this.getItem(accessTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    var parsedAccessToken = this.validateAndParseJson(value);\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  };\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n  BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    var accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n  };\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n  BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\n    var value = this.getItem(refreshTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    var parsedRefreshToken = this.validateAndParseJson(value);\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  };\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n  BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    var refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n  };\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n  BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\n    var value = this.getItem(appMetadataKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  };\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n  BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    var appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  };\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n  BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\n    var value = this.getItem(serverTelemetryKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  };\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n  BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  };\n  /**\r\n   *\r\n   */\n  BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\n    var value = this.internalStorage.getItem(key);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n    return null;\n  };\n  /**\r\n   *\r\n   */\n  BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\n    var _this = this;\n    var allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(function (key) {\n      return _this.isAuthorityMetadata(key);\n    });\n  };\n  /**\r\n   * Sets wrapper metadata in memory\r\n   * @param wrapperSKU\r\n   * @param wrapperVersion\r\n   */\n  BrowserCacheManager.prototype.setWrapperMetadata = function (wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  };\n  /**\r\n   * Returns wrapper metadata from in-memory storage\r\n   */\n  BrowserCacheManager.prototype.getWrapperMetadata = function () {\n    var sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    var version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  };\n  /**\r\n   *\r\n   * @param entity\r\n   */\n  BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  };\n  /**\r\n   * Gets the active account\r\n   */\n  BrowserCacheManager.prototype.getActiveAccount = function () {\n    var activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n      var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      var activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n      }\n      var activeAccount = this.getAccountInfoByFilter({\n        localAccountId: activeAccountValueLocal\n      })[0] || null;\n      if (activeAccount) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n      return null;\n    }\n    var activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n    if (activeAccountValueObj) {\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n      return this.getAccountInfoByFilter({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId\n      })[0] || null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n    return null;\n  };\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.setActiveAccount = function (account) {\n    var activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      var activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  };\n  /**\r\n   * Gets a list of accounts that match all of the filters provided\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\n    var allAccounts = this.getAllAccounts();\n    this.logger.trace(\"BrowserCacheManager.getAccountInfoByFilter: total \" + allAccounts.length + \" accounts found\");\n    return allAccounts.filter(function (accountObj) {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n      return true;\n    });\n  };\n  /**\r\n   * Checks the cache for accounts matching loginHint or SID\r\n   * @param loginHint\r\n   * @param sid\r\n   */\n  BrowserCacheManager.prototype.getAccountInfoByHints = function (loginHint, sid) {\n    var matchingAccounts = this.getAllAccounts().filter(function (accountInfo) {\n      if (sid) {\n        var accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\n        return sid === accountSid;\n      }\n      if (loginHint) {\n        return loginHint === accountInfo.username;\n      }\n      return false;\n    });\n    if (matchingAccounts.length === 1) {\n      return matchingAccounts[0];\n    } else if (matchingAccounts.length > 1) {\n      throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n    }\n    return null;\n  };\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n  BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\n    var value = this.getItem(throttlingCacheKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    var parsedThrottlingCache = this.validateAndParseJson(value);\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  };\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n  BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  };\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      var itemCookie = this.getItemCookie(key);\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n    var value = this.temporaryCacheStorage.getItem(key);\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        var item = this.browserStorage.getItem(key);\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  };\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\r\n   * Removes the cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeItem = function (key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n  };\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.containsKey = function (key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  };\n  /**\r\n   * Gets all keys in window.\r\n   */\n  BrowserCacheManager.prototype.getKeys = function () {\n    return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\n  };\n  /**\r\n   * Clears all cache entries created by MSAL.\r\n   */\n  BrowserCacheManager.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Removes all accounts and their credentials\n            return [4 /*yield*/, this.removeAllAccounts()];\n          case 1:\n            // Removes all accounts and their credentials\n            _a.sent();\n            this.removeAppMetadata();\n            // Removes all remaining MSAL cache items\n            this.getKeys().forEach(function (cacheKey) {\n              // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n              if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) {\n                _this.removeItem(cacheKey);\n              }\n            });\n            this.internalStorage.clear();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Add value to cookies\r\n   * @param cookieName\r\n   * @param cookieValue\r\n   * @param expires\r\n   */\n  BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\n    var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;SameSite=Lax;\";\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Get one item by key from cookies\r\n   * @param cookieName\r\n   */\n  BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\n    var name = encodeURIComponent(cookieName) + \"=\";\n    var cookieList = document.cookie.split(\";\");\n    for (var i = 0; i < cookieList.length; i++) {\n      var cookie = cookieList[i];\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n   */\n  BrowserCacheManager.prototype.clearMsalCookies = function () {\n    var _this = this;\n    var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\n    var cookieList = document.cookie.split(\";\");\n    cookieList.forEach(function (cookie) {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        var cookieKey = cookie.split(\"=\")[0];\n        _this.clearItemCookie(cookieKey);\n      }\n    });\n  };\n  /**\r\n   * Clear an item in the cookies by key\r\n   * @param cookieName\r\n   */\n  BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\n    this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n  };\n  /**\r\n   * Get cookie expiration time\r\n   * @param cookieLifeDays\r\n   */\n  BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  };\n  /**\r\n   * Gets the cache object referenced by the browser\r\n   */\n  BrowserCacheManager.prototype.getCache = function () {\n    return this.browserStorage;\n  };\n  /**\r\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n   */\n  BrowserCacheManager.prototype.setCache = function () {\n    // sets nothing\n  };\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n  BrowserCacheManager.prototype.generateCacheKey = function (key) {\n    var generatedKey = this.validateAndParseJson(key);\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n      return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\n    }\n    return JSON.stringify(key);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\n  };\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\n  };\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n  BrowserCacheManager.prototype.generateStateKey = function (stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\n  };\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n  BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\n    var stateCacheKey = this.generateStateKey(cachedState);\n    var state = this.getTemporaryCache(stateCacheKey);\n    if (!state) {\n      return null;\n    }\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  };\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n    // Cache the request state\n    var stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false);\n    // Cache the nonce\n    var nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false);\n    // Cache authorityKey\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n    if (account) {\n      var ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      var ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  };\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.resetRequestCache = function (state) {\n    var _this = this;\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n    // check state and remove associated cache items\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(function (key) {\n        if (key.indexOf(state) !== -1) {\n          _this.removeItem(key);\n        }\n      });\n    }\n    // delete generic interactive request parameters\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  };\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n  BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n    // Interaction is completed - remove interaction status.\n    if (stateString) {\n      var stateKey = this.generateStateKey(stateString);\n      var cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n    this.clearMsalCookies();\n  };\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n  BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\n    var _this = this;\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n    // Loop through all keys to find state key\n    this.getKeys().forEach(function (key) {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      }\n      // Retrieve state value, return if not a valid value\n      var stateValue = _this.temporaryCacheStorage.getItem(key);\n      if (!stateValue) {\n        return;\n      }\n      // Extract state and ensure it matches given InteractionType, then clean request cache\n      var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\n      if (parsedState && parsedState.interactionType === interactionType) {\n        _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\n        _this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n    this.setInteractionInProgress(false);\n  };\n  BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  };\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n  BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n    // Get token request from cache and parse as TokenExchangeParameters.\n    var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n    var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    // Get cached authority and use if no authority is cached with request.\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      var authorityCacheKey = this.generateAuthorityKey(state);\n      var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n      parsedRequest.authority = cachedAuthority;\n    }\n    return parsedRequest;\n  };\n  /**\r\n   * Gets cached native request for redirect flows\r\n   */\n  BrowserCacheManager.prototype.getCachedNativeRequest = function () {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    var cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n    var parsedRequest = this.validateAndParseJson(cachedRequest);\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n    return parsedRequest;\n  };\n  BrowserCacheManager.prototype.isInteractionInProgress = function (matchClientId) {\n    var clientId = this.getInteractionInProgress();\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  };\n  BrowserCacheManager.prototype.getInteractionInProgress = function () {\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n    return this.getTemporaryCache(key, false);\n  };\n  BrowserCacheManager.prototype.setInteractionInProgress = function (inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw BrowserAuthError.createInteractionInProgressError();\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeItem(key);\n    }\n  };\n  /**\r\n   * Returns username retrieved from ADAL or MSAL v1 idToken\r\n   */\n  BrowserCacheManager.prototype.getLegacyLoginHint = function () {\n    // Only check for adal/msal token if no SSO params are being used\n    var adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    }\n    // Check for cached MSAL v1 id token\n    var msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n    if (msalIdTokenString) {\n      this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n    var cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n    if (cachedIdTokenString) {\n      var cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n      if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return cachedIdToken.claims.preferred_username;\n      } else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return cachedIdToken.claims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Updates a credential's cache key if the current cache key is outdated\r\n   */\n  BrowserCacheManager.prototype.updateCredentialCacheKey = function (currentCacheKey, credential) {\n    var updatedCacheKey = credential.generateCredentialKey();\n    if (currentCacheKey !== updatedCacheKey) {\n      var cacheItem = this.getItem(currentCacheKey);\n      if (cacheItem) {\n        this.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(\"Updated an outdated \" + credential.credentialType + \" cache key\");\n        return updatedCacheKey;\n      } else {\n        this.logger.error(\"Attempted to update an outdated \" + credential.credentialType + \" cache key but no item matching the outdated key was found in storage\");\n      }\n    }\n    return currentCacheKey;\n  };\n  /**\r\n   * Returns application id as redirect context during AcquireTokenRedirect flow.\r\n   */\n  BrowserCacheManager.prototype.getRedirectRequestContext = function () {\n    return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\n  };\n  /**\r\n   * Sets application id as the redirect context during AcquireTokenRedirect flow.\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setRedirectRequestContext = function (value) {\n    this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\n  };\n  return BrowserCacheManager;\n}(CacheManager);\nvar DEFAULT_BROWSER_CACHE_MANAGER = function DEFAULT_BROWSER_CACHE_MANAGER(clientId, logger) {\n  var cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    cacheMigrationEnabled: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"names":["__extends","BrowserCacheManager","_super","clientId","cacheConfig","cryptoImpl","logger","_this","call","COOKIE_LIFE_MULTIPLIER","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","temporaryCacheLocation","cacheMigrationEnabled","migrateCacheEntries","createKeyMaps","prototype","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","trace","accountKeys","StaticCacheKeys","ACCOUNT_KEYS","tokenKeys","TOKEN_KEYS","allKeys","getKeys","key","isCredentialKey","credObj","validateAndParseJson","hasOwnProperty","CredentialType","IdTokenEntity","isIdTokenEntity","tracePii","idTokenEntity","CacheManager","toObject","updateCredentialCacheKey","addTokenKey","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","AccessTokenEntity","isAccessTokenEntity","accessTokenEntity","REFRESH_TOKEN","RefreshTokenEntity","isRefreshTokenEntity","refreshTokenEntity","isAccountKey","accountObj","AccountEntity","isAccountEntity","addAccountKeyToMap","jsonValue","parsedJson","JSON","parse","error","setItem","getAccount","accountKey","account","removeAccountKeyFromMap","parsedAccount","setAccount","generateAccountKey","stringify","getAccountKeys","indexOf","push","removalIndex","splice","removeAccount","removeIdToken","removeTokenKey","removeAccessToken","removeRefreshToken","getTokenKeys","item","idToken","accessToken","refreshToken","type","info","ClientAuthError","createUnexpectedCredentialTypeError","infoPii","idRemoval","accessRemoval","refreshRemoval","getIdTokenCredential","parsedIdToken","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","parsedAccessToken","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","setRefreshTokenCredential","getAppMetadata","appMetadataKey","parsedMetadata","AppMetadataEntity","isAppMetadataEntity","setAppMetadata","appMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetryKey","ServerTelemetryEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetry","getAuthorityMetadata","AuthorityMetadataEntity","isAuthorityMetadataEntity","getAuthorityMetadataKeys","filter","isAuthorityMetadata","setWrapperMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","getWrapperMetadata","sku","EMPTY_STRING","version","setAuthorityMetadata","entity","getActiveAccount","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoByFilter","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","activeAccountKey","activeAccountValue","removeItem","accountFilter","allAccounts","getAllAccounts","length","username","toLowerCase","tenantId","environment","getAccountInfoByHints","loginHint","sid","matchingAccounts","accountInfo","accountSid","idTokenClaims","createMultipleMatchingAccountsInCacheError","getThrottlingCache","throttlingCacheKey","parsedThrottlingCache","ThrottlingEntity","isThrottlingEntity","setThrottlingCache","throttlingCache","getTemporaryCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","setItemCookie","clearItemCookie","containsKey","__spread","clear","removeAllAccounts","_a","sent","removeAppMetadata","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","charAt","substring","decodeURIComponent","clearMsalCookies","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","toUTCString","getCache","setCache","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","generateAuthorityKey","stateString","stateId","ProtocolUtils","parseRequestState","libraryState","id","TemporaryCacheKeys","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","cachedState","stateCacheKey","state","authorityCacheKey","updateCacheEntries","nonce","authorityInstance","nonceCacheKey","ccsCredential","credential","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","resetRequestCache","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","cleanRequestByState","stateKey","cleanRequestByInteractionType","interactionType","stateValue","parsedState","BrowserProtocolUtils","extractBrowserRequestState","cacheCodeRequest","authCodeRequest","browserCrypto","encodedValue","base64Encode","getCachedRequest","encodedTokenRequest","BrowserAuthError","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","getCachedNativeRequest","cachedRequest","isInteractionInProgress","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","createInteractionInProgressError","getLegacyLoginHint","adalIdTokenString","msalIdTokenString","cachedIdTokenString","cachedIdToken","IdToken","claims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","getRedirectRequestContext","REDIRECT_CONTEXT","setRedirectRequestContext","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["../../src/cache/BrowserCacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, PersistentCacheKeys, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager, ServerTelemetryEntity, ThrottlingEntity, ProtocolUtils, Logger, AuthorityMetadataEntity, DEFAULT_CRYPTO_IMPLEMENTATION, AccountInfo, ActiveAccountFilters, CcsCredential, CcsCredentialType, IdToken, ValidCredentialType, ClientAuthError, TokenKeys, CredentialType } from \"@azure/msal-common\";\r\nimport { CacheOptions } from \"../config/Configuration\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserCacheLocation, InteractionType, TemporaryCacheKeys, InMemoryCacheKeys, StaticCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\nimport { MemoryStorage } from \"./MemoryStorage\";\r\nimport { IWindowStorage } from \"./IWindowStorage\";\r\nimport { BrowserProtocolUtils } from \"../utils/BrowserProtocolUtils\";\r\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\r\n\r\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\r\nexport class BrowserCacheManager extends CacheManager {\r\n\r\n    // Cache configuration, either set by user or default values.\r\n    protected cacheConfig: Required<CacheOptions>;\r\n    // Window storage object (either local or sessionStorage)\r\n    protected browserStorage: IWindowStorage<string>;\r\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\r\n    protected internalStorage: MemoryStorage<string>;\r\n    // Temporary cache\r\n    protected temporaryCacheStorage: IWindowStorage<string>;\r\n    // Logger instance\r\n    protected logger: Logger;\r\n\r\n    // Cookie life calculation (hours * minutes * seconds * ms)\r\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\r\n\r\n    constructor(clientId: string, cacheConfig: Required<CacheOptions>, cryptoImpl: ICrypto, logger: Logger) {\r\n        super(clientId, cryptoImpl, logger);\r\n        this.cacheConfig = cacheConfig;\r\n        this.logger = logger;\r\n        this.internalStorage = new MemoryStorage();\r\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\r\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation, this.cacheConfig.cacheLocation);\r\n\r\n        // Migrate cache entries from older versions of MSAL.\r\n        if (cacheConfig.cacheMigrationEnabled) {\r\n            this.migrateCacheEntries();\r\n            this.createKeyMaps();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */\r\n    protected setupBrowserStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    return new BrowserStorage(cacheLocation);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    break;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                break;\r\n        }\r\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\r\n        return new MemoryStorage();\r\n    }\r\n\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\r\n     * @param temporaryCacheLocation\r\n     * @param cacheLocation\r\n     */\r\n    protected setupTemporaryCacheStorage(temporaryCacheLocation: BrowserCacheLocation | string, cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    /*\r\n                     * When users do not explicitly choose their own temporaryCacheLocation, \r\n                     * temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                     */\r\n                    return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    return this.internalStorage;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                return this.internalStorage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    protected migrateCacheEntries(): void {\r\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\r\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\r\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\r\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\r\n\r\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\r\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\r\n        const errorValue = this.browserStorage.getItem(errorKey);\r\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\r\n\r\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\r\n\r\n        keysToMigrate.forEach((cacheKey: string, index: number) => this.migrateCacheEntry(cacheKey, values[index]));\r\n    }\r\n\r\n    /**\r\n     * Utility function to help with migration.\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    protected migrateCacheEntry(newKey: string, value: string | null): void {\r\n        if (value) {\r\n            this.setTemporaryCache(newKey, value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches all cache entries for MSAL accounts and creates the account key map\r\n     * This is used to migrate users from older versions of MSAL which did not create the map.\r\n     * @returns \r\n     */\r\n    private createKeyMaps(): void {\r\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\r\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\r\n        const tokenKeys = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\r\n        if (accountKeys && tokenKeys) {\r\n            this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\r\n            // Key maps already exist, no need to iterate through cache\r\n            return;\r\n        }\r\n\r\n        const allKeys = this.browserStorage.getKeys();\r\n        allKeys.forEach((key) => {\r\n            if (this.isCredentialKey(key)) {\r\n                // Get item, parse, validate and write key to map\r\n                const value = this.getItem(key);\r\n                if (value) {\r\n                    const credObj = this.validateAndParseJson(value);\r\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\r\n                        switch (credObj[\"credentialType\"]) {\r\n                            case CredentialType.ID_TOKEN:\r\n                                if (IdTokenEntity.isIdTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\r\n                                    const idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.ID_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            case CredentialType.ACCESS_TOKEN:\r\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                                if (AccessTokenEntity.isAccessTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\r\n                                    const accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            case CredentialType.REFRESH_TOKEN:\r\n                                if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\r\n                                    const refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            \r\n            if (this.isAccountKey(key)) {\r\n                const value = this.getItem(key);\r\n                if (value) {\r\n                    const accountObj = this.validateAndParseJson(value);\r\n                    if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\r\n                        this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\r\n                        this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\r\n                        this.addAccountKeyToMap(key);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */\r\n    protected validateAndParseJson(jsonValue: string): object | null {\r\n        try {\r\n            const parsedJson = JSON.parse(jsonValue);\r\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */\r\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */\r\n    getItem(key: string): string | null {\r\n        return this.browserStorage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setItem(key: string, value: string): void {\r\n        this.browserStorage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */\r\n    getAccount(accountKey: string): AccountEntity | null {\r\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\r\n        const account = this.getItem(accountKey);\r\n        if (!account) {\r\n            this.removeAccountKeyFromMap(accountKey);\r\n            return null;\r\n        }\r\n\r\n        const parsedAccount = this.validateAndParseJson(account);\r\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\r\n            this.removeAccountKeyFromMap(accountKey);\r\n            return null;\r\n        }\r\n\r\n        return CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedAccount);\r\n    }\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setAccount(account: AccountEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\r\n        const key = account.generateAccountKey();\r\n        this.setItem(key, JSON.stringify(account));\r\n        this.addAccountKeyToMap(key);\r\n    }\r\n\r\n    /**\r\n     * Returns the array of account keys currently cached\r\n     * @returns \r\n     */\r\n    getAccountKeys(): Array<string> {\r\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\r\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\r\n        if (accountKeys) {\r\n            return JSON.parse(accountKeys);\r\n        }\r\n\r\n        this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Add a new account to the key map\r\n     * @param key \r\n     */\r\n    addAccountKeyToMap(key: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\r\n        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\r\n        const accountKeys = this.getAccountKeys();\r\n        if (accountKeys.indexOf(key) === -1) {\r\n            // Only add key if it does not already exist in the map\r\n            accountKeys.push(key);\r\n            this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\r\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\r\n        } else {\r\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an account from the key map\r\n     * @param key \r\n     */\r\n    removeAccountKeyFromMap(key: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\r\n        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\r\n        const accountKeys = this.getAccountKeys();\r\n        const removalIndex = accountKeys.indexOf(key);\r\n        if (removalIndex > -1) {\r\n            accountKeys.splice(removalIndex, 1);\r\n            this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\r\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\r\n        } else {\r\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extends inherited removeAccount function to include removal of the account key from the map\r\n     * @param key \r\n     */\r\n    async removeAccount(key: string): Promise<void> {\r\n        super.removeAccount(key);\r\n        this.removeAccountKeyFromMap(key);\r\n    }\r\n\r\n    /**\r\n     * Removes given idToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    removeIdToken(key: string): void {\r\n        super.removeIdToken(key);\r\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Removes given accessToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    async removeAccessToken(key: string): Promise<void> {\r\n        super.removeAccessToken(key);\r\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Removes given refreshToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    removeRefreshToken(key: string): void {\r\n        super.removeRefreshToken(key);\r\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Gets the keys for the cached tokens associated with this clientId\r\n     * @returns \r\n     */\r\n    getTokenKeys(): TokenKeys {\r\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\r\n        const item = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\r\n        if (item) {\r\n            const tokenKeys = this.validateAndParseJson(item);\r\n            if (tokenKeys && \r\n                tokenKeys.hasOwnProperty(\"idToken\") &&\r\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\r\n                tokenKeys.hasOwnProperty(\"refreshToken\")\r\n            ) {\r\n                return tokenKeys as TokenKeys;\r\n            } else {\r\n                this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\r\n        }\r\n\r\n        return {\r\n            idToken: [],\r\n            accessToken: [],\r\n            refreshToken: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds the given key to the token key map\r\n     * @param key \r\n     * @param type \r\n     */\r\n    addTokenKey(key: string, type: CredentialType): void {\r\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\r\n        const tokenKeys = this.getTokenKeys();\r\n\r\n        switch (type) {\r\n            case CredentialType.ID_TOKEN:\r\n                if (tokenKeys.idToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\r\n                    tokenKeys.idToken.push(key);\r\n                }\r\n                break;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\r\n                    tokenKeys.accessToken.push(key);\r\n                }\r\n                break;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\r\n                    tokenKeys.refreshToken.push(key);\r\n                }\r\n                break;\r\n            default:\r\n                this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\r\n                ClientAuthError.createUnexpectedCredentialTypeError();\r\n        }\r\n\r\n        this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key from the token key map\r\n     * @param key \r\n     * @param type \r\n     */\r\n    removeTokenKey(key: string, type: CredentialType): void {\r\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\r\n        const tokenKeys = this.getTokenKeys();\r\n\r\n        switch (type) {\r\n            case CredentialType.ID_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\r\n                const idRemoval = tokenKeys.idToken.indexOf(key);\r\n                if (idRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\r\n                    tokenKeys.idToken.splice(idRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\r\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\r\n                if (accessRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\r\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\r\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\r\n                if (refreshRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\r\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            default:\r\n                this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\r\n                ClientAuthError.createUnexpectedCredentialTypeError();\r\n        }\r\n\r\n        this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\r\n    }\r\n\r\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */\r\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\r\n        const value = this.getItem(idTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        const parsedIdToken = this.validateAndParseJson(value);\r\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\r\n    }\r\n\r\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */\r\n    setIdTokenCredential(idToken: IdTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\r\n        const idTokenKey = idToken.generateCredentialKey();\r\n\r\n        this.setItem(idTokenKey, JSON.stringify(idToken));\r\n\r\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */\r\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\r\n        const value = this.getItem(accessTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n        const parsedAccessToken = this.validateAndParseJson(value);\r\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\r\n    }\r\n\r\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */\r\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\r\n        const accessTokenKey = accessToken.generateCredentialKey();\r\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\r\n\r\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */\r\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\r\n        const value = this.getItem(refreshTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n            return null;\r\n        }\r\n        const parsedRefreshToken = this.validateAndParseJson(value);\r\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\r\n    }\r\n\r\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\r\n        const refreshTokenKey = refreshToken.generateCredentialKey();\r\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\r\n\r\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\r\n        const value = this.getItem(appMetadataKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\r\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\r\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\r\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\r\n    }\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null {\r\n        const value = this.getItem(serverTelemetryKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\r\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\r\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\r\n        const value = this.internalStorage.getItem(key);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\r\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const allKeys = this.internalStorage.getKeys();\r\n        return allKeys.filter((key) => {\r\n            return this.isAuthorityMetadata(key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets wrapper metadata in memory\r\n     * @param wrapperSKU\r\n     * @param wrapperVersion\r\n     */\r\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\r\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\r\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\r\n    }\r\n\r\n    /**\r\n     * Returns wrapper metadata from in-memory storage\r\n     */\r\n    getWrapperMetadata(): [string, string] {\r\n        const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\r\n        const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\r\n        return [sku, version];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\r\n        this.internalStorage.setItem(key, JSON.stringify(entity));\r\n    }\r\n\r\n    /**\r\n     * Gets the active account\r\n     */\r\n    getActiveAccount(): AccountInfo | null {\r\n        const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\r\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\r\n        if (!activeAccountValueFilters) {\r\n            // if new active account cache type isn't found, it's an old version, so look for that instead\r\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\r\n            const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\r\n            if (!activeAccountValueLocal) {\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\r\n                return null;\r\n            }\r\n            const activeAccount = this.getAccountInfoByFilter({ localAccountId: activeAccountValueLocal })[0] || null;\r\n            if (activeAccount) {\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\r\n                this.setActiveAccount(activeAccount);\r\n                return activeAccount;\r\n            }\r\n            return null;\r\n        }\r\n        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters) as AccountInfo;\r\n        if (activeAccountValueObj) {\r\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\r\n            return this.getAccountInfoByFilter({\r\n                homeAccountId: activeAccountValueObj.homeAccountId,\r\n                localAccountId: activeAccountValueObj.localAccountId\r\n            })[0] || null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account\r\n     */\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\r\n        const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        if (account) {\r\n            this.logger.verbose(\"setActiveAccount: Active account set\");\r\n            const activeAccountValue: ActiveAccountFilters = {\r\n                homeAccountId: account.homeAccountId,\r\n                localAccountId: account.localAccountId\r\n            };\r\n            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\r\n            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\r\n        } else {\r\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\r\n            this.browserStorage.removeItem(activeAccountKey);\r\n            this.browserStorage.removeItem(activeAccountKeyLocal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a list of accounts that match all of the filters provided\r\n     * @param account\r\n     */\r\n    getAccountInfoByFilter(accountFilter: Partial<Omit<AccountInfo, \"idTokenClaims\" | \"name\">>): AccountInfo[] {\r\n        const allAccounts = this.getAllAccounts();\r\n        this.logger.trace(`BrowserCacheManager.getAccountInfoByFilter: total ${allAccounts.length} accounts found`);\r\n\r\n        return allAccounts.filter((accountObj) => {\r\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks the cache for accounts matching loginHint or SID\r\n     * @param loginHint\r\n     * @param sid\r\n     */\r\n    getAccountInfoByHints(loginHint?: string, sid?: string): AccountInfo | null {\r\n        const matchingAccounts = this.getAllAccounts().filter((accountInfo) => {\r\n            if (sid) {\r\n                const accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\r\n                return sid === accountSid;\r\n            }\r\n\r\n            if (loginHint) {\r\n                return loginHint === accountInfo.username;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        if (matchingAccounts.length === 1) {\r\n            return matchingAccounts[0];\r\n        } else if (matchingAccounts.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\r\n        const value = this.getItem(throttlingCacheKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedThrottlingCache = this.validateAndParseJson(value);\r\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\r\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\r\n    }\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\r\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\r\n    }\r\n\r\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            const itemCookie = this.getItemCookie(key);\r\n            if (itemCookie) {\r\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\r\n                return itemCookie;\r\n            }\r\n        }\r\n\r\n        const value = this.temporaryCacheStorage.getItem(key);\r\n        if (!value) {\r\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\r\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\r\n                const item = this.browserStorage.getItem(key);\r\n                if (item) {\r\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\r\n                    return item;\r\n                }\r\n            }\r\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setTemporaryCache(cacheKey: string, value: string, generateKey?: boolean): void {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n\r\n        this.temporaryCacheStorage.setItem(key, value);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\r\n            this.setItemCookie(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    removeItem(key: string): void {\r\n        this.browserStorage.removeItem(key);\r\n        this.temporaryCacheStorage.removeItem(key);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\r\n            this.clearItemCookie(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key\r\n     */\r\n    containsKey(key: string): boolean {\r\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\r\n    }\r\n\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys(): string[] {\r\n        return [\r\n            ...this.browserStorage.getKeys(),\r\n            ...this.temporaryCacheStorage.getKeys()\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Clears all cache entries created by MSAL.\r\n     */\r\n    async clear(): Promise<void> {\r\n        // Removes all accounts and their credentials\r\n        await this.removeAllAccounts();\r\n        this.removeAppMetadata();\r\n\r\n        // Removes all remaining MSAL cache items\r\n        this.getKeys().forEach((cacheKey: string) => {\r\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\r\n            if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(this.clientId) !== -1))) {\r\n                this.removeItem(cacheKey);\r\n            }\r\n        });\r\n\r\n        this.internalStorage.clear();\r\n    }\r\n\r\n    /**\r\n     * Add value to cookies\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\r\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;\r\n        if (expires) {\r\n            const expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += `expires=${expireTime};`;\r\n        }\r\n\r\n        if (this.cacheConfig.secureCookies) {\r\n            cookieStr += \"Secure;\";\r\n        }\r\n\r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * Get one item by key from cookies\r\n     * @param cookieName\r\n     */\r\n    getItemCookie(cookieName: string): string {\r\n        const name = `${encodeURIComponent(cookieName)}=`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        for (let i: number = 0; i < cookieList.length; i++) {\r\n            let cookie = cookieList[i];\r\n            while (cookie.charAt(0) === \" \") {\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(name) === 0) {\r\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\r\n            }\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n     */\r\n    clearMsalCookies(): void {\r\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        cookieList.forEach((cookie: string): void => {\r\n            while (cookie.charAt(0) === \" \") {\r\n                // eslint-disable-next-line no-param-reassign\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(cookiePrefix) === 0) {\r\n                const cookieKey = cookie.split(\"=\")[0];\r\n                this.clearItemCookie(cookieKey);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cookieName\r\n     */\r\n    clearItemCookie(cookieName: string): void {\r\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\r\n    }\r\n\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    getCookieExpirationTime(cookieLifeDays: number): string {\r\n        const today = new Date();\r\n        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\r\n        return expr.toUTCString();\r\n    }\r\n\r\n    /**\r\n     * Gets the cache object referenced by the browser\r\n     */\r\n    getCache(): object {\r\n        return this.browserStorage;\r\n    }\r\n\r\n    /**\r\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n     */\r\n    setCache(): void {\r\n        // sets nothing\r\n    }\r\n\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    generateCacheKey(key: string): string {\r\n        const generatedKey = this.validateAndParseJson(key);\r\n        if (!generatedKey) {\r\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\r\n                return key;\r\n            }\r\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\r\n        }\r\n\r\n        return JSON.stringify(key);\r\n    }\r\n\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    generateAuthorityKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */\r\n    generateNonceKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */\r\n    generateStateKey(stateString: string): string {\r\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */\r\n    getCachedAuthority(cachedState: string): string | null {\r\n        const stateCacheKey = this.generateStateKey(cachedState);\r\n        const state = this.getTemporaryCache(stateCacheKey);\r\n        if (!state) {\r\n            return null;\r\n        }\r\n\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        return this.getTemporaryCache(authorityCacheKey);\r\n    }\r\n\r\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */\r\n    updateCacheEntries(state: string, nonce: string, authorityInstance: string, loginHint: string, account: AccountInfo | null): void {\r\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\r\n        // Cache the request state\r\n        const stateCacheKey = this.generateStateKey(state);\r\n        this.setTemporaryCache(stateCacheKey, state, false);\r\n\r\n        // Cache the nonce\r\n        const nonceCacheKey = this.generateNonceKey(state);\r\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\r\n\r\n        // Cache authorityKey\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\r\n\r\n        if (account) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        } else if (!StringUtils.isEmpty(loginHint)) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: loginHint,\r\n                type: CcsCredentialType.UPN\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */\r\n    resetRequestCache(state: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\r\n        // check state and remove associated cache items\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.getKeys().forEach(key => {\r\n                if (key.indexOf(state) !== -1) {\r\n                    this.removeItem(key);\r\n                }\r\n            });\r\n        }\r\n\r\n        // delete generic interactive request parameters\r\n        if (state) {\r\n            this.removeItem(this.generateStateKey(state));\r\n            this.removeItem(this.generateNonceKey(state));\r\n            this.removeItem(this.generateAuthorityKey(state));\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\r\n        this.setInteractionInProgress(false);\r\n    }\r\n\r\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString\r\n     */\r\n    cleanRequestByState(stateString: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\r\n        // Interaction is completed - remove interaction status.\r\n        if (stateString) {\r\n            const stateKey = this.generateStateKey(stateString);\r\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\r\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\r\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\r\n        }\r\n        this.clearMsalCookies();\r\n    }\r\n\r\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType\r\n     */\r\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\r\n        // Loop through all keys to find state key\r\n        this.getKeys().forEach((key) => {\r\n            // If this key is not the state key, move on\r\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Retrieve state value, return if not a valid value\r\n            const stateValue = this.temporaryCacheStorage.getItem(key);\r\n            if (!stateValue) {\r\n                return;\r\n            }\r\n            // Extract state and ensure it matches given InteractionType, then clean request cache\r\n            const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\r\n            if (parsedState && parsedState.interactionType === interactionType) {\r\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\r\n                this.resetRequestCache(stateValue);\r\n            }\r\n        });\r\n        this.clearMsalCookies();\r\n        this.setInteractionInProgress(false);\r\n    }\r\n\r\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest, browserCrypto: ICrypto): void {\r\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\r\n\r\n        const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\r\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */\r\n    getCachedRequest(state: string, browserCrypto: ICrypto): CommonAuthorizationCodeRequest {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\r\n        // Get token request from cache and parse as TokenExchangeParameters.\r\n        const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\r\n        if (!encodedTokenRequest) {\r\n            throw BrowserAuthError.createNoTokenRequestCacheError();\r\n        }\r\n\r\n        const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest)) as CommonAuthorizationCodeRequest;\r\n        if (!parsedRequest) {\r\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n\r\n        // Get cached authority and use if no authority is cached with request.\r\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\r\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\r\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\r\n            if (!cachedAuthority) {\r\n                throw BrowserAuthError.createNoCachedAuthorityError();\r\n            }\r\n            parsedRequest.authority = cachedAuthority;\r\n        }\r\n\r\n        return parsedRequest;\r\n    }\r\n\r\n    /**\r\n     * Gets cached native request for redirect flows\r\n     */\r\n    getCachedNativeRequest(): NativeTokenRequest | null {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\r\n        const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\r\n        if (!cachedRequest) {\r\n            this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\r\n            return null;\r\n        }\r\n\r\n        const parsedRequest = this.validateAndParseJson(cachedRequest) as NativeTokenRequest;\r\n        if (!parsedRequest) {\r\n            this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\r\n            return null;\r\n        }\r\n\r\n        return parsedRequest;\r\n    }\r\n\r\n    isInteractionInProgress(matchClientId?: boolean): boolean {\r\n        const clientId = this.getInteractionInProgress();\r\n\r\n        if (matchClientId) {\r\n            return clientId === this.clientId;\r\n        } else {\r\n            return !!clientId;\r\n        }\r\n    }\r\n\r\n    getInteractionInProgress(): string | null {\r\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\r\n        return this.getTemporaryCache(key, false);\r\n    }\r\n\r\n    setInteractionInProgress(inProgress: boolean): void {\r\n        // Ensure we don't overwrite interaction in progress for a different clientId\r\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\r\n        if (inProgress) {\r\n            if (this.getInteractionInProgress()) {\r\n                throw BrowserAuthError.createInteractionInProgressError();\r\n            } else {\r\n                // No interaction is in progress\r\n                this.setTemporaryCache(key, this.clientId, false);\r\n            }\r\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\r\n            this.removeItem(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns username retrieved from ADAL or MSAL v1 idToken\r\n     */\r\n    getLegacyLoginHint(): string | null {\r\n        // Only check for adal/msal token if no SSO params are being used\r\n        const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n        if (adalIdTokenString) {\r\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\r\n        }\r\n\r\n        // Check for cached MSAL v1 id token\r\n        const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\r\n        if (msalIdTokenString) {\r\n            this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\r\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\r\n        }\r\n\r\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\r\n        if (cachedIdTokenString) {\r\n            const cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\r\n            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\r\n                return cachedIdToken.claims.preferred_username;\r\n            }\r\n            else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\r\n                return cachedIdToken.claims.upn;\r\n            }\r\n            else {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */\r\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\r\n        const updatedCacheKey = credential.generateCredentialKey();\r\n\r\n        if (currentCacheKey !== updatedCacheKey) {\r\n            const cacheItem = this.getItem(currentCacheKey);\r\n            if (cacheItem) {\r\n                this.removeItem(currentCacheKey);\r\n                this.setItem(updatedCacheKey, cacheItem);\r\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\r\n                return updatedCacheKey;\r\n            } else {\r\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\r\n            }\r\n        }\r\n\r\n        return currentCacheKey;\r\n    }\r\n\r\n    /**\r\n     * Returns application id as redirect context during AcquireTokenRedirect flow.\r\n     */\r\n    getRedirectRequestContext(): string | null {\r\n        return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\r\n    }\r\n\r\n    /**\r\n     * Sets application id as the redirect context during AcquireTokenRedirect flow.\r\n     * @param value\r\n     */\r\n    setRedirectRequestContext(value: string): void {\r\n        this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\r\n    }\r\n}\r\n\r\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (clientId: string, logger: Logger): BrowserCacheManager => {\r\n    const cacheOptions: Required<CacheOptions> = {\r\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        storeAuthStateInCookie: false,\r\n        secureCookies: false,\r\n        cacheMigrationEnabled: false\r\n    };\r\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\r\n};\r\n"],"mappings":";;;;;;;;;;;AAAA;;;;AAeA;;;;;;EAKyCA,SAAA,CAAAC,mBAAA,EAAAC,MAAA;EAgBrC,SAAAD,oBAAYE,QAAgB,EAAEC,WAAmC,EAAEC,UAAmB,EAAEC,MAAc;IAAtG,IAAAC,KAAA,GACIL,MAAA,CAAAM,IAAA,OAAML,QAAQ,EAAEE,UAAU,EAAEC,MAAM,CAAC;;IAHpBC,KAAA,CAAAE,sBAAsB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAI3DF,KAAI,CAACH,WAAW,GAAGA,WAAW;IAC9BG,KAAI,CAACD,MAAM,GAAGA,MAAM;IACpBC,KAAI,CAACG,eAAe,GAAG,IAAIC,aAAa,EAAE;IAC1CJ,KAAI,CAACK,cAAc,GAAGL,KAAI,CAACM,mBAAmB,CAACN,KAAI,CAACH,WAAW,CAACU,aAAa,CAAC;IAC9EP,KAAI,CAACQ,qBAAqB,GAAGR,KAAI,CAACS,0BAA0B,CAACT,KAAI,CAACH,WAAW,CAACa,sBAAsB,EAAEV,KAAI,CAACH,WAAW,CAACU,aAAa,CAAC;;IAGrI,IAAIV,WAAW,CAACc,qBAAqB,EAAE;MACnCX,KAAI,CAACY,mBAAmB,EAAE;MAC1BZ,KAAI,CAACa,aAAa,EAAE;;;;;;;;EAQlBnB,mBAAA,CAAAoB,SAAA,CAAAR,mBAAmB,GAA7B,UAA8BC,aAA4C;IACtE,QAAQA,aAAa;MACjB,KAAKQ,oBAAoB,CAACC,YAAY;MACtC,KAAKD,oBAAoB,CAACE,cAAc;QACpC,IAAI;UACA,OAAO,IAAIC,cAAc,CAACX,aAAa,CAAC;SAC3C,CAAC,OAAOY,CAAC,EAAE;UACR,IAAI,CAACpB,MAAM,CAACqB,OAAO,CAACD,CAAC,CAAC;UACtB;;;IAMZ,IAAI,CAACtB,WAAW,CAACU,aAAa,GAAGQ,oBAAoB,CAACX,aAAa;IACnE,OAAO,IAAIA,aAAa,EAAE;GAC7B;;;;;;EAOSV,mBAAA,CAAAoB,SAAA,CAAAL,0BAA0B,GAApC,UAAqCC,sBAAqD,EAAEH,aAA4C;IACpI,QAAQA,aAAa;MACjB,KAAKQ,oBAAoB,CAACC,YAAY;MACtC,KAAKD,oBAAoB,CAACE,cAAc;QACpC,IAAI;;;;;UAKA,OAAO,IAAIC,cAAc,CAACR,sBAAsB,IAAIK,oBAAoB,CAACE,cAAc,CAAC;SAC3F,CAAC,OAAOE,CAAC,EAAE;UACR,IAAI,CAACpB,MAAM,CAACqB,OAAO,CAACD,CAAC,CAAC;UACtB,OAAO,IAAI,CAAChB,eAAe;;MAEnC,KAAKY,oBAAoB,CAACX,aAAa;MACvC;QACI,OAAO,IAAI,CAACD,eAAe;;GAEtC;;;;;EAMST,mBAAA,CAAAoB,SAAA,CAAAF,mBAAmB,GAA7B;IAAA,IAAAZ,KAAA;IACI,IAAMqB,UAAU,GAAMC,SAAS,CAACC,YAAY,SAAIC,mBAAmB,CAACC,QAAU;IAC9E,IAAMC,aAAa,GAAMJ,SAAS,CAACC,YAAY,SAAIC,mBAAmB,CAACG,WAAa;IACpF,IAAMC,QAAQ,GAAMN,SAAS,CAACC,YAAY,SAAIC,mBAAmB,CAACK,KAAO;IACzE,IAAMC,YAAY,GAAMR,SAAS,CAACC,YAAY,SAAIC,mBAAmB,CAACO,UAAY;IAElF,IAAMC,YAAY,GAAG,IAAI,CAAC3B,cAAc,CAAC4B,OAAO,CAACZ,UAAU,CAAC;IAC5D,IAAMa,eAAe,GAAG,IAAI,CAAC7B,cAAc,CAAC4B,OAAO,CAACP,aAAa,CAAC;IAClE,IAAMS,UAAU,GAAG,IAAI,CAAC9B,cAAc,CAAC4B,OAAO,CAACL,QAAQ,CAAC;IACxD,IAAMQ,cAAc,GAAG,IAAI,CAAC/B,cAAc,CAAC4B,OAAO,CAACH,YAAY,CAAC;IAEhE,IAAMO,MAAM,GAAG,CAACL,YAAY,EAAEE,eAAe,EAAEC,UAAU,EAAEC,cAAc,CAAC;IAC1E,IAAME,aAAa,GAAG,CAACd,mBAAmB,CAACC,QAAQ,EAAED,mBAAmB,CAACG,WAAW,EAAEH,mBAAmB,CAACK,KAAK,EAAEL,mBAAmB,CAACO,UAAU,CAAC;IAEhJO,aAAa,CAACC,OAAO,CAAC,UAACC,QAAgB,EAAEC,KAAa;MAAK,OAAAzC,KAAI,CAAC0C,iBAAiB,CAACF,QAAQ,EAAEH,MAAM,CAACI,KAAK,CAAC,CAAC;IAAA,EAAC;GAC9G;;;;;;;EAQS/C,mBAAA,CAAAoB,SAAA,CAAA4B,iBAAiB,GAA3B,UAA4BC,MAAc,EAAEC,KAAoB;IAC5D,IAAIA,KAAK,EAAE;MACP,IAAI,CAACC,iBAAiB,CAACF,MAAM,EAAEC,KAAK,EAAE,IAAI,CAAC;;GAElD;;;;;;EAOOlD,mBAAA,CAAAoB,SAAA,CAAAD,aAAa,GAArB;IAAA,IAAAb,KAAA;IACI,IAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,6CAA6C,CAAC;IAChE,IAAMC,WAAW,GAAG,IAAI,CAACd,OAAO,CAACe,eAAe,CAACC,YAAY,CAAC;IAC9D,IAAMC,SAAS,GAAG,IAAI,CAACjB,OAAO,CAAIe,eAAe,CAACG,UAAU,SAAI,IAAI,CAACvD,QAAU,CAAC;IAChF,IAAImD,WAAW,IAAIG,SAAS,EAAE;MAC1B,IAAI,CAACnD,MAAM,CAACqB,OAAO,CAAC,mGAAmG,CAAC;;MAExH;;IAGJ,IAAMgC,OAAO,GAAG,IAAI,CAAC/C,cAAc,CAACgD,OAAO,EAAE;IAC7CD,OAAO,CAACb,OAAO,CAAC,UAACe,GAAG;MAChB,IAAItD,KAAI,CAACuD,eAAe,CAACD,GAAG,CAAC,EAAE;;QAE3B,IAAMV,KAAK,GAAG5C,KAAI,CAACiC,OAAO,CAACqB,GAAG,CAAC;QAC/B,IAAIV,KAAK,EAAE;UACP,IAAMY,OAAO,GAAGxD,KAAI,CAACyD,oBAAoB,CAACb,KAAK,CAAC;UAChD,IAAIY,OAAO,IAAIA,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YACrD,QAAQF,OAAO,CAAC,gBAAgB,CAAC;cAC7B,KAAKG,cAAc,CAAClC,QAAQ;gBACxB,IAAImC,aAAa,CAACC,eAAe,CAACL,OAAO,CAAC,EAAE;kBACxCxD,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,gFAAgF,CAAC;kBACnG9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,2DAAyDR,GAAG,wCAAqC,CAAC;kBACvH,IAAMS,aAAa,GAAGC,YAAY,CAACC,QAAQ,CAAC,IAAIL,aAAa,EAAE,EAAEJ,OAAO,CAAC;kBACzE,IAAMb,MAAM,GAAG3C,KAAI,CAACkE,wBAAwB,CAACZ,GAAG,EAAES,aAAa,CAAC;kBAChE/D,KAAI,CAACmE,WAAW,CAACxB,MAAM,EAAEgB,cAAc,CAAClC,QAAQ,CAAC;kBACjD;iBACH,MAAM;kBACHzB,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,+KAA+K,CAAC;kBAClM9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,2EAAyER,GAAK,CAAC;;gBAExG;cACJ,KAAKK,cAAc,CAACS,YAAY;cAChC,KAAKT,cAAc,CAACU,6BAA6B;gBAC7C,IAAIC,iBAAiB,CAACC,mBAAmB,CAACf,OAAO,CAAC,EAAE;kBAChDxD,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,oFAAoF,CAAC;kBACvG9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,+DAA6DR,GAAG,wCAAqC,CAAC;kBAC3H,IAAMkB,iBAAiB,GAAGR,YAAY,CAACC,QAAQ,CAAC,IAAIK,iBAAiB,EAAE,EAAEd,OAAO,CAAC;kBACjF,IAAMb,MAAM,GAAG3C,KAAI,CAACkE,wBAAwB,CAACZ,GAAG,EAAEkB,iBAAiB,CAAC;kBACpExE,KAAI,CAACmE,WAAW,CAACxB,MAAM,EAAEgB,cAAc,CAACS,YAAY,CAAC;kBACrD;iBACH,MAAM;kBACHpE,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,2LAA2L,CAAC;kBAC9M9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,+EAA6ER,GAAK,CAAC;;gBAE5G;cACJ,KAAKK,cAAc,CAACc,aAAa;gBAC7B,IAAIC,kBAAkB,CAACC,oBAAoB,CAACnB,OAAO,CAAC,EAAE;kBAClDxD,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,qFAAqF,CAAC;kBACxG9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,gEAA8DR,GAAG,wCAAqC,CAAC;kBAC5H,IAAMsB,kBAAkB,GAAGZ,YAAY,CAACC,QAAQ,CAAC,IAAIS,kBAAkB,EAAE,EAAElB,OAAO,CAAC;kBACnF,IAAMb,MAAM,GAAG3C,KAAI,CAACkE,wBAAwB,CAACZ,GAAG,EAAEsB,kBAAkB,CAAC;kBACrE5E,KAAI,CAACmE,WAAW,CAACxB,MAAM,EAAEgB,cAAc,CAACc,aAAa,CAAC;kBACtD;iBACH,MAAM;kBACHzE,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,8LAA8L,CAAC;kBACjN9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,gFAA8ER,GAAK,CAAC;;gBAE7G;;;;;;;MAQpB,IAAItD,KAAI,CAAC6E,YAAY,CAACvB,GAAG,CAAC,EAAE;QACxB,IAAMV,KAAK,GAAG5C,KAAI,CAACiC,OAAO,CAACqB,GAAG,CAAC;QAC/B,IAAIV,KAAK,EAAE;UACP,IAAMkC,UAAU,GAAG9E,KAAI,CAACyD,oBAAoB,CAACb,KAAK,CAAC;UACnD,IAAIkC,UAAU,IAAIC,aAAa,CAACC,eAAe,CAACF,UAAU,CAAC,EAAE;YACzD9E,KAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,kFAAkF,CAAC;YACrG9C,KAAI,CAACD,MAAM,CAAC+D,QAAQ,CAAC,2DAAyDR,GAAG,0CAAuC,CAAC;YACzHtD,KAAI,CAACiF,kBAAkB,CAAC3B,GAAG,CAAC;;;;KAI3C,CAAC;GACL;;;;;EAMS5D,mBAAA,CAAAoB,SAAA,CAAA2C,oBAAoB,GAA9B,UAA+ByB,SAAiB;IAC5C,IAAI;MACA,IAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;;;;;;;MAOxC,OAAQC,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,GAAIA,UAAU,GAAG,IAAI;KAC5E,CAAC,OAAOG,KAAK,EAAE;MACZ,OAAO,IAAI;;GAElB;;;;;EAMD5F,mBAAA,CAAAoB,SAAA,CAAAmB,OAAO,GAAP,UAAQqB,GAAW;IACf,OAAO,IAAI,CAACjD,cAAc,CAAC4B,OAAO,CAACqB,GAAG,CAAC;GAC1C;;;;;;EAOD5D,mBAAA,CAAAoB,SAAA,CAAAyE,OAAO,GAAP,UAAQjC,GAAW,EAAEV,KAAa;IAC9B,IAAI,CAACvC,cAAc,CAACkF,OAAO,CAACjC,GAAG,EAAEV,KAAK,CAAC;GAC1C;;;;;EAMDlD,mBAAA,CAAAoB,SAAA,CAAA0E,UAAU,GAAV,UAAWC,UAAkB;IACzB,IAAI,CAAC1F,MAAM,CAAC+C,KAAK,CAAC,uCAAuC,CAAC;IAC1D,IAAM4C,OAAO,GAAG,IAAI,CAACzD,OAAO,CAACwD,UAAU,CAAC;IACxC,IAAI,CAACC,OAAO,EAAE;MACV,IAAI,CAACC,uBAAuB,CAACF,UAAU,CAAC;MACxC,OAAO,IAAI;;IAGf,IAAMG,aAAa,GAAG,IAAI,CAACnC,oBAAoB,CAACiC,OAAO,CAAC;IACxD,IAAI,CAACE,aAAa,IAAI,CAACb,aAAa,CAACC,eAAe,CAACY,aAAa,CAAC,EAAE;MACjE,IAAI,CAACD,uBAAuB,CAACF,UAAU,CAAC;MACxC,OAAO,IAAI;;IAGf,OAAOzB,YAAY,CAACC,QAAQ,CAAgB,IAAIc,aAAa,EAAE,EAAEa,aAAa,CAAC;GAClF;;;;;;EAODlG,mBAAA,CAAAoB,SAAA,CAAA+E,UAAU,GAAV,UAAWH,OAAsB;IAC7B,IAAI,CAAC3F,MAAM,CAAC+C,KAAK,CAAC,uCAAuC,CAAC;IAC1D,IAAMQ,GAAG,GAAGoC,OAAO,CAACI,kBAAkB,EAAE;IACxC,IAAI,CAACP,OAAO,CAACjC,GAAG,EAAE8B,IAAI,CAACW,SAAS,CAACL,OAAO,CAAC,CAAC;IAC1C,IAAI,CAACT,kBAAkB,CAAC3B,GAAG,CAAC;GAC/B;;;;;EAMD5D,mBAAA,CAAAoB,SAAA,CAAAkF,cAAc,GAAd;IACI,IAAI,CAACjG,MAAM,CAAC+C,KAAK,CAAC,2CAA2C,CAAC;IAC9D,IAAMC,WAAW,GAAG,IAAI,CAACd,OAAO,CAACe,eAAe,CAACC,YAAY,CAAC;IAC9D,IAAIF,WAAW,EAAE;MACb,OAAOqC,IAAI,CAACC,KAAK,CAACtC,WAAW,CAAC;;IAGlC,IAAI,CAAChD,MAAM,CAACqB,OAAO,CAAC,4DAA4D,CAAC;IACjF,OAAO,EAAE;GACZ;;;;;EAMD1B,mBAAA,CAAAoB,SAAA,CAAAmE,kBAAkB,GAAlB,UAAmB3B,GAAW;IAC1B,IAAI,CAACvD,MAAM,CAAC+C,KAAK,CAAC,+CAA+C,CAAC;IAClE,IAAI,CAAC/C,MAAM,CAAC+D,QAAQ,CAAC,6DAA2DR,GAAK,CAAC;IACtF,IAAMP,WAAW,GAAG,IAAI,CAACiD,cAAc,EAAE;IACzC,IAAIjD,WAAW,CAACkD,OAAO,CAAC3C,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;;MAEjCP,WAAW,CAACmD,IAAI,CAAC5C,GAAG,CAAC;MACrB,IAAI,CAACiC,OAAO,CAACvC,eAAe,CAACC,YAAY,EAAEmC,IAAI,CAACW,SAAS,CAAChD,WAAW,CAAC,CAAC;MACvE,IAAI,CAAChD,MAAM,CAACqB,OAAO,CAAC,0DAA0D,CAAC;KAClF,MAAM;MACH,IAAI,CAACrB,MAAM,CAACqB,OAAO,CAAC,0EAA0E,CAAC;;GAEtG;;;;;EAMD1B,mBAAA,CAAAoB,SAAA,CAAA6E,uBAAuB,GAAvB,UAAwBrC,GAAW;IAC/B,IAAI,CAACvD,MAAM,CAAC+C,KAAK,CAAC,oDAAoD,CAAC;IACvE,IAAI,CAAC/C,MAAM,CAAC+D,QAAQ,CAAC,kEAAgER,GAAK,CAAC;IAC3F,IAAMP,WAAW,GAAG,IAAI,CAACiD,cAAc,EAAE;IACzC,IAAMG,YAAY,GAAGpD,WAAW,CAACkD,OAAO,CAAC3C,GAAG,CAAC;IAC7C,IAAI6C,YAAY,GAAG,CAAC,CAAC,EAAE;MACnBpD,WAAW,CAACqD,MAAM,CAACD,YAAY,EAAE,CAAC,CAAC;MACnC,IAAI,CAACZ,OAAO,CAACvC,eAAe,CAACC,YAAY,EAAEmC,IAAI,CAACW,SAAS,CAAChD,WAAW,CAAC,CAAC;MACvE,IAAI,CAAChD,MAAM,CAAC+C,KAAK,CAAC,iEAAiE,CAAC;KACvF,MAAM;MACH,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,2EAA2E,CAAC;;GAErG;;;;;EAMKpD,mBAAA,CAAAoB,SAAA,CAAAuF,aAAa,GAAnB,UAAoB/C,GAAW;;;QAC3B3D,MAAA,CAAAmB,SAAA,CAAMuF,aAAa,CAAApG,IAAA,OAACqD,GAAG,CAAC;QACxB,IAAI,CAACqC,uBAAuB,CAACrC,GAAG,CAAC;;;;GACpC;;;;;EAMD5D,mBAAA,CAAAoB,SAAA,CAAAwF,aAAa,GAAb,UAAchD,GAAW;IACrB3D,MAAA,CAAAmB,SAAA,CAAMwF,aAAa,CAAArG,IAAA,OAACqD,GAAG,CAAC;IACxB,IAAI,CAACiD,cAAc,CAACjD,GAAG,EAAEK,cAAc,CAAClC,QAAQ,CAAC;GACpD;;;;;EAMK/B,mBAAA,CAAAoB,SAAA,CAAA0F,iBAAiB,GAAvB,UAAwBlD,GAAW;;;QAC/B3D,MAAA,CAAAmB,SAAA,CAAM0F,iBAAiB,CAAAvG,IAAA,OAACqD,GAAG,CAAC;QAC5B,IAAI,CAACiD,cAAc,CAACjD,GAAG,EAAEK,cAAc,CAACS,YAAY,CAAC;;;;GACxD;;;;;EAMD1E,mBAAA,CAAAoB,SAAA,CAAA2F,kBAAkB,GAAlB,UAAmBnD,GAAW;IAC1B3D,MAAA,CAAAmB,SAAA,CAAM2F,kBAAkB,CAAAxG,IAAA,OAACqD,GAAG,CAAC;IAC7B,IAAI,CAACiD,cAAc,CAACjD,GAAG,EAAEK,cAAc,CAACc,aAAa,CAAC;GACzD;;;;;EAMD/E,mBAAA,CAAAoB,SAAA,CAAA4F,YAAY,GAAZ;IACI,IAAI,CAAC3G,MAAM,CAAC+C,KAAK,CAAC,yCAAyC,CAAC;IAC5D,IAAM6D,IAAI,GAAG,IAAI,CAAC1E,OAAO,CAAIe,eAAe,CAACG,UAAU,SAAI,IAAI,CAACvD,QAAU,CAAC;IAC3E,IAAI+G,IAAI,EAAE;MACN,IAAMzD,SAAS,GAAG,IAAI,CAACO,oBAAoB,CAACkD,IAAI,CAAC;MACjD,IAAIzD,SAAS,IACTA,SAAS,CAACQ,cAAc,CAAC,SAAS,CAAC,IACnCR,SAAS,CAACQ,cAAc,CAAC,aAAa,CAAC,IACvCR,SAAS,CAACQ,cAAc,CAAC,cAAc,CAAC,EAC1C;QACE,OAAOR,SAAsB;OAChC,MAAM;QACH,IAAI,CAACnD,MAAM,CAACuF,KAAK,CAAC,wGAAwG,CAAC;;KAElI,MAAM;MACH,IAAI,CAACvF,MAAM,CAACqB,OAAO,CAAC,wDAAwD,CAAC;;IAGjF,OAAO;MACHwF,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE;KACjB;GACJ;;;;;;EAODpH,mBAAA,CAAAoB,SAAA,CAAAqD,WAAW,GAAX,UAAYb,GAAW,EAAEyD,IAAoB;IACzC,IAAI,CAAChH,MAAM,CAAC+C,KAAK,CAAC,wCAAwC,CAAC;IAC3D,IAAMI,SAAS,GAAG,IAAI,CAACwD,YAAY,EAAE;IAErC,QAAQK,IAAI;MACR,KAAKpD,cAAc,CAAClC,QAAQ;QACxB,IAAIyB,SAAS,CAAC0D,OAAO,CAACX,OAAO,CAAC3C,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UACvC,IAAI,CAACvD,MAAM,CAACiH,IAAI,CAAC,yDAAyD,CAAC;UAC3E9D,SAAS,CAAC0D,OAAO,CAACV,IAAI,CAAC5C,GAAG,CAAC;;QAE/B;MACJ,KAAKK,cAAc,CAACS,YAAY;QAC5B,IAAIlB,SAAS,CAAC2D,WAAW,CAACZ,OAAO,CAAC3C,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UAC3C,IAAI,CAACvD,MAAM,CAACiH,IAAI,CAAC,6DAA6D,CAAC;UAC/E9D,SAAS,CAAC2D,WAAW,CAACX,IAAI,CAAC5C,GAAG,CAAC;;QAEnC;MACJ,KAAKK,cAAc,CAACc,aAAa;QAC7B,IAAIvB,SAAS,CAAC4D,YAAY,CAACb,OAAO,CAAC3C,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UAC5C,IAAI,CAACvD,MAAM,CAACiH,IAAI,CAAC,8DAA8D,CAAC;UAChF9D,SAAS,CAAC4D,YAAY,CAACZ,IAAI,CAAC5C,GAAG,CAAC;;QAEpC;MACJ;QACI,IAAI,CAACvD,MAAM,CAACuF,KAAK,CAAC,wFAAsFyB,IAAM,CAAC;QAC/GE,eAAe,CAACC,mCAAmC,EAAE;;IAG7D,IAAI,CAAC3B,OAAO,CAAIvC,eAAe,CAACG,UAAU,SAAI,IAAI,CAACvD,QAAU,EAAEwF,IAAI,CAACW,SAAS,CAAC7C,SAAS,CAAC,CAAC;GAC5F;;;;;;EAODxD,mBAAA,CAAAoB,SAAA,CAAAyF,cAAc,GAAd,UAAejD,GAAW,EAAEyD,IAAoB;IAC5C,IAAI,CAAChH,MAAM,CAAC+C,KAAK,CAAC,2CAA2C,CAAC;IAC9D,IAAMI,SAAS,GAAG,IAAI,CAACwD,YAAY,EAAE;IAErC,QAAQK,IAAI;MACR,KAAKpD,cAAc,CAAClC,QAAQ;QACxB,IAAI,CAAC1B,MAAM,CAACoH,OAAO,CAAC,kFAAgF7D,GAAG,cAAW,CAAC;QACnH,IAAM8D,SAAS,GAAGlE,SAAS,CAAC0D,OAAO,CAACX,OAAO,CAAC3C,GAAG,CAAC;QAChD,IAAI8D,SAAS,GAAG,CAAC,CAAC,EAAE;UAChB,IAAI,CAACrH,MAAM,CAACiH,IAAI,CAAC,gEAAgE,CAAC;UAClF9D,SAAS,CAAC0D,OAAO,CAACR,MAAM,CAACgB,SAAS,EAAE,CAAC,CAAC;SACzC,MAAM;UACH,IAAI,CAACrH,MAAM,CAACiH,IAAI,CAAC,8HAA8H,CAAC;;QAEpJ;MACJ,KAAKrD,cAAc,CAACS,YAAY;QAC5B,IAAI,CAACrE,MAAM,CAACoH,OAAO,CAAC,sFAAoF7D,GAAG,cAAW,CAAC;QACvH,IAAM+D,aAAa,GAAGnE,SAAS,CAAC2D,WAAW,CAACZ,OAAO,CAAC3C,GAAG,CAAC;QACxD,IAAI+D,aAAa,GAAG,CAAC,CAAC,EAAE;UACpB,IAAI,CAACtH,MAAM,CAACiH,IAAI,CAAC,oEAAoE,CAAC;UACtF9D,SAAS,CAAC2D,WAAW,CAACT,MAAM,CAACiB,aAAa,EAAE,CAAC,CAAC;SACjD,MAAM;UACH,IAAI,CAACtH,MAAM,CAACiH,IAAI,CAAC,kIAAkI,CAAC;;QAExJ;MACJ,KAAKrD,cAAc,CAACc,aAAa;QAC7B,IAAI,CAAC1E,MAAM,CAACoH,OAAO,CAAC,uFAAqF7D,GAAG,cAAW,CAAC;QACxH,IAAMgE,cAAc,GAAGpE,SAAS,CAAC4D,YAAY,CAACb,OAAO,CAAC3C,GAAG,CAAC;QAC1D,IAAIgE,cAAc,GAAG,CAAC,CAAC,EAAE;UACrB,IAAI,CAACvH,MAAM,CAACiH,IAAI,CAAC,qEAAqE,CAAC;UACvF9D,SAAS,CAAC4D,YAAY,CAACV,MAAM,CAACkB,cAAc,EAAE,CAAC,CAAC;SACnD,MAAM;UACH,IAAI,CAACvH,MAAM,CAACiH,IAAI,CAAC,mIAAmI,CAAC;;QAEzJ;MACJ;QACI,IAAI,CAACjH,MAAM,CAACuF,KAAK,CAAC,2FAAyFyB,IAAM,CAAC;QAClHE,eAAe,CAACC,mCAAmC,EAAE;;IAG7D,IAAI,CAAC3B,OAAO,CAAIvC,eAAe,CAACG,UAAU,SAAI,IAAI,CAACvD,QAAU,EAAEwF,IAAI,CAACW,SAAS,CAAC7C,SAAS,CAAC,CAAC;GAC5F;;;;;EAMDxD,mBAAA,CAAAoB,SAAA,CAAAyG,oBAAoB,GAApB,UAAqBlG,UAAkB;IACnC,IAAMuB,KAAK,GAAG,IAAI,CAACX,OAAO,CAACZ,UAAU,CAAC;IACtC,IAAI,CAACuB,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,gEAAgE,CAAC;MACnF,IAAI,CAACyD,cAAc,CAAClF,UAAU,EAAEsC,cAAc,CAAClC,QAAQ,CAAC;MACxD,OAAO,IAAI;;IAGf,IAAM+F,aAAa,GAAG,IAAI,CAAC/D,oBAAoB,CAACb,KAAK,CAAC;IACtD,IAAI,CAAC4E,aAAa,IAAI,CAAC5D,aAAa,CAACC,eAAe,CAAC2D,aAAa,CAAC,EAAE;MACjE,IAAI,CAACzH,MAAM,CAAC+C,KAAK,CAAC,gEAAgE,CAAC;MACnF,IAAI,CAACyD,cAAc,CAAClF,UAAU,EAAEsC,cAAc,CAAClC,QAAQ,CAAC;MACxD,OAAO,IAAI;;IAGf,IAAI,CAAC1B,MAAM,CAAC+C,KAAK,CAAC,qDAAqD,CAAC;IACxE,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIL,aAAa,EAAE,EAAE4D,aAAa,CAAC;GACnE;;;;;EAMD9H,mBAAA,CAAAoB,SAAA,CAAA2G,oBAAoB,GAApB,UAAqBb,OAAsB;IACvC,IAAI,CAAC7G,MAAM,CAAC+C,KAAK,CAAC,iDAAiD,CAAC;IACpE,IAAMzB,UAAU,GAAGuF,OAAO,CAACc,qBAAqB,EAAE;IAElD,IAAI,CAACnC,OAAO,CAAClE,UAAU,EAAE+D,IAAI,CAACW,SAAS,CAACa,OAAO,CAAC,CAAC;IAEjD,IAAI,CAACzC,WAAW,CAAC9C,UAAU,EAAEsC,cAAc,CAAClC,QAAQ,CAAC;GACxD;;;;;EAMD/B,mBAAA,CAAAoB,SAAA,CAAA6G,wBAAwB,GAAxB,UAAyBC,cAAsB;IAC3C,IAAMhF,KAAK,GAAG,IAAI,CAACX,OAAO,CAAC2F,cAAc,CAAC;IAC1C,IAAI,CAAChF,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,oEAAoE,CAAC;MACvF,IAAI,CAACyD,cAAc,CAACqB,cAAc,EAAEjE,cAAc,CAACS,YAAY,CAAC;MAChE,OAAO,IAAI;;IAEf,IAAMyD,iBAAiB,GAAG,IAAI,CAACpE,oBAAoB,CAACb,KAAK,CAAC;IAC1D,IAAI,CAACiF,iBAAiB,IAAI,CAACvD,iBAAiB,CAACC,mBAAmB,CAACsD,iBAAiB,CAAC,EAAE;MACjF,IAAI,CAAC9H,MAAM,CAAC+C,KAAK,CAAC,oEAAoE,CAAC;MACvF,IAAI,CAACyD,cAAc,CAACqB,cAAc,EAAEjE,cAAc,CAACS,YAAY,CAAC;MAChE,OAAO,IAAI;;IAGf,IAAI,CAACrE,MAAM,CAAC+C,KAAK,CAAC,yDAAyD,CAAC;IAC5E,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIK,iBAAiB,EAAE,EAAEuD,iBAAiB,CAAC;GAC3E;;;;;EAMDnI,mBAAA,CAAAoB,SAAA,CAAAgH,wBAAwB,GAAxB,UAAyBjB,WAA8B;IACnD,IAAI,CAAC9G,MAAM,CAAC+C,KAAK,CAAC,qDAAqD,CAAC;IACxE,IAAM8E,cAAc,GAAGf,WAAW,CAACa,qBAAqB,EAAE;IAC1D,IAAI,CAACnC,OAAO,CAACqC,cAAc,EAAExC,IAAI,CAACW,SAAS,CAACc,WAAW,CAAC,CAAC;IAEzD,IAAI,CAAC1C,WAAW,CAACyD,cAAc,EAAEjE,cAAc,CAACS,YAAY,CAAC;GAChE;;;;;EAMD1E,mBAAA,CAAAoB,SAAA,CAAAiH,yBAAyB,GAAzB,UAA0BC,eAAuB;IAC7C,IAAMpF,KAAK,GAAG,IAAI,CAACX,OAAO,CAAC+F,eAAe,CAAC;IAC3C,IAAI,CAACpF,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,qEAAqE,CAAC;MACxF,IAAI,CAACyD,cAAc,CAACyB,eAAe,EAAErE,cAAc,CAACc,aAAa,CAAC;MAClE,OAAO,IAAI;;IAEf,IAAMwD,kBAAkB,GAAG,IAAI,CAACxE,oBAAoB,CAACb,KAAK,CAAC;IAC3D,IAAI,CAACqF,kBAAkB,IAAI,CAACvD,kBAAkB,CAACC,oBAAoB,CAACsD,kBAAkB,CAAC,EAAE;MACrF,IAAI,CAAClI,MAAM,CAAC+C,KAAK,CAAC,qEAAqE,CAAC;MACxF,IAAI,CAACyD,cAAc,CAACyB,eAAe,EAAErE,cAAc,CAACc,aAAa,CAAC;MAClE,OAAO,IAAI;;IAGf,IAAI,CAAC1E,MAAM,CAAC+C,KAAK,CAAC,0DAA0D,CAAC;IAC7E,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIS,kBAAkB,EAAE,EAAEuD,kBAAkB,CAAC;GAC7E;;;;;EAMDvI,mBAAA,CAAAoB,SAAA,CAAAoH,yBAAyB,GAAzB,UAA0BpB,YAAgC;IACtD,IAAI,CAAC/G,MAAM,CAAC+C,KAAK,CAAC,sDAAsD,CAAC;IACzE,IAAMkF,eAAe,GAAGlB,YAAY,CAACY,qBAAqB,EAAE;IAC5D,IAAI,CAACnC,OAAO,CAACyC,eAAe,EAAE5C,IAAI,CAACW,SAAS,CAACe,YAAY,CAAC,CAAC;IAE3D,IAAI,CAAC3C,WAAW,CAAC6D,eAAe,EAAErE,cAAc,CAACc,aAAa,CAAC;GAClE;;;;;EAMD/E,mBAAA,CAAAoB,SAAA,CAAAqH,cAAc,GAAd,UAAeC,cAAsB;IACjC,IAAMxF,KAAK,GAAG,IAAI,CAACX,OAAO,CAACmG,cAAc,CAAC;IAC1C,IAAI,CAACxF,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,0DAA0D,CAAC;MAC7E,OAAO,IAAI;;IAGf,IAAMuF,cAAc,GAAG,IAAI,CAAC5E,oBAAoB,CAACb,KAAK,CAAC;IACvD,IAAI,CAACyF,cAAc,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACH,cAAc,EAAEC,cAAc,CAAC,EAAE;MAC3F,IAAI,CAACtI,MAAM,CAAC+C,KAAK,CAAC,0DAA0D,CAAC;MAC7E,OAAO,IAAI;;IAGf,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,+CAA+C,CAAC;IAClE,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIqE,iBAAiB,EAAE,EAAED,cAAc,CAAC;GACxE;;;;;EAMD3I,mBAAA,CAAAoB,SAAA,CAAA0H,cAAc,GAAd,UAAeC,WAA8B;IACzC,IAAI,CAAC1I,MAAM,CAAC+C,KAAK,CAAC,2CAA2C,CAAC;IAC9D,IAAMsF,cAAc,GAAGK,WAAW,CAACC,sBAAsB,EAAE;IAC3D,IAAI,CAACnD,OAAO,CAAC6C,cAAc,EAAEhD,IAAI,CAACW,SAAS,CAAC0C,WAAW,CAAC,CAAC;GAC5D;;;;;EAMD/I,mBAAA,CAAAoB,SAAA,CAAA6H,kBAAkB,GAAlB,UAAmBC,kBAA0B;IACzC,IAAMhG,KAAK,GAAG,IAAI,CAACX,OAAO,CAAC2G,kBAAkB,CAAC;IAC9C,IAAI,CAAChG,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,8DAA8D,CAAC;MACjF,OAAO,IAAI;;IAEf,IAAMuF,cAAc,GAAG,IAAI,CAAC5E,oBAAoB,CAACb,KAAK,CAAC;IACvD,IAAI,CAACyF,cAAc,IAAI,CAACQ,qBAAqB,CAACC,uBAAuB,CAACF,kBAAkB,EAAEP,cAAc,CAAC,EAAE;MACvG,IAAI,CAACtI,MAAM,CAAC+C,KAAK,CAAC,8DAA8D,CAAC;MACjF,OAAO,IAAI;;IAGf,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,mDAAmD,CAAC;IACtE,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAI4E,qBAAqB,EAAE,EAAER,cAAc,CAAC;GAC5E;;;;;;EAOD3I,mBAAA,CAAAoB,SAAA,CAAAiI,kBAAkB,GAAlB,UAAmBH,kBAA0B,EAAEI,eAAsC;IACjF,IAAI,CAACjJ,MAAM,CAAC+C,KAAK,CAAC,+CAA+C,CAAC;IAClE,IAAI,CAACyC,OAAO,CAACqD,kBAAkB,EAAExD,IAAI,CAACW,SAAS,CAACiD,eAAe,CAAC,CAAC;GACpE;;;;EAKDtJ,mBAAA,CAAAoB,SAAA,CAAAmI,oBAAoB,GAApB,UAAqB3F,GAAW;IAC5B,IAAMV,KAAK,GAAG,IAAI,CAACzC,eAAe,CAAC8B,OAAO,CAACqB,GAAG,CAAC;IAC/C,IAAI,CAACV,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,gEAAgE,CAAC;MACnF,OAAO,IAAI;;IAEf,IAAMuF,cAAc,GAAG,IAAI,CAAC5E,oBAAoB,CAACb,KAAK,CAAC;IACvD,IAAIyF,cAAc,IAAIa,uBAAuB,CAACC,yBAAyB,CAAC7F,GAAG,EAAE+E,cAAc,CAAC,EAAE;MAC1F,IAAI,CAACtI,MAAM,CAAC+C,KAAK,CAAC,qDAAqD,CAAC;MACxE,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIiF,uBAAuB,EAAE,EAAEb,cAAc,CAAC;;IAE/E,OAAO,IAAI;GACd;;;;EAKD3I,mBAAA,CAAAoB,SAAA,CAAAsI,wBAAwB,GAAxB;IAAA,IAAApJ,KAAA;IACI,IAAMoD,OAAO,GAAG,IAAI,CAACjD,eAAe,CAACkD,OAAO,EAAE;IAC9C,OAAOD,OAAO,CAACiG,MAAM,CAAC,UAAC/F,GAAG;MACtB,OAAOtD,KAAI,CAACsJ,mBAAmB,CAAChG,GAAG,CAAC;KACvC,CAAC;GACL;;;;;;EAOD5D,mBAAA,CAAAoB,SAAA,CAAAyI,kBAAkB,GAAlB,UAAmBC,UAAkB,EAAEC,cAAsB;IACzD,IAAI,CAACtJ,eAAe,CAACoF,OAAO,CAACmE,iBAAiB,CAACC,WAAW,EAAEH,UAAU,CAAC;IACvE,IAAI,CAACrJ,eAAe,CAACoF,OAAO,CAACmE,iBAAiB,CAACE,WAAW,EAAEH,cAAc,CAAC;GAC9E;;;;EAKD/J,mBAAA,CAAAoB,SAAA,CAAA+I,kBAAkB,GAAlB;IACI,IAAMC,GAAG,GAAG,IAAI,CAAC3J,eAAe,CAAC8B,OAAO,CAACyH,iBAAiB,CAACC,WAAW,CAAC,IAAIrI,SAAS,CAACyI,YAAY;IACjG,IAAMC,OAAO,GAAG,IAAI,CAAC7J,eAAe,CAAC8B,OAAO,CAACyH,iBAAiB,CAACE,WAAW,CAAC,IAAItI,SAAS,CAACyI,YAAY;IACrG,OAAO,CAACD,GAAG,EAAEE,OAAO,CAAC;GACxB;;;;;EAMDtK,mBAAA,CAAAoB,SAAA,CAAAmJ,oBAAoB,GAApB,UAAqB3G,GAAW,EAAE4G,MAA+B;IAC7D,IAAI,CAACnK,MAAM,CAAC+C,KAAK,CAAC,iDAAiD,CAAC;IACpE,IAAI,CAAC3C,eAAe,CAACoF,OAAO,CAACjC,GAAG,EAAE8B,IAAI,CAACW,SAAS,CAACmE,MAAM,CAAC,CAAC;GAC5D;;;;EAKDxK,mBAAA,CAAAoB,SAAA,CAAAqJ,gBAAgB,GAAhB;IACI,IAAMC,uBAAuB,GAAG,IAAI,CAACC,gBAAgB,CAAC7I,mBAAmB,CAAC8I,sBAAsB,CAAC;IACjG,IAAMC,yBAAyB,GAAG,IAAI,CAACtI,OAAO,CAACmI,uBAAuB,CAAC;IACvE,IAAI,CAACG,yBAAyB,EAAE;;MAE5B,IAAI,CAACxK,MAAM,CAAC+C,KAAK,CAAC,+GAA+G,CAAC;MAClI,IAAM0H,qBAAqB,GAAG,IAAI,CAACH,gBAAgB,CAAC7I,mBAAmB,CAACiJ,cAAc,CAAC;MACvF,IAAMC,uBAAuB,GAAG,IAAI,CAACzI,OAAO,CAACuI,qBAAqB,CAAC;MACnE,IAAI,CAACE,uBAAuB,EAAE;QAC1B,IAAI,CAAC3K,MAAM,CAAC+C,KAAK,CAAC,+DAA+D,CAAC;QAClF,OAAO,IAAI;;MAEf,IAAM6H,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAAC;QAAEC,cAAc,EAAEH;MAAuB,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;MACzG,IAAIC,aAAa,EAAE;QACf,IAAI,CAAC5K,MAAM,CAAC+C,KAAK,CAAC,gFAAgF,CAAC;QACnG,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,kFAAkF,CAAC;QACrG,IAAI,CAACgI,gBAAgB,CAACH,aAAa,CAAC;QACpC,OAAOA,aAAa;;MAExB,OAAO,IAAI;;IAEf,IAAMI,qBAAqB,GAAG,IAAI,CAACtH,oBAAoB,CAAC8G,yBAAyB,CAAgB;IACjG,IAAIQ,qBAAqB,EAAE;MACvB,IAAI,CAAChL,MAAM,CAAC+C,KAAK,CAAC,2EAA2E,CAAC;MAC9F,OAAO,IAAI,CAAC8H,sBAAsB,CAAC;QAC/BI,aAAa,EAAED,qBAAqB,CAACC,aAAa;QAClDH,cAAc,EAAEE,qBAAqB,CAACF;OACzC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;;IAEjB,IAAI,CAAC9K,MAAM,CAAC+C,KAAK,CAAC,+DAA+D,CAAC;IAClF,OAAO,IAAI;GACd;;;;;EAMDpD,mBAAA,CAAAoB,SAAA,CAAAgK,gBAAgB,GAAhB,UAAiBpF,OAA2B;IACxC,IAAMuF,gBAAgB,GAAG,IAAI,CAACZ,gBAAgB,CAAC7I,mBAAmB,CAAC8I,sBAAsB,CAAC;IAC1F,IAAME,qBAAqB,GAAG,IAAI,CAACH,gBAAgB,CAAC7I,mBAAmB,CAACiJ,cAAc,CAAC;IACvF,IAAI/E,OAAO,EAAE;MACT,IAAI,CAAC3F,MAAM,CAACqB,OAAO,CAAC,sCAAsC,CAAC;MAC3D,IAAM8J,kBAAkB,GAAyB;QAC7CF,aAAa,EAAEtF,OAAO,CAACsF,aAAa;QACpCH,cAAc,EAAEnF,OAAO,CAACmF;OAC3B;MACD,IAAI,CAACxK,cAAc,CAACkF,OAAO,CAAC0F,gBAAgB,EAAE7F,IAAI,CAACW,SAAS,CAACmF,kBAAkB,CAAC,CAAC;MACjF,IAAI,CAAC7K,cAAc,CAACkF,OAAO,CAACiF,qBAAqB,EAAE9E,OAAO,CAACmF,cAAc,CAAC;KAC7E,MAAM;MACH,IAAI,CAAC9K,MAAM,CAACqB,OAAO,CAAC,6DAA6D,CAAC;MAClF,IAAI,CAACf,cAAc,CAAC8K,UAAU,CAACF,gBAAgB,CAAC;MAChD,IAAI,CAAC5K,cAAc,CAAC8K,UAAU,CAACX,qBAAqB,CAAC;;GAE5D;;;;;EAMD9K,mBAAA,CAAAoB,SAAA,CAAA8J,sBAAsB,GAAtB,UAAuBQ,aAAmE;IACtF,IAAMC,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;IACzC,IAAI,CAACvL,MAAM,CAAC+C,KAAK,CAAC,uDAAqDuI,WAAW,CAACE,MAAM,oBAAiB,CAAC;IAE3G,OAAOF,WAAW,CAAChC,MAAM,CAAC,UAACvE,UAAU;MACjC,IAAIsG,aAAa,CAACI,QAAQ,IAAIJ,aAAa,CAACI,QAAQ,CAACC,WAAW,EAAE,KAAK3G,UAAU,CAAC0G,QAAQ,CAACC,WAAW,EAAE,EAAE;QACtG,OAAO,KAAK;;MAGhB,IAAIL,aAAa,CAACJ,aAAa,IAAII,aAAa,CAACJ,aAAa,KAAKlG,UAAU,CAACkG,aAAa,EAAE;QACzF,OAAO,KAAK;;MAGhB,IAAII,aAAa,CAACP,cAAc,IAAIO,aAAa,CAACP,cAAc,KAAK/F,UAAU,CAAC+F,cAAc,EAAE;QAC5F,OAAO,KAAK;;MAGhB,IAAIO,aAAa,CAACM,QAAQ,IAAIN,aAAa,CAACM,QAAQ,KAAK5G,UAAU,CAAC4G,QAAQ,EAAE;QAC1E,OAAO,KAAK;;MAGhB,IAAIN,aAAa,CAACO,WAAW,IAAIP,aAAa,CAACO,WAAW,KAAK7G,UAAU,CAAC6G,WAAW,EAAE;QACnF,OAAO,KAAK;;MAGhB,OAAO,IAAI;KACd,CAAC;GACL;;;;;;EAODjM,mBAAA,CAAAoB,SAAA,CAAA8K,qBAAqB,GAArB,UAAsBC,SAAkB,EAAEC,GAAY;IAClD,IAAMC,gBAAgB,GAAG,IAAI,CAACT,cAAc,EAAE,CAACjC,MAAM,CAAC,UAAC2C,WAAW;MAC9D,IAAIF,GAAG,EAAE;QACL,IAAMG,UAAU,GAAGD,WAAW,CAACE,aAAa,IAAIF,WAAW,CAACE,aAAa,CAAC,KAAK,CAAC;QAChF,OAAOJ,GAAG,KAAKG,UAAU;;MAG7B,IAAIJ,SAAS,EAAE;QACX,OAAOA,SAAS,KAAKG,WAAW,CAACR,QAAQ;;MAG7C,OAAO,KAAK;KACf,CAAC;IAEF,IAAIO,gBAAgB,CAACR,MAAM,KAAK,CAAC,EAAE;MAC/B,OAAOQ,gBAAgB,CAAC,CAAC,CAAC;KAC7B,MAAM,IAAIA,gBAAgB,CAACR,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMtE,eAAe,CAACkF,0CAA0C,EAAE;;IAGtE,OAAO,IAAI;GACd;;;;;EAMDzM,mBAAA,CAAAoB,SAAA,CAAAsL,kBAAkB,GAAlB,UAAmBC,kBAA0B;IACzC,IAAMzJ,KAAK,GAAG,IAAI,CAACX,OAAO,CAACoK,kBAAkB,CAAC;IAC9C,IAAI,CAACzJ,KAAK,EAAE;MACR,IAAI,CAAC7C,MAAM,CAAC+C,KAAK,CAAC,8DAA8D,CAAC;MACjF,OAAO,IAAI;;IAGf,IAAMwJ,qBAAqB,GAAG,IAAI,CAAC7I,oBAAoB,CAACb,KAAK,CAAC;IAC9D,IAAI,CAAC0J,qBAAqB,IAAI,CAACC,gBAAgB,CAACC,kBAAkB,CAACH,kBAAkB,EAAEC,qBAAqB,CAAC,EAAE;MAC3G,IAAI,CAACvM,MAAM,CAAC+C,KAAK,CAAC,8DAA8D,CAAC;MACjF,OAAO,IAAI;;IAGf,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,mDAAmD,CAAC;IACtE,OAAOkB,YAAY,CAACC,QAAQ,CAAC,IAAIsI,gBAAgB,EAAE,EAAED,qBAAqB,CAAC;GAC9E;;;;;;EAOD5M,mBAAA,CAAAoB,SAAA,CAAA2L,kBAAkB,GAAlB,UAAmBJ,kBAA0B,EAAEK,eAAiC;IAC5E,IAAI,CAAC3M,MAAM,CAAC+C,KAAK,CAAC,+CAA+C,CAAC;IAClE,IAAI,CAACyC,OAAO,CAAC8G,kBAAkB,EAAEjH,IAAI,CAACW,SAAS,CAAC2G,eAAe,CAAC,CAAC;GACpE;;;;;;EAODhN,mBAAA,CAAAoB,SAAA,CAAA6L,iBAAiB,GAAjB,UAAkBnK,QAAgB,EAAEoK,WAAqB;IACrD,IAAMtJ,GAAG,GAAGsJ,WAAW,GAAG,IAAI,CAACvC,gBAAgB,CAAC7H,QAAQ,CAAC,GAAGA,QAAQ;IACpE,IAAI,IAAI,CAAC3C,WAAW,CAACgN,sBAAsB,EAAE;MACzC,IAAMC,UAAU,GAAG,IAAI,CAACC,aAAa,CAACzJ,GAAG,CAAC;MAC1C,IAAIwJ,UAAU,EAAE;QACZ,IAAI,CAAC/M,MAAM,CAAC+C,KAAK,CAAC,qGAAqG,CAAC;QACxH,OAAOgK,UAAU;;;IAIzB,IAAMlK,KAAK,GAAG,IAAI,CAACpC,qBAAqB,CAACyB,OAAO,CAACqB,GAAG,CAAC;IACrD,IAAI,CAACV,KAAK,EAAE;;MAER,IAAI,IAAI,CAAC/C,WAAW,CAACU,aAAa,KAAKQ,oBAAoB,CAACC,YAAY,EAAE;QACtE,IAAM2F,IAAI,GAAG,IAAI,CAACtG,cAAc,CAAC4B,OAAO,CAACqB,GAAG,CAAC;QAC7C,IAAIqD,IAAI,EAAE;UACN,IAAI,CAAC5G,MAAM,CAAC+C,KAAK,CAAC,oFAAoF,CAAC;UACvG,OAAO6D,IAAI;;;MAGnB,IAAI,CAAC5G,MAAM,CAAC+C,KAAK,CAAC,6EAA6E,CAAC;MAChG,OAAO,IAAI;;IAEf,IAAI,CAAC/C,MAAM,CAAC+C,KAAK,CAAC,sEAAsE,CAAC;IACzF,OAAOF,KAAK;GACf;;;;;;;;EASDlD,mBAAA,CAAAoB,SAAA,CAAA+B,iBAAiB,GAAjB,UAAkBL,QAAgB,EAAEI,KAAa,EAAEgK,WAAqB;IACpE,IAAMtJ,GAAG,GAAGsJ,WAAW,GAAG,IAAI,CAACvC,gBAAgB,CAAC7H,QAAQ,CAAC,GAAGA,QAAQ;IAEpE,IAAI,CAAChC,qBAAqB,CAAC+E,OAAO,CAACjC,GAAG,EAAEV,KAAK,CAAC;IAC9C,IAAI,IAAI,CAAC/C,WAAW,CAACgN,sBAAsB,EAAE;MACzC,IAAI,CAAC9M,MAAM,CAAC+C,KAAK,CAAC,gGAAgG,CAAC;MACnH,IAAI,CAACkK,aAAa,CAAC1J,GAAG,EAAEV,KAAK,CAAC;;GAErC;;;;;;EAODlD,mBAAA,CAAAoB,SAAA,CAAAqK,UAAU,GAAV,UAAW7H,GAAW;IAClB,IAAI,CAACjD,cAAc,CAAC8K,UAAU,CAAC7H,GAAG,CAAC;IACnC,IAAI,CAAC9C,qBAAqB,CAAC2K,UAAU,CAAC7H,GAAG,CAAC;IAC1C,IAAI,IAAI,CAACzD,WAAW,CAACgN,sBAAsB,EAAE;MACzC,IAAI,CAAC9M,MAAM,CAAC+C,KAAK,CAAC,sFAAsF,CAAC;MACzG,IAAI,CAACmK,eAAe,CAAC3J,GAAG,CAAC;;GAEhC;;;;;EAMD5D,mBAAA,CAAAoB,SAAA,CAAAoM,WAAW,GAAX,UAAY5J,GAAW;IACnB,OAAO,IAAI,CAACjD,cAAc,CAAC6M,WAAW,CAAC5J,GAAG,CAAC,IAAI,IAAI,CAAC9C,qBAAqB,CAAC0M,WAAW,CAAC5J,GAAG,CAAC;GAC7F;;;;EAKD5D,mBAAA,CAAAoB,SAAA,CAAAuC,OAAO,GAAP;IACI,OAAA8J,QAAA,CACO,IAAI,CAAC9M,cAAc,CAACgD,OAAO,EAAE,EAC7B,IAAI,CAAC7C,qBAAqB,CAAC6C,OAAO,EAAE;GAE9C;;;;EAKK3D,mBAAA,CAAAoB,SAAA,CAAAsM,KAAK,GAAX;;;;;;;YAEI,qBAAM,IAAI,CAACC,iBAAiB,EAAE;;;YAA9BC,EAAA,CAAAC,IAAA,EAA8B;YAC9B,IAAI,CAACC,iBAAiB,EAAE;;YAGxB,IAAI,CAACnK,OAAO,EAAE,CAACd,OAAO,CAAC,UAACC,QAAgB;;cAEpC,IAAI,CAACxC,KAAI,CAACK,cAAc,CAAC6M,WAAW,CAAC1K,QAAQ,CAAC,IAAIxC,KAAI,CAACQ,qBAAqB,CAAC0M,WAAW,CAAC1K,QAAQ,CAAC,MAAOA,QAAQ,CAACyD,OAAO,CAAC3E,SAAS,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAMiB,QAAQ,CAACyD,OAAO,CAACjG,KAAI,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAAE,CAAC,EAAE;gBACpMI,KAAI,CAACmL,UAAU,CAAC3I,QAAQ,CAAC;;aAEhC,CAAC;YAEF,IAAI,CAACrC,eAAe,CAACiN,KAAK,EAAE;;;;;GAC/B;;;;;;;EAQD1N,mBAAA,CAAAoB,SAAA,CAAAkM,aAAa,GAAb,UAAcS,UAAkB,EAAEC,WAAmB,EAAEC,OAAgB;IACnE,IAAIC,SAAS,GAAMC,kBAAkB,CAACJ,UAAU,CAAC,SAAII,kBAAkB,CAACH,WAAW,CAAC,0BAAuB;IAC3G,IAAIC,OAAO,EAAE;MACT,IAAMG,UAAU,GAAG,IAAI,CAACC,uBAAuB,CAACJ,OAAO,CAAC;MACxDC,SAAS,IAAI,aAAWE,UAAU,MAAG;;IAGzC,IAAI,IAAI,CAACjO,WAAW,CAACmO,aAAa,EAAE;MAChCJ,SAAS,IAAI,SAAS;;IAG1BK,QAAQ,CAACC,MAAM,GAAGN,SAAS;GAC9B;;;;;EAMDlO,mBAAA,CAAAoB,SAAA,CAAAiM,aAAa,GAAb,UAAcU,UAAkB;IAC5B,IAAMU,IAAI,GAAMN,kBAAkB,CAACJ,UAAU,CAAC,MAAG;IACjD,IAAMW,UAAU,GAAGH,QAAQ,CAACC,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;IAC7C,KAAK,IAAIC,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAAC7C,MAAM,EAAE+C,CAAC,EAAE,EAAE;MAChD,IAAIJ,MAAM,GAAGE,UAAU,CAACE,CAAC,CAAC;MAC1B,OAAOJ,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7BL,MAAM,GAAGA,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC;;MAEhC,IAAIN,MAAM,CAACjI,OAAO,CAACkI,IAAI,CAAC,KAAK,CAAC,EAAE;QAC5B,OAAOM,kBAAkB,CAACP,MAAM,CAACM,SAAS,CAACL,IAAI,CAAC5C,MAAM,EAAE2C,MAAM,CAAC3C,MAAM,CAAC,CAAC;;;IAG/E,OAAOjK,SAAS,CAACyI,YAAY;GAChC;;;;EAKDrK,mBAAA,CAAAoB,SAAA,CAAA4N,gBAAgB,GAAhB;IAAA,IAAA1O,KAAA;IACI,IAAM2O,YAAY,GAAMrN,SAAS,CAACC,YAAY,SAAI,IAAI,CAAC3B,QAAU;IACjE,IAAMwO,UAAU,GAAGH,QAAQ,CAACC,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;IAC7CD,UAAU,CAAC7L,OAAO,CAAC,UAAC2L,MAAc;MAC9B,OAAOA,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;;QAE7BL,MAAM,GAAGA,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC;;MAEhC,IAAIN,MAAM,CAACjI,OAAO,CAAC0I,YAAY,CAAC,KAAK,CAAC,EAAE;QACpC,IAAMC,SAAS,GAAGV,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtCrO,KAAI,CAACiN,eAAe,CAAC2B,SAAS,CAAC;;KAEtC,CAAC;GACL;;;;;EAMDlP,mBAAA,CAAAoB,SAAA,CAAAmM,eAAe,GAAf,UAAgBQ,UAAkB;IAC9B,IAAI,CAACT,aAAa,CAACS,UAAU,EAAEnM,SAAS,CAACyI,YAAY,EAAE,CAAC,CAAC,CAAC;GAC7D;;;;;EAMDrK,mBAAA,CAAAoB,SAAA,CAAAiN,uBAAuB,GAAvB,UAAwBc,cAAsB;IAC1C,IAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;IACxB,IAAMC,IAAI,GAAG,IAAID,IAAI,CAACD,KAAK,CAACG,OAAO,EAAE,GAAGJ,cAAc,GAAG,IAAI,CAAC3O,sBAAsB,CAAC;IACrF,OAAO8O,IAAI,CAACE,WAAW,EAAE;GAC5B;;;;EAKDxP,mBAAA,CAAAoB,SAAA,CAAAqO,QAAQ,GAAR;IACI,OAAO,IAAI,CAAC9O,cAAc;GAC7B;;;;EAKDX,mBAAA,CAAAoB,SAAA,CAAAsO,QAAQ,GAAR;;GAEC;;;;;;EAOD1P,mBAAA,CAAAoB,SAAA,CAAAuJ,gBAAgB,GAAhB,UAAiB/G,GAAW;IACxB,IAAM+L,YAAY,GAAG,IAAI,CAAC5L,oBAAoB,CAACH,GAAG,CAAC;IACnD,IAAI,CAAC+L,YAAY,EAAE;MACf,IAAIC,WAAW,CAACC,UAAU,CAACjM,GAAG,EAAEhC,SAAS,CAACC,YAAY,CAAC,IAAI+N,WAAW,CAACC,UAAU,CAACjM,GAAG,EAAE9B,mBAAmB,CAACgO,aAAa,CAAC,EAAE;QACvH,OAAOlM,GAAG;;MAEd,OAAUhC,SAAS,CAACC,YAAY,SAAI,IAAI,CAAC3B,QAAQ,SAAI0D,GAAK;;IAG9D,OAAO8B,IAAI,CAACW,SAAS,CAACzC,GAAG,CAAC;GAC7B;;;;;EAMD5D,mBAAA,CAAAoB,SAAA,CAAA2O,oBAAoB,GAApB,UAAqBC,WAAmB;IAG5B,IAAIC,OAAO,GAEfC,aAAa,CAACC,iBAAiB,CAAC,IAAI,CAAC/P,UAAU,EAAE4P,WAAW,CAAC,CAAAI,YAAA,CAAAC,EAF9C;IAInB,OAAO,IAAI,CAAC1F,gBAAgB,CAAI2F,kBAAkB,CAACC,SAAS,SAAIN,OAAS,CAAC;GAC7E;;;;;EAMDjQ,mBAAA,CAAAoB,SAAA,CAAAoP,gBAAgB,GAAhB,UAAiBR,WAAmB;IAGxB,IAAIC,OAAO,GAEfC,aAAa,CAACC,iBAAiB,CAAC,IAAI,CAAC/P,UAAU,EAAE4P,WAAW,CAAC,CAAAI,YAAA,CAAAC,EAF9C;IAInB,OAAO,IAAI,CAAC1F,gBAAgB,CAAI2F,kBAAkB,CAACG,aAAa,SAAIR,OAAS,CAAC;GACjF;;;;;EAMDjQ,mBAAA,CAAAoB,SAAA,CAAAsP,gBAAgB,GAAhB,UAAiBV,WAAmB;;IAIxB,IAAIC,OAAO,GAEfC,aAAa,CAACC,iBAAiB,CAAC,IAAI,CAAC/P,UAAU,EAAE4P,WAAW,CAAC,CAAAI,YAAA,CAAAC,EAF9C;IAGnB,OAAO,IAAI,CAAC1F,gBAAgB,CAAI2F,kBAAkB,CAACK,aAAa,SAAIV,OAAS,CAAC;GACjF;;;;EAKDjQ,mBAAA,CAAAoB,SAAA,CAAAwP,kBAAkB,GAAlB,UAAmBC,WAAmB;IAClC,IAAMC,aAAa,GAAG,IAAI,CAACJ,gBAAgB,CAACG,WAAW,CAAC;IACxD,IAAME,KAAK,GAAG,IAAI,CAAC9D,iBAAiB,CAAC6D,aAAa,CAAC;IACnD,IAAI,CAACC,KAAK,EAAE;MACR,OAAO,IAAI;;IAGf,IAAMC,iBAAiB,GAAG,IAAI,CAACjB,oBAAoB,CAACgB,KAAK,CAAC;IAC1D,OAAO,IAAI,CAAC9D,iBAAiB,CAAC+D,iBAAiB,CAAC;GACnD;;;;;;EAODhR,mBAAA,CAAAoB,SAAA,CAAA6P,kBAAkB,GAAlB,UAAmBF,KAAa,EAAEG,KAAa,EAAEC,iBAAyB,EAAEhF,SAAiB,EAAEnG,OAA2B;IACtH,IAAI,CAAC3F,MAAM,CAAC+C,KAAK,CAAC,+CAA+C,CAAC;;IAElE,IAAM0N,aAAa,GAAG,IAAI,CAACJ,gBAAgB,CAACK,KAAK,CAAC;IAClD,IAAI,CAAC5N,iBAAiB,CAAC2N,aAAa,EAAEC,KAAK,EAAE,KAAK,CAAC;;IAGnD,IAAMK,aAAa,GAAG,IAAI,CAACZ,gBAAgB,CAACO,KAAK,CAAC;IAClD,IAAI,CAAC5N,iBAAiB,CAACiO,aAAa,EAAEF,KAAK,EAAE,KAAK,CAAC;;IAGnD,IAAMF,iBAAiB,GAAG,IAAI,CAACjB,oBAAoB,CAACgB,KAAK,CAAC;IAC1D,IAAI,CAAC5N,iBAAiB,CAAC6N,iBAAiB,EAAEG,iBAAiB,EAAE,KAAK,CAAC;IAEnE,IAAInL,OAAO,EAAE;MACT,IAAMqL,aAAa,GAAkB;QACjCC,UAAU,EAAEtL,OAAO,CAACsF,aAAa;QACjCjE,IAAI,EAAEkK,iBAAiB,CAACC;OAC3B;MACD,IAAI,CAACrO,iBAAiB,CAACmN,kBAAkB,CAACmB,cAAc,EAAE/L,IAAI,CAACW,SAAS,CAACgL,aAAa,CAAC,EAAE,IAAI,CAAC;KACjG,MAAM,IAAI,CAACzB,WAAW,CAAC8B,OAAO,CAACvF,SAAS,CAAC,EAAE;MACxC,IAAMkF,aAAa,GAAkB;QACjCC,UAAU,EAAEnF,SAAS;QACrB9E,IAAI,EAAEkK,iBAAiB,CAACI;OAC3B;MACD,IAAI,CAACxO,iBAAiB,CAACmN,kBAAkB,CAACmB,cAAc,EAAE/L,IAAI,CAACW,SAAS,CAACgL,aAAa,CAAC,EAAE,IAAI,CAAC;;GAErG;;;;;EAMDrR,mBAAA,CAAAoB,SAAA,CAAAwQ,iBAAiB,GAAjB,UAAkBb,KAAa;IAA/B,IAAAzQ,KAAA;IACI,IAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,8CAA8C,CAAC;;IAEjE,IAAI,CAACwM,WAAW,CAAC8B,OAAO,CAACX,KAAK,CAAC,EAAE;MAC7B,IAAI,CAACpN,OAAO,EAAE,CAACd,OAAO,CAAC,UAAAe,GAAG;QACtB,IAAIA,GAAG,CAAC2C,OAAO,CAACwK,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;UAC3BzQ,KAAI,CAACmL,UAAU,CAAC7H,GAAG,CAAC;;OAE3B,CAAC;;;IAIN,IAAImN,KAAK,EAAE;MACP,IAAI,CAACtF,UAAU,CAAC,IAAI,CAACiF,gBAAgB,CAACK,KAAK,CAAC,CAAC;MAC7C,IAAI,CAACtF,UAAU,CAAC,IAAI,CAAC+E,gBAAgB,CAACO,KAAK,CAAC,CAAC;MAC7C,IAAI,CAACtF,UAAU,CAAC,IAAI,CAACsE,oBAAoB,CAACgB,KAAK,CAAC,CAAC;;IAErD,IAAI,CAACtF,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAACuB,cAAc,CAAC,CAAC;IACzE,IAAI,CAACpG,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAACwB,UAAU,CAAC,CAAC;IACrE,IAAI,CAACrG,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAACyB,QAAQ,CAAC,CAAC;IACnE,IAAI,CAACtG,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAAC0B,cAAc,CAAC,CAAC;IACzE,IAAI,CAACvG,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAACmB,cAAc,CAAC,CAAC;IACzE,IAAI,CAAChG,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAAC2B,cAAc,CAAC,CAAC;IACzE,IAAI,CAACC,wBAAwB,CAAC,KAAK,CAAC;GACvC;;;;;EAMDlS,mBAAA,CAAAoB,SAAA,CAAA+Q,mBAAmB,GAAnB,UAAoBnC,WAAmB;IACnC,IAAI,CAAC3P,MAAM,CAAC+C,KAAK,CAAC,gDAAgD,CAAC;;IAEnE,IAAI4M,WAAW,EAAE;MACb,IAAMoC,QAAQ,GAAG,IAAI,CAAC1B,gBAAgB,CAACV,WAAW,CAAC;MACnD,IAAMa,WAAW,GAAG,IAAI,CAAC/P,qBAAqB,CAACyB,OAAO,CAAC6P,QAAQ,CAAC;MAChE,IAAI,CAAC/R,MAAM,CAACoH,OAAO,CAAC,wFAAsFoJ,WAAa,CAAC;MACxH,IAAI,CAACe,iBAAiB,CAACf,WAAW,IAAIjP,SAAS,CAACyI,YAAY,CAAC;;IAEjE,IAAI,CAAC2E,gBAAgB,EAAE;GAC1B;;;;;;EAODhP,mBAAA,CAAAoB,SAAA,CAAAiR,6BAA6B,GAA7B,UAA8BC,eAAgC;IAA9D,IAAAhS,KAAA;IACI,IAAI,CAACD,MAAM,CAAC+C,KAAK,CAAC,0DAA0D,CAAC;;IAE7E,IAAI,CAACO,OAAO,EAAE,CAACd,OAAO,CAAC,UAACe,GAAG;;MAEvB,IAAIA,GAAG,CAAC2C,OAAO,CAAC+J,kBAAkB,CAACK,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;QACtD;;;MAIJ,IAAM4B,UAAU,GAAGjS,KAAI,CAACQ,qBAAqB,CAACyB,OAAO,CAACqB,GAAG,CAAC;MAC1D,IAAI,CAAC2O,UAAU,EAAE;QACb;;;MAGJ,IAAMC,WAAW,GAAGC,oBAAoB,CAACC,0BAA0B,CAACpS,KAAI,CAACF,UAAU,EAAEmS,UAAU,CAAC;MAChG,IAAIC,WAAW,IAAIA,WAAW,CAACF,eAAe,KAAKA,eAAe,EAAE;QAChEhS,KAAI,CAACD,MAAM,CAACoH,OAAO,CAAC,kGAAgG8K,UAAY,CAAC;QACjIjS,KAAI,CAACsR,iBAAiB,CAACW,UAAU,CAAC;;KAEzC,CAAC;IACF,IAAI,CAACvD,gBAAgB,EAAE;IACvB,IAAI,CAACkD,wBAAwB,CAAC,KAAK,CAAC;GACvC;EAEDlS,mBAAA,CAAAoB,SAAA,CAAAuR,gBAAgB,GAAhB,UAAiBC,eAA+C,EAAEC,aAAsB;IACpF,IAAI,CAACxS,MAAM,CAAC+C,KAAK,CAAC,6CAA6C,CAAC;IAEhE,IAAM0P,YAAY,GAAGD,aAAa,CAACE,YAAY,CAACrN,IAAI,CAACW,SAAS,CAACuM,eAAe,CAAC,CAAC;IAChF,IAAI,CAACzP,iBAAiB,CAACmN,kBAAkB,CAACuB,cAAc,EAAEiB,YAAY,EAAE,IAAI,CAAC;GAChF;;;;EAKD9S,mBAAA,CAAAoB,SAAA,CAAA4R,gBAAgB,GAAhB,UAAiBjC,KAAa,EAAE8B,aAAsB;IAClD,IAAI,CAACxS,MAAM,CAAC+C,KAAK,CAAC,6CAA6C,CAAC;;IAEhE,IAAM6P,mBAAmB,GAAG,IAAI,CAAChG,iBAAiB,CAACqD,kBAAkB,CAACuB,cAAc,EAAE,IAAI,CAAC;IAC3F,IAAI,CAACoB,mBAAmB,EAAE;MACtB,MAAMC,gBAAgB,CAACC,8BAA8B,EAAE;;IAG3D,IAAMC,aAAa,GAAG,IAAI,CAACrP,oBAAoB,CAAC8O,aAAa,CAACQ,YAAY,CAACJ,mBAAmB,CAAC,CAAmC;IAClI,IAAI,CAACG,aAAa,EAAE;MAChB,MAAMF,gBAAgB,CAACI,yCAAyC,EAAE;;IAEtE,IAAI,CAAC7H,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC2F,kBAAkB,CAACuB,cAAc,CAAC,CAAC;;IAGzE,IAAIjC,WAAW,CAAC8B,OAAO,CAAC0B,aAAa,CAACG,SAAS,CAAC,EAAE;MAC9C,IAAMvC,iBAAiB,GAAW,IAAI,CAACjB,oBAAoB,CAACgB,KAAK,CAAC;MAClE,IAAMyC,eAAe,GAAG,IAAI,CAACvG,iBAAiB,CAAC+D,iBAAiB,CAAC;MACjE,IAAI,CAACwC,eAAe,EAAE;QAClB,MAAMN,gBAAgB,CAACO,4BAA4B,EAAE;;MAEzDL,aAAa,CAACG,SAAS,GAAGC,eAAe;;IAG7C,OAAOJ,aAAa;GACvB;;;;EAKDpT,mBAAA,CAAAoB,SAAA,CAAAsS,sBAAsB,GAAtB;IACI,IAAI,CAACrT,MAAM,CAAC+C,KAAK,CAAC,mDAAmD,CAAC;IACtE,IAAMuQ,aAAa,GAAG,IAAI,CAAC1G,iBAAiB,CAACqD,kBAAkB,CAAC2B,cAAc,EAAE,IAAI,CAAC;IACrF,IAAI,CAAC0B,aAAa,EAAE;MAChB,IAAI,CAACtT,MAAM,CAAC+C,KAAK,CAAC,4EAA4E,CAAC;MAC/F,OAAO,IAAI;;IAGf,IAAMgQ,aAAa,GAAG,IAAI,CAACrP,oBAAoB,CAAC4P,aAAa,CAAuB;IACpF,IAAI,CAACP,aAAa,EAAE;MAChB,IAAI,CAAC/S,MAAM,CAACuF,KAAK,CAAC,4EAA4E,CAAC;MAC/F,OAAO,IAAI;;IAGf,OAAOwN,aAAa;GACvB;EAEDpT,mBAAA,CAAAoB,SAAA,CAAAwS,uBAAuB,GAAvB,UAAwBC,aAAuB;IAC3C,IAAM3T,QAAQ,GAAG,IAAI,CAAC4T,wBAAwB,EAAE;IAEhD,IAAID,aAAa,EAAE;MACf,OAAO3T,QAAQ,KAAK,IAAI,CAACA,QAAQ;KACpC,MAAM;MACH,OAAO,CAAC,CAACA,QAAQ;;GAExB;EAEDF,mBAAA,CAAAoB,SAAA,CAAA0S,wBAAwB,GAAxB;IACI,IAAMlQ,GAAG,GAAMhC,SAAS,CAACC,YAAY,SAAIyO,kBAAkB,CAACyD,sBAAwB;IACpF,OAAO,IAAI,CAAC9G,iBAAiB,CAACrJ,GAAG,EAAE,KAAK,CAAC;GAC5C;EAED5D,mBAAA,CAAAoB,SAAA,CAAA8Q,wBAAwB,GAAxB,UAAyB8B,UAAmB;;IAExC,IAAMpQ,GAAG,GAAMhC,SAAS,CAACC,YAAY,SAAIyO,kBAAkB,CAACyD,sBAAwB;IACpF,IAAIC,UAAU,EAAE;MACZ,IAAI,IAAI,CAACF,wBAAwB,EAAE,EAAE;QACjC,MAAMZ,gBAAgB,CAACe,gCAAgC,EAAE;OAC5D,MAAM;;QAEH,IAAI,CAAC9Q,iBAAiB,CAACS,GAAG,EAAE,IAAI,CAAC1D,QAAQ,EAAE,KAAK,CAAC;;KAExD,MAAM,IAAI,CAAC8T,UAAU,IAAI,IAAI,CAACF,wBAAwB,EAAE,KAAK,IAAI,CAAC5T,QAAQ,EAAE;MACzE,IAAI,CAACuL,UAAU,CAAC7H,GAAG,CAAC;;GAE3B;;;;EAKD5D,mBAAA,CAAAoB,SAAA,CAAA8S,kBAAkB,GAAlB;;IAEI,IAAMC,iBAAiB,GAAG,IAAI,CAAClH,iBAAiB,CAACnL,mBAAmB,CAACgO,aAAa,CAAC;IACnF,IAAIqE,iBAAiB,EAAE;MACnB,IAAI,CAACxT,cAAc,CAAC8K,UAAU,CAAC3J,mBAAmB,CAACgO,aAAa,CAAC;MACjE,IAAI,CAACzP,MAAM,CAACqB,OAAO,CAAC,iCAAiC,CAAC;;;IAI1D,IAAM0S,iBAAiB,GAAG,IAAI,CAACnH,iBAAiB,CAACnL,mBAAmB,CAACC,QAAQ,EAAE,IAAI,CAAC;IACpF,IAAIqS,iBAAiB,EAAE;MACnB,IAAI,CAAC3I,UAAU,CAAC,IAAI,CAACd,gBAAgB,CAAC7I,mBAAmB,CAACC,QAAQ,CAAC,CAAC;MACpE,IAAI,CAAC1B,MAAM,CAACqB,OAAO,CAAC,sCAAsC,CAAC;;IAG/D,IAAM2S,mBAAmB,GAAGD,iBAAiB,IAAID,iBAAiB;IAClE,IAAIE,mBAAmB,EAAE;MACrB,IAAMC,aAAa,GAAG,IAAIC,OAAO,CAACF,mBAAmB,EAAE,IAAI,CAACjU,UAAU,CAAC;MACvE,IAAIkU,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACE,MAAM,CAACC,kBAAkB,EAAE;QACjE,IAAI,CAACpU,MAAM,CAACqB,OAAO,CAAC,2GAA2G,CAAC;QAChI,OAAO4S,aAAa,CAACE,MAAM,CAACC,kBAAkB;OACjD,MACI,IAAIH,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACE,MAAM,CAACE,GAAG,EAAE;QACvD,IAAI,CAACrU,MAAM,CAACqB,OAAO,CAAC,4FAA4F,CAAC;QACjH,OAAO4S,aAAa,CAACE,MAAM,CAACE,GAAG;OAClC,MACI;QACD,IAAI,CAACrU,MAAM,CAACqB,OAAO,CAAC,wJAAwJ,CAAC;;;IAIrL,OAAO,IAAI;GACd;;;;EAKD1B,mBAAA,CAAAoB,SAAA,CAAAoD,wBAAwB,GAAxB,UAAyBmQ,eAAuB,EAAErD,UAA+B;IAC7E,IAAMsD,eAAe,GAAGtD,UAAU,CAACtJ,qBAAqB,EAAE;IAE1D,IAAI2M,eAAe,KAAKC,eAAe,EAAE;MACrC,IAAMC,SAAS,GAAG,IAAI,CAACtS,OAAO,CAACoS,eAAe,CAAC;MAC/C,IAAIE,SAAS,EAAE;QACX,IAAI,CAACpJ,UAAU,CAACkJ,eAAe,CAAC;QAChC,IAAI,CAAC9O,OAAO,CAAC+O,eAAe,EAAEC,SAAS,CAAC;QACxC,IAAI,CAACxU,MAAM,CAACqB,OAAO,CAAC,yBAAuB4P,UAAU,CAACwD,cAAc,eAAY,CAAC;QACjF,OAAOF,eAAe;OACzB,MAAM;QACH,IAAI,CAACvU,MAAM,CAACuF,KAAK,CAAC,qCAAmC0L,UAAU,CAACwD,cAAc,0EAAuE,CAAC;;;IAI9J,OAAOH,eAAe;GACzB;;;;EAKD3U,mBAAA,CAAAoB,SAAA,CAAA2T,yBAAyB,GAAzB;IACI,OAAO,IAAI,CAAC9H,iBAAiB,CAACqD,kBAAkB,CAAC0E,gBAAgB,EAAE,IAAI,CAAC;GAC3E;;;;;EAMDhV,mBAAA,CAAAoB,SAAA,CAAA6T,yBAAyB,GAAzB,UAA0B/R,KAAa;IACnC,IAAI,CAACC,iBAAiB,CAACmN,kBAAkB,CAAC0E,gBAAgB,EAAE9R,KAAK,EAAE,IAAI,CAAC;GAC3E;EACL,OAAAlD,mBAAC;AAAD,CAt1CA,CAAyCsE,YAAY;IAw1CxC4Q,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAIhV,QAAgB,EAAEG,MAAc;EAC1E,IAAM8U,YAAY,GAA2B;IACzCtU,aAAa,EAAEQ,oBAAoB,CAACX,aAAa;IACjDM,sBAAsB,EAAEK,oBAAoB,CAACX,aAAa;IAC1DyM,sBAAsB,EAAE,KAAK;IAC7BmB,aAAa,EAAE,KAAK;IACpBrN,qBAAqB,EAAE;GAC1B;EACD,OAAO,IAAIjB,mBAAmB,CAACE,QAAQ,EAAEiV,YAAY,EAAEC,6BAA6B,EAAE/U,MAAM,CAAC;AACjG"},"metadata":{},"sourceType":"module"}