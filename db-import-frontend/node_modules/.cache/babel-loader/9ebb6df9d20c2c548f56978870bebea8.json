{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __assign } from '../../_virtual/_tslib.js';\nimport { PerformanceEventStatus } from './PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PerformanceClient = /** @class */function () {\n  /**\r\n   * Creates an instance of PerformanceClient,\r\n   * an abstract class containing core performance telemetry logic.\r\n   *\r\n   * @constructor\r\n   * @param {string} clientId Client ID of the application\r\n   * @param {string} authority Authority used by the application\r\n   * @param {Logger} logger Logger used by the application\r\n   * @param {string} libraryName Name of the library\r\n   * @param {string} libraryVersion Version of the library\r\n   */\n  function PerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\n    this.authority = authority;\n    this.libraryName = libraryName;\n    this.libraryVersion = libraryVersion;\n    this.applicationTelemetry = applicationTelemetry;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.callbacks = new Map();\n    this.eventsByCorrelationId = new Map();\n    this.measurementsById = new Map();\n  }\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {InProgressPerformanceEvent}\r\n   */\n  PerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    var _a, _b;\n    // Generate a placeholder correlation if the request does not provide one\n    var eventCorrelationId = correlationId || this.generateId();\n    if (!correlationId) {\n      this.logger.info(\"PerformanceClient: No correlation id provided for \" + measureName + \", generating\", eventCorrelationId);\n    }\n    this.logger.trace(\"PerformanceClient: Performance measurement started for \" + measureName, eventCorrelationId);\n    var performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\n    performanceMeasurement.startMeasurement();\n    var inProgressEvent = {\n      eventId: this.generateId(),\n      status: PerformanceEventStatus.InProgress,\n      authority: this.authority,\n      libraryName: this.libraryName,\n      libraryVersion: this.libraryVersion,\n      appName: (_a = this.applicationTelemetry) === null || _a === void 0 ? void 0 : _a.appName,\n      appVersion: (_b = this.applicationTelemetry) === null || _b === void 0 ? void 0 : _b.appVersion,\n      clientId: this.clientId,\n      name: measureName,\n      startTimeMs: Date.now(),\n      correlationId: eventCorrelationId\n    };\n    // Store in progress events so they can be discarded if not ended properly\n    this.cacheEventByCorrelationId(inProgressEvent);\n    this.cacheMeasurement(inProgressEvent, performanceMeasurement);\n    // Return the event and functions the caller can use to properly end/flush the measurement\n    return {\n      endMeasurement: function endMeasurement(event) {\n        var completedEvent = _this.endMeasurement(__assign(__assign({}, inProgressEvent), event));\n        if (completedEvent) {\n          // Cache event so that submeasurements can be added downstream\n          _this.cacheEventByCorrelationId(completedEvent);\n        }\n        return completedEvent;\n      },\n      flushMeasurement: function flushMeasurement() {\n        return _this.flushMeasurements(inProgressEvent.name, inProgressEvent.correlationId);\n      },\n      discardMeasurement: function discardMeasurement() {\n        return _this.discardMeasurements(inProgressEvent.correlationId);\n      },\n      measurement: performanceMeasurement,\n      event: inProgressEvent\n    };\n  };\n  /**\r\n   * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n   * as consumers should instead use the function returned by startMeasurement.\r\n   *\r\n   * @param {PerformanceEvent} event\r\n   * @returns {(PerformanceEvent | null)}\r\n   */\n  PerformanceClient.prototype.endMeasurement = function (event) {\n    var performanceMeasurement = this.measurementsById.get(event.eventId);\n    if (performanceMeasurement) {\n      // Immediately delete so that the same event isnt ended twice\n      this.measurementsById.delete(event.eventId);\n      performanceMeasurement.endMeasurement();\n      var durationMs = performanceMeasurement.flushMeasurement();\n      // null indicates no measurement was taken (e.g. needed performance APIs not present)\n      if (durationMs !== null) {\n        this.logger.trace(\"PerformanceClient: Performance measurement ended for \" + event.name + \": \" + durationMs + \" ms\", event.correlationId);\n        var completedEvent = __assign(__assign({\n          // Allow duration to be overwritten when event ends (e.g. testing), but not status\n          durationMs: Math.round(durationMs)\n        }, event), {\n          status: PerformanceEventStatus.Completed\n        });\n        return completedEvent;\n      } else {\n        this.logger.trace(\"PerformanceClient: Performance measurement not taken\", event.correlationId);\n      }\n    } else {\n      this.logger.trace(\"PerformanceClient: Measurement not found for \" + event.eventId, event.correlationId);\n    }\n    return null;\n  };\n  /**\r\n   * Upserts event into event cache.\r\n   * First key is the correlation id, second key is the event id.\r\n   * Allows for events to be grouped by correlation id,\r\n   * and to easily allow for properties on them to be updated.\r\n   *\r\n   * @private\r\n   * @param {PerformanceEvent} event\r\n   */\n  PerformanceClient.prototype.cacheEventByCorrelationId = function (event) {\n    var existingEvents = this.eventsByCorrelationId.get(event.correlationId);\n    if (existingEvents) {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" added/updated\", event.correlationId);\n      existingEvents.set(event.eventId, event);\n    } else {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" started\", event.correlationId);\n      this.eventsByCorrelationId.set(event.correlationId, new Map().set(event.eventId, event));\n    }\n  };\n  /**\r\n   * Cache measurements by their id.\r\n   *\r\n   * @private\r\n   * @param {PerformanceEvent} event\r\n   * @param {IPerformanceMeasurement} measurement\r\n   */\n  PerformanceClient.prototype.cacheMeasurement = function (event, measurement) {\n    this.measurementsById.set(event.eventId, measurement);\n  };\n  /**\r\n   * Gathers and emits performance events for measurements taked for the given top-level API and correlation ID.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {string} correlationId\r\n   */\n  PerformanceClient.prototype.flushMeasurements = function (measureName, correlationId) {\n    var _this = this;\n    this.logger.trace(\"PerformanceClient: Performance measurements flushed for \" + measureName, correlationId);\n    var eventsForCorrelationId = this.eventsByCorrelationId.get(correlationId);\n    if (eventsForCorrelationId) {\n      this.discardMeasurements(correlationId);\n      /*\r\n       * Manually end incomplete submeasurements to ensure there arent orphaned/never ending events.\r\n       * Incomplete submeasurements are likely an instrumentation bug that should be fixed.\r\n       * IE only supports Map.forEach.\r\n       */\n      var completedEvents_1 = [];\n      eventsForCorrelationId.forEach(function (event) {\n        if (event.name !== measureName && event.status !== PerformanceEventStatus.Completed) {\n          _this.logger.trace(\"PerformanceClient: Incomplete submeasurement \" + event.name + \" found for \" + measureName, correlationId);\n          var completedEvent = _this.endMeasurement(event);\n          if (completedEvent) {\n            completedEvents_1.push(completedEvent);\n          }\n        }\n        completedEvents_1.push(event);\n      });\n      // Sort events by start time (earliest first)\n      var sortedCompletedEvents = completedEvents_1.sort(function (eventA, eventB) {\n        return eventA.startTimeMs - eventB.startTimeMs;\n      });\n      // Take completed top level event and add completed submeasurements durations as properties\n      var topLevelEvents = sortedCompletedEvents.filter(function (event) {\n        return event.name === measureName && event.status === PerformanceEventStatus.Completed;\n      });\n      if (topLevelEvents.length > 0) {\n        /*\r\n         * Only take the first top-level event if there are multiple events with the same correlation id.\r\n         * This greatly simplifies logic for submeasurements.\r\n         */\n        if (topLevelEvents.length > 1) {\n          this.logger.verbose(\"PerformanceClient: Multiple distinct top-level performance events found, using the first\", correlationId);\n        }\n        var topLevelEvent = topLevelEvents[0];\n        this.logger.verbose(\"PerformanceClient: Measurement found for \" + measureName, correlationId);\n        // Build event object with top level and sub measurements\n        var eventToEmit = sortedCompletedEvents.reduce(function (previous, current) {\n          if (current.name !== measureName) {\n            _this.logger.trace(\"PerformanceClient: Complete submeasurement found for \" + current.name, correlationId);\n            // TODO: Emit additional properties for each subMeasurement\n            var subMeasurementName = current.name + \"DurationMs\";\n            /*\r\n             * Some code paths, such as resolving an authority, can occur multiple times.\r\n             * Only take the first measurement, since the second could be read from the cache,\r\n             * or due to the same correlation id being used for two distinct requests.\r\n             */\n            if (!previous[subMeasurementName]) {\n              previous[subMeasurementName] = current.durationMs;\n            } else {\n              _this.logger.verbose(\"PerformanceClient: Submeasurement for \" + measureName + \" already exists for \" + current.name + \", ignoring\", correlationId);\n            }\n            if (current.accessTokenSize) {\n              previous.accessTokenSize = current.accessTokenSize;\n            }\n            if (current.idTokenSize) {\n              previous.idTokenSize = current.idTokenSize;\n            }\n            if (current.refreshTokenSize) {\n              previous.refreshTokenSize = current.refreshTokenSize;\n            }\n          }\n          return previous;\n        }, topLevelEvent);\n        this.emitEvents([eventToEmit], eventToEmit.correlationId);\n      } else {\n        this.logger.verbose(\"PerformanceClient: No completed top-level measurements found for \" + measureName, correlationId);\n      }\n    } else {\n      this.logger.verbose(\"PerformanceClient: No measurements found\", correlationId);\n    }\n  };\n  /**\r\n   * Removes measurements for a given correlation id.\r\n   *\r\n   * @param {string} correlationId\r\n   */\n  PerformanceClient.prototype.discardMeasurements = function (correlationId) {\n    this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n    this.eventsByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Registers a callback function to receive performance events.\r\n   *\r\n   * @param {PerformanceCallbackFunction} callback\r\n   * @returns {string}\r\n   */\n  PerformanceClient.prototype.addPerformanceCallback = function (callback) {\n    var callbackId = this.generateId();\n    this.callbacks.set(callbackId, callback);\n    this.logger.verbose(\"PerformanceClient: Performance callback registered with id: \" + callbackId);\n    return callbackId;\n  };\n  /**\r\n   * Removes a callback registered with addPerformanceCallback.\r\n   *\r\n   * @param {string} callbackId\r\n   * @returns {boolean}\r\n   */\n  PerformanceClient.prototype.removePerformanceCallback = function (callbackId) {\n    var result = this.callbacks.delete(callbackId);\n    if (result) {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" removed.\");\n    } else {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" not removed.\");\n    }\n    return result;\n  };\n  /**\r\n   * Emits events to all registered callbacks.\r\n   *\r\n   * @param {PerformanceEvent[]} events\r\n   * @param {?string} [correlationId]\r\n   */\n  PerformanceClient.prototype.emitEvents = function (events, correlationId) {\n    var _this = this;\n    this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n    this.callbacks.forEach(function (callback, callbackId) {\n      _this.logger.trace(\"PerformanceClient: Emitting event to callback \" + callbackId, correlationId);\n      callback.apply(null, [events]);\n    });\n  };\n  return PerformanceClient;\n}();\nexport { PerformanceClient };","map":{"version":3,"names":["PerformanceClient","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","callbacks","Map","eventsByCorrelationId","measurementsById","prototype","startMeasurement","measureName","correlationId","_this","eventCorrelationId","generateId","info","trace","performanceMeasurement","startPerformanceMeasuremeant","inProgressEvent","eventId","status","PerformanceEventStatus","InProgress","appName","_a","appVersion","_b","name","startTimeMs","Date","now","cacheEventByCorrelationId","cacheMeasurement","endMeasurement","event","completedEvent","__assign","flushMeasurement","flushMeasurements","discardMeasurement","discardMeasurements","measurement","get","delete","durationMs","Math","round","Completed","existingEvents","set","eventsForCorrelationId","completedEvents_1","forEach","push","sortedCompletedEvents","sort","eventA","eventB","topLevelEvents","filter","length","verbose","topLevelEvent","eventToEmit","reduce","previous","current","subMeasurementName","accessTokenSize","idTokenSize","refreshTokenSize","emitEvents","addPerformanceCallback","callback","callbackId","removePerformanceCallback","result","events","apply"],"sources":["../../../src/telemetry/performance/PerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration\";\nimport { Logger } from \"../../logger/Logger\";\nimport { InProgressPerformanceEvent, IPerformanceClient, PerformanceCallbackFunction } from \"./IPerformanceClient\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\nimport { PerformanceEvent, PerformanceEvents, PerformanceEventStatus } from \"./PerformanceEvent\";\n\nexport abstract class PerformanceClient implements IPerformanceClient {\n    protected authority: string;\n    protected libraryName: string;\n    protected libraryVersion: string;\n    protected applicationTelemetry: ApplicationTelemetry;\n    protected clientId: string;\n    protected logger: Logger;\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\n\n    /**\n     * Multiple events with the same correlation id.\n     * Double keyed by correlation id and event id.\n     * @protected\n     * @type {Map<string, Map<string, PerformanceEvent>>}\n     */\n    protected eventsByCorrelationId: Map<string, Map<string, PerformanceEvent>>;\n\n    /**\n     * Underlying performance measurements for each operation\n     *\n     * @protected\n     * @type {Map<string, IPerformanceMeasurement>}\n     */\n    protected measurementsById: Map<string, IPerformanceMeasurement>;\n\n    /**\n     * Creates an instance of PerformanceClient, \n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     */\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.measurementsById = new Map();\n    }\n\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     *\n     * @abstract\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     */\n    abstract startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement;\n\n    /**\n     * Generates and returns a unique id, typically a guid.\n     *\n     * @abstract\n     * @returns {string}\n     */\n    abstract generateId(): string;\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n        }\n\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n        const performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\n        performanceMeasurement.startMeasurement();\n\n        const inProgressEvent: PerformanceEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n        };\n\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n        this.cacheMeasurement(inProgressEvent, performanceMeasurement);\n\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                const completedEvent = this.endMeasurement({\n                    // Initial set of event properties\n                    ...inProgressEvent,\n                    // Properties set when event ends\n                    ...event\n                });\n\n                if (completedEvent) {\n                    // Cache event so that submeasurements can be added downstream\n                    this.cacheEventByCorrelationId(completedEvent);\n                }\n\n                return completedEvent;\n            },\n            flushMeasurement: () => {\n                return this.flushMeasurements(inProgressEvent.name, inProgressEvent.correlationId);\n            },\n            discardMeasurement: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            measurement: performanceMeasurement,\n            event: inProgressEvent\n        };\n\n    }\n\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     *\n     * @param {PerformanceEvent} event\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(event: PerformanceEvent): PerformanceEvent | null {\n        const performanceMeasurement = this.measurementsById.get(event.eventId);\n        if (performanceMeasurement) {\n            // Immediately delete so that the same event isnt ended twice\n            this.measurementsById.delete(event.eventId);\n            performanceMeasurement.endMeasurement();\n            const durationMs = performanceMeasurement.flushMeasurement();\n            // null indicates no measurement was taken (e.g. needed performance APIs not present)\n            if (durationMs !== null) {\n                this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\n\n                const completedEvent: PerformanceEvent = {\n                    // Allow duration to be overwritten when event ends (e.g. testing), but not status\n                    durationMs: Math.round(durationMs),\n                    ...event,\n                    status: PerformanceEventStatus.Completed,\n                };\n\n                return completedEvent;\n            } else {\n                this.logger.trace(\"PerformanceClient: Performance measurement not taken\", event.correlationId);\n            }\n        } else {\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n        }\n\n        return null;\n    }\n\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    private cacheEventByCorrelationId(event: PerformanceEvent) {\n        const existingEvents = this.eventsByCorrelationId.get(event.correlationId);\n        if (existingEvents) {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n            existingEvents.set(event.eventId, event);\n        } else {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n            this.eventsByCorrelationId.set(event.correlationId, new Map().set(event.eventId, event));\n        }\n    }\n\n    /**\n     * Cache measurements by their id.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     * @param {IPerformanceMeasurement} measurement\n     */\n    private cacheMeasurement(event: PerformanceEvent, measurement: IPerformanceMeasurement) {\n        this.measurementsById.set(event.eventId, measurement);\n    }\n\n    /**\n     * Gathers and emits performance events for measurements taked for the given top-level API and correlation ID.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {string} correlationId\n     */\n    flushMeasurements(measureName: PerformanceEvents, correlationId: string): void {\n        this.logger.trace(`PerformanceClient: Performance measurements flushed for ${measureName}`, correlationId);\n        const eventsForCorrelationId = this.eventsByCorrelationId.get(correlationId);\n        if (eventsForCorrelationId) {\n            this.discardMeasurements(correlationId);\n\n            /*\n             * Manually end incomplete submeasurements to ensure there arent orphaned/never ending events.\n             * Incomplete submeasurements are likely an instrumentation bug that should be fixed.\n             * IE only supports Map.forEach.\n             */\n            const completedEvents: PerformanceEvent[] = [];\n            eventsForCorrelationId.forEach(event => {\n                if (event.name !== measureName && event.status !== PerformanceEventStatus.Completed) {\n                    this.logger.trace(`PerformanceClient: Incomplete submeasurement ${event.name} found for ${measureName}`, correlationId);\n\n                    const completedEvent = this.endMeasurement(event);\n                    if (completedEvent) {\n                        completedEvents.push(completedEvent);\n                    }\n                }\n\n                completedEvents.push(event);\n            });\n\n            // Sort events by start time (earliest first)\n            const sortedCompletedEvents = completedEvents.sort((eventA, eventB) => eventA.startTimeMs - eventB.startTimeMs);\n\n            // Take completed top level event and add completed submeasurements durations as properties\n            const topLevelEvents = sortedCompletedEvents.filter(event => event.name === measureName && event.status === PerformanceEventStatus.Completed);\n            if (topLevelEvents.length > 0) {\n                /*\n                 * Only take the first top-level event if there are multiple events with the same correlation id.\n                 * This greatly simplifies logic for submeasurements.\n                 */\n                if (topLevelEvents.length > 1) {\n                    this.logger.verbose(\"PerformanceClient: Multiple distinct top-level performance events found, using the first\", correlationId);\n                }\n                const topLevelEvent = topLevelEvents[0];\n\n                this.logger.verbose(`PerformanceClient: Measurement found for ${measureName}`, correlationId);\n\n                // Build event object with top level and sub measurements\n                const eventToEmit = sortedCompletedEvents.reduce((previous, current) => {\n                    if (current.name !== measureName) {\n                        this.logger.trace(`PerformanceClient: Complete submeasurement found for ${current.name}`, correlationId);\n                        // TODO: Emit additional properties for each subMeasurement\n                        const subMeasurementName = `${current.name}DurationMs`;\n                        /*\n                         * Some code paths, such as resolving an authority, can occur multiple times.\n                         * Only take the first measurement, since the second could be read from the cache,\n                         * or due to the same correlation id being used for two distinct requests.\n                         */\n                        if (!previous[subMeasurementName]) {\n                            previous[subMeasurementName] = current.durationMs;\n                        } else {\n                            this.logger.verbose(`PerformanceClient: Submeasurement for ${measureName} already exists for ${current.name}, ignoring`, correlationId);\n                        }\n                        if (current.accessTokenSize) {\n                            previous.accessTokenSize = current.accessTokenSize;\n                        }\n                        if (current.idTokenSize) {\n                            previous.idTokenSize = current.idTokenSize;\n                        }\n                        if (current.refreshTokenSize) {\n                            previous.refreshTokenSize = current.refreshTokenSize;\n                        }\n                    }\n\n                    return previous;\n                }, topLevelEvent);\n\n                this.emitEvents([eventToEmit], eventToEmit.correlationId);\n            } else {\n                this.logger.verbose(`PerformanceClient: No completed top-level measurements found for ${measureName}`, correlationId);\n            }\n        } else {\n            this.logger.verbose(\"PerformanceClient: No measurements found\", correlationId);\n        }\n    }\n\n    /**\n     * Removes measurements for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId: string): void {\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n        this.eventsByCorrelationId.delete(correlationId);\n    }\n\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n\n        return callbackId;\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        const result = this.callbacks.delete(callbackId);\n\n        if (result) {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n        } else {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n        }\n\n        return result;\n    }\n\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n\n        this.callbacks.forEach((callback: PerformanceCallbackFunction, callbackId: string) => {\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n            callback.apply(null, [events]);\n        });\n    }\n\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAQH,IAAAA,iBAAA;EAyBI;;;;;;;;;;AAUG;EACH,SAAYA,kBAAAC,QAAgB,EAAEC,SAAiB,EAAEC,MAAc,EAAEC,WAAmB,EAAEC,cAAsB,EAAEC,oBAA0C;IACpJ,IAAI,CAACJ,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAI,CAACC,qBAAqB,GAAG,IAAID,GAAG,EAAE;IACtC,IAAI,CAACE,gBAAgB,GAAG,IAAIF,GAAG,EAAE;;EAqBrC;;;;;;AAMG;EACHR,iBAAA,CAAAW,SAAA,CAAAC,gBAAgB,GAAhB,UAAiBC,WAA8B,EAAEC,aAAsB;IAAvE,IAwDCC,KAAA;;;IAtDG,IAAMC,kBAAkB,GAAGF,aAAa,IAAI,IAAI,CAACG,UAAU,EAAE;IAC7D,IAAI,CAACH,aAAa,EAAE;MAChB,IAAI,CAACX,MAAM,CAACe,IAAI,CAAC,oDAAqD,GAAAL,WAAW,GAAc,gBAAEG,kBAAkB,CAAC;IACvH;IAED,IAAI,CAACb,MAAM,CAACgB,KAAK,CAAC,4DAA0DN,WAAa,EAAEG,kBAAkB,CAAC;IAC9G,IAAMI,sBAAsB,GAAG,IAAI,CAACC,4BAA4B,CAACR,WAAW,EAAEG,kBAAkB,CAAC;IACjGI,sBAAsB,CAACR,gBAAgB,EAAE;IAEzC,IAAMU,eAAe,GAAqB;MACtCC,OAAO,EAAE,IAAI,CAACN,UAAU,EAAE;MAC1BO,MAAM,EAAEC,sBAAsB,CAACC,UAAU;MACzCxB,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCsB,OAAO,EAAE,CAAAC,EAAA,OAAI,CAACtB,oBAAoB,cAAAsB,EAAA,uBAAAA,EAAA,CAAED,OAAO;MAC3CE,UAAU,EAAE,CAAAC,EAAA,OAAI,CAACxB,oBAAoB,cAAAwB,EAAA,uBAAAA,EAAA,CAAED,UAAU;MACjD5B,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvB8B,IAAI,EAAElB,WAAW;MACjBmB,WAAW,EAAEC,IAAI,CAACC,GAAG,EAAE;MACvBpB,aAAa,EAAEE;KAClB;;IAGD,IAAI,CAACmB,yBAAyB,CAACb,eAAe,CAAC;IAC/C,IAAI,CAACc,gBAAgB,CAACd,eAAe,EAAEF,sBAAsB,CAAC;;IAG9D,OAAO;MACHiB,cAAc,EAAE,SAAAA,eAACC,KAAiC;QAC9C,IAAMC,cAAc,GAAGxB,KAAI,CAACsB,cAAc,CAAAG,QAAA,CAAAA,QAAA,KAEnClB,eAAe,GAEfgB,KAAK,EACV;QAEF,IAAIC,cAAc,EAAE;;UAEhBxB,KAAI,CAACoB,yBAAyB,CAACI,cAAc,CAAC;QACjD;QAED,OAAOA,cAAc;OACxB;MACDE,gBAAgB,EAAE,SAAAA,iBAAA;QACd,OAAO1B,KAAI,CAAC2B,iBAAiB,CAACpB,eAAe,CAACS,IAAI,EAAET,eAAe,CAACR,aAAa,CAAC;OACrF;MACD6B,kBAAkB,EAAE,SAAAA,mBAAA;QAChB,OAAO5B,KAAI,CAAC6B,mBAAmB,CAACtB,eAAe,CAACR,aAAa,CAAC;OACjE;MACD+B,WAAW,EAAEzB,sBAAsB;MACnCkB,KAAK,EAAEhB;KACV;GAEJ;EAED;;;;;;AAMG;EACHtB,iBAAc,CAAAW,SAAA,CAAA0B,cAAA,GAAd,UAAeC,KAAuB;IAClC,IAAMlB,sBAAsB,GAAG,IAAI,CAACV,gBAAgB,CAACoC,GAAG,CAACR,KAAK,CAACf,OAAO,CAAC;IACvE,IAAIH,sBAAsB,EAAE;;MAExB,IAAI,CAACV,gBAAgB,CAACqC,MAAM,CAACT,KAAK,CAACf,OAAO,CAAC;MAC3CH,sBAAsB,CAACiB,cAAc,EAAE;MACvC,IAAMW,UAAU,GAAG5B,sBAAsB,CAACqB,gBAAgB,EAAE;;MAE5D,IAAIO,UAAU,KAAK,IAAI,EAAE;QACrB,IAAI,CAAC7C,MAAM,CAACgB,KAAK,CAAC,0DAAwDmB,KAAK,CAACP,IAAI,UAAKiB,UAAU,GAAK,OAAEV,KAAK,CAACxB,aAAa,CAAC;QAE9H,IAAMyB,cAAc,GAAAC,QAAA,CAAAA,QAAA;;UAEhBQ,UAAU,EAAEC,IAAI,CAACC,KAAK,CAACF,UAAU;QAAC,GAC/BV,KAAK;UACRd,MAAM,EAAEC,sBAAsB,CAAC0B;QAAS,EAC3C;QAED,OAAOZ,cAAc;MACxB,OAAM;QACH,IAAI,CAACpC,MAAM,CAACgB,KAAK,CAAC,sDAAsD,EAAEmB,KAAK,CAACxB,aAAa,CAAC;MACjG;IACJ,OAAM;MACH,IAAI,CAACX,MAAM,CAACgB,KAAK,CAAC,+CAAgD,GAAAmB,KAAK,CAACf,OAAS,EAAEe,KAAK,CAACxB,aAAa,CAAC;IAC1G;IAED,OAAO,IAAI;GACd;EAED;;;;;;;;AAQG;EACKd,iBAAyB,CAAAW,SAAA,CAAAwB,yBAAA,GAAjC,UAAkCG,KAAuB;IACrD,IAAMc,cAAc,GAAG,IAAI,CAAC3C,qBAAqB,CAACqC,GAAG,CAACR,KAAK,CAACxB,aAAa,CAAC;IAC1E,IAAIsC,cAAc,EAAE;MAChB,IAAI,CAACjD,MAAM,CAACgB,KAAK,CAAC,iDAAkD,GAAAmB,KAAK,CAACP,IAAI,mBAAgB,EAAEO,KAAK,CAACxB,aAAa,CAAC;MACpHsC,cAAc,CAACC,GAAG,CAACf,KAAK,CAACf,OAAO,EAAEe,KAAK,CAAC;IAC3C,OAAM;MACH,IAAI,CAACnC,MAAM,CAACgB,KAAK,CAAC,iDAAkD,GAAAmB,KAAK,CAACP,IAAI,aAAU,EAAEO,KAAK,CAACxB,aAAa,CAAC;MAC9G,IAAI,CAACL,qBAAqB,CAAC4C,GAAG,CAACf,KAAK,CAACxB,aAAa,EAAE,IAAIN,GAAG,EAAE,CAAC6C,GAAG,CAACf,KAAK,CAACf,OAAO,EAAEe,KAAK,CAAC,CAAC;IAC3F;GACJ;EAED;;;;;;AAMG;EACKtC,iBAAA,CAAAW,SAAA,CAAAyB,gBAAgB,GAAxB,UAAyBE,KAAuB,EAAEO,WAAoC;IAClF,IAAI,CAACnC,gBAAgB,CAAC2C,GAAG,CAACf,KAAK,CAACf,OAAO,EAAEsB,WAAW,CAAC;GACxD;EAED;;;;;AAKG;EACH7C,iBAAA,CAAAW,SAAA,CAAA+B,iBAAiB,GAAjB,UAAkB7B,WAA8B,EAAEC,aAAqB;IAAvE,IA+ECC,KAAA;IA9EG,IAAI,CAACZ,MAAM,CAACgB,KAAK,CAAC,6DAA2DN,WAAa,EAAEC,aAAa,CAAC;IAC1G,IAAMwC,sBAAsB,GAAG,IAAI,CAAC7C,qBAAqB,CAACqC,GAAG,CAAChC,aAAa,CAAC;IAC5E,IAAIwC,sBAAsB,EAAE;MACxB,IAAI,CAACV,mBAAmB,CAAC9B,aAAa,CAAC;MAEvC;;;;AAIG;MACH,IAAMyC,iBAAe,GAAuB,EAAE;MAC9CD,sBAAsB,CAACE,OAAO,CAAC,UAAAlB,KAAK;QAChC,IAAIA,KAAK,CAACP,IAAI,KAAKlB,WAAW,IAAIyB,KAAK,CAACd,MAAM,KAAKC,sBAAsB,CAAC0B,SAAS,EAAE;UACjFpC,KAAI,CAACZ,MAAM,CAACgB,KAAK,CAAC,+CAAgD,GAAAmB,KAAK,CAACP,IAAI,GAAc,gBAAAlB,WAAa,EAAEC,aAAa,CAAC;UAEvH,IAAMyB,cAAc,GAAGxB,KAAI,CAACsB,cAAc,CAACC,KAAK,CAAC;UACjD,IAAIC,cAAc,EAAE;YAChBgB,iBAAe,CAACE,IAAI,CAAClB,cAAc,CAAC;UACvC;QACJ;QAEDgB,iBAAe,CAACE,IAAI,CAACnB,KAAK,CAAC;MAC/B,CAAC,CAAC;;MAGF,IAAMoB,qBAAqB,GAAGH,iBAAe,CAACI,IAAI,CAAC,UAACC,MAAM,EAAEC,MAAM;QAAK,OAAAD,MAAM,CAAC5B,WAAW,GAAG6B,MAAM,CAAC7B,WAAW;MAAA,EAAC;;MAG/G,IAAM8B,cAAc,GAAGJ,qBAAqB,CAACK,MAAM,CAAC,UAAAzB,KAAK;QAAI,OAAAA,KAAK,CAACP,IAAI,KAAKlB,WAAW,IAAIyB,KAAK,CAACd,MAAM,KAAKC,sBAAsB,CAAC0B,SAAS;MAAA,EAAC;MAC7I,IAAIW,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;QAC3B;;;AAGG;QACH,IAAIF,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;UAC3B,IAAI,CAAC7D,MAAM,CAAC8D,OAAO,CAAC,0FAA0F,EAAEnD,aAAa,CAAC;QACjI;QACD,IAAMoD,aAAa,GAAGJ,cAAc,CAAC,CAAC,CAAC;QAEvC,IAAI,CAAC3D,MAAM,CAAC8D,OAAO,CAAC,8CAA4CpD,WAAa,EAAEC,aAAa,CAAC;;QAG7F,IAAMqD,WAAW,GAAGT,qBAAqB,CAACU,MAAM,CAAC,UAACC,QAAQ,EAAEC,OAAO;UAC/D,IAAIA,OAAO,CAACvC,IAAI,KAAKlB,WAAW,EAAE;YAC9BE,KAAI,CAACZ,MAAM,CAACgB,KAAK,CAAC,0DAAwDmD,OAAO,CAACvC,IAAM,EAAEjB,aAAa,CAAC;;YAExG,IAAMyD,kBAAkB,GAAMD,OAAO,CAACvC,IAAI,eAAY;YACtD;;;;AAIG;YACH,IAAI,CAACsC,QAAQ,CAACE,kBAAkB,CAAC,EAAE;cAC/BF,QAAQ,CAACE,kBAAkB,CAAC,GAAGD,OAAO,CAACtB,UAAU;YACpD,OAAM;cACHjC,KAAI,CAACZ,MAAM,CAAC8D,OAAO,CAAC,wCAAyC,GAAApD,WAAW,GAAuB,yBAAAyD,OAAO,CAACvC,IAAI,eAAY,EAAEjB,aAAa,CAAC;YAC1I;YACD,IAAIwD,OAAO,CAACE,eAAe,EAAE;cACzBH,QAAQ,CAACG,eAAe,GAAGF,OAAO,CAACE,eAAe;YACrD;YACD,IAAIF,OAAO,CAACG,WAAW,EAAE;cACrBJ,QAAQ,CAACI,WAAW,GAAGH,OAAO,CAACG,WAAW;YAC7C;YACD,IAAIH,OAAO,CAACI,gBAAgB,EAAE;cAC1BL,QAAQ,CAACK,gBAAgB,GAAGJ,OAAO,CAACI,gBAAgB;YACvD;UACJ;UAED,OAAOL,QAAQ;SAClB,EAAEH,aAAa,CAAC;QAEjB,IAAI,CAACS,UAAU,CAAC,CAACR,WAAW,CAAC,EAAEA,WAAW,CAACrD,aAAa,CAAC;MAC5D,OAAM;QACH,IAAI,CAACX,MAAM,CAAC8D,OAAO,CAAC,sEAAoEpD,WAAa,EAAEC,aAAa,CAAC;MACxH;IACJ,OAAM;MACH,IAAI,CAACX,MAAM,CAAC8D,OAAO,CAAC,0CAA0C,EAAEnD,aAAa,CAAC;IACjF;GACJ;EAED;;;;AAIG;EACHd,iBAAmB,CAAAW,SAAA,CAAAiC,mBAAA,GAAnB,UAAoB9B,aAAqB;IACrC,IAAI,CAACX,MAAM,CAACgB,KAAK,CAAC,uDAAuD,EAAEL,aAAa,CAAC;IACzF,IAAI,CAACL,qBAAqB,CAACsC,MAAM,CAACjC,aAAa,CAAC;GACnD;EAED;;;;;AAKG;EACHd,iBAAsB,CAAAW,SAAA,CAAAiE,sBAAA,GAAtB,UAAuBC,QAAqC;IACxD,IAAMC,UAAU,GAAG,IAAI,CAAC7D,UAAU,EAAE;IACpC,IAAI,CAACV,SAAS,CAAC8C,GAAG,CAACyB,UAAU,EAAED,QAAQ,CAAC;IACxC,IAAI,CAAC1E,MAAM,CAAC8D,OAAO,CAAC,8DAA+D,GAAAa,UAAY,CAAC;IAEhG,OAAOA,UAAU;GACpB;EAED;;;;;AAKG;EACH9E,iBAAyB,CAAAW,SAAA,CAAAoE,yBAAA,GAAzB,UAA0BD,UAAkB;IACxC,IAAME,MAAM,GAAG,IAAI,CAACzE,SAAS,CAACwC,MAAM,CAAC+B,UAAU,CAAC;IAEhD,IAAIE,MAAM,EAAE;MACR,IAAI,CAAC7E,MAAM,CAAC8D,OAAO,CAAC,0CAA2C,GAAAa,UAAU,GAAW,YAAC;IACxF,OAAM;MACH,IAAI,CAAC3E,MAAM,CAAC8D,OAAO,CAAC,0CAA2C,GAAAa,UAAU,GAAe,gBAAC;IAC5F;IAED,OAAOE,MAAM;GAChB;EAED;;;;;AAKG;EACHhF,iBAAA,CAAAW,SAAA,CAAAgE,UAAU,GAAV,UAAWM,MAA0B,EAAEnE,aAAqB;IAA5D,IAOCC,KAAA;IANG,IAAI,CAACZ,MAAM,CAAC8D,OAAO,CAAC,gDAAgD,EAAEnD,aAAa,CAAC;IAEpF,IAAI,CAACP,SAAS,CAACiD,OAAO,CAAC,UAACqB,QAAqC,EAAEC,UAAkB;MAC7E/D,KAAI,CAACZ,MAAM,CAACgB,KAAK,CAAC,mDAAiD2D,UAAY,EAAEhE,aAAa,CAAC;MAC/F+D,QAAQ,CAACK,KAAK,CAAC,IAAI,EAAE,CAACD,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC;GACL;EAEL,OAACjF,iBAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}