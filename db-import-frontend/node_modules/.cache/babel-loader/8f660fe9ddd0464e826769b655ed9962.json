{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nvar RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\nvar PkceGenerator = /** @class */function () {\n  function PkceGenerator(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n  PkceGenerator.prototype.generateCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var codeVerifier, codeChallenge;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            codeVerifier = this.generateCodeVerifier();\n            return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];\n          case 1:\n            codeChallenge = _a.sent();\n            return [2 /*return*/, {\n              verifier: codeVerifier,\n              challenge: codeChallenge\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n  PkceGenerator.prototype.generateCodeVerifier = function () {\n    try {\n      // Generate random values as utf-8\n      var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  };\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n  PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pkceHashedCodeVerifier, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];\n          case 1:\n            pkceHashedCodeVerifier = _a.sent();\n            // encode hash as base64\n            return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\n          case 2:\n            e_1 = _a.sent();\n            throw BrowserAuthError.createPkceNotGeneratedError(e_1);\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return PkceGenerator;\n}();\nexport { PkceGenerator };","map":{"version":3,"names":["RANDOM_BYTE_ARR_LENGTH","PkceGenerator","cryptoObj","base64Encode","Base64Encode","prototype","generateCodes","codeVerifier","generateCodeVerifier","generateCodeChallengeFromVerifier","codeChallenge","_a","sent","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","BrowserAuthError","createPkceNotGeneratedError","pkceCodeVerifier","sha256Digest","pkceHashedCodeVerifier","e_1"],"sources":["../../src/crypto/PkceGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { PkceCodes } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\n\r\n// Constant byte array length\r\nconst RANDOM_BYTE_ARR_LENGTH = 32;\r\n\r\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\r\nexport class PkceGenerator {\r\n\r\n    private base64Encode: Base64Encode;\r\n    private cryptoObj: BrowserCrypto;\r\n\r\n    constructor(cryptoObj: BrowserCrypto) {\r\n        this.base64Encode = new Base64Encode();\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n     */\r\n    async generateCodes(): Promise<PkceCodes> {\r\n        const codeVerifier = this.generateCodeVerifier();\r\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\r\n        return {\r\n            verifier: codeVerifier,\r\n            challenge: codeChallenge\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates a random 32 byte buffer and returns the base64\r\n     * encoded string to be used as a PKCE Code Verifier\r\n     */\r\n    private generateCodeVerifier(): string {\r\n        try {\r\n            // Generate random values as utf-8\r\n            const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // encode verifier as base64\r\n            const pkceCodeVerifierB64: string = this.base64Encode.urlEncodeArr(buffer);\r\n            return pkceCodeVerifierB64;\r\n        } catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a base64 encoded PKCE Code Challenge string from the\r\n     * hash created from the PKCE Code Verifier supplied\r\n     */\r\n    private async generateCodeChallengeFromVerifier(pkceCodeVerifier: string): Promise<string> {\r\n        try {\r\n            // hashed verifier\r\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\r\n            // encode hash as base64\r\n            return this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\r\n        } catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA;;;;AAUA;AACA,IAAMA,sBAAsB,GAAG,EAAE;AAEjC;;;;EAQI,SAAAC,cAAYC,SAAwB;IAChC,IAAI,CAACC,YAAY,GAAG,IAAIC,YAAY,EAAE;IACtC,IAAI,CAACF,SAAS,GAAGA,SAAS;;;;;EAMxBD,aAAA,CAAAI,SAAA,CAAAC,aAAa,GAAnB;;;;;;YACUC,YAAY,GAAG,IAAI,CAACC,oBAAoB,EAAE;YAC1B,qBAAM,IAAI,CAACC,iCAAiC,CAACF,YAAY,CAAC;;YAA1EG,aAAa,GAAGC,EAAA,CAAAC,IAAA,EAA0D;YAChF,sBAAO;cACHC,QAAQ,EAAEN,YAAY;cACtBO,SAAS,EAAEJ;aACd;;;;GACJ;;;;;EAMOT,aAAA,CAAAI,SAAA,CAAAG,oBAAoB,GAA5B;IACI,IAAI;;MAEA,IAAMO,MAAM,GAAe,IAAIC,UAAU,CAAChB,sBAAsB,CAAC;MACjE,IAAI,CAACE,SAAS,CAACe,eAAe,CAACF,MAAM,CAAC;;MAEtC,IAAMG,mBAAmB,GAAW,IAAI,CAACf,YAAY,CAACgB,YAAY,CAACJ,MAAM,CAAC;MAC1E,OAAOG,mBAAmB;KAC7B,CAAC,OAAOE,CAAC,EAAE;MACR,MAAMC,gBAAgB,CAACC,2BAA2B,CAACF,CAAC,CAAC;;GAE5D;;;;;EAManB,aAAA,CAAAI,SAAA,CAAAI,iCAAiC,GAA/C,UAAgDc,gBAAwB;;;;;;;YAGjC,qBAAM,IAAI,CAACrB,SAAS,CAACsB,YAAY,CAACD,gBAAgB,CAAC;;YAA5EE,sBAAsB,GAAGd,EAAA,CAAAC,IAAA,EAAmD;;YAElF,sBAAO,IAAI,CAACT,YAAY,CAACgB,YAAY,CAAC,IAAIH,UAAU,CAACS,sBAAsB,CAAC,CAAC;;;YAE7E,MAAMJ,gBAAgB,CAACC,2BAA2B,CAACI,GAAC,CAAC;;;;;;GAE5D;;EACL,OAAAzB,aAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module"}