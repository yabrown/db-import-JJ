{"ast":null,"code":"import _slicedToArray from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as msalCommon from \"@azure/msal-common\";\nimport { isNode } from \"@azure/core-util\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { formatError, formatSuccess } from \"../util/logging\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nvar LatestAuthenticationRecordVersion = \"1.0\";\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(scopes, logger, msalToken, getTokenOptions) {\n  var error = function error(message) {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions: getTokenOptions,\n      message: message\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(\"Response had no \\\"expiresOn\\\" property.\");\n  }\n  if (!msalToken.accessToken) {\n    throw error(\"Response had no \\\"accessToken\\\" property.\");\n  }\n}\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId, host) {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(\"\".concat(tenantId, \"/?$\")).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return \"\".concat(host, \"/\").concat(tenantId);\n  }\n}\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(tenantId, authorityHost) {\n  if (tenantId === \"adfs\" && authorityHost) {\n    return [authorityHost];\n  }\n  return [];\n}\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param logger - The logger of the credential.\n * @internal\n */\nexport var defaultLoggerCallback = function defaultLoggerCallback(logger) {\n  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isNode ? \"Node\" : \"Browser\";\n  return function (level, message, containsPii) {\n    if (containsPii) {\n      return;\n    }\n    switch (level) {\n      case msalCommon.LogLevel.Error:\n        logger.info(\"MSAL \".concat(platform, \" V2 error: \").concat(message));\n        return;\n      case msalCommon.LogLevel.Info:\n        logger.info(\"MSAL \".concat(platform, \" V2 info message: \").concat(message));\n        return;\n      case msalCommon.LogLevel.Verbose:\n        logger.info(\"MSAL \".concat(platform, \" V2 verbose message: \").concat(message));\n        return;\n      case msalCommon.LogLevel.Warning:\n        logger.info(\"MSAL \".concat(platform, \" V2 warning: \").concat(message));\n        return;\n    }\n  };\n};\n/**\n * The common utility functions for the MSAL clients.\n * Defined as a class so that the classes extending this one can have access to its methods and protected properties.\n *\n * It keeps track of a logger and an in-memory copy of the AuthenticationRecord.\n *\n * @internal\n */\nexport var MsalBaseUtilities = /*#__PURE__*/function () {\n  function MsalBaseUtilities(options) {\n    _classCallCheck(this, MsalBaseUtilities);\n    this.logger = options.logger;\n    this.account = options.authenticationRecord;\n  }\n  /**\n   * Generates a UUID\n   */\n  _createClass(MsalBaseUtilities, [{\n    key: \"generateUuid\",\n    value: function generateUuid() {\n      return uuidv4();\n    }\n    /**\n     * Handles the MSAL authentication result.\n     * If the result has an account, we update the local account reference.\n     * If the token received is invalid, an error will be thrown depending on what's missing.\n     */\n  }, {\n    key: \"handleResult\",\n    value: function handleResult(scopes, clientId, result, getTokenOptions) {\n      if (result === null || result === void 0 ? void 0 : result.account) {\n        this.account = msalToPublic(clientId, result.account);\n      }\n      ensureValidMsalToken(scopes, this.logger, result, getTokenOptions);\n      this.logger.getToken.info(formatSuccess(scopes));\n      return {\n        token: result.accessToken,\n        expiresOnTimestamp: result.expiresOn.getTime()\n      };\n    }\n    /**\n     * Handles MSAL errors.\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(scopes, error, getTokenOptions) {\n      if (error.name === \"AuthError\" || error.name === \"ClientAuthError\" || error.name === \"BrowserAuthError\") {\n        var msalError = error;\n        switch (msalError.errorCode) {\n          case \"endpoints_resolution_error\":\n            this.logger.info(formatError(scopes, error.message));\n            return new CredentialUnavailableError(error.message);\n          case \"device_code_polling_cancelled\":\n            return new AbortError(\"The authentication has been aborted by the caller.\");\n          case \"consent_required\":\n          case \"interaction_required\":\n          case \"login_required\":\n            this.logger.info(formatError(scopes, \"Authentication returned errorCode \".concat(msalError.errorCode)));\n            break;\n          default:\n            this.logger.info(formatError(scopes, \"Failed to acquire token: \".concat(error.message)));\n            break;\n        }\n      }\n      if (error.name === \"ClientConfigurationError\" || error.name === \"BrowserConfigurationAuthError\" || error.name === \"AbortError\") {\n        return error;\n      }\n      return new AuthenticationRequiredError({\n        scopes: scopes,\n        getTokenOptions: getTokenOptions,\n        message: error.message\n      });\n    }\n  }]);\n  return MsalBaseUtilities;\n}();\n// transformations.ts\nexport function publicToMsal(account) {\n  var _ref = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [],\n    _ref2 = _slicedToArray(_ref, 1),\n    environment = _ref2[0];\n  return Object.assign(Object.assign({}, account), {\n    localAccountId: account.homeAccountId,\n    environment: environment\n  });\n}\nexport function msalToPublic(clientId, account) {\n  var record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId: clientId,\n    version: LatestAuthenticationRecordVersion\n  };\n  return record;\n}\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record) {\n  return JSON.stringify(record);\n}\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord) {\n  var parsed = JSON.parse(serializedRecord);\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n  return parsed;\n}","map":{"version":3,"names":["msalCommon","isNode","AbortError","v4","uuidv4","formatError","formatSuccess","AuthenticationRequiredError","CredentialUnavailableError","DefaultAuthorityHost","DefaultTenantId","LatestAuthenticationRecordVersion","ensureValidMsalToken","scopes","logger","msalToken","getTokenOptions","error","message","getToken","info","Array","isArray","expiresOn","accessToken","getAuthority","tenantId","host","RegExp","concat","test","endsWith","getKnownAuthorities","authorityHost","defaultLoggerCallback","platform","arguments","length","undefined","level","containsPii","LogLevel","Error","Info","Verbose","Warning","MsalBaseUtilities","options","_classCallCheck","account","authenticationRecord","_createClass","key","value","generateUuid","handleResult","clientId","result","msalToPublic","token","expiresOnTimestamp","getTime","handleError","name","msalError","errorCode","publicToMsal","_ref","authority","match","_ref2","_slicedToArray","environment","Object","assign","localAccountId","homeAccountId","record","username","version","serializeAuthenticationRecord","JSON","stringify","deserializeAuthenticationRecord","serializedRecord","parsed","parse"],"sources":["../../../src/msal/utils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalCommon from \"@azure/msal-common\";\nimport { isNode } from \"@azure/core-util\";\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { CredentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\nimport { AuthenticationRecord, MsalAccountInfo, MsalResult, MsalToken } from \"./types\";\nimport { MsalFlowOptions } from \"./flows\";\n\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(\n  scopes: string | string[],\n  logger: CredentialLogger,\n  msalToken?: MsalToken,\n  getTokenOptions?: GetTokenOptions\n): void {\n  const error = (message: string): Error => {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions,\n      message,\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(`Response had no \"expiresOn\" property.`);\n  }\n  if (!msalToken.accessToken) {\n    throw error(`Response had no \"accessToken\" property.`);\n  }\n}\n\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId: string, host?: string): string {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(`${tenantId}/?$`).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return `${host}/${tenantId}`;\n  }\n}\n\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(tenantId: string, authorityHost: string): string[] {\n  if (tenantId === \"adfs\" && authorityHost) {\n    return [authorityHost];\n  }\n  return [];\n}\n\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param logger - The logger of the credential.\n * @internal\n */\nexport const defaultLoggerCallback: (\n  logger: CredentialLogger,\n  platform?: \"Node\" | \"Browser\"\n) => msalCommon.ILoggerCallback =\n  (logger: CredentialLogger, platform: \"Node\" | \"Browser\" = isNode ? \"Node\" : \"Browser\") =>\n  (level, message, containsPii): void => {\n    if (containsPii) {\n      return;\n    }\n    switch (level) {\n      case msalCommon.LogLevel.Error:\n        logger.info(`MSAL ${platform} V2 error: ${message}`);\n        return;\n      case msalCommon.LogLevel.Info:\n        logger.info(`MSAL ${platform} V2 info message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Verbose:\n        logger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Warning:\n        logger.info(`MSAL ${platform} V2 warning: ${message}`);\n        return;\n    }\n  };\n\n/**\n * The common utility functions for the MSAL clients.\n * Defined as a class so that the classes extending this one can have access to its methods and protected properties.\n *\n * It keeps track of a logger and an in-memory copy of the AuthenticationRecord.\n *\n * @internal\n */\nexport class MsalBaseUtilities {\n  protected logger: CredentialLogger;\n  protected account: AuthenticationRecord | undefined;\n\n  constructor(options: MsalFlowOptions) {\n    this.logger = options.logger;\n    this.account = options.authenticationRecord;\n  }\n\n  /**\n   * Generates a UUID\n   */\n  generateUuid(): string {\n    return uuidv4();\n  }\n\n  /**\n   * Handles the MSAL authentication result.\n   * If the result has an account, we update the local account reference.\n   * If the token received is invalid, an error will be thrown depending on what's missing.\n   */\n  protected handleResult(\n    scopes: string | string[],\n    clientId: string,\n    result?: MsalResult,\n    getTokenOptions?: GetTokenOptions\n  ): AccessToken {\n    if (result?.account) {\n      this.account = msalToPublic(clientId, result.account);\n    }\n    ensureValidMsalToken(scopes, this.logger, result, getTokenOptions);\n    this.logger.getToken.info(formatSuccess(scopes));\n    return {\n      token: result!.accessToken!,\n      expiresOnTimestamp: result!.expiresOn!.getTime(),\n    };\n  }\n\n  /**\n   * Handles MSAL errors.\n   */\n  protected handleError(scopes: string[], error: Error, getTokenOptions?: GetTokenOptions): Error {\n    if (\n      error.name === \"AuthError\" ||\n      error.name === \"ClientAuthError\" ||\n      error.name === \"BrowserAuthError\"\n    ) {\n      const msalError = error as msalCommon.AuthError;\n      switch (msalError.errorCode) {\n        case \"endpoints_resolution_error\":\n          this.logger.info(formatError(scopes, error.message));\n          return new CredentialUnavailableError(error.message);\n        case \"device_code_polling_cancelled\":\n          return new AbortError(\"The authentication has been aborted by the caller.\");\n        case \"consent_required\":\n        case \"interaction_required\":\n        case \"login_required\":\n          this.logger.info(\n            formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`)\n          );\n          break;\n        default:\n          this.logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n          break;\n      }\n    }\n    if (\n      error.name === \"ClientConfigurationError\" ||\n      error.name === \"BrowserConfigurationAuthError\" ||\n      error.name === \"AbortError\"\n    ) {\n      return error;\n    }\n    return new AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n  }\n}\n\n// transformations.ts\n\nexport function publicToMsal(account: AuthenticationRecord): msalCommon.AccountInfo {\n  const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [];\n  return {\n    ...account,\n    localAccountId: account.homeAccountId,\n    environment,\n  };\n}\n\nexport function msalToPublic(clientId: string, account: MsalAccountInfo): AuthenticationRecord {\n  const record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId,\n    version: LatestAuthenticationRecordVersion,\n  };\n  return record;\n}\n\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record: AuthenticationRecord): string {\n  return JSON.stringify(record);\n}\n\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord: string): AuthenticationRecord {\n  const parsed: AuthenticationRecord & { version?: string } = JSON.parse(serializedRecord);\n\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n\n  return parsed;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}