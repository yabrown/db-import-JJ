{"ast":null,"code":"var _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';\nvar path = require('path');\nvar COLON = isWindows ? ';' : ':';\nvar isexe = require('isexe');\nvar getNotFoundError = function getNotFoundError(cmd) {\n  return Object.assign(new Error(\"not found: \".concat(cmd)), {\n    code: 'ENOENT'\n  });\n};\nvar getPathInfo = function getPathInfo(cmd, opt) {\n  var colon = opt.colon || COLON;\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  var pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? [''] : [].concat(_toConsumableArray(isWindows ? [process.cwd()] : []), _toConsumableArray((opt.path || process.env.PATH || /* istanbul ignore next: very unusual */'').split(colon)));\n  var pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM' : '';\n  var pathExt = isWindows ? pathExtExe.split(colon) : [''];\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');\n  }\n  return {\n    pathEnv: pathEnv,\n    pathExt: pathExt,\n    pathExtExe: pathExtExe\n  };\n};\nvar which = function which(cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n  if (!opt) opt = {};\n  var _getPathInfo = getPathInfo(cmd, opt),\n    pathEnv = _getPathInfo.pathEnv,\n    pathExt = _getPathInfo.pathExt,\n    pathExtExe = _getPathInfo.pathExtExe;\n  var found = [];\n  var step = function step(i) {\n    return new Promise(function (resolve, reject) {\n      if (i === pathEnv.length) return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));\n      var ppRaw = pathEnv[i];\n      var pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n      var pCmd = path.join(pathPart, cmd);\n      var p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n      resolve(subStep(p, i, 0));\n    });\n  };\n  var subStep = function subStep(p, i, ii) {\n    return new Promise(function (resolve, reject) {\n      if (ii === pathExt.length) return resolve(step(i + 1));\n      var ext = pathExt[ii];\n      isexe(p + ext, {\n        pathExt: pathExtExe\n      }, function (er, is) {\n        if (!er && is) {\n          if (opt.all) found.push(p + ext);else return resolve(p + ext);\n        }\n        return resolve(subStep(p, i, ii + 1));\n      });\n    });\n  };\n  return cb ? step(0).then(function (res) {\n    return cb(null, res);\n  }, cb) : step(0);\n};\nvar whichSync = function whichSync(cmd, opt) {\n  opt = opt || {};\n  var _getPathInfo2 = getPathInfo(cmd, opt),\n    pathEnv = _getPathInfo2.pathEnv,\n    pathExt = _getPathInfo2.pathExt,\n    pathExtExe = _getPathInfo2.pathExtExe;\n  var found = [];\n  for (var i = 0; i < pathEnv.length; i++) {\n    var ppRaw = pathEnv[i];\n    var pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n    var pCmd = path.join(pathPart, cmd);\n    var p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n    for (var j = 0; j < pathExt.length; j++) {\n      var cur = p + pathExt[j];\n      try {\n        var is = isexe.sync(cur, {\n          pathExt: pathExtExe\n        });\n        if (is) {\n          if (opt.all) found.push(cur);else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n  if (opt.all && found.length) return found;\n  if (opt.nothrow) return null;\n  throw getNotFoundError(cmd);\n};\nmodule.exports = which;\nwhich.sync = whichSync;","map":{"version":3,"names":["isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","Object","assign","Error","concat","code","getPathInfo","opt","colon","pathEnv","match","_toConsumableArray","cwd","PATH","split","pathExtExe","pathExt","PATHEXT","indexOf","unshift","which","cb","_getPathInfo","found","step","i","Promise","resolve","reject","length","all","ppRaw","pathPart","test","slice","pCmd","join","p","subStep","ii","ext","er","is","push","then","res","whichSync","_getPathInfo2","j","cur","sync","ex","nothrow","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/which/which.js"],"sourcesContent":["const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}