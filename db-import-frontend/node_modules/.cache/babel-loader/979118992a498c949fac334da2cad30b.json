{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\nvar validator = _.cloneDeep(require(\"validator\"));\nvar moment = require(\"moment\");\nvar extensions = {\n  extend: function extend(name, fn) {\n    this[name] = fn;\n    return this;\n  },\n  notEmpty: function notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len: function len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl: function isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6: function isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4: function isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn: function notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex: function regex(str, pattern, modifiers) {\n    str += \"\";\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== \"RegExp\") {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex: function notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal: function isDecimal(str) {\n    return str !== \"\" && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n  min: function min(str, val) {\n    var number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max: function max(str, val) {\n    var number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not: function not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains: function contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n  notContains: function notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is: function is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\nvalidator.isImmutable = function (value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\nvalidator.notNull = function (val) {\n  return val !== null && val !== void 0;\n};\n_.forEach(extensions, function (extend, key) {\n  validator[key] = extend;\n});\nvalidator.isNull = validator.isEmpty;\nvalidator.isDate = function (dateString) {\n  var parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    return false;\n  }\n  var date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\nexports.validator = validator;","map":{"version":3,"names":["_","require","validator","cloneDeep","moment","extensions","extend","name","fn","notEmpty","str","match","len","min","max","isLength","isUrl","isURL","isIPv6","isIP","isIPv4","notIn","values","isIn","regex","pattern","modifiers","Object","prototype","toString","call","slice","RegExp","notRegex","isDecimal","val","number","parseFloat","isNaN","not","contains","elem","includes","notContains","is","exports","isImmutable","value","validatorArgs","field","modelInstance","isNewRecord","dataValues","_previousDataValues","notNull","forEach","key","isNull","isEmpty","isDate","dateString","parsed","Date","parse","date","toISOString","isValid"],"sources":["../../src/utils/validator-extras.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst validator = _.cloneDeep(require('validator'));\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n\n    return this;\n  },\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str += '';\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\n\n// instance based validators\nvalidator.isImmutable = function(value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\n\n// extra validators\nvalidator.notNull = function(val) {\n  return val !== null && val !== undefined;\n};\n\n// https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\n// map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\nvalidator.isNull = validator.isEmpty;\n\n// isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\nvalidator.isDate = function(dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  }\n  // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}