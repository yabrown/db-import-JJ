{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _require = require('path'),\n  dirname = _require.dirname,\n  sep = _require.sep;\nvar fs = require('./fs.js');\nvar getOptions = require('./common/get-options.js');\nvar owner = require('./common/owner.js');\nvar mkdtemp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(prefix, opts) {\n    var options, root, _yield$owner$validate, uid, gid, result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = getOptions(opts, {\n            copy: ['encoding', 'owner'],\n            wrap: 'encoding'\n          }); // mkdtemp relies on the trailing path separator to indicate if it should\n          // create a directory inside of the prefix. if that's the case then the root\n          // we infer ownership from is the prefix itself, otherwise it's the dirname\n          // /tmp -> /tmpABCDEF, infers from /\n          // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n          root = prefix.endsWith(sep) ? prefix : dirname(prefix);\n          _context.next = 4;\n          return owner.validate(root, options.owner);\n        case 4:\n          _yield$owner$validate = _context.sent;\n          uid = _yield$owner$validate.uid;\n          gid = _yield$owner$validate.gid;\n          _context.next = 9;\n          return fs.mkdtemp(prefix, options);\n        case 9:\n          result = _context.sent;\n          _context.next = 12;\n          return owner.update(result, uid, gid);\n        case 12:\n          return _context.abrupt(\"return\", result);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function mkdtemp(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = mkdtemp;","map":{"version":3,"names":["_require","require","dirname","sep","fs","getOptions","owner","mkdtemp","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","prefix","opts","options","root","_yield$owner$validate","uid","gid","result","wrap","_callee$","_context","prev","next","copy","endsWith","validate","sent","update","abrupt","stop","_x","_x2","apply","arguments","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/@npmcli/fs/lib/mkdtemp.js"],"sourcesContent":["const { dirname, sep } = require('path')\n\nconst fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst owner = require('./common/owner.js')\n\nconst mkdtemp = async (prefix, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding', 'owner'],\n    wrap: 'encoding',\n  })\n\n  // mkdtemp relies on the trailing path separator to indicate if it should\n  // create a directory inside of the prefix. if that's the case then the root\n  // we infer ownership from is the prefix itself, otherwise it's the dirname\n  // /tmp -> /tmpABCDEF, infers from /\n  // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n  const root = prefix.endsWith(sep) ? prefix : dirname(prefix)\n  const { uid, gid } = await owner.validate(root, options.owner)\n\n  const result = await fs.mkdtemp(prefix, options)\n\n  await owner.update(result, uid, gid)\n\n  return result\n}\n\nmodule.exports = mkdtemp\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAyBC,OAAO,CAAC,MAAM,CAAC;EAAhCC,OAAO,GAAAF,QAAA,CAAPE,OAAO;EAAEC,GAAG,GAAAH,QAAA,CAAHG,GAAG;AAEpB,IAAMC,EAAE,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAMI,UAAU,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AACrD,IAAMK,KAAK,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAE1C,IAAMM,OAAO;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,MAAM,EAAEC,IAAI;IAAA,IAAAC,OAAA,EAAAC,IAAA,EAAAC,qBAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,MAAA;IAAA,OAAAV,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC3BV,OAAO,GAAGV,UAAU,CAACS,IAAI,EAAE;YAC/BY,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;YAC3BL,IAAI,EAAE;UACR,CAAC,CAAC,EAEF;UACA;UACA;UACA;UACA;UACML,IAAI,GAAGH,MAAM,CAACc,QAAQ,CAACxB,GAAG,CAAC,GAAGU,MAAM,GAAGX,OAAO,CAACW,MAAM,CAAC;UAAAU,QAAA,CAAAE,IAAA;UAAA,OACjCnB,KAAK,CAACsB,QAAQ,CAACZ,IAAI,EAAED,OAAO,CAACT,KAAK,CAAC;QAAA;UAAAW,qBAAA,GAAAM,QAAA,CAAAM,IAAA;UAAtDX,GAAG,GAAAD,qBAAA,CAAHC,GAAG;UAAEC,GAAG,GAAAF,qBAAA,CAAHE,GAAG;UAAAI,QAAA,CAAAE,IAAA;UAAA,OAEKrB,EAAE,CAACG,OAAO,CAACM,MAAM,EAAEE,OAAO,CAAC;QAAA;UAA1CK,MAAM,GAAAG,QAAA,CAAAM,IAAA;UAAAN,QAAA,CAAAE,IAAA;UAAA,OAENnB,KAAK,CAACwB,MAAM,CAACV,MAAM,EAAEF,GAAG,EAAEC,GAAG,CAAC;QAAA;UAAA,OAAAI,QAAA,CAAAQ,MAAA,WAE7BX,MAAM;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAS,IAAA;MAAA;IAAA,GAAApB,OAAA;EAAA,CACd;EAAA,gBAnBKL,OAAOA,CAAA0B,EAAA,EAAAC,GAAA;IAAA,OAAA1B,IAAA,CAAA2B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAmBZ;AAEDC,MAAM,CAACC,OAAO,GAAG/B,OAAO"},"metadata":{},"sourceType":"script"}