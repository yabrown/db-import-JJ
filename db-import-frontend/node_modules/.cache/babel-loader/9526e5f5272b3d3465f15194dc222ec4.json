{"ast":null,"code":"import _classCallCheck from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @internal */\nexport var knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\")\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n/** @internal */\nexport var TracingContextImpl = /*#__PURE__*/function () {\n  function TracingContextImpl(initialContext) {\n    _classCallCheck(this, TracingContextImpl);\n    this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map();\n  }\n  _createClass(TracingContextImpl, [{\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      var newContext = new TracingContextImpl(this);\n      newContext._contextMap.set(key, value);\n      return newContext;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return this._contextMap.get(key);\n    }\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue(key) {\n      var newContext = new TracingContextImpl(this);\n      newContext._contextMap.delete(key);\n      return newContext;\n    }\n  }]);\n  return TracingContextImpl;\n}();","map":{"version":3,"names":["knownContextKeys","span","Symbol","for","namespace","createTracingContext","options","arguments","length","undefined","context","TracingContextImpl","parentContext","setValue","initialContext","_classCallCheck","_contextMap","Map","_createClass","key","value","newContext","set","getValue","get","deleteValue","delete"],"sources":["../../src/tracingContext.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TracingContext, TracingSpan } from \"./interfaces\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n"],"mappings":";;AAAA;AACA;AAIA;AACA,OAAO,IAAMA,gBAAgB,GAAG;EAC9BC,IAAI,EAAEC,MAAM,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAC5CC,SAAS,EAAEF,MAAM,CAACC,GAAG,CAAC,+BAA+B;CACtD;AAED;;;;;;;AAOA,OAAM,SAAUE,oBAAoBA,CAAA,EAA0C;EAAA,IAAzCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EAC5E,IAAIG,OAAO,GAAmB,IAAIC,kBAAkB,CAACL,OAAO,CAACM,aAAa,CAAC;EAC3E,IAAIN,OAAO,CAACL,IAAI,EAAE;IAChBS,OAAO,GAAGA,OAAO,CAACG,QAAQ,CAACb,gBAAgB,CAACC,IAAI,EAAEK,OAAO,CAACL,IAAI,CAAC;;EAEjE,IAAIK,OAAO,CAACF,SAAS,EAAE;IACrBM,OAAO,GAAGA,OAAO,CAACG,QAAQ,CAACb,gBAAgB,CAACI,SAAS,EAAEE,OAAO,CAACF,SAAS,CAAC;;EAE3E,OAAOM,OAAO;AAChB;AAEA;AACA,WAAaC,kBAAkB;EAE7B,SAAAA,mBAAYG,cAA+B;IAAAC,eAAA,OAAAJ,kBAAA;IACzC,IAAI,CAACK,WAAW,GACdF,cAAc,YAAYH,kBAAkB,GACxC,IAAIM,GAAG,CAAkBH,cAAc,CAACE,WAAW,CAAC,GACpD,IAAIC,GAAG,EAAE;EACjB;EAACC,YAAA,CAAAP,kBAAA;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAAP,SAASM,GAAW,EAAEC,KAAc;MAClC,IAAMC,UAAU,GAAG,IAAIV,kBAAkB,CAAC,IAAI,CAAC;MAC/CU,UAAU,CAACL,WAAW,CAACM,GAAG,CAACH,GAAG,EAAEC,KAAK,CAAC;MACtC,OAAOC,UAAU;IACnB;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAG,SAASJ,GAAW;MAClB,OAAO,IAAI,CAACH,WAAW,CAACQ,GAAG,CAACL,GAAG,CAAC;IAClC;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAED,SAAAK,YAAYN,GAAW;MACrB,IAAME,UAAU,GAAG,IAAIV,kBAAkB,CAAC,IAAI,CAAC;MAC/CU,UAAU,CAACL,WAAW,CAACU,MAAM,CAACP,GAAG,CAAC;MAClC,OAAOE,UAAU;IACnB;EAAC;EAAA,OAAAV,kBAAA;AAAA"},"metadata":{},"sourceType":"module"}