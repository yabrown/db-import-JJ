{"ast":null,"code":"'use strict';\n\nvar log = require('npmlog');\nvar execFile = require('child_process').execFile;\nvar fs = require('fs');\nvar path = require('path').win32;\nvar logWithPrefix = require('./util').logWithPrefix;\nvar regSearchKeys = require('./util').regSearchKeys;\nfunction findVisualStudio(nodeSemver, configMsvsVersion, callback) {\n  var finder = new VisualStudioFinder(nodeSemver, configMsvsVersion, callback);\n  finder.findVisualStudio();\n}\nfunction VisualStudioFinder(nodeSemver, configMsvsVersion, callback) {\n  this.nodeSemver = nodeSemver;\n  this.configMsvsVersion = configMsvsVersion;\n  this.callback = callback;\n  this.errorLog = [];\n  this.validVersions = [];\n}\nVisualStudioFinder.prototype = {\n  log: logWithPrefix(log, 'find VS'),\n  regSearchKeys: regSearchKeys,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  findVisualStudio: function findVisualStudio() {\n    var _this = this;\n    this.configVersionYear = null;\n    this.configPath = null;\n    if (this.configMsvsVersion) {\n      this.addLog('msvs_version was set from command line or npm config');\n      if (this.configMsvsVersion.match(/^\\d{4}$/)) {\n        this.configVersionYear = parseInt(this.configMsvsVersion, 10);\n        this.addLog(\"- looking for Visual Studio version \".concat(this.configVersionYear));\n      } else {\n        this.configPath = path.resolve(this.configMsvsVersion);\n        this.addLog(\"- looking for Visual Studio installed in \\\"\".concat(this.configPath, \"\\\"\"));\n      }\n    } else {\n      this.addLog('msvs_version not set from command line or npm config');\n    }\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir = path.resolve(process.env.VCINSTALLDIR, '..');\n      this.addLog('running in VS Command Prompt, installation path is:\\n' + \"\\\"\".concat(this.envVcInstallDir, \"\\\"\\n- will only use this version\"));\n    } else {\n      this.addLog('VCINSTALLDIR not set, not running in VS Command Prompt');\n    }\n    this.findVisualStudio2017OrNewer(function (info) {\n      if (info) {\n        return _this.succeed(info);\n      }\n      _this.findVisualStudio2015(function (info) {\n        if (info) {\n          return _this.succeed(info);\n        }\n        _this.findVisualStudio2013(function (info) {\n          if (info) {\n            return _this.succeed(info);\n          }\n          _this.fail();\n        });\n      });\n    });\n  },\n  succeed: function succeed(info) {\n    this.log.info(\"using VS\".concat(info.versionYear, \" (\").concat(info.version, \") found at:\") + \"\\n\\\"\".concat(info.path, \"\\\"\") + '\\nrun with --verbose for detailed information');\n    process.nextTick(this.callback.bind(null, null, info));\n  },\n  fail: function fail() {\n    var _this2 = this;\n    if (this.configMsvsVersion && this.envVcInstallDir) {\n      this.errorLog.push('msvs_version does not match this VS Command Prompt or the', 'installation cannot be used.');\n    } else if (this.configMsvsVersion) {\n      // If msvs_version was specified but finding VS failed, print what would\n      // have been accepted\n      this.errorLog.push('');\n      if (this.validVersions) {\n        this.errorLog.push('valid versions for msvs_version:');\n        this.validVersions.forEach(function (version) {\n          _this2.errorLog.push(\"- \\\"\".concat(version, \"\\\"\"));\n        });\n      } else {\n        this.errorLog.push('no valid versions for msvs_version were found');\n      }\n    }\n    var errorLog = this.errorLog.join('\\n');\n\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 62 chars usable here):\n    //                                                               X\n    var infoLog = ['**************************************************************', 'You need to install the latest version of Visual Studio', 'including the \"Desktop development with C++\" workload.', 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#on-windows', '**************************************************************'].join('\\n');\n    this.log.error(\"\\n\".concat(errorLog, \"\\n\\n\").concat(infoLog, \"\\n\"));\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Visual Studio installation to use')));\n  },\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  findVisualStudio2017OrNewer: function findVisualStudio2017OrNewer(cb) {\n    var _this3 = this;\n    var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe');\n    var csFile = path.join(__dirname, 'Find-VisualStudio.cs');\n    var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-NoProfile', '-Command', '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::PrintJson()}'];\n    this.log.silly('Running', ps, psArgs);\n    var child = execFile(ps, psArgs, {\n      encoding: 'utf8'\n    }, function (err, stdout, stderr) {\n      _this3.parseData(err, stdout, stderr, cb);\n    });\n    child.stdin.end();\n  },\n  // Parse the output of the PowerShell script and look for an installation\n  // of Visual Studio 2017 or newer to use\n  parseData: function parseData(err, stdout, stderr, cb) {\n    var _this4 = this;\n    this.log.silly('PS stderr = %j', stderr);\n    var failPowershell = function failPowershell() {\n      _this4.addLog('could not use PowerShell to find Visual Studio 2017 or newer, try re-running with \\'--loglevel silly\\' for more details');\n      cb(null);\n    };\n    if (err) {\n      this.log.silly('PS err = %j', err && (err.stack || err));\n      return failPowershell();\n    }\n    var vsInfo;\n    try {\n      vsInfo = JSON.parse(stdout);\n    } catch (e) {\n      this.log.silly('PS stdout = %j', stdout);\n      this.log.silly(e);\n      return failPowershell();\n    }\n    if (!Array.isArray(vsInfo)) {\n      this.log.silly('PS stdout = %j', stdout);\n      return failPowershell();\n    }\n    vsInfo = vsInfo.map(function (info) {\n      _this4.log.silly(\"processing installation: \\\"\".concat(info.path, \"\\\"\"));\n      info.path = path.resolve(info.path);\n      var ret = _this4.getVersionInfo(info);\n      ret.path = info.path;\n      ret.msBuild = _this4.getMSBuild(info, ret.versionYear);\n      ret.toolset = _this4.getToolset(info, ret.versionYear);\n      ret.sdk = _this4.getSDK(info);\n      return ret;\n    });\n    this.log.silly('vsInfo:', vsInfo);\n\n    // Remove future versions or errors parsing version number\n    vsInfo = vsInfo.filter(function (info) {\n      if (info.versionYear) {\n        return true;\n      }\n      _this4.addLog(\"unknown version \\\"\".concat(info.version, \"\\\" found at \\\"\").concat(info.path, \"\\\"\"));\n      return false;\n    });\n\n    // Sort to place newer versions first\n    vsInfo.sort(function (a, b) {\n      return b.versionYear - a.versionYear;\n    });\n    for (var i = 0; i < vsInfo.length; ++i) {\n      var info = vsInfo[i];\n      this.addLog(\"checking VS\".concat(info.versionYear, \" (\").concat(info.version, \") found \") + \"at:\\n\\\"\".concat(info.path, \"\\\"\"));\n      if (info.msBuild) {\n        this.addLog('- found \"Visual Studio C++ core features\"');\n      } else {\n        this.addLog('- \"Visual Studio C++ core features\" missing');\n        continue;\n      }\n      if (info.toolset) {\n        this.addLog(\"- found VC++ toolset: \".concat(info.toolset));\n      } else {\n        this.addLog('- missing any VC++ toolset');\n        continue;\n      }\n      if (info.sdk) {\n        this.addLog(\"- found Windows SDK: \".concat(info.sdk));\n      } else {\n        this.addLog('- missing any Windows SDK');\n        continue;\n      }\n      if (!this.checkConfigVersion(info.versionYear, info.path)) {\n        continue;\n      }\n      return cb(info);\n    }\n    this.addLog('could not find a version of Visual Studio 2017 or newer to use');\n    cb(null);\n  },\n  // Helper - process version information\n  getVersionInfo: function getVersionInfo(info) {\n    var match = /^(\\d+)\\.(\\d+)\\..*/.exec(info.version);\n    if (!match) {\n      this.log.silly('- failed to parse version:', info.version);\n      return {};\n    }\n    this.log.silly('- version match = %j', match);\n    var ret = {\n      version: info.version,\n      versionMajor: parseInt(match[1], 10),\n      versionMinor: parseInt(match[2], 10)\n    };\n    if (ret.versionMajor === 15) {\n      ret.versionYear = 2017;\n      return ret;\n    }\n    if (ret.versionMajor === 16) {\n      ret.versionYear = 2019;\n      return ret;\n    }\n    if (ret.versionMajor === 17) {\n      ret.versionYear = 2022;\n      return ret;\n    }\n    this.log.silly('- unsupported version:', ret.versionMajor);\n    return {};\n  },\n  // Helper - process MSBuild information\n  getMSBuild: function getMSBuild(info, versionYear) {\n    var pkg = 'Microsoft.VisualStudio.VC.MSBuild.Base';\n    var msbuildPath = path.join(info.path, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe');\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.MSBuild.Base');\n      if (versionYear === 2017) {\n        return path.join(info.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');\n      }\n      if (versionYear === 2019) {\n        return msbuildPath;\n      }\n    }\n    // visual studio 2022 don't has msbuild pkg\n    if (fs.existsSync(msbuildPath)) {\n      return msbuildPath;\n    }\n    return null;\n  },\n  // Helper - process toolset information\n  getToolset: function getToolset(info, versionYear) {\n    var pkg = 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64';\n    var express = 'Microsoft.VisualStudio.WDExpress';\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.Tools.x86.x64');\n    } else if (info.packages.indexOf(express) !== -1) {\n      this.log.silly('- found Visual Studio Express (looking for toolset)');\n    } else {\n      return null;\n    }\n    if (versionYear === 2017) {\n      return 'v141';\n    } else if (versionYear === 2019) {\n      return 'v142';\n    } else if (versionYear === 2022) {\n      return 'v143';\n    }\n    this.log.silly('- invalid versionYear:', versionYear);\n    return null;\n  },\n  // Helper - process Windows SDK information\n  getSDK: function getSDK(info) {\n    var _this5 = this;\n    var win8SDK = 'Microsoft.VisualStudio.Component.Windows81SDK';\n    var win10SDKPrefix = 'Microsoft.VisualStudio.Component.Windows10SDK.';\n    var Win10SDKVer = 0;\n    info.packages.forEach(function (pkg) {\n      if (!pkg.startsWith(win10SDKPrefix)) {\n        return;\n      }\n      var parts = pkg.split('.');\n      if (parts.length > 5 && parts[5] !== 'Desktop') {\n        _this5.log.silly('- ignoring non-Desktop Win10SDK:', pkg);\n        return;\n      }\n      var foundSdkVer = parseInt(parts[4], 10);\n      if (isNaN(foundSdkVer)) {\n        // Microsoft.VisualStudio.Component.Windows10SDK.IpOverUsb\n        _this5.log.silly('- failed to parse Win10SDK number:', pkg);\n        return;\n      }\n      _this5.log.silly('- found Win10SDK:', foundSdkVer);\n      Win10SDKVer = Math.max(Win10SDKVer, foundSdkVer);\n    });\n    if (Win10SDKVer !== 0) {\n      return \"10.0.\".concat(Win10SDKVer, \".0\");\n    } else if (info.packages.indexOf(win8SDK) !== -1) {\n      this.log.silly('- found Win8SDK');\n      return '8.1';\n    }\n    return null;\n  },\n  // Find an installation of Visual Studio 2015 to use\n  findVisualStudio2015: function findVisualStudio2015(cb) {\n    return this.findOldVS({\n      version: '14.0',\n      versionMajor: 14,\n      versionMinor: 0,\n      versionYear: 2015,\n      toolset: 'v140'\n    }, cb);\n  },\n  // Find an installation of Visual Studio 2013 to use\n  findVisualStudio2013: function findVisualStudio2013(cb) {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog('not looking for VS2013 as it is only supported up to Node.js 8');\n      return cb(null);\n    }\n    return this.findOldVS({\n      version: '12.0',\n      versionMajor: 12,\n      versionMinor: 0,\n      versionYear: 2013,\n      toolset: 'v120'\n    }, cb);\n  },\n  // Helper - common code for VS2013 and VS2015\n  findOldVS: function findOldVS(info, cb) {\n    var _this6 = this;\n    var regVC7 = ['HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7', 'HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7'];\n    var regMSBuild = 'HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions';\n    this.addLog(\"looking for Visual Studio \".concat(info.versionYear));\n    this.regSearchKeys(regVC7, info.version, [], function (err, res) {\n      if (err) {\n        _this6.addLog('- not found');\n        return cb(null);\n      }\n      var vsPath = path.resolve(res, '..');\n      _this6.addLog(\"- found in \\\"\".concat(vsPath, \"\\\"\"));\n      var msBuildRegOpts = process.arch === 'ia32' ? [] : ['/reg:32'];\n      _this6.regSearchKeys([\"\".concat(regMSBuild, \"\\\\\").concat(info.version)], 'MSBuildToolsPath', msBuildRegOpts, function (err, res) {\n        if (err) {\n          _this6.addLog('- could not find MSBuild in registry for this version');\n          return cb(null);\n        }\n        var msBuild = path.join(res, 'MSBuild.exe');\n        _this6.addLog(\"- MSBuild in \\\"\".concat(msBuild, \"\\\"\"));\n        if (!_this6.checkConfigVersion(info.versionYear, vsPath)) {\n          return cb(null);\n        }\n        info.path = vsPath;\n        info.msBuild = msBuild;\n        info.sdk = null;\n        cb(info);\n      });\n    });\n  },\n  // After finding a usable version of Visual Studio:\n  // - add it to validVersions to be displayed at the end if a specific\n  //   version was requested and not found;\n  // - check if this is the version that was requested.\n  // - check if this matches the Visual Studio Command Prompt\n  checkConfigVersion: function checkConfigVersion(versionYear, vsPath) {\n    this.validVersions.push(versionYear);\n    this.validVersions.push(vsPath);\n    if (this.configVersionYear && this.configVersionYear !== versionYear) {\n      this.addLog('- msvs_version does not match this version');\n      return false;\n    }\n    if (this.configPath && path.relative(this.configPath, vsPath) !== '') {\n      this.addLog('- msvs_version does not point to this installation');\n      return false;\n    }\n    if (this.envVcInstallDir && path.relative(this.envVcInstallDir, vsPath) !== '') {\n      this.addLog('- does not match this Visual Studio Command Prompt');\n      return false;\n    }\n    return true;\n  }\n};\nmodule.exports = findVisualStudio;\nmodule.exports.test = {\n  VisualStudioFinder: VisualStudioFinder,\n  findVisualStudio: findVisualStudio\n};","map":{"version":3,"names":["log","require","execFile","fs","path","win32","logWithPrefix","regSearchKeys","findVisualStudio","nodeSemver","configMsvsVersion","callback","finder","VisualStudioFinder","errorLog","validVersions","prototype","addLog","message","verbose","push","_this","configVersionYear","configPath","match","parseInt","concat","resolve","process","env","VCINSTALLDIR","envVcInstallDir","findVisualStudio2017OrNewer","info","succeed","findVisualStudio2015","findVisualStudio2013","fail","versionYear","version","nextTick","bind","_this2","forEach","join","infoLog","error","Error","cb","_this3","ps","SystemRoot","csFile","__dirname","psArgs","silly","child","encoding","err","stdout","stderr","parseData","stdin","end","_this4","failPowershell","stack","vsInfo","JSON","parse","e","Array","isArray","map","ret","getVersionInfo","msBuild","getMSBuild","toolset","getToolset","sdk","getSDK","filter","sort","a","b","i","length","checkConfigVersion","exec","versionMajor","versionMinor","pkg","msbuildPath","packages","indexOf","existsSync","express","_this5","win8SDK","win10SDKPrefix","Win10SDKVer","startsWith","parts","split","foundSdkVer","isNaN","Math","max","findOldVS","major","_this6","regVC7","regMSBuild","res","vsPath","msBuildRegOpts","arch","relative","module","exports","test"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/node-gyp/lib/find-visualstudio.js"],"sourcesContent":["'use strict'\n\nconst log = require('npmlog')\nconst execFile = require('child_process').execFile\nconst fs = require('fs')\nconst path = require('path').win32\nconst logWithPrefix = require('./util').logWithPrefix\nconst regSearchKeys = require('./util').regSearchKeys\n\nfunction findVisualStudio (nodeSemver, configMsvsVersion, callback) {\n  const finder = new VisualStudioFinder(nodeSemver, configMsvsVersion,\n    callback)\n  finder.findVisualStudio()\n}\n\nfunction VisualStudioFinder (nodeSemver, configMsvsVersion, callback) {\n  this.nodeSemver = nodeSemver\n  this.configMsvsVersion = configMsvsVersion\n  this.callback = callback\n  this.errorLog = []\n  this.validVersions = []\n}\n\nVisualStudioFinder.prototype = {\n  log: logWithPrefix(log, 'find VS'),\n\n  regSearchKeys: regSearchKeys,\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  findVisualStudio: function findVisualStudio () {\n    this.configVersionYear = null\n    this.configPath = null\n    if (this.configMsvsVersion) {\n      this.addLog('msvs_version was set from command line or npm config')\n      if (this.configMsvsVersion.match(/^\\d{4}$/)) {\n        this.configVersionYear = parseInt(this.configMsvsVersion, 10)\n        this.addLog(\n          `- looking for Visual Studio version ${this.configVersionYear}`)\n      } else {\n        this.configPath = path.resolve(this.configMsvsVersion)\n        this.addLog(\n          `- looking for Visual Studio installed in \"${this.configPath}\"`)\n      }\n    } else {\n      this.addLog('msvs_version not set from command line or npm config')\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n        `\"${this.envVcInstallDir}\"\\n- will only use this version`)\n    } else {\n      this.addLog('VCINSTALLDIR not set, not running in VS Command Prompt')\n    }\n\n    this.findVisualStudio2017OrNewer((info) => {\n      if (info) {\n        return this.succeed(info)\n      }\n      this.findVisualStudio2015((info) => {\n        if (info) {\n          return this.succeed(info)\n        }\n        this.findVisualStudio2013((info) => {\n          if (info) {\n            return this.succeed(info)\n          }\n          this.fail()\n        })\n      })\n    })\n  },\n\n  succeed: function succeed (info) {\n    this.log.info(`using VS${info.versionYear} (${info.version}) found at:` +\n                  `\\n\"${info.path}\"` +\n                  '\\nrun with --verbose for detailed information')\n    process.nextTick(this.callback.bind(null, null, info))\n  },\n\n  fail: function fail () {\n    if (this.configMsvsVersion && this.envVcInstallDir) {\n      this.errorLog.push(\n        'msvs_version does not match this VS Command Prompt or the',\n        'installation cannot be used.')\n    } else if (this.configMsvsVersion) {\n      // If msvs_version was specified but finding VS failed, print what would\n      // have been accepted\n      this.errorLog.push('')\n      if (this.validVersions) {\n        this.errorLog.push('valid versions for msvs_version:')\n        this.validVersions.forEach((version) => {\n          this.errorLog.push(`- \"${version}\"`)\n        })\n      } else {\n        this.errorLog.push('no valid versions for msvs_version were found')\n      }\n    }\n\n    const errorLog = this.errorLog.join('\\n')\n\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 62 chars usable here):\n    //                                                               X\n    const infoLog = [\n      '**************************************************************',\n      'You need to install the latest version of Visual Studio',\n      'including the \"Desktop development with C++\" workload.',\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#on-windows',\n      '**************************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Visual Studio installation to use')))\n  },\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  findVisualStudio2017OrNewer: function findVisualStudio2017OrNewer (cb) {\n    var ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    var csFile = path.join(__dirname, 'Find-VisualStudio.cs')\n    var psArgs = [\n      '-ExecutionPolicy',\n      'Unrestricted',\n      '-NoProfile',\n      '-Command',\n      '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::PrintJson()}'\n    ]\n\n    this.log.silly('Running', ps, psArgs)\n    var child = execFile(ps, psArgs, { encoding: 'utf8' },\n      (err, stdout, stderr) => {\n        this.parseData(err, stdout, stderr, cb)\n      })\n    child.stdin.end()\n  },\n\n  // Parse the output of the PowerShell script and look for an installation\n  // of Visual Studio 2017 or newer to use\n  parseData: function parseData (err, stdout, stderr, cb) {\n    this.log.silly('PS stderr = %j', stderr)\n\n    const failPowershell = () => {\n      this.addLog(\n        'could not use PowerShell to find Visual Studio 2017 or newer, try re-running with \\'--loglevel silly\\' for more details')\n      cb(null)\n    }\n\n    if (err) {\n      this.log.silly('PS err = %j', err && (err.stack || err))\n      return failPowershell()\n    }\n\n    var vsInfo\n    try {\n      vsInfo = JSON.parse(stdout)\n    } catch (e) {\n      this.log.silly('PS stdout = %j', stdout)\n      this.log.silly(e)\n      return failPowershell()\n    }\n\n    if (!Array.isArray(vsInfo)) {\n      this.log.silly('PS stdout = %j', stdout)\n      return failPowershell()\n    }\n\n    vsInfo = vsInfo.map((info) => {\n      this.log.silly(`processing installation: \"${info.path}\"`)\n      info.path = path.resolve(info.path)\n      var ret = this.getVersionInfo(info)\n      ret.path = info.path\n      ret.msBuild = this.getMSBuild(info, ret.versionYear)\n      ret.toolset = this.getToolset(info, ret.versionYear)\n      ret.sdk = this.getSDK(info)\n      return ret\n    })\n    this.log.silly('vsInfo:', vsInfo)\n\n    // Remove future versions or errors parsing version number\n    vsInfo = vsInfo.filter((info) => {\n      if (info.versionYear) {\n        return true\n      }\n      this.addLog(`unknown version \"${info.version}\" found at \"${info.path}\"`)\n      return false\n    })\n\n    // Sort to place newer versions first\n    vsInfo.sort((a, b) => b.versionYear - a.versionYear)\n\n    for (var i = 0; i < vsInfo.length; ++i) {\n      const info = vsInfo[i]\n      this.addLog(`checking VS${info.versionYear} (${info.version}) found ` +\n                  `at:\\n\"${info.path}\"`)\n\n      if (info.msBuild) {\n        this.addLog('- found \"Visual Studio C++ core features\"')\n      } else {\n        this.addLog('- \"Visual Studio C++ core features\" missing')\n        continue\n      }\n\n      if (info.toolset) {\n        this.addLog(`- found VC++ toolset: ${info.toolset}`)\n      } else {\n        this.addLog('- missing any VC++ toolset')\n        continue\n      }\n\n      if (info.sdk) {\n        this.addLog(`- found Windows SDK: ${info.sdk}`)\n      } else {\n        this.addLog('- missing any Windows SDK')\n        continue\n      }\n\n      if (!this.checkConfigVersion(info.versionYear, info.path)) {\n        continue\n      }\n\n      return cb(info)\n    }\n\n    this.addLog(\n      'could not find a version of Visual Studio 2017 or newer to use')\n    cb(null)\n  },\n\n  // Helper - process version information\n  getVersionInfo: function getVersionInfo (info) {\n    const match = /^(\\d+)\\.(\\d+)\\..*/.exec(info.version)\n    if (!match) {\n      this.log.silly('- failed to parse version:', info.version)\n      return {}\n    }\n    this.log.silly('- version match = %j', match)\n    var ret = {\n      version: info.version,\n      versionMajor: parseInt(match[1], 10),\n      versionMinor: parseInt(match[2], 10)\n    }\n    if (ret.versionMajor === 15) {\n      ret.versionYear = 2017\n      return ret\n    }\n    if (ret.versionMajor === 16) {\n      ret.versionYear = 2019\n      return ret\n    }\n    if (ret.versionMajor === 17) {\n      ret.versionYear = 2022\n      return ret\n    }\n    this.log.silly('- unsupported version:', ret.versionMajor)\n    return {}\n  },\n\n  // Helper - process MSBuild information\n  getMSBuild: function getMSBuild (info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.VC.MSBuild.Base'\n    const msbuildPath = path.join(info.path, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe')\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.MSBuild.Base')\n      if (versionYear === 2017) {\n        return path.join(info.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe')\n      }\n      if (versionYear === 2019) {\n        return msbuildPath\n      }\n    }\n    // visual studio 2022 don't has msbuild pkg\n    if (fs.existsSync(msbuildPath)) {\n      return msbuildPath\n    }\n    return null\n  },\n\n  // Helper - process toolset information\n  getToolset: function getToolset (info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64'\n    const express = 'Microsoft.VisualStudio.WDExpress'\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.Tools.x86.x64')\n    } else if (info.packages.indexOf(express) !== -1) {\n      this.log.silly('- found Visual Studio Express (looking for toolset)')\n    } else {\n      return null\n    }\n\n    if (versionYear === 2017) {\n      return 'v141'\n    } else if (versionYear === 2019) {\n      return 'v142'\n    } else if (versionYear === 2022) {\n      return 'v143'\n    }\n    this.log.silly('- invalid versionYear:', versionYear)\n    return null\n  },\n\n  // Helper - process Windows SDK information\n  getSDK: function getSDK (info) {\n    const win8SDK = 'Microsoft.VisualStudio.Component.Windows81SDK'\n    const win10SDKPrefix = 'Microsoft.VisualStudio.Component.Windows10SDK.'\n\n    var Win10SDKVer = 0\n    info.packages.forEach((pkg) => {\n      if (!pkg.startsWith(win10SDKPrefix)) {\n        return\n      }\n      const parts = pkg.split('.')\n      if (parts.length > 5 && parts[5] !== 'Desktop') {\n        this.log.silly('- ignoring non-Desktop Win10SDK:', pkg)\n        return\n      }\n      const foundSdkVer = parseInt(parts[4], 10)\n      if (isNaN(foundSdkVer)) {\n        // Microsoft.VisualStudio.Component.Windows10SDK.IpOverUsb\n        this.log.silly('- failed to parse Win10SDK number:', pkg)\n        return\n      }\n      this.log.silly('- found Win10SDK:', foundSdkVer)\n      Win10SDKVer = Math.max(Win10SDKVer, foundSdkVer)\n    })\n\n    if (Win10SDKVer !== 0) {\n      return `10.0.${Win10SDKVer}.0`\n    } else if (info.packages.indexOf(win8SDK) !== -1) {\n      this.log.silly('- found Win8SDK')\n      return '8.1'\n    }\n    return null\n  },\n\n  // Find an installation of Visual Studio 2015 to use\n  findVisualStudio2015: function findVisualStudio2015 (cb) {\n    return this.findOldVS({\n      version: '14.0',\n      versionMajor: 14,\n      versionMinor: 0,\n      versionYear: 2015,\n      toolset: 'v140'\n    }, cb)\n  },\n\n  // Find an installation of Visual Studio 2013 to use\n  findVisualStudio2013: function findVisualStudio2013 (cb) {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog(\n        'not looking for VS2013 as it is only supported up to Node.js 8')\n      return cb(null)\n    }\n    return this.findOldVS({\n      version: '12.0',\n      versionMajor: 12,\n      versionMinor: 0,\n      versionYear: 2013,\n      toolset: 'v120'\n    }, cb)\n  },\n\n  // Helper - common code for VS2013 and VS2015\n  findOldVS: function findOldVS (info, cb) {\n    const regVC7 = ['HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7',\n      'HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7']\n    const regMSBuild = 'HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions'\n\n    this.addLog(`looking for Visual Studio ${info.versionYear}`)\n    this.regSearchKeys(regVC7, info.version, [], (err, res) => {\n      if (err) {\n        this.addLog('- not found')\n        return cb(null)\n      }\n\n      const vsPath = path.resolve(res, '..')\n      this.addLog(`- found in \"${vsPath}\"`)\n\n      const msBuildRegOpts = process.arch === 'ia32' ? [] : ['/reg:32']\n      this.regSearchKeys([`${regMSBuild}\\\\${info.version}`],\n        'MSBuildToolsPath', msBuildRegOpts, (err, res) => {\n          if (err) {\n            this.addLog(\n              '- could not find MSBuild in registry for this version')\n            return cb(null)\n          }\n\n          const msBuild = path.join(res, 'MSBuild.exe')\n          this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n          if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n            return cb(null)\n          }\n\n          info.path = vsPath\n          info.msBuild = msBuild\n          info.sdk = null\n          cb(info)\n        })\n    })\n  },\n\n  // After finding a usable version of Visual Studio:\n  // - add it to validVersions to be displayed at the end if a specific\n  //   version was requested and not found;\n  // - check if this is the version that was requested.\n  // - check if this matches the Visual Studio Command Prompt\n  checkConfigVersion: function checkConfigVersion (versionYear, vsPath) {\n    this.validVersions.push(versionYear)\n    this.validVersions.push(vsPath)\n\n    if (this.configVersionYear && this.configVersionYear !== versionYear) {\n      this.addLog('- msvs_version does not match this version')\n      return false\n    }\n    if (this.configPath &&\n        path.relative(this.configPath, vsPath) !== '') {\n      this.addLog('- msvs_version does not point to this installation')\n      return false\n    }\n    if (this.envVcInstallDir &&\n        path.relative(this.envVcInstallDir, vsPath) !== '') {\n      this.addLog('- does not match this Visual Studio Command Prompt')\n      return false\n    }\n\n    return true\n  }\n}\n\nmodule.exports = findVisualStudio\nmodule.exports.test = {\n  VisualStudioFinder: VisualStudioFinder,\n  findVisualStudio: findVisualStudio\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}