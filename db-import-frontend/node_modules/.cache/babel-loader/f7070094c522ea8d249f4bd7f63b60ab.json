{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { FetchClient } from '../network/FetchClient.js';\nimport { XhrClient } from '../network/XhrClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility class for browser specific functions\r\n */\nvar BrowserUtils = /** @class */function () {\n  function BrowserUtils() {}\n  // #region Window Navigation and URL management\n  /**\r\n   * Clears hash from window url.\r\n   */\n  BrowserUtils.clearHash = function (contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, \"\" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);\n    }\n  };\n  /**\r\n   * Replaces current hash with hash from provided url\r\n   */\n  BrowserUtils.replaceHash = function (url) {\n    var urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Returns boolean of whether the current window is in an iframe or not.\r\n   */\n  BrowserUtils.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\r\n   * Returns boolean of whether or not the current window is a popup opened by msal\r\n   */\n  BrowserUtils.isInPopup = function () {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + \".\") === 0;\n  };\n  // #endregion\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n  BrowserUtils.getCurrentUri = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Gets the homepage url for the current window location.\r\n   */\n  BrowserUtils.getHomepage = function () {\n    var currentUrl = new UrlString(window.location.href);\n    var urlComponents = currentUrl.getUrlComponents();\n    return urlComponents.Protocol + \"//\" + urlComponents.HostNameAndPort + \"/\";\n  };\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n  BrowserUtils.getBrowserNetworkClient = function () {\n    if (window.fetch && window.Headers) {\n      return new FetchClient();\n    } else {\n      return new XhrClient();\n    }\n  };\n  /**\r\n   * Throws error if we have completed an auth and are\r\n   * attempting another auth request inside an iframe.\r\n   */\n  BrowserUtils.blockReloadInHiddenIframes = function () {\n    var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n    }\n  };\n  /**\r\n   * Block redirect operations in iframes unless explicitly allowed\r\n   * @param interactionType Interaction type for the request\r\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n   */\n  BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {\n    var isIframedApp = BrowserUtils.isInIframe();\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n    }\n  };\n  /**\r\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n   */\n  BrowserUtils.blockAcquireTokenInPopups = function () {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n    }\n  };\n  /**\r\n   * Throws error if token requests are made in non-browser environment\r\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n   */\n  BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw BrowserAuthError.createNonBrowserEnvironmentError();\n    }\n  };\n  /**\r\n   * Throws error if native brokering is enabled but initialize hasn't been called\r\n   * @param allowNativeBroker\r\n   * @param initialized\r\n   */\n  BrowserUtils.blockNativeBrokerCalledBeforeInitialized = function (allowNativeBroker, initialized) {\n    if (allowNativeBroker && !initialized) {\n      throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();\n    }\n  };\n  /**\r\n   * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n   */\n  BrowserUtils.detectIEOrEdge = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var msie11 = ua.indexOf(\"Trident/\");\n    var msedge = ua.indexOf(\"Edge/\");\n    var isIE = msie > 0 || msie11 > 0;\n    var isEdge = msedge > 0;\n    return isIE || isEdge;\n  };\n  return BrowserUtils;\n}();\nexport { BrowserUtils };","map":{"version":3,"names":["BrowserUtils","clearHash","contentWindow","location","hash","Constants","EMPTY_STRING","history","replaceState","origin","pathname","search","replaceHash","url","urlParts","split","shift","window","length","join","isInIframe","parent","isInPopup","opener","name","indexOf","BrowserConstants","POPUP_NAME_PREFIX","getCurrentUri","href","getHomepage","currentUrl","UrlString","urlComponents","getUrlComponents","Protocol","HostNameAndPort","getBrowserNetworkClient","fetch","Headers","FetchClient","XhrClient","blockReloadInHiddenIframes","isResponseHash","hashContainsKnownProperties","BrowserAuthError","createBlockReloadInHiddenIframeError","blockRedirectInIframe","interactionType","allowRedirectInIframe","isIframedApp","InteractionType","Redirect","createRedirectInIframeError","blockAcquireTokenInPopups","createBlockAcquireTokenInPopupsError","blockNonBrowserEnvironment","isBrowserEnvironment","createNonBrowserEnvironmentError","blockNativeBrokerCalledBeforeInitialized","allowNativeBroker","initialized","createNativeBrokerCalledBeforeInitialize","detectIEOrEdge","ua","navigator","userAgent","msie","msie11","msedge","isIE","isEdge"],"sources":["../../src/utils/BrowserUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, INetworkModule, UrlString } from \"@azure/msal-common\";\r\nimport { FetchClient } from \"../network/FetchClient\";\r\nimport { XhrClient } from \"../network/XhrClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\r\n\r\n/**\r\n * Utility class for browser specific functions\r\n */\r\nexport class BrowserUtils {\r\n\r\n    // #region Window Navigation and URL management\r\n\r\n    /**\r\n     * Clears hash from window url.\r\n     */\r\n    static clearHash(contentWindow: Window): void {\r\n        // Office.js sets history.replaceState to null\r\n        contentWindow.location.hash = Constants.EMPTY_STRING;\r\n        if (typeof contentWindow.history.replaceState === \"function\") {\r\n            // Full removes \"#\" from url\r\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces current hash with hash from provided url\r\n     */\r\n    static replaceHash(url: string): void {\r\n        const urlParts = url.split(\"#\");\r\n        urlParts.shift(); // Remove part before the hash\r\n        window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether the current window is in an iframe or not.\r\n     */\r\n    static isInIframe(): boolean {\r\n        return window.parent !== window;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether or not the current window is a popup opened by msal\r\n     */\r\n    static isInPopup(): boolean {\r\n        return typeof window !== \"undefined\" && !!window.opener && \r\n            window.opener !== window && \r\n            typeof window.name === \"string\" && \r\n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    static getCurrentUri(): string {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the homepage url for the current window location.\r\n     */\r\n    static getHomepage(): string {\r\n        const currentUrl = new UrlString(window.location.href);\r\n        const urlComponents = currentUrl.getUrlComponents();\r\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\r\n    }\r\n\r\n    /**\r\n     * Returns best compatible network client object. \r\n     */\r\n    static getBrowserNetworkClient(): INetworkModule {\r\n        if (window.fetch && window.Headers) {\r\n            return new FetchClient();\r\n        } else {\r\n            return new XhrClient();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if we have completed an auth and are \r\n     * attempting another auth request inside an iframe.\r\n     */\r\n    static blockReloadInHiddenIframes(): void {\r\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\r\n        // return an error if called from the hidden iframe created by the msal js silent calls\r\n        if (isResponseHash && BrowserUtils.isInIframe()) {\r\n            throw BrowserAuthError.createBlockReloadInHiddenIframeError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirect operations in iframes unless explicitly allowed\r\n     * @param interactionType Interaction type for the request\r\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n     */\r\n    static blockRedirectInIframe(interactionType: InteractionType, allowRedirectInIframe: boolean): void {\r\n        const isIframedApp = BrowserUtils.isInIframe();\r\n        if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\r\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\r\n            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n     */\r\n    static blockAcquireTokenInPopups(): void {\r\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\r\n        if (BrowserUtils.isInPopup()) {\r\n            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if token requests are made in non-browser environment\r\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n     */\r\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\r\n        if (!isBrowserEnvironment) {\r\n            throw BrowserAuthError.createNonBrowserEnvironmentError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if native brokering is enabled but initialize hasn't been called\r\n     * @param allowNativeBroker \r\n     * @param initialized \r\n     */\r\n    static blockNativeBrokerCalledBeforeInitialized(allowNativeBroker: boolean, initialized: boolean): void {\r\n        if (allowNativeBroker && !initialized) {\r\n            throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n     */\r\n    static detectIEOrEdge(): boolean {\r\n        const ua = window.navigator.userAgent;\r\n        const msie = ua.indexOf(\"MSIE \");\r\n        const msie11 = ua.indexOf(\"Trident/\");\r\n        const msedge = ua.indexOf(\"Edge/\");\r\n        const isIE = msie > 0 || msie11 > 0;\r\n        const isEdge = msedge > 0;\r\n        return isIE || isEdge;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}