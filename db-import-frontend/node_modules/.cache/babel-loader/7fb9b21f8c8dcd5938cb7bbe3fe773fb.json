{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport var setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy() {\n  var requestIdHeaderName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"x-ms-client-request-id\";\n  return {\n    name: setClientRequestIdPolicyName,\n    sendRequest: function sendRequest(request, next) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n              }\n              return _context.abrupt(\"return\", next(request));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  };\n}","map":{"version":3,"names":["setClientRequestIdPolicyName","setClientRequestIdPolicy","requestIdHeaderName","arguments","length","undefined","name","sendRequest","request","next","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","headers","has","set","requestId","abrupt","stop"],"sources":["../../../src/policies/setClientRequestIdPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): PipelinePolicy {\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    },\n  };\n}\n"],"mappings":";;AAAA;AACA;AAKA;;;AAGA,OAAO,IAAMA,4BAA4B,GAAG,0BAA0B;AAEtE;;;;;;AAMA,OAAM,SAAUC,wBAAwBA,CAAA,EACQ;EAAA,IAA9CC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,wBAAwB;EAE9C,OAAO;IACLG,IAAI,EAAEN,4BAA4B;IAC5BO,WAAW,WAAAA,YAACC,OAAwB,EAAEC,IAAiB;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAP,IAAA;YAAA;cAC3D,IAAI,CAACD,OAAO,CAACU,OAAO,CAACC,GAAG,CAACjB,mBAAmB,CAAC,EAAE;gBAC7CM,OAAO,CAACU,OAAO,CAACE,GAAG,CAAClB,mBAAmB,EAAEM,OAAO,CAACa,SAAS,CAAC;;cAC5D,OAAAL,QAAA,CAAAM,MAAA,WACMb,IAAI,CAACD,OAAO,CAAC;YAAA;YAAA;cAAA,OAAAQ,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA;IACtB;GACD;AACH"},"metadata":{},"sourceType":"module"}