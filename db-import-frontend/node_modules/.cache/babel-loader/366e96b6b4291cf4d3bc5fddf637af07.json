{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar _ = require(\"lodash\");\nvar Utils = require(\"../../utils\");\nvar DataTypes = require(\"../../data-types\");\nvar AbstractQueryGenerator = require(\"../abstract/query-generator\");\nvar randomBytes = require(\"crypto\").randomBytes;\nvar Op = require(\"../../operators\");\nvar throwMethodUndefined = function throwMethodUndefined(methodName) {\n  throw new Error(\"The method \\\"\".concat(methodName, \"\\\" is not defined! Please add it to your sql dialect.\"));\n};\nvar Db2QueryGenerator = /*#__PURE__*/function (_AbstractQueryGenerat) {\n  _inherits(Db2QueryGenerator, _AbstractQueryGenerat);\n  var _super = _createSuper(Db2QueryGenerator);\n  function Db2QueryGenerator(options) {\n    var _spreadProps;\n    var _this;\n    _classCallCheck(this, Db2QueryGenerator);\n    _this = _super.call(this, options);\n    _this.OperatorMap = __spreadProps(__spreadValues({}, _this.OperatorMap), (_spreadProps = {}, _defineProperty(_spreadProps, Op.regexp, \"REGEXP_LIKE\"), _defineProperty(_spreadProps, Op.notRegexp, \"NOT REGEXP_LIKE\"), _spreadProps));\n    _this.autoGenValue = 1;\n    return _this;\n  }\n  _createClass(Db2QueryGenerator, [{\n    key: \"createSchema\",\n    value: function createSchema(schema) {\n      return [\"CREATE SCHEMA\", this.quoteIdentifier(schema), \";\"].join(\" \");\n    }\n  }, {\n    key: \"dropSchema\",\n    value: function dropSchema(schema) {\n      var query = \"CALL SYSPROC.ADMIN_DROP_SCHEMA(\".concat(wrapSingleQuote(schema.trim()), \", NULL, ? , ?)\");\n      var sql = {\n        query: query\n      };\n      sql.bind = [{\n        ParamType: \"INOUT\",\n        Data: \"ERRORSCHEMA\"\n      }, {\n        ParamType: \"INOUT\",\n        Data: \"ERRORTABLE\"\n      }];\n      return sql;\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery() {\n      return \"SELECT SCHEMANAME AS \\\"schema_name\\\" FROM SYSCAT.SCHEMATA WHERE (SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN ('NULLID', 'SQLJ', 'ERRORSCHEMA')\";\n    }\n  }, {\n    key: \"versionQuery\",\n    value: function versionQuery() {\n      return \"select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A\";\n    }\n  }, {\n    key: \"createTableQuery\",\n    value: function createTableQuery(tableName, attributes, options) {\n      var _this2 = this;\n      var query = \"CREATE TABLE <%= table %> (<%= attributes %>)\",\n        primaryKeys = [],\n        foreignKeys = {},\n        attrStr = [],\n        commentTemplate = \" -- <%= comment %>, TableName = <%= table %>, ColumnName = <%= column %>;\";\n      var commentStr = \"\";\n      for (var attr in attributes) {\n        if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n          var dataType = attributes[attr];\n          var match = void 0;\n          if (dataType.includes(\"COMMENT \")) {\n            var commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n            if (commentMatch && commentMatch.length > 2) {\n              var commentText = commentMatch[2].replace(/COMMENT/, \"\").trim();\n              commentStr += _.template(commentTemplate, this._templateSettings)({\n                table: this.quoteIdentifier(tableName),\n                comment: this.escape(commentText),\n                column: this.quoteIdentifier(attr)\n              });\n              dataType = commentMatch[1];\n            }\n          }\n          if (_.includes(dataType, \"PRIMARY KEY\")) {\n            primaryKeys.push(attr);\n            if (_.includes(dataType, \"REFERENCES\")) {\n              match = dataType.match(/^(.+) (REFERENCES.*)$/);\n              attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(match[1].replace(/PRIMARY KEY/, \"\")));\n              foreignKeys[attr] = match[2];\n            } else {\n              attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(dataType.replace(/PRIMARY KEY/, \"\")));\n            }\n          } else if (_.includes(dataType, \"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(match[1]));\n            foreignKeys[attr] = match[2];\n          } else {\n            if (options && options.uniqueKeys) {\n              for (var ukey in options.uniqueKeys) {\n                if (options.uniqueKeys[ukey].fields.includes(attr) && !_.includes(dataType, \"NOT NULL\")) {\n                  dataType += \" NOT NULL\";\n                  break;\n                }\n              }\n            }\n            attrStr.push(\"\".concat(this.quoteIdentifier(attr), \" \").concat(dataType));\n          }\n        }\n      }\n      var values = {\n          table: this.quoteTable(tableName),\n          attributes: attrStr.join(\", \")\n        },\n        pkString = primaryKeys.map(function (pk) {\n          return _this2.quoteIdentifier(pk);\n        }).join(\", \");\n      if (options && options.uniqueKeys) {\n        _.each(options.uniqueKeys, function (columns, indexName) {\n          if (columns.customIndex) {\n            if (!_.isString(indexName)) {\n              indexName = \"uniq_\".concat(tableName, \"_\").concat(columns.fields.join(\"_\"));\n            }\n            values.attributes += \", CONSTRAINT \".concat(_this2.quoteIdentifier(indexName), \" UNIQUE (\").concat(columns.fields.map(function (field) {\n              return _this2.quoteIdentifier(field);\n            }).join(\", \"), \")\");\n          }\n        });\n      }\n      if (pkString.length > 0) {\n        values.attributes += \", PRIMARY KEY (\".concat(pkString, \")\");\n      }\n      for (var fkey in foreignKeys) {\n        if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n          values.attributes += \", FOREIGN KEY (\".concat(this.quoteIdentifier(fkey), \") \").concat(foreignKeys[fkey]);\n        }\n      }\n      return \"\".concat(_.template(query, this._templateSettings)(values).trim(), \";\").concat(commentStr);\n    }\n  }, {\n    key: \"describeTableQuery\",\n    value: function describeTableQuery(tableName, schema) {\n      var sql = ['SELECT NAME AS \"Name\", TBNAME AS \"Table\", TBCREATOR AS \"Schema\",', 'TRIM(COLTYPE) AS \"Type\", LENGTH AS \"Length\", SCALE AS \"Scale\",', 'NULLS AS \"IsNull\", DEFAULT AS \"Default\", COLNO AS \"Colno\",', 'IDENTITY AS \"IsIdentity\", KEYSEQ AS \"KeySeq\", REMARKS AS \"Comment\"', \"FROM\", \"SYSIBM.SYSCOLUMNS\", \"WHERE TBNAME =\", wrapSingleQuote(tableName)].join(\" \");\n      if (schema) {\n        sql += \" AND TBCREATOR =\".concat(wrapSingleQuote(schema));\n      } else {\n        sql += \" AND TBCREATOR = USER\";\n      }\n      return \"\".concat(sql, \";\");\n    }\n  }, {\n    key: \"renameTableQuery\",\n    value: function renameTableQuery(before, after) {\n      var query = \"RENAME TABLE <%= before %> TO <%= after %>;\";\n      return _.template(query, this._templateSettings)({\n        before: this.quoteTable(before),\n        after: this.quoteTable(after)\n      });\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery() {\n      return \"SELECT TABNAME AS \\\"tableName\\\", TRIM(TABSCHEMA) AS \\\"tableSchema\\\" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME\";\n    }\n  }, {\n    key: \"tableExistsQuery\",\n    value: function tableExistsQuery(table) {\n      var tableName = table.tableName || table;\n      var schemaName = table.schema || this.sequelize.config.username.toUpperCase();\n      return \"SELECT name FROM sysibm.systables WHERE NAME = \".concat(wrapSingleQuote(tableName), \" AND CREATOR = \").concat(wrapSingleQuote(schemaName));\n    }\n  }, {\n    key: \"dropTableQuery\",\n    value: function dropTableQuery(tableName) {\n      var query = \"DROP TABLE <%= table %>\";\n      var values = {\n        table: this.quoteTable(tableName)\n      };\n      return \"\".concat(_.template(query, this._templateSettings)(values).trim(), \";\");\n    }\n  }, {\n    key: \"addColumnQuery\",\n    value: function addColumnQuery(table, key, dataType) {\n      dataType.field = key;\n      var query = \"ALTER TABLE <%= table %> ADD <%= attribute %>;\",\n        attribute = _.template(\"<%= key %> <%= definition %>\", this._templateSettings)({\n          key: this.quoteIdentifier(key),\n          definition: this.attributeToSQL(dataType, {\n            context: \"addColumn\"\n          })\n        });\n      return _.template(query, this._templateSettings)({\n        table: this.quoteTable(table),\n        attribute: attribute\n      });\n    }\n  }, {\n    key: \"removeColumnQuery\",\n    value: function removeColumnQuery(tableName, attributeName) {\n      var query = \"ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;\";\n      return _.template(query, this._templateSettings)({\n        tableName: this.quoteTable(tableName),\n        attributeName: this.quoteIdentifier(attributeName)\n      });\n    }\n  }, {\n    key: \"changeColumnQuery\",\n    value: function changeColumnQuery(tableName, attributes) {\n      var query = \"ALTER TABLE <%= tableName %> <%= query %>;\";\n      var attrString = [],\n        constraintString = [];\n      for (var attributeName in attributes) {\n        var attrValue = attributes[attributeName];\n        var defs = [attrValue];\n        if (Array.isArray(attrValue)) {\n          defs = attrValue;\n        }\n        for (var i = 0; i < defs.length; i++) {\n          var definition = defs[i];\n          if (definition.match(/REFERENCES/)) {\n            constraintString.push(_.template(\"<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>\", this._templateSettings)({\n              fkName: this.quoteIdentifier(\"\".concat(attributeName, \"_foreign_idx\")),\n              attrName: this.quoteIdentifier(attributeName),\n              definition: definition.replace(/.+?(?=REFERENCES)/, \"\")\n            }));\n          } else if (_.startsWith(definition, \"DROP \")) {\n            attrString.push(_.template(\"<%= attrName %> <%= definition %>\", this._templateSettings)({\n              attrName: this.quoteIdentifier(attributeName),\n              definition: definition\n            }));\n          } else {\n            attrString.push(_.template(\"<%= attrName %> SET <%= definition %>\", this._templateSettings)({\n              attrName: this.quoteIdentifier(attributeName),\n              definition: definition\n            }));\n          }\n        }\n      }\n      var finalQuery = \"\";\n      if (attrString.length) {\n        finalQuery += \"ALTER COLUMN \".concat(attrString.join(\" ALTER COLUMN \"));\n        finalQuery += constraintString.length ? \" \" : \"\";\n      }\n      if (constraintString.length) {\n        finalQuery += \"ADD CONSTRAINT \".concat(constraintString.join(\" ADD CONSTRAINT \"));\n      }\n      return _.template(query, this._templateSettings)({\n        tableName: this.quoteTable(tableName),\n        query: finalQuery\n      });\n    }\n  }, {\n    key: \"renameColumnQuery\",\n    value: function renameColumnQuery(tableName, attrBefore, attributes) {\n      var query = \"ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;\",\n        newName = Object.keys(attributes)[0];\n      return _.template(query, this._templateSettings)({\n        tableName: this.quoteTable(tableName),\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(newName)\n      });\n    }\n  }, {\n    key: \"addConstraintQuery\",\n    value: function addConstraintQuery(tableName, options) {\n      options = options || {};\n      if (options.onUpdate && options.onUpdate.toUpperCase() === \"CASCADE\") {\n        delete options.onUpdate;\n      }\n      var constraintSnippet = this.getConstraintSnippet(tableName, options);\n      if (typeof tableName === \"string\") {\n        tableName = this.quoteIdentifiers(tableName);\n      } else {\n        tableName = this.quoteTable(tableName);\n      }\n      return \"ALTER TABLE \".concat(tableName, \" ADD \").concat(constraintSnippet, \";\");\n    }\n  }, {\n    key: \"bulkInsertQuery\",\n    value: function bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n      var _this3 = this;\n      options = options || {};\n      attributes = attributes || {};\n      var query = \"INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;\";\n      if (options.returning) {\n        query = \"SELECT * FROM FINAL TABLE( INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);\";\n      }\n      var emptyQuery = \"INSERT INTO <%= table %>\",\n        tuples = [],\n        allAttributes = [],\n        allQueries = [];\n      var outputFragment;\n      var valuesForEmptyQuery = [];\n      if (options.returning) {\n        outputFragment = \"\";\n      }\n      _.forEach(attrValueHashes, function (attrValueHash) {\n        var fields = Object.keys(attrValueHash);\n        var firstAttr = attributes[fields[0]];\n        if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n          valuesForEmptyQuery.push(\"(\".concat(_this3.autoGenValue++, \")\"));\n          return;\n        }\n        _.forOwn(attrValueHash, function (value, key) {\n          if (allAttributes.indexOf(key) === -1) {\n            if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n            allAttributes.push(key);\n          }\n        });\n      });\n      if (valuesForEmptyQuery.length > 0) {\n        allQueries.push(\"\".concat(emptyQuery, \" VALUES \").concat(valuesForEmptyQuery.join(\",\")));\n      }\n      if (allAttributes.length > 0) {\n        _.forEach(attrValueHashes, function (attrValueHash) {\n          tuples.push(\"(\".concat(allAttributes.map(function (key) {\n            return _this3.escape(attrValueHash[key]);\n          }, void 0, {\n            context: \"INSERT\"\n          }).join(\",\"), \")\"));\n        });\n        allQueries.push(query);\n      }\n      var replacements = {\n        table: this.quoteTable(tableName),\n        attributes: allAttributes.map(function (attr) {\n          return _this3.quoteIdentifier(attr);\n        }).join(\",\"),\n        tuples: tuples,\n        output: outputFragment\n      };\n      var generatedQuery = _.template(allQueries.join(\";\"), this._templateSettings)(replacements);\n      return generatedQuery;\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery(tableName, attrValueHash, where, options, attributes) {\n      var sql = _get(_getPrototypeOf(Db2QueryGenerator.prototype), \"updateQuery\", this).call(this, tableName, attrValueHash, where, options, attributes);\n      options = options || {};\n      _.defaults(options, this.options);\n      if (!options.limit) {\n        sql.query = \"SELECT * FROM FINAL TABLE (\".concat(sql.query, \");\");\n        return sql;\n      }\n      attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n      var modelAttributeMap = {};\n      var values = [];\n      var bind = [];\n      var bindParam = options.bindParam || this.bindParam(bind);\n      if (attributes) {\n        _.each(attributes, function (attribute, key) {\n          modelAttributeMap[key] = attribute;\n          if (attribute.field) {\n            modelAttributeMap[attribute.field] = attribute;\n          }\n        });\n      }\n      for (var key in attrValueHash) {\n        var value = attrValueHash[key];\n        if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n          values.push(\"\".concat(this.quoteIdentifier(key), \"=\").concat(this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n            context: \"UPDATE\"\n          })));\n        } else {\n          values.push(\"\".concat(this.quoteIdentifier(key), \"=\").concat(this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n            context: \"UPDATE\"\n          }, bindParam)));\n        }\n      }\n      var query;\n      var whereOptions = _.defaults({\n        bindParam: bindParam\n      }, options);\n      query = \"UPDATE (SELECT * FROM \".concat(this.quoteTable(tableName), \" \").concat(this.whereQuery(where, whereOptions), \" FETCH NEXT \").concat(this.escape(options.limit), \" ROWS ONLY) SET \").concat(values.join(\",\"));\n      query = \"SELECT * FROM FINAL TABLE (\".concat(query, \");\");\n      return {\n        query: query,\n        bind: bind\n      };\n    }\n  }, {\n    key: \"upsertQuery\",\n    value: function upsertQuery(tableName, insertValues, updateValues, where, model) {\n      var _this4 = this;\n      var targetTableAlias = this.quoteTable(\"\".concat(tableName, \"_target\"));\n      var sourceTableAlias = this.quoteTable(\"\".concat(tableName, \"_source\"));\n      var primaryKeysAttrs = [];\n      var identityAttrs = [];\n      var uniqueAttrs = [];\n      var tableNameQuoted = this.quoteTable(tableName);\n      for (var key in model.rawAttributes) {\n        if (model.rawAttributes[key].primaryKey) {\n          primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n        }\n        if (model.rawAttributes[key].unique) {\n          uniqueAttrs.push(model.rawAttributes[key].field || key);\n        }\n        if (model.rawAttributes[key].autoIncrement) {\n          identityAttrs.push(model.rawAttributes[key].field || key);\n        }\n      }\n      var _iterator2 = _createForOfIteratorHelper(model._indexes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var index = _step2.value;\n          if (index.unique && index.fields) {\n            var _iterator3 = _createForOfIteratorHelper(index.fields),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var field = _step3.value;\n                var fieldName = typeof field === \"string\" ? field : field.name || field.attribute;\n                if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {\n                  uniqueAttrs.push(fieldName);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var updateKeys = Object.keys(updateValues);\n      var insertKeys = Object.keys(insertValues);\n      var insertKeysQuoted = insertKeys.map(function (key) {\n        return _this4.quoteIdentifier(key);\n      }).join(\", \");\n      var insertValuesEscaped = insertKeys.map(function (key) {\n        return _this4.escape(insertValues[key]);\n      }).join(\", \");\n      var sourceTableQuery = \"VALUES(\".concat(insertValuesEscaped, \")\");\n      var joinCondition;\n      var clauses = where[Op.or].filter(function (clause) {\n        var valid = true;\n        for (var _key in clause) {\n          if (!clause[_key]) {\n            valid = false;\n            break;\n          }\n        }\n        return valid;\n      });\n      var getJoinSnippet = function getJoinSnippet(array) {\n        return array.map(function (key) {\n          key = _this4.quoteIdentifier(key);\n          return \"\".concat(targetTableAlias, \".\").concat(key, \" = \").concat(sourceTableAlias, \".\").concat(key);\n        });\n      };\n      if (clauses.length === 0) {\n        throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n      } else {\n        for (var _key2 in clauses) {\n          var keys = Object.keys(clauses[_key2]);\n          if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n            joinCondition = getJoinSnippet(primaryKeysAttrs).join(\" AND \");\n            break;\n          }\n        }\n        if (!joinCondition) {\n          joinCondition = getJoinSnippet(uniqueAttrs).join(\" AND \");\n        }\n      }\n      var filteredUpdateClauses = updateKeys.filter(function (key) {\n        if (identityAttrs.indexOf(key) === -1) {\n          return true;\n        }\n        return false;\n      }).map(function (key) {\n        var value = _this4.escape(updateValues[key]);\n        key = _this4.quoteIdentifier(key);\n        return \"\".concat(targetTableAlias, \".\").concat(key, \" = \").concat(value);\n      }).join(\", \");\n      var updateSnippet = filteredUpdateClauses.length > 0 ? \"WHEN MATCHED THEN UPDATE SET \".concat(filteredUpdateClauses) : \"\";\n      var insertSnippet = \"(\".concat(insertKeysQuoted, \") VALUES(\").concat(insertValuesEscaped, \")\");\n      var query = \"MERGE INTO \".concat(tableNameQuoted, \" AS \").concat(targetTableAlias, \" USING (\").concat(sourceTableQuery, \") AS \").concat(sourceTableAlias, \"(\").concat(insertKeysQuoted, \") ON \").concat(joinCondition);\n      query += \" \".concat(updateSnippet, \" WHEN NOT MATCHED THEN INSERT \").concat(insertSnippet, \";\");\n      return query;\n    }\n  }, {\n    key: \"truncateTableQuery\",\n    value: function truncateTableQuery(tableName) {\n      return \"TRUNCATE TABLE \".concat(this.quoteTable(tableName), \" IMMEDIATE\");\n    }\n  }, {\n    key: \"deleteQuery\",\n    value: function deleteQuery(tableName, where) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var model = arguments.length > 3 ? arguments[3] : undefined;\n      var table = this.quoteTable(tableName);\n      var query = \"DELETE FROM <%= table %><%= where %><%= limit %>\";\n      where = this.getWhereConditions(where, null, model, options);\n      var limit = \"\";\n      if (options.offset > 0) {\n        limit = \" OFFSET \".concat(this.escape(options.offset), \" ROWS\");\n      }\n      if (options.limit) {\n        limit += \" FETCH NEXT \".concat(this.escape(options.limit), \" ROWS ONLY\");\n      }\n      var replacements = {\n        limit: limit,\n        table: table,\n        where: where\n      };\n      if (replacements.where) {\n        replacements.where = \" WHERE \".concat(replacements.where);\n      }\n      return _.template(query, this._templateSettings)(replacements);\n    }\n  }, {\n    key: \"showIndexesQuery\",\n    value: function showIndexesQuery(tableName) {\n      var sql = 'SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES WHERE TBNAME = <%= tableName %>';\n      var schema = void 0;\n      if (_.isObject(tableName)) {\n        schema = tableName.schema;\n        tableName = tableName.tableName;\n      }\n      if (schema) {\n        sql = \"\".concat(sql, \" AND TBCREATOR = <%= schemaName %>\");\n      }\n      sql = \"\".concat(sql, \" ORDER BY NAME;\");\n      return _.template(sql, this._templateSettings)({\n        tableName: wrapSingleQuote(tableName),\n        schemaName: wrapSingleQuote(schema)\n      });\n    }\n  }, {\n    key: \"showConstraintsQuery\",\n    value: function showConstraintsQuery(tableName, constraintName) {\n      var sql = \"SELECT CONSTNAME AS \\\"constraintName\\\", TRIM(TABSCHEMA) AS \\\"schemaName\\\", TABNAME AS \\\"tableName\\\" FROM SYSCAT.TABCONST WHERE TABNAME = '\".concat(tableName, \"'\");\n      if (constraintName) {\n        sql += \" AND CONSTNAME LIKE '%\".concat(constraintName, \"%'\");\n      }\n      return \"\".concat(sql, \" ORDER BY CONSTNAME;\");\n    }\n  }, {\n    key: \"removeIndexQuery\",\n    value: function removeIndexQuery(tableName, indexNameOrAttributes) {\n      var sql = \"DROP INDEX <%= indexName %>\";\n      var indexName = indexNameOrAttributes;\n      if (typeof indexName !== \"string\") {\n        indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join(\"_\")));\n      }\n      var values = {\n        tableName: this.quoteIdentifiers(tableName),\n        indexName: this.quoteIdentifiers(indexName)\n      };\n      return _.template(sql, this._templateSettings)(values);\n    }\n  }, {\n    key: \"attributeToSQL\",\n    value: function attributeToSQL(attribute, options) {\n      var _this5 = this;\n      if (!_.isPlainObject(attribute)) {\n        attribute = {\n          type: attribute\n        };\n      }\n      var template;\n      var changeNull = 1;\n      if (attribute.type instanceof DataTypes.ENUM) {\n        if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n        template = attribute.type.toSql();\n        template += \" CHECK (\".concat(this.quoteIdentifier(attribute.field), \" IN(\").concat(attribute.values.map(function (value) {\n          return _this5.escape(value);\n        }).join(\", \"), \"))\");\n      } else {\n        template = attribute.type.toString();\n      }\n      if (options && options.context === \"changeColumn\" && attribute.type) {\n        template = \"DATA TYPE \".concat(template);\n      } else if (attribute.allowNull === false || attribute.primaryKey === true || attribute.unique) {\n        template += \" NOT NULL\";\n        changeNull = 0;\n      }\n      if (attribute.autoIncrement) {\n        var initialValue = 1;\n        if (attribute.initialAutoIncrement) {\n          initialValue = attribute.initialAutoIncrement;\n        }\n        template += \" GENERATED BY DEFAULT AS IDENTITY(START WITH \".concat(initialValue, \", INCREMENT BY 1)\");\n      }\n      if (attribute.type !== \"TEXT\" && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n        template += \" DEFAULT \".concat(this.escape(attribute.defaultValue));\n      }\n      if (attribute.unique === true) {\n        template += \" UNIQUE\";\n      }\n      if (attribute.primaryKey) {\n        template += \" PRIMARY KEY\";\n      }\n      if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n        if (options && options.context === \"addColumn\" && options.foreignKey) {\n          var attrName = this.quoteIdentifier(options.foreignKey);\n          var fkName = \"\".concat(options.tableName, \"_\").concat(attrName, \"_fidx\");\n          template += \", CONSTRAINT \".concat(fkName, \" FOREIGN KEY (\").concat(attrName, \")\");\n        }\n        template += \" REFERENCES \".concat(this.quoteTable(attribute.references.model));\n        if (attribute.references.key) {\n          template += \" (\".concat(this.quoteIdentifier(attribute.references.key), \")\");\n        } else {\n          template += \" (\".concat(this.quoteIdentifier(\"id\"), \")\");\n        }\n        if (attribute.onDelete) {\n          template += \" ON DELETE \".concat(attribute.onDelete.toUpperCase());\n        }\n        if (attribute.onUpdate && attribute.onUpdate.toUpperCase() != \"CASCADE\") {\n          template += \" ON UPDATE \".concat(attribute.onUpdate.toUpperCase());\n        }\n      }\n      if (options && options.context === \"changeColumn\" && changeNull === 1 && attribute.allowNull !== void 0) {\n        template = [template];\n        if (attribute.allowNull) {\n          template.push(\"DROP NOT NULL\");\n        } else {\n          template.push(\"NOT NULL\");\n        }\n      }\n      if (attribute.comment && typeof attribute.comment === \"string\") {\n        template += \" COMMENT \".concat(attribute.comment);\n      }\n      return template;\n    }\n  }, {\n    key: \"attributesToSQL\",\n    value: function attributesToSQL(attributes, options) {\n      var result = {},\n        existingConstraints = [];\n      var key, attribute;\n      for (key in attributes) {\n        attribute = attributes[key];\n        if (attribute.references) {\n          if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n            attribute.onDelete = \"\";\n            attribute.onUpdate = \"\";\n          } else if (attribute.unique && attribute.unique === true) {\n            attribute.onDelete = \"\";\n            attribute.onUpdate = \"\";\n          } else {\n            existingConstraints.push(attribute.references.model.toString());\n          }\n        }\n        if (key && !attribute.field && typeof attribute === \"object\") attribute.field = key;\n        result[attribute.field || key] = this.attributeToSQL(attribute, options);\n      }\n      return result;\n    }\n  }, {\n    key: \"createTrigger\",\n    value: function createTrigger() {\n      throwMethodUndefined(\"createTrigger\");\n    }\n  }, {\n    key: \"dropTrigger\",\n    value: function dropTrigger() {\n      throwMethodUndefined(\"dropTrigger\");\n    }\n  }, {\n    key: \"renameTrigger\",\n    value: function renameTrigger() {\n      throwMethodUndefined(\"renameTrigger\");\n    }\n  }, {\n    key: \"createFunction\",\n    value: function createFunction() {\n      throwMethodUndefined(\"createFunction\");\n    }\n  }, {\n    key: \"dropFunction\",\n    value: function dropFunction() {\n      throwMethodUndefined(\"dropFunction\");\n    }\n  }, {\n    key: \"renameFunction\",\n    value: function renameFunction() {\n      throwMethodUndefined(\"renameFunction\");\n    }\n  }, {\n    key: \"_getForeignKeysQuerySQL\",\n    value: function _getForeignKeysQuerySQL(condition) {\n      return \"SELECT R.CONSTNAME AS \\\"constraintName\\\", TRIM(R.TABSCHEMA) AS \\\"constraintSchema\\\", R.TABNAME AS \\\"tableName\\\", TRIM(R.TABSCHEMA) AS \\\"tableSchema\\\", LISTAGG(C.COLNAME,', ') WITHIN GROUP (ORDER BY C.COLNAME) AS \\\"columnName\\\", TRIM(R.REFTABSCHEMA) AS \\\"referencedTableSchema\\\", R.REFTABNAME AS \\\"referencedTableName\\\", TRIM(R.PK_COLNAMES) AS \\\"referencedColumnName\\\" FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA AND R.TABNAME = C.TABNAME\".concat(condition, \" GROUP BY R.REFTABSCHEMA, R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES\");\n    }\n  }, {\n    key: \"getForeignKeysQuery\",\n    value: function getForeignKeysQuery(table, schemaName) {\n      var tableName = table.tableName || table;\n      schemaName = table.schema || schemaName;\n      var sql = \"\";\n      if (tableName) {\n        sql = \" AND R.TABNAME = \".concat(wrapSingleQuote(tableName));\n      }\n      if (schemaName) {\n        sql += \" AND R.TABSCHEMA = \".concat(wrapSingleQuote(schemaName));\n      }\n      return this._getForeignKeysQuerySQL(sql);\n    }\n  }, {\n    key: \"getForeignKeyQuery\",\n    value: function getForeignKeyQuery(table, columnName) {\n      var tableName = table.tableName || table;\n      var schemaName = table.schema;\n      var sql = \"\";\n      if (tableName) {\n        sql = \" AND R.TABNAME = \".concat(wrapSingleQuote(tableName));\n      }\n      if (schemaName) {\n        sql += \" AND R.TABSCHEMA = \".concat(wrapSingleQuote(schemaName));\n      }\n      if (columnName) {\n        sql += \" AND C.COLNAME = \".concat(wrapSingleQuote(columnName));\n      }\n      return this._getForeignKeysQuerySQL(sql);\n    }\n  }, {\n    key: \"getPrimaryKeyConstraintQuery\",\n    value: function getPrimaryKeyConstraintQuery(table, attributeName) {\n      var tableName = wrapSingleQuote(table.tableName || table);\n      return ['SELECT TABNAME AS \"tableName\",', 'COLNAME AS \"columnName\",', 'CONSTNAME AS \"constraintName\"', \"FROM SYSCAT.KEYCOLUSE WHERE CONSTNAME LIKE 'PK_%'\", \"AND COLNAME = \".concat(wrapSingleQuote(attributeName)), \"AND TABNAME = \".concat(tableName, \";\")].join(\" \");\n    }\n  }, {\n    key: \"dropForeignKeyQuery\",\n    value: function dropForeignKeyQuery(tableName, foreignKey) {\n      return _.template(\"ALTER TABLE <%= table %> DROP <%= key %>\", this._templateSettings)({\n        table: this.quoteTable(tableName),\n        key: this.quoteIdentifier(foreignKey)\n      });\n    }\n  }, {\n    key: \"dropConstraintQuery\",\n    value: function dropConstraintQuery(tableName, constraintName) {\n      var sql = \"ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;\";\n      return _.template(sql, this._templateSettings)({\n        table: this.quoteTable(tableName),\n        constraint: this.quoteIdentifier(constraintName)\n      });\n    }\n  }, {\n    key: \"setAutocommitQuery\",\n    value: function setAutocommitQuery() {\n      return \"\";\n    }\n  }, {\n    key: \"setIsolationLevelQuery\",\n    value: function setIsolationLevelQuery() {}\n  }, {\n    key: \"generateTransactionId\",\n    value: function generateTransactionId() {\n      return randomBytes(10).toString(\"hex\");\n    }\n  }, {\n    key: \"startTransactionQuery\",\n    value: function startTransactionQuery(transaction) {\n      if (transaction.parent) {\n        return \"SAVE TRANSACTION \".concat(this.quoteIdentifier(transaction.name), \";\");\n      }\n      return \"BEGIN TRANSACTION;\";\n    }\n  }, {\n    key: \"commitTransactionQuery\",\n    value: function commitTransactionQuery(transaction) {\n      if (transaction.parent) {\n        return;\n      }\n      return \"COMMIT TRANSACTION;\";\n    }\n  }, {\n    key: \"rollbackTransactionQuery\",\n    value: function rollbackTransactionQuery(transaction) {\n      if (transaction.parent) {\n        return \"ROLLBACK TRANSACTION \".concat(this.quoteIdentifier(transaction.name), \";\");\n      }\n      return \"ROLLBACK TRANSACTION;\";\n    }\n  }, {\n    key: \"addLimitAndOffset\",\n    value: function addLimitAndOffset(options) {\n      var offset = options.offset || 0;\n      var fragment = \"\";\n      if (offset > 0) {\n        fragment += \" OFFSET \".concat(this.escape(offset), \" ROWS\");\n      }\n      if (options.limit) {\n        fragment += \" FETCH NEXT \".concat(this.escape(options.limit), \" ROWS ONLY\");\n      }\n      return fragment;\n    }\n  }, {\n    key: \"booleanValue\",\n    value: function booleanValue(value) {\n      return value ? 1 : 0;\n    }\n  }, {\n    key: \"addUniqueFields\",\n    value: function addUniqueFields(dataValues, rawAttributes, uniqno) {\n      uniqno = uniqno === void 0 ? 1 : uniqno;\n      for (var key in rawAttributes) {\n        if (rawAttributes[key].unique && dataValues[key] === void 0) {\n          if (rawAttributes[key].type instanceof DataTypes.DATE) {\n            dataValues[key] = Utils.now(\"db2\");\n          } else if (rawAttributes[key].type instanceof DataTypes.STRING) {\n            dataValues[key] = \"unique\".concat(uniqno++);\n          } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {\n            dataValues[key] = uniqno++;\n          } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {\n            dataValues[key] = new DataTypes.BOOLEAN(false);\n          }\n        }\n      }\n      return uniqno;\n    }\n  }, {\n    key: \"quoteIdentifier\",\n    value: function quoteIdentifier(identifier, force) {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  }]);\n  return Db2QueryGenerator;\n}(AbstractQueryGenerator);\nfunction wrapSingleQuote(identifier) {\n  if (identifier) {\n    return \"'\".concat(identifier, \"'\");\n  }\n  return \"\";\n}\nmodule.exports = Db2QueryGenerator;","map":{"version":3,"names":["_","require","Utils","DataTypes","AbstractQueryGenerator","randomBytes","Op","throwMethodUndefined","methodName","Error","concat","Db2QueryGenerator","_AbstractQueryGenerat","_inherits","_super","_createSuper","options","_spreadProps","_this","_classCallCheck","call","OperatorMap","__spreadProps","__spreadValues","_defineProperty","regexp","notRegexp","autoGenValue","_createClass","key","value","createSchema","schema","quoteIdentifier","join","dropSchema","query","wrapSingleQuote","trim","sql","bind","ParamType","Data","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","_this2","primaryKeys","foreignKeys","attrStr","commentTemplate","commentStr","attr","Object","prototype","hasOwnProperty","dataType","match","includes","commentMatch","length","commentText","replace","template","_templateSettings","table","comment","escape","column","push","uniqueKeys","ukey","fields","values","quoteTable","pkString","map","pk","each","columns","indexName","customIndex","isString","field","fkey","describeTableQuery","renameTableQuery","before","after","showTablesQuery","tableExistsQuery","schemaName","sequelize","config","username","toUpperCase","dropTableQuery","addColumnQuery","attribute","definition","attributeToSQL","context","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","attrValue","defs","Array","isArray","i","fkName","attrName","startsWith","finalQuery","renameColumnQuery","attrBefore","newName","keys","addConstraintQuery","onUpdate","constraintSnippet","getConstraintSnippet","quoteIdentifiers","bulkInsertQuery","attrValueHashes","_this3","returning","emptyQuery","tuples","allAttributes","allQueries","outputFragment","valuesForEmptyQuery","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","indexOf","replacements","output","generatedQuery","updateQuery","where","_get","_getPrototypeOf","defaults","limit","removeNullValuesFromHash","omitNull","modelAttributeMap","bindParam","SequelizeMethod","format","whereOptions","whereQuery","upsertQuery","insertValues","updateValues","model","_this4","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","_iterator2","_createForOfIteratorHelper","_indexes","_step2","s","n","done","index","_iterator3","_step3","fieldName","name","err","e","f","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","filteredUpdateClauses","updateSnippet","insertSnippet","truncateTableQuery","deleteQuery","arguments","undefined","getWhereConditions","offset","showIndexesQuery","isObject","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","underscore","_this5","isPlainObject","type","changeNull","ENUM","toSql","toString","allowNull","initialValue","initialAutoIncrement","_binary","defaultValueSchemable","defaultValue","withoutForeignKeyConstraints","references","foreignKey","onDelete","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","_getForeignKeysQuerySQL","condition","getForeignKeysQuery","getForeignKeyQuery","columnName","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","dropConstraintQuery","constraint","setAutocommitQuery","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","addLimitAndOffset","fragment","booleanValue","addUniqueFields","dataValues","uniqno","DATE","now","STRING","INTEGER","BOOLEAN","identifier","force","addTicks","removeTicks","module","exports"],"sources":["../../../src/dialects/db2/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass Db2QueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = { ...this.OperatorMap, [Op.regexp]: 'REGEXP_LIKE',\n      [Op.notRegexp]: 'NOT REGEXP_LIKE' };\n    this.autoGenValue = 1;\n  }\n\n  createSchema(schema) {\n    return [\n      'CREATE SCHEMA',\n      this.quoteIdentifier(schema),\n      ';'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // DROP SCHEMA Can't drop schema if it is not empty.\n    // DROP SCHEMA Can't drop objects belonging to the schema\n    // So, call the admin procedure to drop schema.\n    const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${ wrapSingleQuote(schema.trim()) }, NULL, ? , ?)`;\n    const sql = { query };\n    sql.bind = [{ ParamType: 'INOUT', Data: 'ERRORSCHEMA' },\n      { ParamType: 'INOUT', Data: 'ERRORTABLE' }];\n    return sql;\n  }\n\n  showSchemasQuery() {\n    return 'SELECT SCHEMANAME AS \"schema_name\" FROM SYSCAT.SCHEMATA WHERE ' +\n      \"(SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN ('NULLID', 'SQLJ', 'ERRORSCHEMA')\";\n  }\n\n\n\n  versionQuery() {\n    return 'select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const query = 'CREATE TABLE <%= table %> (<%= attributes %>)',\n      primaryKeys = [],\n      foreignKeys = {},\n      attrStr = [],\n      commentTemplate = ' -- <%= comment %>, ' +\n          'TableName = <%= table %>, ColumnName = <%= column %>;';\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          if (commentMatch && commentMatch.length > 2) {\n            const commentText = commentMatch[2].replace(/COMMENT/, '').trim();\n            commentStr += _.template(commentTemplate, this._templateSettings)({\n              table: this.quoteIdentifier(tableName),\n              comment: this.escape(commentText),\n              column: this.quoteIdentifier(attr)\n            });\n            // remove comment related substring from dataType\n            dataType = commentMatch[1];\n          }\n        }\n\n        if (_.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (_.includes(dataType, 'REFERENCES')) {\n            // Db2 doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${ this.quoteIdentifier(attr) } ${ match[1].replace(/PRIMARY KEY/, '') }`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${ this.quoteIdentifier(attr) } ${ dataType.replace(/PRIMARY KEY/, '') }`);\n          }\n        } else if (_.includes(dataType, 'REFERENCES')) {\n          // Db2 doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          if (options && options.uniqueKeys) {\n            for (const ukey in options.uniqueKeys) {\n              if (options.uniqueKeys[ukey].fields.includes(attr) &&\n                  ! _.includes(dataType, 'NOT NULL'))\n              {\n                dataType += ' NOT NULL';\n                break;\n              }\n            }\n          }\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n\n      }\n    }\n\n    const values = {\n        table: this.quoteTable(tableName),\n        attributes: attrStr.join(', ')\n      },\n      pkString = primaryKeys.map(pk => { return this.quoteIdentifier(pk); }).join(', ');\n\n    if (options && options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (!_.isString(indexName)) {\n            indexName = `uniq_${ tableName }_${ columns.fields.join('_')}`;\n          }\n          values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        values.attributes += `, FOREIGN KEY (${ this.quoteIdentifier(fkey) }) ${ foreignKeys[fkey] }`;\n      }\n    }\n    return `${_.template(query, this._templateSettings)(values).trim() };${ commentStr}`;\n  }\n\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT NAME AS \"Name\", TBNAME AS \"Table\", TBCREATOR AS \"Schema\",',\n      'TRIM(COLTYPE) AS \"Type\", LENGTH AS \"Length\", SCALE AS \"Scale\",',\n      'NULLS AS \"IsNull\", DEFAULT AS \"Default\", COLNO AS \"Colno\",',\n      'IDENTITY AS \"IsIdentity\", KEYSEQ AS \"KeySeq\", REMARKS AS \"Comment\"',\n      'FROM',\n      'SYSIBM.SYSCOLUMNS',\n      'WHERE TBNAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += ` AND TBCREATOR =${wrapSingleQuote(schema)}`;\n    } else {\n      sql += ' AND TBCREATOR = USER';\n    }\n\n    return `${sql};`;\n  }\n\n  renameTableQuery(before, after) {\n    const query = 'RENAME TABLE <%= before %> TO <%= after %>;';\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABNAME AS \\\"tableName\\\", TRIM(TABSCHEMA) AS \\\"tableSchema\\\" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME\";\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    // The default schema is the authorization ID of the owner of the plan or package.\n    // https://www.ibm.com/docs/en/db2-for-zos/12?topic=concepts-db2-schemas-schema-qualifiers\n    const schemaName = table.schema || this.sequelize.config.username.toUpperCase();\n\n    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=tables-systables\n    return `SELECT name FROM sysibm.systables WHERE NAME = ${wrapSingleQuote(tableName)} AND CREATOR = ${wrapSingleQuote(schemaName)}`;\n  }\n\n  dropTableQuery(tableName) {\n    const query = 'DROP TABLE <%= table %>';\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    return `${_.template(query, this._templateSettings)(values).trim()};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',\n      attribute = _.template('<%= key %> <%= definition %>', this._templateSettings)({\n        key: this.quoteIdentifier(key),\n        definition: this.attributeToSQL(dataType, {\n          context: 'addColumn'\n        })\n      });\n\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [],\n      constraintString = [];\n\n    for (const attributeName in attributes) {\n      const attrValue = attributes[attributeName];\n      let defs = [attrValue];\n      if (Array.isArray(attrValue)) {\n        defs = attrValue;\n      }\n      for (let i = 0; i < defs.length; i++) {\n        const definition = defs[i];\n        if (definition.match(/REFERENCES/)) {\n          constraintString.push(_.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>', this._templateSettings)({\n            fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),\n            attrName: this.quoteIdentifier(attributeName),\n            definition: definition.replace(/.+?(?=REFERENCES)/, '')\n          }));\n        } else if (_.startsWith(definition, 'DROP ')) {\n          attrString.push(_.template('<%= attrName %> <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        } else {\n          attrString.push(_.template('<%= attrName %> SET <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        }\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += `ALTER COLUMN ${attrString.join(' ALTER COLUMN ')}`;\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += `ADD CONSTRAINT ${constraintString.join(' ADD CONSTRAINT ')}`;\n    }\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;',\n      newName = Object.keys(attributes)[0];\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: this.quoteIdentifier(attrBefore),\n      after: this.quoteIdentifier(newName)\n    });\n  }\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    if (options.onUpdate && options.onUpdate.toUpperCase() === 'CASCADE') {\n      // Db2 does not support ON UPDATE CASCADE, remove it.\n      delete options.onUpdate;\n    }\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    let query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;';\n    if (options.returning) {\n      query = 'SELECT * FROM FINAL TABLE( INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);';\n    }\n    const emptyQuery = 'INSERT INTO <%= table %>',\n      tuples = [],\n      allAttributes = [],\n      allQueries = [];\n\n    let outputFragment;\n    const valuesForEmptyQuery = [];\n\n    if (options.returning) {\n      outputFragment = '';\n    }\n    _.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        valuesForEmptyQuery.push(`(${ this.autoGenValue++ })`);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n    if (valuesForEmptyQuery.length > 0) {\n      allQueries.push(`${emptyQuery } VALUES ${ valuesForEmptyQuery.join(',')}`);\n    }\n\t\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key]), undefined, { context: 'INSERT' }).join(',')})`);\n      });\n      allQueries.push(query);\n    }\n    const replacements = {\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr =>\n        this.quoteIdentifier(attr)).join(','),\n      tuples,\n      output: outputFragment\n    };\n\n    const generatedQuery = _.template(allQueries.join(';'), this._templateSettings)(replacements);\n    return generatedQuery;\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    options = options || {};\n    _.defaults(options, this.options);\n    if ( ! options.limit ) {\n      sql.query = `SELECT * FROM FINAL TABLE (${ sql.query });`;\n      return sql;\n    }\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false)\n      {\n        values.push(`${this.quoteIdentifier(key) }=${ this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key) }=${ this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = _.defaults({ bindParam }, options);\n\n    query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} FETCH NEXT ${this.escape(options.limit)} ROWS ONLY) SET ${values.join(',')}`;\n    query = `SELECT * FROM FINAL TABLE (${ query });`;\n    return { query, bind };\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => {\n      if (identityAttrs.indexOf(key) === -1) {\n        return true;\n      }\n      return false;\n    })\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : '';\n\t\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\t\n    let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const query = 'DELETE FROM <%= table %><%= where %><%= limit %>';\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    let limit = '';\n\n    if (options.offset > 0) {\n      limit = ` OFFSET ${ this.escape(options.offset) } ROWS`;\n    }\n    if (options.limit) {\n      limit += ` FETCH NEXT ${ this.escape(options.limit) } ROWS ONLY`;\n    }\n\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n\n    if (replacements.where) {\n      replacements.where = ` WHERE ${replacements.where}`;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  }\n\n  showIndexesQuery(tableName) {\n    let sql = 'SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES WHERE TBNAME = <%= tableName %>';\n    let schema = undefined;\n    if (_.isObject(tableName)) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    if (schema) {\n      sql = `${sql} AND TBCREATOR = <%= schemaName %>`;\n    }\n    sql = `${sql} ORDER BY NAME;`;\n    return _.template(sql, this._templateSettings)({\n      tableName: wrapSingleQuote(tableName),\n      schemaName: wrapSingleQuote(schema)\n    });\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT CONSTNAME AS \"constraintName\", TRIM(TABSCHEMA) AS \"schemaName\", TABNAME AS \"tableName\" FROM SYSCAT.TABCONST WHERE TABNAME = '${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND CONSTNAME LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql } ORDER BY CONSTNAME;`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n\n    return _.template(sql, this._templateSettings)(values);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let template;\n    let changeNull = 1;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n    } else {\n      template = attribute.type.toString();\n    }\n\n    if (options && options.context === 'changeColumn' && attribute.type) {\n      template = `DATA TYPE ${template}`;\n    }\n    else if (attribute.allowNull === false || attribute.primaryKey === true ||\n             attribute.unique) {\n      template += ' NOT NULL';\n      changeNull = 0;\n    }\n\n    if (attribute.autoIncrement) {\n      let initialValue = 1;\n      if (attribute.initialAutoIncrement) {\n        initialValue = attribute.initialAutoIncrement;\n      }\n      template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = `${options.tableName }_${ attrName }_fidx`;\n        template += `, CONSTRAINT ${ fkName } FOREIGN KEY (${ attrName })`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${ this.quoteIdentifier(attribute.references.key) })`;\n      } else {\n        template += ` (${ this.quoteIdentifier('id') })`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${ attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() != 'CASCADE') {\n        // Db2 do not support CASCADE option for ON UPDATE clause.\n        template += ` ON UPDATE ${ attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (options && options.context === 'changeColumn' && changeNull === 1 &&\n        attribute.allowNull !== undefined) {\n      template = [template];\n      if (attribute.allowNull) {\n        template.push('DROP NOT NULL');\n      } else {\n        template.push('NOT NULL');\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else if (attribute.unique && attribute.unique === true) {\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n        }\n      }\n\n      if (key && !attribute.field && typeof attribute === 'object') attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate SQL for ForeignKeysQuery.\n   *\n   * @param {string} condition   The condition string for query.\n   * @returns {string}\n   */\n  _getForeignKeysQuerySQL(condition) {\n    return 'SELECT R.CONSTNAME AS \"constraintName\", ' +\n        'TRIM(R.TABSCHEMA) AS \"constraintSchema\", ' +\n        'R.TABNAME AS \"tableName\", ' +\n        'TRIM(R.TABSCHEMA) AS \"tableSchema\", LISTAGG(C.COLNAME,\\', \\') ' +\n        'WITHIN GROUP (ORDER BY C.COLNAME) AS \"columnName\", ' +\n        'TRIM(R.REFTABSCHEMA) AS \"referencedTableSchema\", ' +\n        'R.REFTABNAME AS \"referencedTableName\", ' +\n        'TRIM(R.PK_COLNAMES) AS \"referencedColumnName\" ' +\n        'FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C ' +\n        'WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA ' +\n        `AND R.TABNAME = C.TABNAME${ condition } GROUP BY R.REFTABSCHEMA, ` +\n        'R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param {Stirng|object} table The name of the table.\n   * @param {string} schemaName   The name of the schema. \n   * @returns {string}            The generated sql query.\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    schemaName = table.schema || schemaName;\n    let sql = '';\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n\n  getForeignKeyQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    let sql = '';\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    if (columnName) {\n      sql += ` AND C.COLNAME = ${wrapSingleQuote(columnName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT TABNAME AS \"tableName\",',\n      'COLNAME AS \"columnName\",',\n      'CONSTNAME AS \"constraintName\"',\n      'FROM SYSCAT.KEYCOLUSE WHERE CONSTNAME LIKE \\'PK_%\\'',\n      `AND COLNAME = ${wrapSingleQuote(attributeName)}`,\n      `AND TABNAME = ${tableName};`\n    ].join(' ');\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template('ALTER TABLE <%= table %> DROP <%= key %>', this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  }\n\n  setAutocommitQuery() {\n    return '';\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  addLimitAndOffset(options) {\n    const offset = options.offset || 0;\n    let fragment = '';\n\n    if (offset > 0) {\n      fragment += ` OFFSET ${ this.escape(offset) } ROWS`;\n    }\n\n    if (options.limit) {\n      fragment += ` FETCH NEXT ${ this.escape(options.limit) } ROWS ONLY`;\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  addUniqueFields(dataValues, rawAttributes, uniqno) {\n    uniqno = uniqno === undefined ? 1 : uniqno;\n    for (const key in rawAttributes) {\n      if (rawAttributes[key].unique && dataValues[key] === undefined) {\n        if (rawAttributes[key].type instanceof DataTypes.DATE) {\n          dataValues[key] = Utils.now('db2');\n        } else if (rawAttributes[key].type instanceof DataTypes.STRING) {\n          dataValues[key] = `unique${uniqno++}`;\n        } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {\n          dataValues[key] = uniqno++;\n        } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {\n          dataValues[key] = new DataTypes.BOOLEAN(false);\n        }\n      }\n    }\n    return uniqno;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n  }\n\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  if (identifier) {\n    return `'${ identifier }'`;\n    //return Utils.addTicks(\"'\"); // It removes quote from center too.\n  }\n  return '';\n}\n\nmodule.exports = Db2QueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}