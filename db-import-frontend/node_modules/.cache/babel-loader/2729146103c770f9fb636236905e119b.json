{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar sequelizeErrors = require(\"../../errors\");\nvar _require = require(\"../abstract/query-interface\"),\n  QueryInterface = _require.QueryInterface;\nvar QueryTypes = require(\"../../query-types\");\nvar MySQLQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(MySQLQueryInterface, _QueryInterface);\n  var _super = _createSuper(MySQLQueryInterface);\n  function MySQLQueryInterface() {\n    _classCallCheck(this, MySQLQueryInterface);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MySQLQueryInterface, [{\n    key: \"removeColumn\",\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tableName, columnName, options) {\n        var _this = this;\n        var _yield$this$sequelize, _yield$this$sequelize2, results;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              _context.next = 3;\n              return this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n                tableName: tableName,\n                schema: this.sequelize.config.database\n              }, columnName), __spreadValues({\n                raw: true\n              }, options));\n            case 3:\n              _yield$this$sequelize = _context.sent;\n              _yield$this$sequelize2 = _slicedToArray(_yield$this$sequelize, 1);\n              results = _yield$this$sequelize2[0];\n              if (!(results.length && results[0].constraint_name !== \"PRIMARY\")) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 9;\n              return Promise.all(results.map(function (constraint) {\n                return _this.sequelize.query(_this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({\n                  raw: true\n                }, options));\n              }));\n            case 9:\n              _context.next = 11;\n              return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({\n                raw: true\n              }, options));\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function removeColumn(_x, _x2, _x3) {\n        return _removeColumn.apply(this, arguments);\n      }\n      return removeColumn;\n    }()\n  }, {\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tableName, insertValues, updateValues, where, options) {\n        var model, sql;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = __spreadValues({}, options);\n              options.type = QueryTypes.UPSERT;\n              options.updateOnDuplicate = Object.keys(updateValues);\n              options.upsertKeys = Object.values(options.model.primaryKeys).map(function (item) {\n                return item.field;\n              });\n              model = options.model;\n              sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n              _context2.next = 8;\n              return this.sequelize.query(sql, options);\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function upsert(_x4, _x5, _x6, _x7, _x8) {\n        return _upsert.apply(this, arguments);\n      }\n      return upsert;\n    }()\n  }, {\n    key: \"removeConstraint\",\n    value: function () {\n      var _removeConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tableName, constraintName, options) {\n        var sql, constraints, constraint, query;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n                tableName: tableName,\n                schema: this.sequelize.config.database\n              }, constraintName);\n              _context3.next = 3;\n              return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n                type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n              }));\n            case 3:\n              constraints = _context3.sent;\n              constraint = constraints[0];\n              if (!(!constraint || !constraint.constraintType)) {\n                _context3.next = 7;\n                break;\n              }\n              throw new sequelizeErrors.UnknownConstraintError({\n                message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n                constraint: constraintName,\n                table: tableName\n              });\n            case 7:\n              if (constraint.constraintType === \"FOREIGN KEY\") {\n                query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n              } else {\n                query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n              }\n              _context3.next = 10;\n              return this.sequelize.query(query, options);\n            case 10:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function removeConstraint(_x9, _x10, _x11) {\n        return _removeConstraint.apply(this, arguments);\n      }\n      return removeConstraint;\n    }()\n  }]);\n  return MySQLQueryInterface;\n}(QueryInterface);\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":{"version":3,"names":["sequelizeErrors","require","_require","QueryInterface","QueryTypes","MySQLQueryInterface","_QueryInterface","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_removeColumn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tableName","columnName","options","_this","_yield$this$sequelize","_yield$this$sequelize2","results","wrap","_callee$","_context","prev","next","sequelize","query","queryGenerator","getForeignKeyQuery","schema","config","database","__spreadValues","raw","sent","_slicedToArray","length","constraint_name","Promise","all","map","constraint","dropForeignKeyQuery","removeColumnQuery","abrupt","stop","removeColumn","_x","_x2","_x3","_upsert","_callee2","insertValues","updateValues","where","model","sql","_callee2$","_context2","type","UPSERT","updateOnDuplicate","Object","keys","upsertKeys","values","primaryKeys","item","field","insertQuery","rawAttributes","upsert","_x4","_x5","_x6","_x7","_x8","_removeConstraint","_callee3","constraintName","constraints","_callee3$","_context3","showConstraintsQuery","__spreadProps","SHOWCONSTRAINTS","constraintType","UnknownConstraintError","message","concat","table","removeIndexQuery","removeConstraint","_x9","_x10","_x11","exports"],"sources":["../../../src/dialects/mysql/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}