{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _ = require(\"lodash\");\nvar _require = require(\"./utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"hooks\");\nvar hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: [\"beforeUpdate\", \"beforeCreate\"]\n  },\n  afterSave: {\n    params: 2,\n    proxies: [\"afterUpdate\", \"afterCreate\"]\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: true\n  },\n  afterAssociate: {\n    params: 2,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: true\n  },\n  afterConnect: {\n    params: 2,\n    noModel: true\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  beforePoolAcquire: {\n    params: 1,\n    noModel: true\n  },\n  afterPoolAcquire: {\n    params: 2,\n    noModel: true\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\nexports.hooks = hookTypes;\nvar getProxiedHooks = function getProxiedHooks(hookType) {\n  return hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\n};\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\nvar Hooks = {\n  _setupHooks: function _setupHooks(hooks) {\n    var _this = this;\n    this.options.hooks = {};\n    _.map(hooks || {}, function (hooksArray, hookName) {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(function (hookFn) {\n        return _this.addHook(hookName, hookFn);\n      });\n    });\n  },\n  runHooks: function runHooks(hooks) {\n    var _arguments = arguments,\n      _this2 = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var hookType, _len, hookArgs, _key, _iterator, _step, hook, _iterator2, _step2, _hook;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (hooks) {\n              _context.next = 2;\n              break;\n            }\n            throw new Error(\"runHooks requires at least 1 argument\");\n          case 2:\n            if (typeof hooks === \"string\") {\n              hookType = hooks;\n              hooks = getHooks(_this2, hookType);\n              if (_this2.sequelize) {\n                hooks = hooks.concat(getHooks(_this2.sequelize, hookType));\n              }\n            }\n            if (!Array.isArray(hooks)) {\n              hooks = [hooks];\n            }\n            for (_len = _arguments.length, hookArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              hookArgs[_key - 1] = _arguments[_key];\n            }\n            if (!(hookTypes[hookType] && hookTypes[hookType].sync)) {\n              _context.next = 9;\n              break;\n            }\n            _iterator = _createForOfIteratorHelper(hooks);\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                hook = _step.value;\n                if (typeof hook === \"object\") {\n                  hook = hook.fn;\n                }\n                debug(\"running hook(sync) \".concat(hookType));\n                hook.apply(_this2, hookArgs);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            return _context.abrupt(\"return\");\n          case 9:\n            _iterator2 = _createForOfIteratorHelper(hooks);\n            _context.prev = 10;\n            _iterator2.s();\n          case 12:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 20;\n              break;\n            }\n            _hook = _step2.value;\n            if (typeof _hook === \"object\") {\n              _hook = _hook.fn;\n            }\n            debug(\"running hook \".concat(hookType));\n            _context.next = 18;\n            return _hook.apply(_this2, hookArgs);\n          case 18:\n            _context.next = 12;\n            break;\n          case 20:\n            _context.next = 25;\n            break;\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](10);\n            _iterator2.e(_context.t0);\n          case 25:\n            _context.prev = 25;\n            _iterator2.f();\n            return _context.finish(25);\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[10, 22, 25, 28]]);\n    }))();\n  },\n  addHook: function addHook(hookType, name, fn) {\n    var _this3 = this;\n    if (typeof name === \"function\") {\n      fn = name;\n      name = null;\n    }\n    debug(\"adding hook \".concat(hookType));\n    hookType = getProxiedHooks(hookType);\n    hookType.forEach(function (type) {\n      var hooks = getHooks(_this3, type);\n      hooks.push(name ? {\n        name: name,\n        fn: fn\n      } : fn);\n      _this3.options.hooks[type] = hooks;\n    });\n    return this;\n  },\n  removeHook: function removeHook(hookType, name) {\n    var isReference = typeof name === \"function\" ? true : false;\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n    debug(\"removing hook \".concat(hookType));\n    hookType = getProxiedHooks(hookType);\n    var _iterator3 = _createForOfIteratorHelper(hookType),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var type = _step3.value;\n        this.options.hooks[type] = this.options.hooks[type].filter(function (hook) {\n          if (isReference && typeof hook === \"function\") {\n            return hook !== name;\n          }\n          if (!isReference && typeof hook === \"object\") {\n            return hook.name !== name;\n          }\n          return true;\n        });\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return this;\n  },\n  hasHook: function hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\nfunction applyTo(target) {\n  var isModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  _.mixin(target, Hooks);\n  var _loop = function _loop() {\n    var hook = _Object$keys[_i];\n    if (isModel && hookTypes[hook].noModel) {\n      return \"continue\";\n    }\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  };\n  for (var _i = 0, _Object$keys = Object.keys(hookTypes); _i < _Object$keys.length; _i++) {\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n  }\n}\nexports.applyTo = applyTo;","map":{"version":3,"names":["_","require","_require","logger","debug","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","noModel","afterDefine","beforeInit","afterInit","beforeAssociate","afterAssociate","beforeConnect","afterConnect","beforeDisconnect","afterDisconnect","beforePoolAcquire","afterPoolAcquire","beforeSync","afterSync","beforeBulkSync","afterBulkSync","beforeQuery","afterQuery","exports","hooks","getProxiedHooks","hookType","concat","getHooks","hooked","options","Hooks","_setupHooks","_this","map","hooksArray","hookName","Array","isArray","forEach","hookFn","addHook","runHooks","_arguments","arguments","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_len","hookArgs","_key","_iterator","_step","hook","_iterator2","_step2","_hook","wrap","_callee$","_context","prev","next","Error","sequelize","length","_createForOfIteratorHelper","s","n","done","value","fn","apply","err","e","f","abrupt","t0","finish","stop","name","_this3","type","push","removeHook","isReference","hasHook","_iterator3","_step3","filter","hasHooks","applyTo","target","isModel","undefined","mixin","_loop","_Object$keys","_i","callback","Object","keys","_ret"],"sources":["../src/hooks.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforePoolAcquire: { params: 1, noModel: true },\n  afterPoolAcquire: { params: 2, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    for (let hook of hooks) {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n *  A hook that is run before a connection to the pool\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforePoolAcquire\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection to the pool\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterPoolAcquire\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}