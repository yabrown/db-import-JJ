{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar AuthorityFactory = /** @class */function () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityUriFinal, acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n            authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, acquireTokenAuthority];\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (StringUtils.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  };\n  return AuthorityFactory;\n}();\nexport { AuthorityFactory };","map":{"version":3,"names":["AuthorityFactory","createDiscoveredInstance","authorityUri","networkClient","cacheManager","authorityOptions","logger","performanceClient","correlationId","addQueueMeasurement","PerformanceEvents","AuthorityFactoryCreateDiscoveredInstance","authorityUriFinal","Authority","transformCIAMAuthority","acquireTokenAuthority","createInstance","setPreQueueTime","AuthorityResolveEndpointsAsync","resolveEndpointsAsync","_a","sent","ClientAuthError","createEndpointDiscoveryIncompleteError","e_1","authorityUrl","networkInterface","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError"],"sources":["../../src/authority/AuthorityFactory.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority } from \"./Authority\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\nimport { Logger } from \"../logger/Logger\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\nexport class AuthorityFactory {\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(\n        authorityUri: string,\n        networkClient: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<Authority> {\n        performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n        \n        const authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(\n            authorityUriFinal,\n            networkClient,\n            cacheManager,\n            authorityOptions,\n            logger,\n            performanceClient,\n            correlationId\n        );\n\n        try {\n            performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        } catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(\n        authorityUrl: string,\n        networkInterface: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Authority {\n        // Throw error if authority url is empty\n        if (StringUtils.isEmpty(authorityUrl)) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n    }\n}\n"],"mappings":";;;;;;;;;;AAAA;;;AAGG;AAaH,IAAAA,gBAAA;EAAA,SAAAA,iBAAA,G;EAEI;;;;;;;;;AASG;EACUA,gBAAA,CAAAC,wBAAwB,GAArC,UACIC,YAAoB,EACpBC,aAA6B,EAC7BC,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,iBAAsC,EACtCC,aAAsB;;;;;;YAEtBD,iBAAiB,KAAjB,QAAAA,iBAAiB,KAAjB,kBAAAA,iBAAiB,CAAEE,mBAAmB,CAACC,iBAAiB,CAACC,wCAAwC,EAAEH,aAAa,CAAE;YAE5GI,iBAAiB,GAAGC,SAAS,CAACC,sBAAsB,CAACZ,YAAY,CAAC;YAGlEa,qBAAqB,GAAcf,gBAAgB,CAACgB,cAAc,CACpEJ,iBAAiB,EACjBT,aAAa,EACbC,YAAY,EACZC,gBAAgB,EAChBC,MAAM,EACNC,iBAAiB,EACjBC,aAAa,CAChB;;;;YAGGD,iBAAiB,KAAjB,QAAAA,iBAAiB,KAAjB,kBAAAA,iBAAiB,CAAEU,eAAe,CAACP,iBAAiB,CAACQ,8BAA8B,EAAEV,aAAa,CAAE;YACpG,qBAAMO,qBAAqB,CAACI,qBAAqB,EAAE;;YAAnDC,EAAA,CAAAC,IAAA,EAAmD;YACnD,sBAAON,qBAAqB,CAAC;;;YAE7B,MAAMO,eAAe,CAACC,sCAAsC,CAACC,GAAC,CAAC;;;;;;EAEtE;EAED;;;;;;;;;AASG;EACIxB,gBAAA,CAAAgB,cAAc,GAArB,UACIS,YAAoB,EACpBC,gBAAgC,EAChCtB,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,iBAAsC,EACtCC,aAAsB;;IAGtB,IAAImB,WAAW,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;MACnC,MAAMI,wBAAwB,CAACC,mBAAmB,EAAE;IACvD;IAED,OAAO,IAAIjB,SAAS,CAACY,YAAY,EAAEC,gBAAgB,EAAEtB,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,aAAa,CAAC;GACjI;EACL,OAACR,gBAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}