{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator, __spread, __assign } from '../_virtual/_tslib.js';\nimport { AccountEntity, PerformanceEvents, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BaseInteractionClient = /** @class */function () {\n  function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!account) return [3 /*break*/, 5];\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n              this.logger.verbose(\"Setting active account to null\");\n              this.browserStorage.setActiveAccount(null);\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];\n          case 2:\n            _a.sent();\n            this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            return [3 /*break*/, 4];\n          case 4:\n            return [3 /*break*/, 9];\n          case 5:\n            _a.trys.push([5, 8,, 9]);\n            this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n            // Clear all accounts and tokens\n            return [4 /*yield*/, this.browserStorage.clear()];\n          case 6:\n            // Clear all accounts and tokens\n            _a.sent();\n            // Clear any stray keys from IndexedDB\n            return [4 /*yield*/, this.browserCrypto.clearKeystore()];\n          case 7:\n            // Clear any stray keys from IndexedDB\n            _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            _a.sent();\n            this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n  BaseInteractionClient.prototype.initializeBaseRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authority, scopes, validatedRequest, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            this.logger.verbose(\"Initializing BaseAuthRequest\");\n            authority = request.authority || this.config.auth.authority;\n            scopes = __spread(request && request.scopes || []);\n            validatedRequest = __assign(__assign({}, request), {\n              correlationId: this.correlationId,\n              authority: authority,\n              scopes: scopes\n            });\n            // Set authenticationScheme to BEARER if not explicitly set in the request\n            if (!validatedRequest.authenticationScheme) {\n              validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n              this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n            } else {\n              if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                  throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if (!request.sshKid) {\n                  throw ClientConfigurationError.createMissingSshKidError();\n                }\n              }\n              this.logger.verbose(\"Authentication Scheme set to \\\"\" + validatedRequest.authenticationScheme + \"\\\" as configured in Auth request\");\n            }\n            if (!(request.claims && !StringUtils.isEmpty(request.claims))) return [3 /*break*/, 2];\n            _a = validatedRequest;\n            return [4 /*yield*/, this.browserCrypto.hashString(request.claims)];\n          case 1:\n            _a.requestedClaimsHash = _b.sent();\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, validatedRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n  BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  };\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n  BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    var telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  BaseInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getDiscoveredAuthority called\");\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata\n            };\n            if (!requestAuthority) return [3 /*break*/, 2];\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            this.logger.verbose(\"Creating discovered authority with configured authority\");\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return BaseInteractionClient;\n}();\nexport { BaseInteractionClient };","map":{"version":3,"names":["BaseInteractionClient","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","BrowserConstants","MSAL_SKU","version","prototype","clearCacheOnLogout","account","AccountEntity","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","_a","sent","error","clear","clearKeystore","initializeBaseRequest","request","addQueueMeasurement","PerformanceEvents","InitializeBaseRequest","authority","auth","scopes","__spread","validatedRequest","__assign","authenticationScheme","AuthenticationScheme","BEARER","SSH","sshJwk","ClientConfigurationError","createMissingSshJwkError","sshKid","createMissingSshKidError","claims","StringUtils","isEmpty","hashString","requestedClaimsHash","_b","getRedirectUri","requestRedirectUri","redirectUri","BrowserUtils","getCurrentUri","UrlString","getAbsoluteUrl","initializeServerTelemetryManager","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","ServerTelemetryManager","getDiscoveredAuthority","requestAuthority","authorityOptions","protocolMode","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","AuthorityFactory","createDiscoveredInstance"],"sources":["../../src/interaction_client/BaseInteractionClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, INetworkModule, Logger, AuthenticationResult, AccountInfo, AccountEntity, BaseAuthRequest, AuthenticationScheme, UrlString, ServerTelemetryManager, ServerTelemetryRequest, ClientConfigurationError, StringUtils, Authority, AuthorityOptions, AuthorityFactory, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\n\r\nexport abstract class BaseInteractionClient {\r\n\r\n    protected config: BrowserConfiguration;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected browserCrypto: ICrypto;\r\n    protected networkClient: INetworkModule;\r\n    protected logger: Logger;\r\n    protected eventHandler: EventHandler;\r\n    protected navigationClient: INavigationClient;\r\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\r\n    protected correlationId: string;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        this.config = config;\r\n        this.browserStorage = storageImpl;\r\n        this.browserCrypto = browserCrypto;\r\n        this.networkClient = this.config.system.networkClient;\r\n        this.eventHandler = eventHandler;\r\n        this.navigationClient = navigationClient;\r\n        this.nativeMessageHandler = nativeMessageHandler;\r\n        this.correlationId = correlationId || this.browserCrypto.createNewGuid();\r\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    abstract acquireToken(request: RedirectRequest|PopupRequest|SsoSilentRequest): Promise<AuthenticationResult|void>;\r\n\r\n    abstract logout(request: EndSessionRequest): Promise<void>;\r\n\r\n    protected async clearCacheOnLogout(account?: AccountInfo| null): Promise<void> {\r\n        if (account) {\r\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\r\n                this.logger.verbose(\"Setting active account to null\");\r\n                this.browserStorage.setActiveAccount(null);\r\n            }\r\n            // Clear given account.\r\n            try {\r\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\r\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\r\n            } catch (error) {\r\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\r\n            }\r\n        } else {\r\n            try {\r\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\r\n                // Clear all accounts and tokens\r\n                await this.browserStorage.clear();\r\n                // Clear any stray keys from IndexedDB\r\n                await this.browserCrypto.clearKeystore();\r\n            } catch(e) {\r\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializer function for all request APIs\r\n     * @param request\r\n     */\r\n    protected async initializeBaseRequest(request: Partial<BaseAuthRequest>): Promise<BaseAuthRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\r\n        const authority = request.authority || this.config.auth.authority;\r\n\r\n        const scopes = [...((request && request.scopes) || [])];\r\n\r\n        const validatedRequest: BaseAuthRequest = {\r\n            ...request,\r\n            correlationId: this.correlationId,\r\n            authority,\r\n            scopes\r\n        };\r\n\r\n        // Set authenticationScheme to BEARER if not explicitly set in the request\r\n        if (!validatedRequest.authenticationScheme) {\r\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\r\n            this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\r\n        } else {\r\n            if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\r\n                if (!request.sshJwk) {\r\n                    throw ClientConfigurationError.createMissingSshJwkError();\r\n                }\r\n                if(!request.sshKid) {\r\n                    throw ClientConfigurationError.createMissingSshKidError();\r\n                }\r\n            }\r\n            this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\r\n        }\r\n\r\n        // Set requested claims hash if claims were requested\r\n        if (request.claims && !StringUtils.isEmpty(request.claims)) {\r\n            validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\r\n        }\r\n\r\n        return validatedRequest;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * @param requestRedirectUri\r\n     * @returns Redirect URL\r\n     *\r\n     */\r\n    getRedirectUri(requestRedirectUri?: string): string {\r\n        this.logger.verbose(\"getRedirectUri called\");\r\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\r\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param apiId\r\n     * @param correlationId\r\n     * @param forceRefresh\r\n     */\r\n    protected initializeServerTelemetryManager(apiId: number, forceRefresh?: boolean): ServerTelemetryManager {\r\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\r\n        const telemetryPayload: ServerTelemetryRequest = {\r\n            clientId: this.config.auth.clientId,\r\n            correlationId: this.correlationId,\r\n            apiId: apiId,\r\n            forceRefresh: forceRefresh || false,\r\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\r\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\r\n        };\r\n\r\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\r\n    }\r\n\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getDiscoveredAuthority(requestAuthority?: string): Promise<Authority> {\r\n        this.logger.verbose(\"getDiscoveredAuthority called\");\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata\r\n        };\r\n\r\n        if (requestAuthority) {\r\n            this.logger.verbose(\"Creating discovered authority with request authority\");\r\n            return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\r\n        }\r\n\r\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\r\n        return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}