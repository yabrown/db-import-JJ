{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 client credential grant\r\n */\nvar ClientCredentialClient = /** @class */function (_super) {\n  __extends(ClientCredentialClient, _super);\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   * TODO: Move this call to cacheManager instead\r\n   */\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3 /*break*/, 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3 /*break*/, 4];\n          case 2:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n          case 5:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    // Use clientAssertion from request, fallback to client assertion in base configuration\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return ClientCredentialClient;\n}(BaseClient);\nexport { ClientCredentialClient };","map":{"version":3,"names":["ClientCredentialClient","_super","__extends","configuration","appTokenProvider","_this","call","prototype","acquireToken","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","sent","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","_b","CACHED_ACCESS_TOKEN_EXPIRED","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","Constants","EMPTY_STRING","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","length","ClientAuthError","createMultipleMatchingTokensInCacheError","logger","info","appTokenPropviderParameters","correlationId","tenantId","claims","reqTimestamp","nowSeconds","appTokenProviderResult","serverTokenResponse","access_token","expires_in","expiresInSeconds","refresh_in","refreshInSeconds","token_type","AuthenticationScheme","BEARER","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","tokenEndpoint","response","body","responseHandler","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["../../src/client/ClientCredentialClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType , CredentialType, CacheOutcome, Constants, AuthenticationScheme } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { IAppTokenProvider } from \"../config/AppTokenProvider\";\n\n/**\n * OAuth2.0 client credential grant\n */\nexport class ClientCredentialClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n    private readonly appTokenProvider?: IAppTokenProvider;\n\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider) {\n        super(configuration);\n        this.appTokenProvider = appTokenProvider;\n    }\n\n    /**\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\n     * @param request\n     */\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * looks up cache if the tokens are cached already\n     */\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n        \n        const cachedAccessToken = this.readAccessTokenFromCache();\n\n        if (!cachedAccessToken) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            return null;\n        }\n\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            return null;\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: null,\n                idToken: null,\n                accessToken: cachedAccessToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request\n        );\n    }\n\n    /**\n     * Reads access token from the cache\n     * TODO: Move this call to cacheManager instead\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: Constants.EMPTY_STRING,\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase()\n        };\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n        if (accessTokens.length < 1) {\n            return null;\n        } else if (accessTokens.length > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Makes a network call to request the token from the service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n        \n        let serverTokenResponse: ServerAuthorizationTokenResponse;\n        let reqTimestamp: number;\n\n        if (this.appTokenProvider) {\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n\n            const appTokenPropviderParameters = {\n                correlationId: request.correlationId,\n                tenantId: this.config.authOptions.authority.tenant,\n                scopes: request.scopes,\n                claims: request.claims,\n            };\n\n            reqTimestamp = TimeUtils.nowSeconds();\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\n\n            serverTokenResponse = {\n                access_token: appTokenProviderResult.accessToken, \n                expires_in: appTokenProviderResult.expiresInSeconds,\n                refresh_in: appTokenProviderResult.refreshInSeconds,\n                token_type : AuthenticationScheme.BEARER\n            };\n        } else {\n            const requestBody = this.createTokenRequestBody(request);\n            const headers: Record<string, string> = this.createTokenRequestHeaders();\n            const thumbprint: RequestThumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes,\n                claims: request.claims,\n                authenticationScheme: request.authenticationScheme,\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                sshKid: request.sshKid\n            };\n    \n            reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n            serverTokenResponse = response.body;\n        }\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(serverTokenResponse);\n       \n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            serverTokenResponse,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate the request to the server in the acceptable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes, false);\n\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        // Use clientAssertion from request, fallback to client assertion in base configuration\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n\n        if (clientAssertion) {\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}