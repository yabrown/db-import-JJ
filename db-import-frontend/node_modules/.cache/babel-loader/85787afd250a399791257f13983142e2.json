{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\nvar logger = credentialLogger(\"ClientSecretCredential\");\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport var ClientSecretCredential = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  function ClientSecretCredential(tenantId, clientId, clientSecret, options) {\n    _classCallCheck(this, ClientSecretCredential);\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  _createClass(ClientSecretCredential, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(scopes) {\n        var _this = this;\n        var options,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              return _context2.abrupt(\"return\", tracingClient.withSpan(\"\".concat(this.constructor.name, \".getToken\"), options, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(newOptions) {\n                  var query, urlSuffix, request, tokenResponse;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        query = new URLSearchParams({\n                          response_type: \"token\",\n                          grant_type: \"client_credentials\",\n                          client_id: _this.clientId,\n                          client_secret: _this.clientSecret,\n                          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n                        });\n                        _context.prev = 1;\n                        urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n                        request = createPipelineRequest({\n                          url: \"\".concat(_this.identityClient.authorityHost, \"/\").concat(_this.tenantId, \"/\").concat(urlSuffix),\n                          method: \"POST\",\n                          body: query.toString(),\n                          headers: createHttpHeaders({\n                            Accept: \"application/json\",\n                            \"Content-Type\": \"application/x-www-form-urlencoded\"\n                          }),\n                          abortSignal: options && options.abortSignal,\n                          tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions\n                        });\n                        _context.next = 6;\n                        return _this.identityClient.sendTokenRequest(request);\n                      case 6:\n                        tokenResponse = _context.sent;\n                        logger.getToken.info(formatSuccess(scopes));\n                        return _context.abrupt(\"return\", tokenResponse && tokenResponse.accessToken || null);\n                      case 11:\n                        _context.prev = 11;\n                        _context.t0 = _context[\"catch\"](1);\n                        logger.getToken.info(formatError(scopes, _context.t0));\n                        throw _context.t0;\n                      case 15:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee, null, [[1, 11]]);\n                }));\n                return function (_x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getToken(_x) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }]);\n  return ClientSecretCredential;\n}();","map":{"version":3,"names":["createHttpHeaders","createPipelineRequest","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","IdentityClient","tracingClient","logger","ClientSecretCredential","tenantId","clientId","clientSecret","options","_classCallCheck","identityClient","_createClass","key","value","_getToken","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","scopes","_this","_args2","arguments","wrap","_callee2$","_context2","prev","next","length","undefined","abrupt","withSpan","concat","constructor","name","_ref","_callee","newOptions","query","urlSuffix","request","tokenResponse","_callee$","_context","URLSearchParams","response_type","grant_type","client_id","client_secret","scope","join","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","sendTokenRequest","sent","getToken","info","accessToken","t0","stop","_x2","apply","_x"],"sources":["../../../src/credentials/clientSecretCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"ClientSecretCredential\");\n\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private clientId: string;\n  private clientSecret: string;\n\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantId: string,\n    clientId: string,\n    clientSecret: string,\n    options?: TokenCredentialOptions\n  ) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const query = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"client_credentials\",\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n          const request = createPipelineRequest({\n            url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            abortSignal: options && options.abortSignal,\n            tracingOptions: newOptions?.tracingOptions,\n          });\n\n          const tokenResponse = await this.identityClient.sendTokenRequest(request);\n          logger.getToken.info(formatSuccess(scopes));\n          return (tokenResponse && tokenResponse.accessToken) || null;\n        } catch (err: any) {\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}