{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport var logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  var logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n  var sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  return {\n    name: logPolicyName,\n    sendRequest: function sendRequest(request, next) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (logger.enabled) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", next(request));\n            case 2:\n              logger(\"Request: \".concat(sanitizer.sanitize(request)));\n              _context.next = 5;\n              return next(request);\n            case 5:\n              response = _context.sent;\n              logger(\"Response status code: \".concat(response.status));\n              logger(\"Headers: \".concat(sanitizer.sanitize(response.headers)));\n              return _context.abrupt(\"return\", response);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  };\n}","map":{"version":3,"names":["logger","coreLogger","Sanitizer","logPolicyName","logPolicy","options","arguments","length","undefined","_a","info","sanitizer","additionalAllowedHeaderNames","additionalAllowedQueryParameters","name","sendRequest","request","next","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","enabled","abrupt","concat","sanitize","sent","status","headers","stop"],"sources":["../../../src/policies/logPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Debugger } from \"@azure/logger\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n\n/**\n * Options to configure the logPolicy.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n\n  /**\n   * The log function to use for writing pipeline logs.\n   * Defaults to core-http's built-in logger.\n   * Compatible with the `debug` library.\n   */\n  logger?: Debugger;\n}\n\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options: LogPolicyOptions = {}): PipelinePolicy {\n  const logger = options.logger ?? coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!logger.enabled) {\n        return next(request);\n      }\n\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n\n      const response = await next(request);\n\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n\n      return response;\n    },\n  };\n}\n"],"mappings":";;AAAA;AACA;AAKA,SAASA,MAAM,IAAIC,UAAU,QAAQ,QAAQ;AAC7C,SAASC,SAAS,QAAQ,mBAAmB;AAE7C;;;AAGA,OAAO,IAAMC,aAAa,GAAG,WAAW;AA4BxC;;;;AAIA,OAAM,SAAUC,SAASA,CAAA,EAA+B;EAAA,IAA9BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;;EACtD,IAAMN,MAAM,GAAG,CAAAS,EAAA,GAAAJ,OAAO,CAACL,MAAM,cAAAS,EAAA,cAAAA,EAAA,GAAIR,UAAU,CAACS,IAAI;EAChD,IAAMC,SAAS,GAAG,IAAIT,SAAS,CAAC;IAC9BU,4BAA4B,EAAEP,OAAO,CAACO,4BAA4B;IAClEC,gCAAgC,EAAER,OAAO,CAACQ;GAC3C,CAAC;EACF,OAAO;IACLC,IAAI,EAAEX,aAAa;IACbY,WAAW,WAAAA,YAACC,OAAwB,EAAEC,IAAiB;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAR,IAAA;YAAA;cAAA,IACtDjB,MAAM,CAAC2B,OAAO;gBAAAF,QAAA,CAAAR,IAAA;gBAAA;cAAA;cAAA,OAAAQ,QAAA,CAAAG,MAAA,WACVX,IAAI,CAACD,OAAO,CAAC;YAAA;cAGtBhB,MAAM,aAAA6B,MAAA,CAAalB,SAAS,CAACmB,QAAQ,CAACd,OAAO,CAAC,CAAE,CAAC;cAACS,QAAA,CAAAR,IAAA;cAAA,OAE3BA,IAAI,CAACD,OAAO,CAAC;YAAA;cAA9BM,QAAQ,GAAAG,QAAA,CAAAM,IAAA;cAEd/B,MAAM,0BAAA6B,MAAA,CAA0BP,QAAQ,CAACU,MAAM,CAAE,CAAC;cAClDhC,MAAM,aAAA6B,MAAA,CAAalB,SAAS,CAACmB,QAAQ,CAACR,QAAQ,CAACW,OAAO,CAAC,CAAE,CAAC;cAAC,OAAAR,QAAA,CAAAG,MAAA,WAEpDN,QAAQ;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAS,IAAA;UAAA;QAAA,GAAAb,OAAA;MAAA;IACjB;GACD;AACH"},"metadata":{},"sourceType":"module"}