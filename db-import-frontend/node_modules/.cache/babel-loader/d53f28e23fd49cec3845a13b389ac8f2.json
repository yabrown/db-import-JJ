{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(sequelize, options) {\n    _classCallCheck(this, Transaction);\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n    var generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n    this.options = __spreadValues({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options);\n    this.parent = this.options.transaction;\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = \"\".concat(this.id, \"-sp-\").concat(this.parent.savepoints.length);\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n    delete this.options.transaction;\n  }\n  _createClass(Transaction, [{\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iterator2, _step2, hook;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.finished) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error(\"Transaction cannot be committed because it has been finished with state: \".concat(this.finished));\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n            case 5:\n              this.cleanup();\n              _context.next = 14;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n              console.warn(\"Committing transaction \".concat(this.id, \" failed with error \").concat(JSON.stringify(_context.t0.message), \". We are killing its connection as it is now in an undetermined state.\"));\n              _context.next = 13;\n              return this.forceCleanup();\n            case 13:\n              throw _context.t0;\n            case 14:\n              _context.prev = 14;\n              this.finished = \"commit\";\n              _iterator2 = _createForOfIteratorHelper(this._afterCommitHooks);\n              _context.prev = 17;\n              _iterator2.s();\n            case 19:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 25;\n                break;\n              }\n              hook = _step2.value;\n              _context.next = 23;\n              return hook.apply(this, [this]);\n            case 23:\n              _context.next = 19;\n              break;\n            case 25:\n              _context.next = 30;\n              break;\n            case 27:\n              _context.prev = 27;\n              _context.t1 = _context[\"catch\"](17);\n              _iterator2.e(_context.t1);\n            case 30:\n              _context.prev = 30;\n              _iterator2.f();\n              return _context.finish(30);\n            case 33:\n              return _context.finish(14);\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 8, 14, 34], [17, 27, 30, 33]]);\n      }));\n      function commit() {\n        return _commit.apply(this, arguments);\n      }\n      return commit;\n    }()\n  }, {\n    key: \"rollback\",\n    value: function () {\n      var _rollback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.finished) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error(\"Transaction cannot be rolled back because it has been finished with state: \".concat(this.finished));\n            case 2:\n              if (this.connection) {\n                _context2.next = 4;\n                break;\n              }\n              throw new Error(\"Transaction cannot be rolled back because it never started\");\n            case 4:\n              _context2.prev = 4;\n              _context2.next = 7;\n              return this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);\n            case 7:\n              this.cleanup();\n              _context2.next = 16;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.warn(\"Rolling back transaction \".concat(this.id, \" failed with error \").concat(JSON.stringify(_context2.t0.message), \". We are killing its connection as it is now in an undetermined state.\"));\n              _context2.next = 15;\n              return this.forceCleanup();\n            case 15:\n              throw _context2.t0;\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 10]]);\n      }));\n      function rollback() {\n        return _rollback.apply(this, arguments);\n      }\n      return rollback;\n    }()\n  }, {\n    key: \"prepareEnvironment\",\n    value: function () {\n      var _prepareEnvironment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var useCLS,\n          connectionPromise,\n          acquireOptions,\n          result,\n          connection,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              useCLS = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : true;\n              if (this.parent) {\n                connectionPromise = Promise.resolve(this.parent.connection);\n              } else {\n                acquireOptions = {\n                  uuid: this.id\n                };\n                if (this.options.readOnly) {\n                  acquireOptions.type = \"SELECT\";\n                }\n                connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n              }\n              _context3.next = 4;\n              return connectionPromise;\n            case 4:\n              connection = _context3.sent;\n              this.connection = connection;\n              this.connection.uuid = this.id;\n              _context3.prev = 7;\n              _context3.next = 10;\n              return this.begin();\n            case 10:\n              _context3.next = 12;\n              return this.setDeferrable();\n            case 12:\n              result = _context3.sent;\n              _context3.next = 24;\n              break;\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](7);\n              _context3.prev = 17;\n              _context3.next = 20;\n              return this.rollback();\n            case 20:\n              result = _context3.sent;\n            case 21:\n              _context3.prev = 21;\n              throw _context3.t0;\n            case 24:\n              if (useCLS && this.sequelize.constructor._cls) {\n                this.sequelize.constructor._cls.set(\"transaction\", this);\n              }\n              return _context3.abrupt(\"return\", result);\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[7, 15], [17,, 21, 24]]);\n      }));\n      function prepareEnvironment() {\n        return _prepareEnvironment.apply(this, arguments);\n      }\n      return prepareEnvironment;\n    }()\n  }, {\n    key: \"setDeferrable\",\n    value: function () {\n      var _setDeferrable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.options.deferrable) {\n                _context4.next = 4;\n                break;\n              }\n              _context4.next = 3;\n              return this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function setDeferrable() {\n        return _setDeferrable.apply(this, arguments);\n      }\n      return setDeferrable;\n    }()\n  }, {\n    key: \"begin\",\n    value: function () {\n      var _begin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var queryInterface;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              queryInterface = this.sequelize.getQueryInterface();\n              if (!this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n                _context5.next = 5;\n                break;\n              }\n              _context5.next = 4;\n              return queryInterface.startTransaction(this, this.options);\n            case 4:\n              return _context5.abrupt(\"return\", queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options));\n            case 5:\n              _context5.next = 7;\n              return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n            case 7:\n              return _context5.abrupt(\"return\", queryInterface.startTransaction(this, this.options));\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function begin() {\n        return _begin.apply(this, arguments);\n      }\n      return begin;\n    }()\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (this.parent || this.connection.uuid === void 0) {\n        return;\n      }\n      this._clearCls();\n      this.sequelize.connectionManager.releaseConnection(this.connection);\n      this.connection.uuid = void 0;\n    }\n  }, {\n    key: \"forceCleanup\",\n    value: function () {\n      var _forceCleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(this.parent || this.connection.uuid === void 0)) {\n                _context6.next = 2;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 2:\n              this._clearCls();\n              _context6.next = 5;\n              return this.sequelize.connectionManager.destroyConnection(this.connection);\n            case 5:\n              this.connection.uuid = void 0;\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function forceCleanup() {\n        return _forceCleanup.apply(this, arguments);\n      }\n      return forceCleanup;\n    }()\n  }, {\n    key: \"_clearCls\",\n    value: function _clearCls() {\n      var cls = this.sequelize.constructor._cls;\n      if (cls) {\n        if (cls.get(\"transaction\") === this) {\n          cls.set(\"transaction\", null);\n        }\n      }\n    }\n  }, {\n    key: \"afterCommit\",\n    value: function afterCommit(fn) {\n      if (!fn || typeof fn !== \"function\") {\n        throw new Error('\"fn\" must be a function');\n      }\n      this._afterCommitHooks.push(fn);\n    }\n  }, {\n    key: \"LOCK\",\n    get: function get() {\n      return Transaction.LOCK;\n    }\n  }], [{\n    key: \"TYPES\",\n    get: function get() {\n      return {\n        DEFERRED: \"DEFERRED\",\n        IMMEDIATE: \"IMMEDIATE\",\n        EXCLUSIVE: \"EXCLUSIVE\"\n      };\n    }\n  }, {\n    key: \"ISOLATION_LEVELS\",\n    get: function get() {\n      return {\n        READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n        READ_COMMITTED: \"READ COMMITTED\",\n        REPEATABLE_READ: \"REPEATABLE READ\",\n        SERIALIZABLE: \"SERIALIZABLE\"\n      };\n    }\n  }, {\n    key: \"LOCK\",\n    get: function get() {\n      return {\n        UPDATE: \"UPDATE\",\n        SHARE: \"SHARE\",\n        KEY_SHARE: \"KEY SHARE\",\n        NO_KEY_UPDATE: \"NO KEY UPDATE\"\n      };\n    }\n  }]);\n  return Transaction;\n}();\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":{"version":3,"names":["Transaction","sequelize","options","_classCallCheck","savepoints","_afterCommitHooks","generateTransactionId","dialect","queryGenerator","__spreadValues","type","transactionType","isolationLevel","readOnly","parent","transaction","id","push","name","concat","length","_createClass","key","value","_commit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iterator2","_step2","hook","wrap","_callee$","_context","prev","next","finished","Error","getQueryInterface","commitTransaction","cleanup","t0","console","warn","JSON","stringify","message","forceCleanup","_createForOfIteratorHelper","s","n","done","apply","t1","e","f","finish","stop","commit","arguments","_rollback","_callee2","_callee2$","_context2","connection","rollbackTransaction","rollback","_prepareEnvironment","_callee3","useCLS","connectionPromise","acquireOptions","result","_args3","_callee3$","_context3","undefined","Promise","resolve","uuid","connectionManager","getConnection","sent","begin","setDeferrable","constructor","_cls","set","abrupt","prepareEnvironment","_setDeferrable","_callee4","_callee4$","_context4","deferrable","deferConstraints","_begin","_callee5","queryInterface","_callee5$","_context5","supports","settingIsolationLevelDuringTransaction","startTransaction","setIsolationLevel","_clearCls","releaseConnection","_forceCleanup","_callee6","_callee6$","_context6","destroyConnection","cls","get","afterCommit","fn","LOCK","DEFERRED","IMMEDIATE","EXCLUSIVE","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","UPDATE","SHARE","KEY_SHARE","NO_KEY_UPDATE","module","exports","default"],"sources":["../src/transaction.js"],"sourcesContent":["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Committing transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    } finally {\n      this.finished = 'commit';\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Rolling back transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS = true) {\n    let connectionPromise;\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    // TODO (@ephys) [>=7.0.0]: move this inside of sequelize.transaction, remove parameter.\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async forceCleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    await this.sequelize.connectionManager.destroyConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUAA,WAAA;EAUE,SAAAA,YAAYC,SAAA,EAAWC,OAAA,EAAS;IAAAC,eAAA,OAAAH,WAAA;IAC9B,KAAKC,SAAA,GAAYA,SAAA;IACjB,KAAKG,UAAA,GAAa;IAClB,KAAKC,iBAAA,GAAoB;IAGzB,IAAMC,qBAAA,GAAwB,KAAKL,SAAA,CAAUM,OAAA,CAAQC,cAAA,CAAeF,qBAAA;IAEpE,KAAKJ,OAAA,GAAUO,cAAA;MACbC,IAAA,EAAMT,SAAA,CAAUC,OAAA,CAAQS,eAAA;MACxBC,cAAA,EAAgBX,SAAA,CAAUC,OAAA,CAAQU,cAAA;MAClCC,QAAA,EAAU;IAAA,GACPX,OAAA;IAGL,KAAKY,MAAA,GAAS,KAAKZ,OAAA,CAAQa,WAAA;IAE3B,IAAI,KAAKD,MAAA,EAAQ;MACf,KAAKE,EAAA,GAAK,KAAKF,MAAA,CAAOE,EAAA;MACtB,KAAKF,MAAA,CAAOV,UAAA,CAAWa,IAAA,CAAK;MAC5B,KAAKC,IAAA,MAAAC,MAAA,CAAU,KAAKH,EAAA,UAAAG,MAAA,CAAS,KAAKL,MAAA,CAAOV,UAAA,CAAWgB,MAAA;IAAA,OAC/C;MACL,KAAKJ,EAAA,GAAK,KAAKE,IAAA,GAAOZ,qBAAA;IAAA;IAGxB,OAAO,KAAKJ,OAAA,CAAQa,WAAA;EAAA;EAAAM,YAAA,CAAArB,WAAA;IAAAsB,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,UAAA,EAAAC,MAAA,EAAAC,IAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,KAShB,KAAKC,QAAA;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MACD,IAAIE,KAAA,6EAAAnB,MAAA,CAAkF,KAAKkB,QAAA;YAAA;cAAAH,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAI3F,KAAKnC,SAAA,CAAUsC,iBAAA,GAAoBC,iBAAA,CAAkB,MAAM,KAAKtC,OAAA;YAAA;cACtE,KAAKuC,OAAA;cAAAP,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAQ,EAAA,GAAAR,QAAA;cAELS,OAAA,CAAQC,IAAA,2BAAAzB,MAAA,CAA+B,KAAKH,EAAA,yBAAAG,MAAA,CAAwB0B,IAAA,CAAKC,SAAA,CAAUZ,QAAA,CAAAQ,EAAA,CAAEK,OAAA;cAAAb,QAAA,CAAAE,IAAA;cAAA,OAC/E,KAAKY,YAAA;YAAA;cAAA,MAAAd,QAAA,CAAAQ,EAAA;YAAA;cAAAR,QAAA,CAAAC,IAAA;cAIX,KAAKE,QAAA,GAAW;cAAAR,UAAA,GAAAoB,0BAAA,CACG,KAAK5C,iBAAA;cAAA6B,QAAA,CAAAC,IAAA;cAAAN,UAAA,CAAAqB,CAAA;YAAA;cAAA,KAAApB,MAAA,GAAAD,UAAA,CAAAsB,CAAA,IAAAC,IAAA;gBAAAlB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAbL,IAAA,GAAAD,MAAA,CAAAP,KAAA;cAAAW,QAAA,CAAAE,IAAA;cAAA,OACHL,IAAA,CAAKsB,KAAA,CAAM,MAAM,CAAC;YAAA;cAAAnB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAoB,EAAA,GAAApB,QAAA;cAAAL,UAAA,CAAA0B,CAAA,CAAArB,QAAA,CAAAoB,EAAA;YAAA;cAAApB,QAAA,CAAAC,IAAA;cAAAN,UAAA,CAAA2B,CAAA;cAAA,OAAAtB,QAAA,CAAAuB,MAAA;YAAA;cAAA,OAAAvB,QAAA,CAAAuB,MAAA;YAAA;YAAA;cAAA,OAAAvB,QAAA,CAAAwB,IAAA;UAAA;QAAA,GAAA9B,OAAA;MAAA;MAAA,SAAA+B,OAAA;QAAA,OAAAnC,OAAA,CAAA6B,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAAD,MAAA;IAAA;EAAA;IAAArC,GAAA;IAAAC,KAAA;MAAA,IAAAsC,SAAA,GAAApC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAmC,SAAA;QAAA,OAAApC,mBAAA,GAAAM,IAAA,UAAA+B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;YAAA;cAAA,KAWxB,KAAKC,QAAA;gBAAA2B,SAAA,CAAA5B,IAAA;gBAAA;cAAA;cAAA,MACD,IAAIE,KAAA,+EAAAnB,MAAA,CAAoF,KAAKkB,QAAA;YAAA;cAAA,IAGhG,KAAK4B,UAAA;gBAAAD,SAAA,CAAA5B,IAAA;gBAAA;cAAA;cAAA,MACF,IAAIE,KAAA,CAAM;YAAA;cAAA0B,SAAA,CAAA7B,IAAA;cAAA6B,SAAA,CAAA5B,IAAA;cAAA,OAIV,KACHnC,SAAA,CACAsC,iBAAA,GACA2B,mBAAA,CAAoB,MAAM,KAAKhE,OAAA;YAAA;cAElC,KAAKuC,OAAA;cAAAuB,SAAA,CAAA5B,IAAA;cAAA;YAAA;cAAA4B,SAAA,CAAA7B,IAAA;cAAA6B,SAAA,CAAAtB,EAAA,GAAAsB,SAAA;cAELrB,OAAA,CAAQC,IAAA,6BAAAzB,MAAA,CAAiC,KAAKH,EAAA,yBAAAG,MAAA,CAAwB0B,IAAA,CAAKC,SAAA,CAAUkB,SAAA,CAAAtB,EAAA,CAAEK,OAAA;cAAAiB,SAAA,CAAA5B,IAAA;cAAA,OACjF,KAAKY,YAAA;YAAA;cAAA,MAAAgB,SAAA,CAAAtB,EAAA;YAAA;YAAA;cAAA,OAAAsB,SAAA,CAAAN,IAAA;UAAA;QAAA,GAAAI,QAAA;MAAA,CAEL;MAAA,SAAAK,SAAA;QAAA,OAAAN,SAAA,CAAAR,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAAO,QAAA;IAAA;EAAA;IAAA7C,GAAA;IAAAC,KAAA;MAAA,IAAA6C,mBAAA,GAAA3C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA0C,SAAA;QAAA,IAAAC,MAAA;UAAAC,iBAAA;UAAAC,cAAA;UAAAC,MAAA;UAAAR,UAAA;UAAAS,MAAA,GAAAd,SAAA;QAAA,OAAAlC,mBAAA,GAAAM,IAAA,UAAA2C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzC,IAAA,GAAAyC,SAAA,CAAAxC,IAAA;YAAA;cAWekC,MAAA,GAAAI,MAAA,CAAAtD,MAAA,QAAAsD,MAAA,QAAAG,SAAA,GAAAH,MAAA,MAAS;cAGhC,IAAI,KAAK5D,MAAA,EAAQ;gBACfyD,iBAAA,GAAoBO,OAAA,CAAQC,OAAA,CAAQ,KAAKjE,MAAA,CAAOmD,UAAA;cAAA,OAC3C;gBACCO,cAAA,GAAiB;kBAAEQ,IAAA,EAAM,KAAKhE;gBAAA;gBACpC,IAAI,KAAKd,OAAA,CAAQW,QAAA,EAAU;kBACzB2D,cAAA,CAAe9D,IAAA,GAAO;gBAAA;gBAExB6D,iBAAA,GAAoB,KAAKtE,SAAA,CAAUgF,iBAAA,CAAkBC,aAAA,CAAcV,cAAA;cAAA;cAAAI,SAAA,CAAAxC,IAAA;cAAA,OAI5CmC,iBAAA;YAAA;cAAnBN,UAAA,GAAAW,SAAA,CAAAO,IAAA;cACN,KAAKlB,UAAA,GAAaA,UAAA;cAClB,KAAKA,UAAA,CAAWe,IAAA,GAAO,KAAKhE,EAAA;cAAA4D,SAAA,CAAAzC,IAAA;cAAAyC,SAAA,CAAAxC,IAAA;cAAA,OAGpB,KAAKgD,KAAA;YAAA;cAAAR,SAAA,CAAAxC,IAAA;cAAA,OACI,KAAKiD,aAAA;YAAA;cAApBZ,MAAA,GAAAG,SAAA,CAAAO,IAAA;cAAAP,SAAA,CAAAxC,IAAA;cAAA;YAAA;cAAAwC,SAAA,CAAAzC,IAAA;cAAAyC,SAAA,CAAAlC,EAAA,GAAAkC,SAAA;cAAAA,SAAA,CAAAzC,IAAA;cAAAyC,SAAA,CAAAxC,IAAA;cAAA,OAGiB,KAAK+B,QAAA;YAAA;cAApBM,MAAA,GAAAG,SAAA,CAAAO,IAAA;YAAA;cAAAP,SAAA,CAAAzC,IAAA;cAAA,MAAAyC,SAAA,CAAAlC,EAAA;YAAA;cAOJ,IAAI4B,MAAA,IAAU,KAAKrE,SAAA,CAAUqF,WAAA,CAAYC,IAAA,EAAM;gBAC7C,KAAKtF,SAAA,CAAUqF,WAAA,CAAYC,IAAA,CAAKC,GAAA,CAAI,eAAe;cAAA;cAAA,OAAAZ,SAAA,CAAAa,MAAA,WAG9ChB,MAAA;YAAA;YAAA;cAAA,OAAAG,SAAA,CAAAlB,IAAA;UAAA;QAAA,GAAAW,QAAA;MAAA;MAAA,SAAAqB,mBAAA;QAAA,OAAAtB,mBAAA,CAAAf,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAA8B,kBAAA;IAAA;EAAA;IAAApE,GAAA;IAAAC,KAAA;MAAA,IAAAoE,cAAA,GAAAlE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAiE,SAAA;QAAA,OAAAlE,mBAAA,GAAAM,IAAA,UAAA6D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA3D,IAAA,GAAA2D,SAAA,CAAA1D,IAAA;YAAA;cAAA,KAIH,KAAKlC,OAAA,CAAQ6F,UAAA;gBAAAD,SAAA,CAAA1D,IAAA;gBAAA;cAAA;cAAA0D,SAAA,CAAA1D,IAAA;cAAA,OACF,KACVnC,SAAA,CACAsC,iBAAA,GACAyD,gBAAA,CAAiB,MAAM,KAAK9F,OAAA;YAAA;cAAA,OAAA4F,SAAA,CAAAL,MAAA,WAAAK,SAAA,CAAAX,IAAA;YAAA;YAAA;cAAA,OAAAW,SAAA,CAAApC,IAAA;UAAA;QAAA,GAAAkC,QAAA;MAAA;MAAA,SAAAP,cAAA;QAAA,OAAAM,cAAA,CAAAtC,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAAyB,aAAA;IAAA;EAAA;IAAA/D,GAAA;IAAAC,KAAA;MAAA,IAAA0E,MAAA,GAAAxE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAuE,SAAA;QAAA,IAAAC,cAAA;QAAA,OAAAzE,mBAAA,GAAAM,IAAA,UAAAoE,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAlE,IAAA,GAAAkE,SAAA,CAAAjE,IAAA;YAAA;cAK3B+D,cAAA,GAAiB,KAAKlG,SAAA,CAAUsC,iBAAA;cAAA,KAEjC,KAAKtC,SAAA,CAAUM,OAAA,CAAQ+F,QAAA,CAASC,sCAAA;gBAAAF,SAAA,CAAAjE,IAAA;gBAAA;cAAA;cAAAiE,SAAA,CAAAjE,IAAA;cAAA,OAC7B+D,cAAA,CAAeK,gBAAA,CAAiB,MAAM,KAAKtG,OAAA;YAAA;cAAA,OAAAmG,SAAA,CAAAZ,MAAA,WAC1CU,cAAA,CAAeM,iBAAA,CAAkB,MAAM,KAAKvG,OAAA,CAAQU,cAAA,EAAgB,KAAKV,OAAA;YAAA;cAAAmG,SAAA,CAAAjE,IAAA;cAAA,OAG5E+D,cAAA,CAAeM,iBAAA,CAAkB,MAAM,KAAKvG,OAAA,CAAQU,cAAA,EAAgB,KAAKV,OAAA;YAAA;cAAA,OAAAmG,SAAA,CAAAZ,MAAA,WAExEU,cAAA,CAAeK,gBAAA,CAAiB,MAAM,KAAKtG,OAAA;YAAA;YAAA;cAAA,OAAAmG,SAAA,CAAA3C,IAAA;UAAA;QAAA,GAAAwC,QAAA;MAAA;MAAA,SAAAd,MAAA;QAAA,OAAAa,MAAA,CAAA5C,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAAwB,KAAA;IAAA;EAAA;IAAA9D,GAAA;IAAAC,KAAA,EAGpD,SAAAkB,QAAA,EAAU;MAGR,IAAI,KAAK3B,MAAA,IAAU,KAAKmD,UAAA,CAAWe,IAAA,KAAS,QAAW;QACrD;MAAA;MAGF,KAAK0B,SAAA;MACL,KAAKzG,SAAA,CAAUgF,iBAAA,CAAkB0B,iBAAA,CAAkB,KAAK1C,UAAA;MACxD,KAAKA,UAAA,CAAWe,IAAA,GAAO;IAAA;EAAA;IAAA1D,GAAA;IAAAC,KAAA;MAAA,IAAAqF,aAAA,GAAAnF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAkF,SAAA;QAAA,OAAAnF,mBAAA,GAAAM,IAAA,UAAA8E,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5E,IAAA,GAAA4E,SAAA,CAAA3E,IAAA;YAAA;cAAA,MAYnB,KAAKtB,MAAA,IAAU,KAAKmD,UAAA,CAAWe,IAAA,KAAS;gBAAA+B,SAAA,CAAA3E,IAAA;gBAAA;cAAA;cAAA,OAAA2E,SAAA,CAAAtB,MAAA;YAAA;cAI5C,KAAKiB,SAAA;cAAAK,SAAA,CAAA3E,IAAA;cAAA,OACC,KAAKnC,SAAA,CAAUgF,iBAAA,CAAkB+B,iBAAA,CAAkB,KAAK/C,UAAA;YAAA;cAC9D,KAAKA,UAAA,CAAWe,IAAA,GAAO;YAAA;YAAA;cAAA,OAAA+B,SAAA,CAAArD,IAAA;UAAA;QAAA,GAAAmD,QAAA;MAAA;MAAA,SAAA7D,aAAA;QAAA,OAAA4D,aAAA,CAAAvD,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAAZ,YAAA;IAAA;EAAA;IAAA1B,GAAA;IAAAC,KAAA,EAGzB,SAAAmF,UAAA,EAAY;MACV,IAAMO,GAAA,GAAM,KAAKhH,SAAA,CAAUqF,WAAA,CAAYC,IAAA;MAEvC,IAAI0B,GAAA,EAAK;QACP,IAAIA,GAAA,CAAIC,GAAA,CAAI,mBAAmB,MAAM;UACnCD,GAAA,CAAIzB,GAAA,CAAI,eAAe;QAAA;MAAA;IAAA;EAAA;IAAAlE,GAAA;IAAAC,KAAA,EAY7B,SAAA4F,YAAYC,EAAA,EAAI;MACd,IAAI,CAACA,EAAA,IAAM,OAAOA,EAAA,KAAO,YAAY;QACnC,MAAM,IAAI9E,KAAA,CAAM;MAAA;MAElB,KAAKjC,iBAAA,CAAkBY,IAAA,CAAKmG,EAAA;IAAA;EAAA;IAAA9F,GAAA;IAAA4F,GAAA,EA4GX,SAAAA,IAAA,EAOR;MACT,OAAOlH,WAAA,CAAYqH,IAAA;IAAA;EAAA;IAAA/F,GAAA;IAAA4F,GAAA,EApHS,SAAAA,IAAA,EAwBX;MACjB,OAAO;QACLI,QAAA,EAAU;QACVC,SAAA,EAAW;QACXC,SAAA,EAAW;MAAA;IAAA;EAAA;IAAAlG,GAAA;IAAA4F,GAAA,WAAAA,IAAA,EAyBe;MAC5B,OAAO;QACLO,gBAAA,EAAkB;QAClBC,cAAA,EAAgB;QAChBC,eAAA,EAAiB;QACjBC,YAAA,EAAc;MAAA;IAAA;EAAA;IAAAtG,GAAA;IAAA4F,GAAA,WAAAA,IAAA,EA6CA;MAChB,OAAO;QACLW,MAAA,EAAQ;QACRC,KAAA,EAAO;QACPC,SAAA,EAAW;QACXC,aAAA,EAAe;MAAA;IAAA;EAAA;EAAA,OAAAhI,WAAA;AAAA;AAYrBiI,MAAA,CAAOC,OAAA,GAAUlI,WAAA;AACjBiI,MAAA,CAAOC,OAAA,CAAQlI,WAAA,GAAcA,WAAA;AAC7BiI,MAAA,CAAOC,OAAA,CAAQC,OAAA,GAAUnI,WAAA"},"metadata":{},"sourceType":"script"}