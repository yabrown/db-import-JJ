{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nexport var ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nexport function ndJsonPolicy() {\n  return {\n    name: ndJsonPolicyName,\n    sendRequest: function sendRequest(request, next) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // There currently isn't a good way to bypass the serializer\n              if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                  request.body = body.map(function (item) {\n                    return JSON.stringify(item) + \"\\n\";\n                  }).join(\"\");\n                }\n              }\n              return _context.abrupt(\"return\", next(request));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  };\n}","map":{"version":3,"names":["ndJsonPolicyName","ndJsonPolicy","name","sendRequest","request","next","_asyncToGenerator","_regeneratorRuntime","mark","_callee","body","wrap","_callee$","_context","prev","startsWith","JSON","parse","Array","isArray","map","item","stringify","join","abrupt","stop"],"sources":["../../../src/policies/ndJsonPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nexport const ndJsonPolicyName = \"ndJsonPolicy\";\n\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nexport function ndJsonPolicy(): PipelinePolicy {\n  return {\n    name: ndJsonPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // There currently isn't a good way to bypass the serializer\n      if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n        const body = JSON.parse(request.body);\n        if (Array.isArray(body)) {\n          request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n        }\n      }\n      return next(request);\n    },\n  };\n}\n"],"mappings":";;AAAA;AACA;AAKA;;;AAGA,OAAO,IAAMA,gBAAgB,GAAG,cAAc;AAE9C;;;AAGA,OAAM,SAAUC,YAAYA,CAAA;EAC1B,OAAO;IACLC,IAAI,EAAEF,gBAAgB;IAChBG,WAAW,WAAAA,YAACC,OAAwB,EAAEC,IAAiB;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,IAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAR,IAAA;YAAA;cAC3D;cACA,IAAI,OAAOD,OAAO,CAACM,IAAI,KAAK,QAAQ,IAAIN,OAAO,CAACM,IAAI,CAACK,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC9DL,IAAI,GAAGM,IAAI,CAACC,KAAK,CAACb,OAAO,CAACM,IAAI,CAAC;gBACrC,IAAIQ,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,EAAE;kBACvBN,OAAO,CAACM,IAAI,GAAGA,IAAI,CAACU,GAAG,CAAC,UAACC,IAAI;oBAAA,OAAKL,IAAI,CAACM,SAAS,CAACD,IAAI,CAAC,GAAG,IAAI;kBAAA,EAAC,CAACE,IAAI,CAAC,EAAE,CAAC;;;cAE1E,OAAAV,QAAA,CAAAW,MAAA,WACMnB,IAAI,CAACD,OAAO,CAAC;YAAA;YAAA;cAAA,OAAAS,QAAA,CAAAY,IAAA;UAAA;QAAA,GAAAhB,OAAA;MAAA;IACtB;GACD;AACH"},"metadata":{},"sourceType":"module"}