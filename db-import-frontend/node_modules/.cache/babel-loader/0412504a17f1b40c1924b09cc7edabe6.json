{"ast":null,"code":"import _slicedToArray from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(headerIterator);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n  return name.toLowerCase();\n}\nfunction headerIterator(map) {\n  var _iterator, _step, entry;\n  return _regeneratorRuntime().wrap(function headerIterator$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _iterator = _createForOfIteratorHelper(map.values());\n        _context.prev = 1;\n        _iterator.s();\n      case 3:\n        if ((_step = _iterator.n()).done) {\n          _context.next = 9;\n          break;\n        }\n        entry = _step.value;\n        _context.next = 7;\n        return [entry.name, entry.value];\n      case 7:\n        _context.next = 3;\n        break;\n      case 9:\n        _context.next = 14;\n        break;\n      case 11:\n        _context.prev = 11;\n        _context.t0 = _context[\"catch\"](1);\n        _iterator.e(_context.t0);\n      case 14:\n        _context.prev = 14;\n        _iterator.f();\n        return _context.finish(14);\n      case 17:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[1, 11, 14, 17]]);\n}\nvar HttpHeadersImpl = /*#__PURE__*/function (_Symbol$iterator) {\n  function HttpHeadersImpl(rawHeaders) {\n    _classCallCheck(this, HttpHeadersImpl);\n    this._headersMap = new Map();\n    if (rawHeaders) {\n      for (var _i = 0, _Object$keys = Object.keys(rawHeaders); _i < _Object$keys.length; _i++) {\n        var headerName = _Object$keys[_i];\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  _createClass(HttpHeadersImpl, [{\n    key: \"set\",\n    value: function set(name, value) {\n      this._headersMap.set(normalizeName(name), {\n        name: name,\n        value: String(value)\n      });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _a;\n      return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var result = {};\n      if (options.preserveCase) {\n        var _iterator2 = _createForOfIteratorHelper(this._headersMap.values()),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var entry = _step2.value;\n            result[entry.name] = entry.value;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else {\n        var _iterator3 = _createForOfIteratorHelper(this._headersMap),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n              normalizedName = _step3$value[0],\n              _entry = _step3$value[1];\n            result[normalizedName] = _entry.value;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON({\n        preserveCase: true\n      }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return headerIterator(this._headersMap);\n    }\n  }]);\n  return HttpHeadersImpl;\n}(Symbol.iterator);\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n  return new HttpHeadersImpl(rawHeaders);\n}","map":{"version":3,"names":["headerIterator","normalizeName","name","toLowerCase","map","_iterator","_step","entry","_regeneratorRuntime","wrap","headerIterator$","_context","prev","next","_createForOfIteratorHelper","values","s","n","done","value","t0","e","f","finish","stop","_marked","HttpHeadersImpl","_Symbol$iterator","rawHeaders","_classCallCheck","_headersMap","Map","_i","_Object$keys","Object","keys","length","headerName","set","_createClass","key","String","get","_a","has","_delete","delete","toJSON","options","arguments","undefined","result","preserveCase","_iterator2","_step2","err","_iterator3","_step3","_step3$value","_slicedToArray","normalizedName","toString","JSON","stringify","Symbol","iterator","createHttpHeaders"],"sources":["../../src/httpHeaders.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value) });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}