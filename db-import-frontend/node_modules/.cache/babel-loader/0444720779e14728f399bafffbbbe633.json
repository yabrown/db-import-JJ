{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar momentTz = require(\"moment-timezone\");\nvar moment = require(\"moment\");\nmodule.exports = function (BaseTypes) {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n  var DATE = /*#__PURE__*/function (_BaseTypes$DATE) {\n    _inherits(DATE, _BaseTypes$DATE);\n    var _super = _createSuper(DATE);\n    function DATE() {\n      _classCallCheck(this, DATE);\n      return _super.apply(this, arguments);\n    }\n    _createClass(DATE, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return \"TIMESTAMP\";\n      }\n    }, {\n      key: \"_stringify\",\n      value: function _stringify(date, options) {\n        if (!moment.isMoment(date)) {\n          date = this._applyTimezone(date, options);\n        }\n        if (this._length) {\n          return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n        }\n        return date.format(\"YYYY-MM-DD HH:mm:ss\");\n      }\n    }], [{\n      key: \"parse\",\n      value: function parse(value, options) {\n        value = value.string();\n        if (value === null) {\n          return value;\n        }\n        if (momentTz.tz.zone(options.timezone)) {\n          value = momentTz.tz(value, options.timezone).toDate();\n        } else {\n          value = new Date(\"\".concat(value, \" \").concat(options.timezone));\n        }\n        return value;\n      }\n    }]);\n    return DATE;\n  }(BaseTypes.DATE);\n  var DATEONLY = /*#__PURE__*/function (_BaseTypes$DATEONLY) {\n    _inherits(DATEONLY, _BaseTypes$DATEONLY);\n    var _super2 = _createSuper(DATEONLY);\n    function DATEONLY() {\n      _classCallCheck(this, DATEONLY);\n      return _super2.apply(this, arguments);\n    }\n    _createClass(DATEONLY, null, [{\n      key: \"parse\",\n      value: function parse(value) {\n        return value.string();\n      }\n    }]);\n    return DATEONLY;\n  }(BaseTypes.DATEONLY);\n  var UUID = /*#__PURE__*/function (_BaseTypes$UUID) {\n    _inherits(UUID, _BaseTypes$UUID);\n    var _super3 = _createSuper(UUID);\n    function UUID() {\n      _classCallCheck(this, UUID);\n      return _super3.apply(this, arguments);\n    }\n    _createClass(UUID, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return \"VARCHAR(36)\";\n      }\n    }]);\n    return UUID;\n  }(BaseTypes.UUID);\n  var TEXT = /*#__PURE__*/function (_BaseTypes$TEXT) {\n    _inherits(TEXT, _BaseTypes$TEXT);\n    var _super4 = _createSuper(TEXT);\n    function TEXT() {\n      _classCallCheck(this, TEXT);\n      return _super4.apply(this, arguments);\n    }\n    _createClass(TEXT, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return \"TEXT\";\n      }\n    }]);\n    return TEXT;\n  }(BaseTypes.TEXT);\n  var BOOLEAN = /*#__PURE__*/function (_BaseTypes$BOOLEAN) {\n    _inherits(BOOLEAN, _BaseTypes$BOOLEAN);\n    var _super5 = _createSuper(BOOLEAN);\n    function BOOLEAN() {\n      _classCallCheck(this, BOOLEAN);\n      return _super5.apply(this, arguments);\n    }\n    _createClass(BOOLEAN, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return \"BOOLEAN\";\n      }\n    }]);\n    return BOOLEAN;\n  }(BaseTypes.BOOLEAN);\n  var JSONTYPE = /*#__PURE__*/function (_BaseTypes$JSON) {\n    _inherits(JSONTYPE, _BaseTypes$JSON);\n    var _super6 = _createSuper(JSONTYPE);\n    function JSONTYPE() {\n      _classCallCheck(this, JSONTYPE);\n      return _super6.apply(this, arguments);\n    }\n    _createClass(JSONTYPE, [{\n      key: \"_stringify\",\n      value: function _stringify(value, options) {\n        return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n      }\n    }]);\n    return JSONTYPE;\n  }(BaseTypes.JSON);\n  return {\n    TEXT: TEXT,\n    DATE: DATE,\n    BOOLEAN: BOOLEAN,\n    DATEONLY: DATEONLY,\n    UUID: UUID,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"names":["momentTz","require","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","snowflake","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","_BaseTypes$DATE","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","toSql","_stringify","date","options","isMoment","_applyTimezone","_length","format","parse","string","tz","zone","timezone","toDate","Date","concat","_BaseTypes$DATEONLY","_super2","_BaseTypes$UUID","_super3","_BaseTypes$TEXT","_super4","_BaseTypes$BOOLEAN","_super5","JSONTYPE","_BaseTypes$JSON","_super6","operation","stringify"],"sources":["../../../src/dialects/snowflake/data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}