{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  };\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  StringUtils.queryStringToObject = function (query) {\n    var obj = {};\n    var params = query.split(\"&\");\n    var decode = function decode(s) {\n      return decodeURIComponent(s.replace(/\\+/g, \" \"));\n    };\n    params.forEach(function (pair) {\n      if (pair.trim()) {\n        var _a = pair.split(/=(.+)/g, 2),\n          key = _a[0],\n          value = _a[1]; // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n    return regex.test(input);\n  };\n  return StringUtils;\n}();\nexport { StringUtils };","map":{"version":3,"names":["StringUtils","decodeAuthToken","authToken","isEmpty","ClientAuthError","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","isEmptyObj","strObj","obj","parse","Object","keys","e","startsWith","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","_a","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["../../src/utils/StringUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * @hidden\n */\nexport class StringUtils {\n\n    /**\n     * decode a JWT\n     *\n     * @param authToken\n     */\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\n        if (StringUtils.isEmpty(authToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n        }\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n        const matches = tokenPartsRegex.exec(authToken);\n        if (!matches || matches.length < 4) {\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n        }\n        const crackedToken: DecodedAuthToken = {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3]\n        };\n        return crackedToken;\n    }\n\n    /**\n     * Check if a string is empty.\n     *\n     * @param str\n     */\n    static isEmpty(str?: string): boolean {\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\n    }\n\n    /**\n     * Check if stringified object is empty\n     * @param strObj \n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj && !StringUtils.isEmpty(strObj)) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        const obj: {} = {};\n        const params = query.split(\"&\");\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map(entry => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter(entry => {\n            return !StringUtils.isEmpty(entry);\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        const regex: RegExp = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n\n        return regex.test(input);\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAKH;;AAEG;AACH,IAAAA,WAAA;EAAA,SAAAA,YAAA,G;EAEI;;;;AAIG;EACIA,WAAe,CAAAC,eAAA,GAAtB,UAAuBC,SAAiB;IACpC,IAAIF,WAAW,CAACG,OAAO,CAACD,SAAS,CAAC,EAAE;MAChC,MAAME,eAAe,CAACC,2BAA2B,CAACH,SAAS,CAAC;IAC/D;IACD,IAAMI,eAAe,GAAG,sCAAsC;IAC9D,IAAMC,OAAO,GAAGD,eAAe,CAACE,IAAI,CAACN,SAAS,CAAC;IAC/C,IAAI,CAACK,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MAChC,MAAML,eAAe,CAACM,uBAAuB,CAAC,4BAA6B,GAAAC,IAAI,CAACC,SAAS,CAACV,SAAS,CAAG,CAAC;IAC1G;IACD,IAAMW,YAAY,GAAqB;MACnCC,MAAM,EAAEP,OAAO,CAAC,CAAC,CAAC;MAClBQ,UAAU,EAAER,OAAO,CAAC,CAAC,CAAC;MACtBS,MAAM,EAAET,OAAO,CAAC,CAAC;KACpB;IACD,OAAOM,YAAY;GACtB;EAED;;;;AAIG;EACIb,WAAO,CAAAG,OAAA,GAAd,UAAec,GAAY;IACvB,OAAQ,OAAOA,GAAG,KAAK,WAAW,IAAI,CAACA,GAAG,IAAI,CAAC,KAAKA,GAAG,CAACR,MAAM;GACjE;EAED;;;AAGG;EACIT,WAAU,CAAAkB,UAAA,GAAjB,UAAkBC,MAAe;IAC7B,IAAIA,MAAM,IAAI,CAACnB,WAAW,CAACG,OAAO,CAACgB,MAAM,CAAC,EAAE;MACxC,IAAI;QACA,IAAMC,GAAG,GAAGT,IAAI,CAACU,KAAK,CAACF,MAAM,CAAC;QAC9B,OAAOG,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACX,MAAM,KAAK,CAAC;MACvC,EAAC,OAAOe,CAAC,EAAE;IACf;IACD,OAAO,IAAI;GACd;EAEMxB,WAAA,CAAAyB,UAAU,GAAjB,UAAkBR,GAAW,EAAES,MAAc;IACzC,OAAOT,GAAG,CAACU,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC;GACnC;EAEM1B,WAAA,CAAA4B,QAAQ,GAAf,UAAgBX,GAAW,EAAES,MAAc;IACvC,OAAQT,GAAG,CAACR,MAAM,IAAIiB,MAAM,CAACjB,MAAM,IAAMQ,GAAG,CAACY,WAAW,CAACH,MAAM,CAAC,KAAMT,GAAG,CAACR,MAAM,GAAGiB,MAAM,CAACjB,MAAQ;GACrG;EAED;;;;AAIG;EACIT,WAAmB,CAAA8B,mBAAA,GAA1B,UAA8BC,KAAa;IACvC,IAAMX,GAAG,GAAO,EAAE;IAClB,IAAMY,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAC/B,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAIC,CAAS,EAAK;MAAA,OAAAC,kBAAkB,CAACD,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAAA;IACvEL,MAAM,CAACM,OAAO,CAAC,UAACC,IAAI;MAChB,IAAIA,IAAI,CAACC,IAAI,EAAE,EAAE;QACP,IAAAC,EAAA,GAAeF,IAAI,CAACN,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;UAArCS,GAAG,GAAAD,EAAA;UAAEE,KAAK,GAA2BF,EAAA,IAAC;QAC7C,IAAIC,GAAG,IAAIC,KAAK,EAAE;UACdvB,GAAG,CAACc,MAAM,CAACQ,GAAG,CAAC,CAAC,GAAGR,MAAM,CAACS,KAAK,CAAC;QACnC;MACJ;IACL,CAAC,CAAC;IACF,OAAOvB,GAAQ;GAClB;EAED;;;;AAIG;EACIpB,WAAgB,CAAA4C,gBAAA,GAAvB,UAAwBC,GAAkB;IACtC,OAAOA,GAAG,CAACC,GAAG,CAAC,UAAAC,KAAK;MAAI,OAAAA,KAAK,CAACP,IAAI,EAAE;IAAZ,CAAY,CAAC;GACxC;EAED;;;AAGG;EACIxC,WAA2B,CAAAgD,2BAAA,GAAlC,UAAmCH,GAAkB;IACjD,OAAOA,GAAG,CAACI,MAAM,CAAC,UAAAF,KAAK;MACnB,OAAO,CAAC/C,WAAW,CAACG,OAAO,CAAC4C,KAAK,CAAC;IACtC,CAAC,CAAC;GACL;EAED;;;AAGG;EACI/C,WAAe,CAAAkD,eAAA,GAAtB,UAA0BjC,GAAW;IACjC,IAAI;MACA,OAAON,IAAI,CAACU,KAAK,CAACJ,GAAG,CAAM;IAC9B,EAAC,OAAOO,CAAC,EAAE;MACR,OAAO,IAAI;IACd;GACJ;EAED;;;;AAIG;EACIxB,WAAA,CAAAmD,YAAY,GAAnB,UAAoBC,OAAe,EAAEC,KAAa;IAC9C;;;AAGG;IACH,IAAMC,KAAK,GAAW,IAAIC,MAAM,CAACH,OAAO,CAACf,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IAEhH,OAAOiB,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;GAC3B;EACL,OAACrD,WAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}