{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreClientLogger } from \"./log\";\nimport { decodeStringToString } from \"./base64\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges) {\n  var bearerChallenges = \", \".concat(challenges.trim()).split(\", Bearer \").filter(function (x) {\n    return x;\n  });\n  return bearerChallenges.map(function (challenge) {\n    var challengeParts = \"\".concat(challenge.trim(), \", \").split('\", ').filter(function (x) {\n      return x;\n    });\n    var keyValuePairs = challengeParts.map(function (keyValue) {\n      return function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return _defineProperty({}, key, value);\n      }(keyValue.trim().split('=\"'));\n    });\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce(function (a, b) {\n      return Object.assign(Object.assign({}, a), b);\n    }, {});\n  });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport function authorizeRequestOnClaimChallenge(_x) {\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}\nfunction _authorizeRequestOnClaimChallenge() {\n  _authorizeRequestOnClaimChallenge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(onChallengeOptions) {\n    var scopes, response, logger, challenge, challenges, parsedChallenge, accessToken;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          scopes = onChallengeOptions.scopes, response = onChallengeOptions.response;\n          logger = onChallengeOptions.logger || coreClientLogger;\n          challenge = response.headers.get(\"WWW-Authenticate\");\n          if (challenge) {\n            _context.next = 6;\n            break;\n          }\n          logger.info(\"The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.\");\n          return _context.abrupt(\"return\", false);\n        case 6:\n          challenges = parseCAEChallenge(challenge) || [];\n          parsedChallenge = challenges.find(function (x) {\n            return x.claims;\n          });\n          if (parsedChallenge) {\n            _context.next = 11;\n            break;\n          }\n          logger.info(\"The WWW-Authenticate header was missing the necessary \\\"claims\\\" to perform the Continuous Access Evaluation authentication flow.\");\n          return _context.abrupt(\"return\", false);\n        case 11:\n          _context.next = 13;\n          return onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n            claims: decodeStringToString(parsedChallenge.claims)\n          });\n        case 13:\n          accessToken = _context.sent;\n          if (accessToken) {\n            _context.next = 16;\n            break;\n          }\n          return _context.abrupt(\"return\", false);\n        case 16:\n          onChallengeOptions.request.headers.set(\"Authorization\", \"Bearer \".concat(accessToken.token));\n          return _context.abrupt(\"return\", true);\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}","map":{"version":3,"names":["logger","coreClientLogger","decodeStringToString","parseCAEChallenge","challenges","bearerChallenges","concat","trim","split","filter","x","map","challenge","challengeParts","keyValuePairs","keyValue","_ref","_ref2","_slicedToArray","key","value","_defineProperty","reduce","a","b","Object","assign","authorizeRequestOnClaimChallenge","_x","_authorizeRequestOnClaimChallenge","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","onChallengeOptions","scopes","response","parsedChallenge","accessToken","wrap","_callee$","_context","prev","next","headers","get","info","abrupt","find","claims","getAccessToken","scope","sent","request","set","token","stop"],"sources":["../../src/authorizeRequestOnClaimChallenge.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AuthorizeRequestOnChallengeOptions } from \"@azure/core-rest-pipeline\";\nimport { logger as coreClientLogger } from \"./log\";\nimport { decodeStringToString } from \"./base64\";\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges: string): any[] {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n  return bearerChallenges.map((challenge) => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) =>\n      (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"'))\n    );\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {});\n  });\n}\n\n/**\n * CAE Challenge structure\n */\nexport interface CAEChallenge {\n  scope: string;\n  claims: string;\n}\n\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(\n  onChallengeOptions: AuthorizeRequestOnChallengeOptions\n): Promise<boolean> {\n  const { scopes, response } = onChallengeOptions;\n  const logger = onChallengeOptions.logger || coreClientLogger;\n\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (!challenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`\n    );\n    return false;\n  }\n  const challenges: CAEChallenge[] = parseCAEChallenge(challenge) || [];\n\n  const parsedChallenge = challenges.find((x) => x.claims);\n  if (!parsedChallenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`\n    );\n    return false;\n  }\n\n  const accessToken = await onChallengeOptions.getAccessToken(\n    parsedChallenge.scope ? [parsedChallenge.scope] : scopes,\n    {\n      claims: decodeStringToString(parsedChallenge.claims),\n    }\n  );\n\n  if (!accessToken) {\n    return false;\n  }\n\n  onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}