{"ast":null,"code":"import _slicedToArray from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"@azure/core-util\";\nvar RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nvar defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Accept-Encoding\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\", \"WWW-Authenticate\"];\nvar defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nexport var Sanitizer = /*#__PURE__*/function () {\n  function Sanitizer() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$additionalAllowe = _ref.additionalAllowedHeaderNames,\n      allowedHeaderNames = _ref$additionalAllowe === void 0 ? [] : _ref$additionalAllowe,\n      _ref$additionalAllowe2 = _ref.additionalAllowedQueryParameters,\n      allowedQueryParameters = _ref$additionalAllowe2 === void 0 ? [] : _ref$additionalAllowe2;\n    _classCallCheck(this, Sanitizer);\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) {\n      return n.toLowerCase();\n    }));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) {\n      return p.toLowerCase();\n    }));\n  }\n  _createClass(Sanitizer, [{\n    key: \"sanitize\",\n    value: function sanitize(obj) {\n      var _this = this;\n      var seen = new Set();\n      return JSON.stringify(obj, function (key, value) {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return Object.assign(Object.assign({}, value), {\n            name: value.name,\n            message: value.message\n          });\n        }\n        if (key === \"headers\") {\n          return _this.sanitizeHeaders(value);\n        } else if (key === \"url\") {\n          return _this.sanitizeUrl(value);\n        } else if (key === \"query\") {\n          return _this.sanitizeQuery(value);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n        return value;\n      }, 2);\n    }\n  }, {\n    key: \"sanitizeHeaders\",\n    value: function sanitizeHeaders(obj) {\n      var sanitized = {};\n      for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        if (this.allowedHeaderNames.has(key.toLowerCase())) {\n          sanitized[key] = obj[key];\n        } else {\n          sanitized[key] = RedactedString;\n        }\n      }\n      return sanitized;\n    }\n  }, {\n    key: \"sanitizeQuery\",\n    value: function sanitizeQuery(value) {\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      var sanitized = {};\n      for (var _i2 = 0, _Object$keys2 = Object.keys(value); _i2 < _Object$keys2.length; _i2++) {\n        var k = _Object$keys2[_i2];\n        if (this.allowedQueryParameters.has(k.toLowerCase())) {\n          sanitized[k] = value[k];\n        } else {\n          sanitized[k] = RedactedString;\n        }\n      }\n      return sanitized;\n    }\n  }, {\n    key: \"sanitizeUrl\",\n    value: function sanitizeUrl(value) {\n      if (typeof value !== \"string\" || value === null) {\n        return value;\n      }\n      var url = new URL(value);\n      if (!url.search) {\n        return value;\n      }\n      var _iterator = _createForOfIteratorHelper(url.searchParams),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 1),\n            key = _step$value[0];\n          if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n            url.searchParams.set(key, RedactedString);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return url.toString();\n    }\n  }]);\n  return Sanitizer;\n}();","map":{"version":3,"names":["isObject","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","_ref","arguments","length","undefined","_ref$additionalAllowe","additionalAllowedHeaderNames","allowedHeaderNames","_ref$additionalAllowe2","additionalAllowedQueryParameters","allowedQueryParameters","_classCallCheck","concat","Set","map","n","toLowerCase","p","_createClass","key","value","sanitize","obj","_this","seen","JSON","stringify","Error","Object","assign","name","message","sanitizeHeaders","sanitizeUrl","sanitizeQuery","Array","isArray","has","add","sanitized","_i","_Object$keys","keys","_i2","_Object$keys2","k","url","URL","search","_iterator","_createForOfIteratorHelper","searchParams","_step","s","done","_step$value","_slicedToArray","set","err","e","f","toString"],"sources":["../../../src/util/sanitizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}