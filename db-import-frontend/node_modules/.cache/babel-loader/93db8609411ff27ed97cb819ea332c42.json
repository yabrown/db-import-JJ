{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient);\nexport { UsernamePasswordClient };","map":{"version":3,"names":["UsernamePasswordClient","_super","__extends","configuration","call","prototype","acquireToken","request","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","sent","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["../../src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { Authority } from \"../authority/Authority\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\n\n/**\n * Oauth2.0 Password grant client\n * Note: We are only supporting public clients for password grant and for purely testing purposes\n */\nexport class UsernamePasswordClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\n     * password_grant\n     * @param request\n     */\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"in acquireToken call\");\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n\n        return tokenResponse;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\n            credential: request.username,\n            type: CcsCredentialType.UPN\n        });\n\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\n\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\n            parameterBuilder.addCcsUpn(request.username);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}