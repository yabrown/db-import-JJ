{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar AbstractDialect = require(\"../abstract\");\nvar ConnectionManager = require(\"./connection-manager\");\nvar Query = require(\"./query\");\nvar QueryGenerator = require(\"./query-generator\");\nvar DataTypes = require(\"../../data-types\").postgres;\nvar _require = require(\"./query-interface\"),\n  PostgresQueryInterface = _require.PostgresQueryInterface;\nvar PostgresDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(PostgresDialect, _AbstractDialect);\n  var _super = _createSuper(PostgresDialect);\n  function PostgresDialect(sequelize) {\n    var _this;\n    _classCallCheck(this, PostgresDialect);\n    _this = _super.call(this);\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_this),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new PostgresQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n  _createClass(PostgresDialect, [{\n    key: \"canBackslashEscape\",\n    value: function canBackslashEscape() {\n      return !this.sequelize.options.standardConformingStrings;\n    }\n  }]);\n  return PostgresDialect;\n}(AbstractDialect);\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT VALUES\": true,\n  EXCEPTION: true,\n  \"ON DUPLICATE KEY\": false,\n  \"ORDER NULLS\": true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: \"FOR SHARE\",\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true,\n    onConflictWhere: true\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  TSVECTOR: true,\n  deferrableConstraints: true,\n  searchPath: true,\n  escapeStringConstants: true\n});\nPostgresDialect.prototype.defaultVersion = \"9.5.0\";\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = \"postgres\";\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","postgres","_require","PostgresQueryInterface","PostgresDialect","_AbstractDialect","_inherits","_super","_createSuper","sequelize","_this","_classCallCheck","call","connectionManager","_assertThisInitialized","queryGenerator","_dialect","queryInterface","_createClass","key","value","canBackslashEscape","options","standardConformingStrings","prototype","supports","merge","cloneDeep","EXCEPTION","returnValues","returning","bulkDefault","schemas","lock","lockOf","lockKey","lockOuterJoinFailure","skipLocked","forShare","index","concurrently","using","where","functionBased","operator","inserts","onConflictDoNothing","updateOnDuplicate","conflictFields","onConflictWhere","NUMERIC","ARRAY","RANGE","GEOMETRY","REGEXP","GEOGRAPHY","JSON","JSONB","HSTORE","TSVECTOR","deferrableConstraints","searchPath","escapeStringConstants","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["../../../src/dialects/postgres/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    // postgres can use \\ to escape if one of these is true:\n    // - standard_conforming_strings is off\n    // - the string is prefixed with E (out of scope for this method)\n\n    return !this.sequelize.options.standardConformingStrings;\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true,\n    escapeStringConstants: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}