{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentFlowClient = /** @class */function (_super) {\n  __extends(SilentFlowClient, _super);\n  function SilentFlowClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.acquireCachedToken(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            e_1 = _a.sent();\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n              return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var environment, cacheRecord;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            }\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n            environment = request.authority || this.authority.getPreferredCache();\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n            if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\n          case 1:\n            return [2 /*return*/, _e.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n              authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\n              if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n              }\n              AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SilentFlowClient;\n}(BaseClient);\nexport { SilentFlowClient };","map":{"version":3,"names":["SilentFlowClient","_super","__extends","configuration","performanceClient","call","prototype","acquireToken","request","acquireCachedToken","_a","sent","e_1","ClientAuthError","errorCode","ClientAuthErrorMessage","tokenRefreshRequired","code","refreshTokenClient","RefreshTokenClient","config","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","CacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","account","createNoAccountInSilentRequestError","environment","authority","getPreferredCache","cacheRecord","cacheManager","readCacheRecord","accessToken","_b","NO_CACHED_ACCESS_TOKEN","TimeUtils","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","_c","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","_d","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","_e","idToken","idTokenObj","AuthToken","secret","cryptoInterface","maxAge","authTime","claims","auth_time","createAuthTimeNotFoundError","checkMaxAge","ResponseHandler","generateAuthenticationResult","cryptoUtils","BaseClient"],"sources":["../../src/client/SilentFlowClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheOutcome } from \"../utils/Constants\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n\nexport class SilentFlowClient extends BaseClient {\n    \n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        super(configuration,performanceClient);\n    }\n    \n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        try {\n            return await this.acquireCachedToken(request);\n        } catch (e) {\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n    \n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        if (request.forceRefresh) {\n            // Must refresh due to present force_refresh flag.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        const environment = request.authority || this.authority.getPreferredCache();\n\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n\n        if (!cacheRecord.accessToken) {\n            // Must refresh due to non-existent access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        } else if (\n            TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)\n        ) {\n            // Must refresh due to expired access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n            throw ClientAuthError.createRefreshRequiredError();\n        } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n            // Must refresh due to the refresh_in value.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\n    }\n\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        let idTokenObj: AuthToken | undefined;\n        if (cacheRecord.idToken) {\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n        }\n\n        // token max_age check\n        if (request.maxAge || (request.maxAge === 0)) {\n            const authTime = idTokenObj?.claims.auth_time;\n            if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n            }\n\n            AuthToken.checkMaxAge(authTime, request.maxAge);\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            cacheRecord,\n            true,\n            request,\n            idTokenObj\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}