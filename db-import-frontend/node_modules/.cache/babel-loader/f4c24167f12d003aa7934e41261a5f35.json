{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar Utils = require(\"../../utils\");\nvar util = require(\"util\");\nvar DataTypes = require(\"../../data-types\");\nvar AbstractQueryGenerator = require(\"../abstract/query-generator\");\nvar semver = require(\"semver\");\nvar _ = require(\"lodash\");\nvar POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\nvar PostgresQueryGenerator = /*#__PURE__*/function (_AbstractQueryGenerat) {\n  _inherits(PostgresQueryGenerator, _AbstractQueryGenerat);\n  var _super = _createSuper(PostgresQueryGenerator);\n  function PostgresQueryGenerator() {\n    _classCallCheck(this, PostgresQueryGenerator);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PostgresQueryGenerator, [{\n    key: \"setSearchPath\",\n    value: function setSearchPath(searchPath) {\n      return \"SET search_path to \".concat(searchPath, \";\");\n    }\n  }, {\n    key: \"createDatabaseQuery\",\n    value: function createDatabaseQuery(databaseName, options) {\n      options = __spreadValues({\n        encoding: null,\n        collate: null\n      }, options);\n      var values = {\n        database: this.quoteTable(databaseName),\n        encoding: options.encoding ? \" ENCODING = \".concat(this.escape(options.encoding)) : \"\",\n        collation: options.collate ? \" LC_COLLATE = \".concat(this.escape(options.collate)) : \"\",\n        ctype: options.ctype ? \" LC_CTYPE = \".concat(this.escape(options.ctype)) : \"\",\n        template: options.template ? \" TEMPLATE = \".concat(this.escape(options.template)) : \"\"\n      };\n      return \"CREATE DATABASE \".concat(values.database).concat(values.encoding).concat(values.collation).concat(values.ctype).concat(values.template, \";\");\n    }\n  }, {\n    key: \"dropDatabaseQuery\",\n    value: function dropDatabaseQuery(databaseName) {\n      return \"DROP DATABASE IF EXISTS \".concat(this.quoteTable(databaseName), \";\");\n    }\n  }, {\n    key: \"createSchema\",\n    value: function createSchema(schema) {\n      var databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n      if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n        return \"CREATE SCHEMA IF NOT EXISTS \".concat(this.quoteIdentifier(schema), \";\");\n      }\n      return \"CREATE SCHEMA \".concat(this.quoteIdentifier(schema), \";\");\n    }\n  }, {\n    key: \"dropSchema\",\n    value: function dropSchema(schema) {\n      return \"DROP SCHEMA IF EXISTS \".concat(this.quoteIdentifier(schema), \" CASCADE;\");\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery() {\n      return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n    }\n  }, {\n    key: \"versionQuery\",\n    value: function versionQuery() {\n      return \"SHOW SERVER_VERSION\";\n    }\n  }, {\n    key: \"createTableQuery\",\n    value: function createTableQuery(tableName, attributes, options) {\n      var _this = this;\n      options = __spreadValues({}, options);\n      var databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n      var attrStr = [];\n      var comments = \"\";\n      var columnComments = \"\";\n      var quotedTable = this.quoteTable(tableName);\n      if (options.comment && typeof options.comment === \"string\") {\n        comments += \"; COMMENT ON TABLE \".concat(quotedTable, \" IS \").concat(this.escape(options.comment));\n      }\n      for (var attr in attributes) {\n        var quotedAttr = this.quoteIdentifier(attr);\n        var i = attributes[attr].indexOf(\"COMMENT \");\n        if (i !== -1) {\n          var escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n          columnComments += \"; COMMENT ON COLUMN \".concat(quotedTable, \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n          attributes[attr] = attributes[attr].substring(0, i);\n        }\n        var dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n        attrStr.push(\"\".concat(quotedAttr, \" \").concat(dataType));\n      }\n      var attributesClause = attrStr.join(\", \");\n      if (options.uniqueKeys) {\n        _.each(options.uniqueKeys, function (columns) {\n          if (columns.customIndex) {\n            attributesClause += \", UNIQUE (\".concat(columns.fields.map(function (field) {\n              return _this.quoteIdentifier(field);\n            }).join(\", \"), \")\");\n          }\n        });\n      }\n      var pks = _.reduce(attributes, function (acc, attribute, key) {\n        if (attribute.includes(\"PRIMARY KEY\")) {\n          acc.push(_this.quoteIdentifier(key));\n        }\n        return acc;\n      }, []).join(\",\");\n      if (pks.length > 0) {\n        attributesClause += \", PRIMARY KEY (\".concat(pks, \")\");\n      }\n      return \"CREATE TABLE \".concat(databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\").concat(quotedTable, \" (\").concat(attributesClause, \")\").concat(comments).concat(columnComments, \";\");\n    }\n  }, {\n    key: \"dropTableQuery\",\n    value: function dropTableQuery(tableName, options) {\n      options = options || {};\n      return \"DROP TABLE IF EXISTS \".concat(this.quoteTable(tableName)).concat(options.cascade ? \" CASCADE\" : \"\", \";\");\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery() {\n      var schema = this.options.schema || \"public\";\n      return \"SELECT table_name FROM information_schema.tables WHERE table_schema = \".concat(this.escape(schema), \" AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\");\n    }\n  }, {\n    key: \"tableExistsQuery\",\n    value: function tableExistsQuery(tableName) {\n      var table = tableName.tableName || tableName;\n      var schema = tableName.schema || \"public\";\n      return \"SELECT table_name FROM information_schema.tables WHERE table_schema = \".concat(this.escape(schema), \" AND table_name = \").concat(this.escape(table));\n    }\n  }, {\n    key: \"describeTableQuery\",\n    value: function describeTableQuery(tableName, schema) {\n      schema = schema || this.options.schema || \"public\";\n      return \"SELECT pk.constraint_type as \\\"Constraint\\\",c.column_name as \\\"Field\\\", c.column_default as \\\"Default\\\",c.is_nullable as \\\"Null\\\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \\\"Type\\\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \\\"special\\\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \\\"Comment\\\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = \".concat(this.escape(tableName), \" AND c.table_schema = \").concat(this.escape(schema));\n    }\n  }, {\n    key: \"_checkValidJsonStatement\",\n    value: function _checkValidJsonStatement(stmt) {\n      if (typeof stmt !== \"string\") {\n        return false;\n      }\n      var jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n      var jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n      var tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n      var currentIndex = 0;\n      var openingBrackets = 0;\n      var closingBrackets = 0;\n      var hasJsonFunction = false;\n      var hasInvalidToken = false;\n      while (currentIndex < stmt.length) {\n        var string = stmt.substr(currentIndex);\n        var functionMatches = jsonFunctionRegex.exec(string);\n        if (functionMatches) {\n          currentIndex += functionMatches[0].indexOf(\"(\");\n          hasJsonFunction = true;\n          continue;\n        }\n        var operatorMatches = jsonOperatorRegex.exec(string);\n        if (operatorMatches) {\n          currentIndex += operatorMatches[0].length;\n          hasJsonFunction = true;\n          continue;\n        }\n        var tokenMatches = tokenCaptureRegex.exec(string);\n        if (tokenMatches) {\n          var capturedToken = tokenMatches[1];\n          if (capturedToken === \"(\") {\n            openingBrackets++;\n          } else if (capturedToken === \")\") {\n            closingBrackets++;\n          } else if (capturedToken === \";\") {\n            hasInvalidToken = true;\n            break;\n          }\n          currentIndex += tokenMatches[0].length;\n          continue;\n        }\n        break;\n      }\n      hasInvalidToken |= openingBrackets !== closingBrackets;\n      if (hasJsonFunction && hasInvalidToken) {\n        throw new Error(\"Invalid json statement: \".concat(stmt));\n      }\n      return hasJsonFunction;\n    }\n  }, {\n    key: \"handleSequelizeMethod\",\n    value: function handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n      var _this2 = this;\n      if (smth instanceof Utils.Json) {\n        if (smth.conditions) {\n          var conditions = this.parseConditionObject(smth.conditions).map(function (condition) {\n            return \"\".concat(_this2.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path)), \" = '\").concat(condition.value, \"'\");\n          });\n          return conditions.join(\" AND \");\n        }\n        if (smth.path) {\n          var str;\n          if (this._checkValidJsonStatement(smth.path)) {\n            str = smth.path;\n          } else {\n            var paths = _.toPath(smth.path);\n            var column = paths.shift();\n            str = this.jsonPathExtractionQuery(column, paths);\n          }\n          if (smth.value) {\n            str += util.format(\" = %s\", this.escape(smth.value));\n          }\n          return str;\n        }\n      }\n      return _get(_getPrototypeOf(PostgresQueryGenerator.prototype), \"handleSequelizeMethod\", this).call(this, smth, tableName, factory, options, prepend);\n    }\n  }, {\n    key: \"addColumnQuery\",\n    value: function addColumnQuery(table, key, attribute) {\n      var dbDataType = this.attributeToSQL(attribute, {\n        context: \"addColumn\",\n        table: table,\n        key: key\n      });\n      var dataType = attribute.type || attribute;\n      var definition = this.dataTypeMapping(table, key, dbDataType);\n      var quotedKey = this.quoteIdentifier(key);\n      var quotedTable = this.quoteTable(this.extractTableDetails(table));\n      var query = \"ALTER TABLE \".concat(quotedTable, \" ADD COLUMN \").concat(quotedKey, \" \").concat(definition, \";\");\n      if (dataType instanceof DataTypes.ENUM) {\n        query = this.pgEnum(table, key, dataType) + query;\n      } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n        query = this.pgEnum(table, key, dataType.type) + query;\n      }\n      return query;\n    }\n  }, {\n    key: \"removeColumnQuery\",\n    value: function removeColumnQuery(tableName, attributeName) {\n      var quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n      var quotedAttributeName = this.quoteIdentifier(attributeName);\n      return \"ALTER TABLE \".concat(quotedTableName, \" DROP COLUMN \").concat(quotedAttributeName, \";\");\n    }\n  }, {\n    key: \"changeColumnQuery\",\n    value: function changeColumnQuery(tableName, attributes) {\n      var _this3 = this;\n      var query = function query(subQuery) {\n        return \"ALTER TABLE \".concat(_this3.quoteTable(tableName), \" ALTER COLUMN \").concat(subQuery, \";\");\n      };\n      var sql = [];\n      for (var attributeName in attributes) {\n        var definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n        var attrSql = \"\";\n        if (definition.includes(\"NOT NULL\")) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET NOT NULL\"));\n          definition = definition.replace(\"NOT NULL\", \"\").trim();\n        } else if (!definition.includes(\"REFERENCES\")) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP NOT NULL\"));\n        }\n        if (definition.includes(\"DEFAULT\")) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET DEFAULT \").concat(definition.match(/DEFAULT ([^;]+)/)[1]));\n          definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n        } else if (!definition.includes(\"REFERENCES\")) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP DEFAULT\"));\n        }\n        if (attributes[attributeName].startsWith(\"ENUM(\")) {\n          attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n          definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n            schema: false\n          }));\n          definition += \" USING (\".concat(this.quoteIdentifier(attributeName), \"::\").concat(this.pgEnumName(tableName, attributeName), \")\");\n        }\n        if (definition.match(/UNIQUE;*$/)) {\n          definition = definition.replace(/UNIQUE;*$/, \"\");\n          attrSql += query(\"ADD UNIQUE (\".concat(this.quoteIdentifier(attributeName), \")\")).replace(\"ALTER COLUMN\", \"\");\n        }\n        if (definition.includes(\"REFERENCES\")) {\n          definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n          attrSql += query(\"ADD FOREIGN KEY (\".concat(this.quoteIdentifier(attributeName), \") \").concat(definition)).replace(\"ALTER COLUMN\", \"\");\n        } else {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" TYPE \").concat(definition));\n        }\n        sql.push(attrSql);\n      }\n      return sql.join(\"\");\n    }\n  }, {\n    key: \"renameColumnQuery\",\n    value: function renameColumnQuery(tableName, attrBefore, attributes) {\n      var attrString = [];\n      for (var attributeName in attributes) {\n        attrString.push(\"\".concat(this.quoteIdentifier(attrBefore), \" TO \").concat(this.quoteIdentifier(attributeName)));\n      }\n      return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" RENAME COLUMN \").concat(attrString.join(\", \"), \";\");\n    }\n  }, {\n    key: \"fn\",\n    value: function fn(fnName, tableName, parameters, body, returns, language) {\n      fnName = fnName || \"testfunc\";\n      language = language || \"plpgsql\";\n      returns = returns ? \"RETURNS \".concat(returns) : \"\";\n      parameters = parameters || \"\";\n      return \"CREATE OR REPLACE FUNCTION pg_temp.\".concat(fnName, \"(\").concat(parameters, \") \").concat(returns, \" AS $func$ BEGIN \").concat(body, \" END; $func$ LANGUAGE \").concat(language, \"; SELECT * FROM pg_temp.\").concat(fnName, \"();\");\n    }\n  }, {\n    key: \"truncateTableQuery\",\n    value: function truncateTableQuery(tableName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return [\"TRUNCATE \".concat(this.quoteTable(tableName)), options.restartIdentity ? \" RESTART IDENTITY\" : \"\", options.cascade ? \" CASCADE\" : \"\"].join(\"\");\n    }\n  }, {\n    key: \"deleteQuery\",\n    value: function deleteQuery(tableName, where) {\n      var _this4 = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var model = arguments.length > 3 ? arguments[3] : undefined;\n      var table = this.quoteTable(tableName);\n      var whereClause = this.getWhereConditions(where, null, model, options);\n      var limit = options.limit ? \" LIMIT \".concat(this.escape(options.limit)) : \"\";\n      var primaryKeys = \"\";\n      var primaryKeysSelection = \"\";\n      if (whereClause) {\n        whereClause = \" WHERE \".concat(whereClause);\n      }\n      if (options.limit) {\n        if (!model) {\n          throw new Error(\"Cannot LIMIT delete without a model.\");\n        }\n        var pks = Object.values(model.primaryKeys).map(function (pk) {\n          return _this4.quoteIdentifier(pk.field);\n        }).join(\",\");\n        primaryKeys = model.primaryKeyAttributes.length > 1 ? \"(\".concat(pks, \")\") : pks;\n        primaryKeysSelection = pks;\n        return \"DELETE FROM \".concat(table, \" WHERE \").concat(primaryKeys, \" IN (SELECT \").concat(primaryKeysSelection, \" FROM \").concat(table).concat(whereClause).concat(limit, \")\");\n      }\n      return \"DELETE FROM \".concat(table).concat(whereClause);\n    }\n  }, {\n    key: \"showIndexesQuery\",\n    value: function showIndexesQuery(tableName) {\n      var schemaJoin = \"\";\n      var schemaWhere = \"\";\n      if (typeof tableName !== \"string\") {\n        schemaJoin = \", pg_namespace s\";\n        schemaWhere = \" AND s.oid = t.relnamespace AND s.nspname = '\".concat(tableName.schema, \"'\");\n        tableName = tableName.tableName;\n      }\n      return \"SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a\".concat(schemaJoin, \" WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '\").concat(tableName, \"'\").concat(schemaWhere, \" GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\");\n    }\n  }, {\n    key: \"showConstraintsQuery\",\n    value: function showConstraintsQuery(tableName) {\n      return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', \"from INFORMATION_SCHEMA.table_constraints\", \"WHERE table_name='\".concat(tableName, \"';\")].join(\" \");\n    }\n  }, {\n    key: \"removeIndexQuery\",\n    value: function removeIndexQuery(tableName, indexNameOrAttributes, options) {\n      var indexName = indexNameOrAttributes;\n      if (typeof indexName !== \"string\") {\n        indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join(\"_\")));\n      }\n      return [\"DROP INDEX\", options && options.concurrently && \"CONCURRENTLY\", \"IF EXISTS \".concat(this.quoteIdentifiers(indexName))].filter(Boolean).join(\" \");\n    }\n  }, {\n    key: \"addLimitAndOffset\",\n    value: function addLimitAndOffset(options) {\n      var fragment = \"\";\n      if (options.limit != null) {\n        fragment += \" LIMIT \" + this.escape(options.limit);\n      }\n      if (options.offset != null) {\n        fragment += \" OFFSET \" + this.escape(options.offset);\n      }\n      return fragment;\n    }\n  }, {\n    key: \"attributeToSQL\",\n    value: function attributeToSQL(attribute, options) {\n      var _this5 = this;\n      if (!_.isPlainObject(attribute)) {\n        attribute = {\n          type: attribute\n        };\n      }\n      var type;\n      if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n        var enumType = attribute.type.type || attribute.type;\n        var values = attribute.values;\n        if (enumType.values && !attribute.values) {\n          values = enumType.values;\n        }\n        if (Array.isArray(values) && values.length > 0) {\n          type = \"ENUM(\".concat(values.map(function (value) {\n            return _this5.escape(value);\n          }).join(\", \"), \")\");\n          if (attribute.type instanceof DataTypes.ARRAY) {\n            type += \"[]\";\n          }\n        } else {\n          throw new Error(\"Values for ENUM haven't been defined.\");\n        }\n      }\n      if (!type) {\n        type = attribute.type;\n      }\n      var sql = type.toString();\n      if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n        sql += \" NOT NULL\";\n      }\n      if (attribute.autoIncrement) {\n        if (attribute.autoIncrementIdentity) {\n          sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n        } else {\n          sql += \" SERIAL\";\n        }\n      }\n      if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n        sql += \" DEFAULT \".concat(this.escape(attribute.defaultValue, attribute));\n      }\n      if (attribute.unique === true) {\n        sql += \" UNIQUE\";\n      }\n      if (attribute.primaryKey) {\n        sql += \" PRIMARY KEY\";\n      }\n      if (attribute.references) {\n        var referencesTable = this.quoteTable(attribute.references.model);\n        var schema;\n        if (options.schema) {\n          schema = options.schema;\n        } else if ((!attribute.references.model || typeof attribute.references.model == \"string\") && options.table && options.table.schema) {\n          schema = options.table.schema;\n        }\n        if (schema) {\n          referencesTable = this.quoteTable(this.addSchema({\n            tableName: referencesTable,\n            _schema: schema\n          }));\n        }\n        var referencesKey;\n        if (!options.withoutForeignKeyConstraints) {\n          if (attribute.references.key) {\n            referencesKey = this.quoteIdentifiers(attribute.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier(\"id\");\n          }\n          sql += \" REFERENCES \".concat(referencesTable, \" (\").concat(referencesKey, \")\");\n          if (attribute.onDelete) {\n            sql += \" ON DELETE \".concat(attribute.onDelete.toUpperCase());\n          }\n          if (attribute.onUpdate) {\n            sql += \" ON UPDATE \".concat(attribute.onUpdate.toUpperCase());\n          }\n          if (attribute.references.deferrable) {\n            sql += \" \".concat(attribute.references.deferrable.toString(this));\n          }\n        }\n      }\n      if (attribute.comment && typeof attribute.comment === \"string\") {\n        if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n          var quotedAttr = this.quoteIdentifier(options.key);\n          var escapedCommentText = this.escape(attribute.comment);\n          sql += \"; COMMENT ON COLUMN \".concat(this.quoteTable(options.table), \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n        } else {\n          sql += \" COMMENT \".concat(attribute.comment);\n        }\n      }\n      return sql;\n    }\n  }, {\n    key: \"deferConstraintsQuery\",\n    value: function deferConstraintsQuery(options) {\n      return options.deferrable.toString(this);\n    }\n  }, {\n    key: \"setConstraintQuery\",\n    value: function setConstraintQuery(columns, type) {\n      var _this6 = this;\n      var columnFragment = \"ALL\";\n      if (columns) {\n        columnFragment = columns.map(function (column) {\n          return _this6.quoteIdentifier(column);\n        }).join(\", \");\n      }\n      return \"SET CONSTRAINTS \".concat(columnFragment, \" \").concat(type);\n    }\n  }, {\n    key: \"setDeferredQuery\",\n    value: function setDeferredQuery(columns) {\n      return this.setConstraintQuery(columns, \"DEFERRED\");\n    }\n  }, {\n    key: \"setImmediateQuery\",\n    value: function setImmediateQuery(columns) {\n      return this.setConstraintQuery(columns, \"IMMEDIATE\");\n    }\n  }, {\n    key: \"attributesToSQL\",\n    value: function attributesToSQL(attributes, options) {\n      var result = {};\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({\n          key: key\n        }, options));\n      }\n      return result;\n    }\n  }, {\n    key: \"createTrigger\",\n    value: function createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n      var decodedEventType = this.decodeTriggerEventType(eventType);\n      var eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n      var expandedOptions = this.expandOptions(optionsArray);\n      var paramList = this._expandFunctionParamList(functionParams);\n      return \"CREATE \".concat(this.triggerEventTypeIsConstraint(eventType), \"TRIGGER \").concat(this.quoteIdentifier(triggerName), \" \").concat(decodedEventType, \" \").concat(eventSpec, \" ON \").concat(this.quoteTable(tableName)).concat(expandedOptions ? \" \".concat(expandedOptions) : \"\", \" EXECUTE PROCEDURE \").concat(functionName, \"(\").concat(paramList, \");\");\n    }\n  }, {\n    key: \"dropTrigger\",\n    value: function dropTrigger(tableName, triggerName) {\n      return \"DROP TRIGGER \".concat(this.quoteIdentifier(triggerName), \" ON \").concat(this.quoteTable(tableName), \" RESTRICT;\");\n    }\n  }, {\n    key: \"renameTrigger\",\n    value: function renameTrigger(tableName, oldTriggerName, newTriggerName) {\n      return \"ALTER TRIGGER \".concat(this.quoteIdentifier(oldTriggerName), \" ON \").concat(this.quoteTable(tableName), \" RENAME TO \").concat(this.quoteIdentifier(newTriggerName), \";\");\n    }\n  }, {\n    key: \"createFunction\",\n    value: function createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n      if (!functionName || !returnType || !language || !body) throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n      var paramList = this._expandFunctionParamList(params);\n      var variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n      var expandedOptionsArray = this.expandOptions(optionsArray);\n      var statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n      return \"\".concat(statement, \" \").concat(functionName, \"(\").concat(paramList, \") RETURNS \").concat(returnType, \" AS $func$ \").concat(variableList, \" BEGIN \").concat(body, \" END; $func$ language '\").concat(language, \"'\").concat(expandedOptionsArray, \";\");\n    }\n  }, {\n    key: \"dropFunction\",\n    value: function dropFunction(functionName, params) {\n      if (!functionName) throw new Error(\"requires functionName\");\n      var paramList = this._expandFunctionParamList(params);\n      return \"DROP FUNCTION \".concat(functionName, \"(\").concat(paramList, \") RESTRICT;\");\n    }\n  }, {\n    key: \"renameFunction\",\n    value: function renameFunction(oldFunctionName, params, newFunctionName) {\n      var paramList = this._expandFunctionParamList(params);\n      return \"ALTER FUNCTION \".concat(oldFunctionName, \"(\").concat(paramList, \") RENAME TO \").concat(newFunctionName, \";\");\n    }\n  }, {\n    key: \"pgEscapeAndQuote\",\n    value: function pgEscapeAndQuote(val) {\n      return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n    }\n  }, {\n    key: \"_expandFunctionParamList\",\n    value: function _expandFunctionParamList(params) {\n      if (params === void 0 || !Array.isArray(params)) {\n        throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n      }\n      var paramList = [];\n      params.forEach(function (curParam) {\n        var paramDef = [];\n        if (curParam.type) {\n          if (curParam.direction) {\n            paramDef.push(curParam.direction);\n          }\n          if (curParam.name) {\n            paramDef.push(curParam.name);\n          }\n          paramDef.push(curParam.type);\n        } else {\n          throw new Error(\"function or trigger used with a parameter without any type\");\n        }\n        var joined = paramDef.join(\" \");\n        if (joined) paramList.push(joined);\n      });\n      return paramList.join(\", \");\n    }\n  }, {\n    key: \"_expandFunctionVariableList\",\n    value: function _expandFunctionVariableList(variables) {\n      if (!Array.isArray(variables)) {\n        throw new Error(\"_expandFunctionVariableList: function variables must be an array\");\n      }\n      var variableDefinitions = [];\n      variables.forEach(function (variable) {\n        if (!variable.name || !variable.type) {\n          throw new Error(\"function variable must have a name and type\");\n        }\n        var variableDefinition = \"DECLARE \".concat(variable.name, \" \").concat(variable.type);\n        if (variable.default) {\n          variableDefinition += \" := \".concat(variable.default);\n        }\n        variableDefinition += \";\";\n        variableDefinitions.push(variableDefinition);\n      });\n      return variableDefinitions.join(\" \");\n    }\n  }, {\n    key: \"expandOptions\",\n    value: function expandOptions(options) {\n      return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n    }\n  }, {\n    key: \"decodeTriggerEventType\",\n    value: function decodeTriggerEventType(eventSpecifier) {\n      var EVENT_DECODER = {\n        \"after\": \"AFTER\",\n        \"before\": \"BEFORE\",\n        \"instead_of\": \"INSTEAD OF\",\n        \"after_constraint\": \"AFTER\"\n      };\n      if (!EVENT_DECODER[eventSpecifier]) {\n        throw new Error(\"Invalid trigger event specified: \".concat(eventSpecifier));\n      }\n      return EVENT_DECODER[eventSpecifier];\n    }\n  }, {\n    key: \"triggerEventTypeIsConstraint\",\n    value: function triggerEventTypeIsConstraint(eventSpecifier) {\n      return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n    }\n  }, {\n    key: \"expandTriggerEventSpec\",\n    value: function expandTriggerEventSpec(fireOnSpec) {\n      if (_.isEmpty(fireOnSpec)) {\n        throw new Error(\"no table change events specified to trigger on\");\n      }\n      return _.map(fireOnSpec, function (fireValue, fireKey) {\n        var EVENT_MAP = {\n          \"insert\": \"INSERT\",\n          \"update\": \"UPDATE\",\n          \"delete\": \"DELETE\",\n          \"truncate\": \"TRUNCATE\"\n        };\n        if (!EVENT_MAP[fireValue]) {\n          throw new Error(\"parseTriggerEventSpec: undefined trigger event \".concat(fireKey));\n        }\n        var eventSpec = EVENT_MAP[fireValue];\n        if (eventSpec === \"UPDATE\") {\n          if (Array.isArray(fireValue) && fireValue.length > 0) {\n            eventSpec += \" OF \".concat(fireValue.join(\", \"));\n          }\n        }\n        return eventSpec;\n      }).join(\" OR \");\n    }\n  }, {\n    key: \"pgEnumName\",\n    value: function pgEnumName(tableName, attr, options) {\n      options = options || {};\n      var tableDetails = this.extractTableDetails(tableName, options);\n      var enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n      if (options.schema !== false && tableDetails.schema) {\n        enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n      }\n      return enumName;\n    }\n  }, {\n    key: \"pgListEnums\",\n    value: function pgListEnums(tableName, attrName, options) {\n      var enumName = \"\";\n      var tableDetails = this.extractTableDetails(tableName, options);\n      if (tableDetails.tableName && attrName) {\n        enumName = \" AND t.typname=\".concat(this.pgEnumName(tableDetails.tableName, attrName, {\n          schema: false\n        }).replace(/\"/g, \"'\"));\n      }\n      return \"SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '\".concat(tableDetails.schema, \"'\").concat(enumName, \" GROUP BY 1\");\n    }\n  }, {\n    key: \"pgEnum\",\n    value: function pgEnum(tableName, attr, dataType, options) {\n      var _this7 = this;\n      var enumName = this.pgEnumName(tableName, attr, options);\n      var values;\n      if (dataType.values) {\n        values = \"ENUM(\".concat(dataType.values.map(function (value) {\n          return _this7.escape(value);\n        }).join(\", \"), \")\");\n      } else {\n        values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n      }\n      var sql = \"DO \".concat(this.escape(\"BEGIN CREATE TYPE \".concat(enumName, \" AS \").concat(values, \"; EXCEPTION WHEN duplicate_object THEN null; END\")), \";\");\n      if (!!options && options.force === true) {\n        sql = this.pgEnumDrop(tableName, attr) + sql;\n      }\n      return sql;\n    }\n  }, {\n    key: \"pgEnumAdd\",\n    value: function pgEnumAdd(tableName, attr, value, options) {\n      var enumName = this.pgEnumName(tableName, attr);\n      var sql = \"ALTER TYPE \".concat(enumName, \" ADD VALUE \");\n      if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n        sql += \"IF NOT EXISTS \";\n      }\n      sql += this.escape(value);\n      if (options.before) {\n        sql += \" BEFORE \".concat(this.escape(options.before));\n      } else if (options.after) {\n        sql += \" AFTER \".concat(this.escape(options.after));\n      }\n      return sql;\n    }\n  }, {\n    key: \"pgEnumDrop\",\n    value: function pgEnumDrop(tableName, attr, enumName) {\n      enumName = enumName || this.pgEnumName(tableName, attr);\n      return \"DROP TYPE IF EXISTS \".concat(enumName, \"; \");\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(text) {\n      text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n      var matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n      if (matches.length < 1) {\n        return [];\n      }\n      matches = matches.map(function (m) {\n        return m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\");\n      });\n      return matches.slice(0, -1);\n    }\n  }, {\n    key: \"dataTypeMapping\",\n    value: function dataTypeMapping(tableName, attr, dataType) {\n      if (dataType.includes(\"PRIMARY KEY\")) {\n        dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n      }\n      if (dataType.includes(\"SERIAL\")) {\n        if (dataType.includes(\"BIGINT\")) {\n          dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n          dataType = dataType.replace(\"BIGINT\", \"\");\n        } else if (dataType.includes(\"SMALLINT\")) {\n          dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n          dataType = dataType.replace(\"SMALLINT\", \"\");\n        } else {\n          dataType = dataType.replace(\"INTEGER\", \"\");\n        }\n        dataType = dataType.replace(\"NOT NULL\", \"\");\n      }\n      if (dataType.startsWith(\"ENUM(\")) {\n        dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n      }\n      return dataType;\n    }\n  }, {\n    key: \"getForeignKeysQuery\",\n    value: function getForeignKeysQuery(tableName) {\n      return \"SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '\".concat(tableName, \"' LIMIT 1) AND r.contype = 'f' ORDER BY 1;\");\n    }\n  }, {\n    key: \"_getForeignKeyReferencesQueryPrefix\",\n    value: function _getForeignKeyReferencesQueryPrefix() {\n      return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n    }\n  }, {\n    key: \"getForeignKeyReferencesQuery\",\n    value: function getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n      return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '\").concat(tableName, \"'\").concat(catalogName ? \" AND tc.table_catalog = '\".concat(catalogName, \"'\") : \"\").concat(schemaName ? \" AND tc.table_schema = '\".concat(schemaName, \"'\") : \"\");\n    }\n  }, {\n    key: \"getForeignKeyReferenceQuery\",\n    value: function getForeignKeyReferenceQuery(table, columnName) {\n      var tableName = table.tableName || table;\n      var schema = table.schema;\n      return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='\").concat(tableName, \"' AND  kcu.column_name = '\").concat(columnName, \"'\").concat(schema ? \" AND tc.table_schema = '\".concat(schema, \"'\") : \"\");\n    }\n  }, {\n    key: \"dropForeignKeyQuery\",\n    value: function dropForeignKeyQuery(tableName, foreignKey) {\n      return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" DROP CONSTRAINT \").concat(this.quoteIdentifier(foreignKey), \";\");\n    }\n  }, {\n    key: \"quoteIdentifier\",\n    value: function quoteIdentifier(identifier, force) {\n      var optForceQuote = force || false;\n      var optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n      var rawIdentifier = Utils.removeTicks(identifier, '\"');\n      if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n        return Utils.addTicks(rawIdentifier, '\"');\n      }\n      return rawIdentifier;\n    }\n  }]);\n  return PostgresQueryGenerator;\n}(AbstractQueryGenerator);\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","POSTGRES_RESERVED_WORDS","split","PostgresQueryGenerator","_AbstractQueryGenerat","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","setSearchPath","searchPath","concat","createDatabaseQuery","databaseName","options","__spreadValues","encoding","collate","values","database","quoteTable","escape","collation","ctype","template","dropDatabaseQuery","createSchema","schema","databaseVersion","get","gte","quoteIdentifier","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","_this","attrStr","comments","columnComments","quotedTable","comment","attr","quotedAttr","i","indexOf","escapedCommentText","substring","dataType","dataTypeMapping","push","attributesClause","join","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","includes","length","dropTableQuery","cascade","showTablesQuery","tableExistsQuery","table","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","handleSequelizeMethod","smth","factory","prepend","_this2","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","str","paths","toPath","column","shift","format","_get","_getPrototypeOf","prototype","call","addColumnQuery","dbDataType","attributeToSQL","context","type","definition","quotedKey","extractTableDetails","query","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","_this3","subQuery","sql","attrSql","replace","trim","match","startsWith","pgEnumName","renameColumnQuery","attrBefore","attrString","fn","fnName","parameters","body","returns","language","truncateTableQuery","undefined","restartIdentity","deleteQuery","where","_this4","model","whereClause","getWhereConditions","limit","primaryKeys","primaryKeysSelection","Object","pk","primaryKeyAttributes","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","concurrently","quoteIdentifiers","filter","Boolean","addLimitAndOffset","fragment","offset","_this5","isPlainObject","ARRAY","enumType","Array","isArray","toString","hasOwnProperty","allowNull","autoIncrement","autoIncrementIdentity","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","addSchema","_schema","referencesKey","withoutForeignKeyConstraints","onDelete","toUpperCase","onUpdate","deferrable","deferConstraintsQuery","setConstraintQuery","_this6","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","_expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","variableList","variables","_expandFunctionVariableList","expandedOptionsArray","statement","force","dropFunction","renameFunction","oldFunctionName","newFunctionName","pgEscapeAndQuote","val","removeTicks","forEach","curParam","paramDef","direction","name","joined","variableDefinitions","variable","variableDefinition","default","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","_this7","pgEnumDrop","pgEnumAdd","sequelize","before","after","fromArray","text","matches","m","slice","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","identifier","optForceQuote","optQuoteIdentifiers","rawIdentifier","toLowerCase","module","exports"],"sources":["../../../src/dialects/postgres/query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;\n    }\n\n    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    const schema = this.options.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier('id');\n        }\n\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `DO ${this.escape(`BEGIN CREATE TYPE ${enumName} AS ${values}; EXCEPTION WHEN duplicate_object THEN null; END`)};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'tc.initially_deferred as initially_deferred,' +\n      'tc.is_deferrable as is_deferrable,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}