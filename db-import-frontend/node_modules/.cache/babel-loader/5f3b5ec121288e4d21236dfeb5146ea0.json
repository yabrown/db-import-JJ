{"ast":null,"code":"var eq = require('./eq');\nvar neq = require('./neq');\nvar gt = require('./gt');\nvar gte = require('./gte');\nvar lt = require('./lt');\nvar lte = require('./lte');\nvar cmp = function cmp(a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version;\n      }\n      if (typeof b === 'object') {\n        b = b.version;\n      }\n      return a === b;\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version;\n      }\n      if (typeof b === 'object') {\n        b = b.version;\n      }\n      return a !== b;\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose);\n    case '!=':\n      return neq(a, b, loose);\n    case '>':\n      return gt(a, b, loose);\n    case '>=':\n      return gte(a, b, loose);\n    case '<':\n      return lt(a, b, loose);\n    case '<=':\n      return lte(a, b, loose);\n    default:\n      throw new TypeError(\"Invalid operator: \".concat(op));\n  }\n};\nmodule.exports = cmp;","map":{"version":3,"names":["eq","require","neq","gt","gte","lt","lte","cmp","a","op","b","loose","version","TypeError","concat","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/semver/functions/cmp.js"],"sourcesContent":["const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n"],"mappings":"AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAME,EAAE,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAMG,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAMI,EAAE,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAMK,GAAG,GAAGL,OAAO,CAAC,OAAO,CAAC;AAE5B,IAAMM,GAAG,GAAG,SAANA,GAAGA,CAAIC,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,KAAK,EAAK;EAC/B,QAAQF,EAAE;IACR,KAAK,KAAK;MACR,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;QACzBA,CAAC,GAAGA,CAAC,CAACI,OAAO;MACf;MACA,IAAI,OAAOF,CAAC,KAAK,QAAQ,EAAE;QACzBA,CAAC,GAAGA,CAAC,CAACE,OAAO;MACf;MACA,OAAOJ,CAAC,KAAKE,CAAC;IAEhB,KAAK,KAAK;MACR,IAAI,OAAOF,CAAC,KAAK,QAAQ,EAAE;QACzBA,CAAC,GAAGA,CAAC,CAACI,OAAO;MACf;MACA,IAAI,OAAOF,CAAC,KAAK,QAAQ,EAAE;QACzBA,CAAC,GAAGA,CAAC,CAACE,OAAO;MACf;MACA,OAAOJ,CAAC,KAAKE,CAAC;IAEhB,KAAK,EAAE;IACP,KAAK,GAAG;IACR,KAAK,IAAI;MACP,OAAOV,EAAE,CAACQ,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAExB,KAAK,IAAI;MACP,OAAOT,GAAG,CAACM,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAEzB,KAAK,GAAG;MACN,OAAOR,EAAE,CAACK,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAExB,KAAK,IAAI;MACP,OAAOP,GAAG,CAACI,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAEzB,KAAK,GAAG;MACN,OAAON,EAAE,CAACG,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAExB,KAAK,IAAI;MACP,OAAOL,GAAG,CAACE,CAAC,EAAEE,CAAC,EAAEC,KAAK,CAAC;IAEzB;MACE,MAAM,IAAIE,SAAS,sBAAAC,MAAA,CAAsBL,EAAE,CAAE,CAAC;EAClD;AACF,CAAC;AACDM,MAAM,CAACC,OAAO,GAAGT,GAAG"},"metadata":{},"sourceType":"script"}