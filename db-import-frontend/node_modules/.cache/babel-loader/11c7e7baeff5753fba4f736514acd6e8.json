{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\nvar _core = require(\"@js-joda/core\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar EPOCH_DATE = _core.LocalDate.ofYearDay(1900, 1);\nvar NULL_LENGTH = Buffer.from([0x00]);\nvar DATA_LENGTH = Buffer.from([0x08]);\nvar DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function declaration() {\n    return 'datetime';\n  },\n  generateTypeInfo: function generateTypeInfo() {\n    return Buffer.from([_datetimen.default.id, 0x08]);\n  },\n  generateParameterLength: function generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n    return DATA_LENGTH;\n  },\n  generateParameterData: /*#__PURE__*/_regeneratorRuntime().mark(function generateParameterData(parameter, options) {\n    var value, date, days, milliseconds, threeHundredthsOfSecond, seconds, _seconds, buffer;\n    return _regeneratorRuntime().wrap(function generateParameterData$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(parameter.value == null)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          value = parameter.value; // Temporary solution. Remove 'any' later.\n          if (options.useUTC) {\n            date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n          } else {\n            date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n          }\n          days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n          if (options.useUTC) {\n            seconds = value.getUTCHours() * 60 * 60;\n            seconds += value.getUTCMinutes() * 60;\n            seconds += value.getUTCSeconds();\n            milliseconds = seconds * 1000 + value.getUTCMilliseconds();\n          } else {\n            _seconds = value.getHours() * 60 * 60;\n            _seconds += value.getMinutes() * 60;\n            _seconds += value.getSeconds();\n            milliseconds = _seconds * 1000 + value.getMilliseconds();\n          }\n          threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n          threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n          if (threeHundredthsOfSecond === 25920000) {\n            days += 1;\n            threeHundredthsOfSecond = 0;\n          }\n          buffer = Buffer.alloc(8);\n          buffer.writeInt32LE(days, 0);\n          buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n          _context.next = 14;\n          return buffer;\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, generateParameterData);\n  }),\n  // TODO: type 'any' needs to be revisited.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;","map":{"version":3,"names":["_datetimen","_interopRequireDefault","require","_core","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DATA_LENGTH","DateTime","id","type","name","declaration","generateTypeInfo","default","generateParameterLength","parameter","options","value","generateParameterData","_regeneratorRuntime","mark","date","days","milliseconds","threeHundredthsOfSecond","seconds","_seconds","buffer","wrap","generateParameterData$","_context","prev","next","abrupt","useUTC","of","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","until","ChronoUnit","DAYS","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","Math","round","alloc","writeInt32LE","writeUInt32LE","stop","validate","Date","parse","isNaN","TypeError","module","exports"],"sources":["../../src/data-types/datetime.ts"],"sourcesContent":["import { DataType } from '../data-type';\nimport DateTimeN from './datetimen';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\n\nconst EPOCH_DATE = LocalDate.ofYearDay(1900, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\n\nconst DateTime: DataType = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n\n  declaration: function() {\n    return 'datetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([DateTimeN.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let date;\n    if (options.useUTC) {\n      date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    let days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n\n    let milliseconds, threeHundredthsOfSecond;\n    if (options.useUTC) {\n      let seconds = value.getUTCHours() * 60 * 60;\n      seconds += value.getUTCMinutes() * 60;\n      seconds += value.getUTCSeconds();\n      milliseconds = (seconds * 1000) + value.getUTCMilliseconds();\n    } else {\n      let seconds = value.getHours() * 60 * 60;\n      seconds += value.getMinutes() * 60;\n      seconds += value.getSeconds();\n      milliseconds = (seconds * 1000) + value.getMilliseconds();\n    }\n\n    threeHundredthsOfSecond = milliseconds / (3 + (1 / 3));\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond);\n\n    // 25920000 equals one day\n    if (threeHundredthsOfSecond === 25920000) {\n      days += 1;\n      threeHundredthsOfSecond = 0;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(days, 0);\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n    yield buffer;\n  },\n\n  // TODO: type 'any' needs to be revisited.\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default DateTime;\nmodule.exports = DateTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}