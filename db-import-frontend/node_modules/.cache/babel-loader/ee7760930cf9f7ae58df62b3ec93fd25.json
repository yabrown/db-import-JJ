{"ast":null,"code":"\"use strict\";\n\nvar dataTypes = require(\"./data-types\");\nvar _require = require(\"./utils/logger\"),\n  logger = _require.logger;\nfunction arrayToList(array, timeZone, dialect, format2) {\n  return array.reduce(function (sql, val, i) {\n    if (i !== 0) {\n      sql += \", \";\n    }\n    if (Array.isArray(val)) {\n      sql += \"(\".concat(arrayToList(val, timeZone, dialect, format2), \")\");\n    } else {\n      sql += escape(val, timeZone, dialect, format2);\n    }\n    return sql;\n  }, \"\");\n}\nexports.arrayToList = arrayToList;\nfunction escape(val, timeZone, dialect, format2) {\n  var prependN = false;\n  if (val === void 0 || val === null) {\n    return \"NULL\";\n  }\n  switch (typeof val) {\n    case \"boolean\":\n      if ([\"sqlite\", \"mssql\", \"oracle\"].includes(dialect)) {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case \"number\":\n    case \"bigint\":\n      return val.toString();\n    case \"string\":\n      prependN = dialect === \"mssql\";\n      break;\n  }\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, {\n      timezone: timeZone\n    });\n  }\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n  if (Array.isArray(val)) {\n    var partialEscape = function partialEscape(escVal) {\n      return escape(escVal, timeZone, dialect, format2);\n    };\n    if (dialect === \"postgres\" && !format2) {\n      return dataTypes.ARRAY.prototype.stringify(val, {\n        escape: partialEscape\n      });\n    }\n    return arrayToList(val, timeZone, dialect, format2);\n  }\n  if (!val.replace) {\n    throw new Error(\"Invalid value \".concat(logger.inspect(val)));\n  }\n  if ([\"postgres\", \"sqlite\", \"mssql\", \"snowflake\", \"db2\"].includes(dialect)) {\n    val = val.replace(/'/g, \"''\");\n    if (dialect === \"postgres\") {\n      val = val.replace(/\\0/g, \"\\\\0\");\n    }\n  } else if (dialect === \"oracle\" && typeof val === \"string\") {\n    if (val.startsWith(\"TO_TIMESTAMP\") || val.startsWith(\"TO_DATE\")) {\n      return val;\n    }\n    val = val.replace(/'/g, \"''\");\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, function (s) {\n      switch (s) {\n        case \"\\0\":\n          return \"\\\\0\";\n        case \"\\n\":\n          return \"\\\\n\";\n        case \"\\r\":\n          return \"\\\\r\";\n        case \"\\b\":\n          return \"\\\\b\";\n        case \"\t\":\n          return \"\\\\t\";\n        case \"\u001a\":\n          return \"\\\\Z\";\n        default:\n          return \"\\\\\".concat(s);\n      }\n    });\n  }\n  return \"\".concat((prependN ? \"N'\" : \"'\") + val, \"'\");\n}\nexports.escape = escape;\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n  if (typeof sql !== \"string\") {\n    throw new Error(\"Invalid SQL string provided: \".concat(sql));\n  }\n  return sql.replace(/\\?/g, function (match) {\n    if (!values.length) {\n      return match;\n    }\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, function (value, key) {\n    if (dialect === \"postgres\" && value.slice(0, 2) === \"::\") {\n      return value;\n    }\n    if (values[key] !== void 0) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(\"Named parameter \\\"\".concat(value, \"\\\" has no value in the given object.\"));\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;","map":{"version":3,"names":["dataTypes","require","_require","logger","arrayToList","array","timeZone","dialect","format2","reduce","sql","val","i","Array","isArray","concat","escape","exports","prependN","includes","toString","Date","DATE","prototype","stringify","timezone","Buffer","isBuffer","BLOB","partialEscape","escVal","ARRAY","replace","Error","inspect","startsWith","s","format","values","match","length","shift","formatNamedParameters","value","key","slice"],"sources":["../src/sql-string.js"],"sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (['sqlite', 'mssql', 'oracle'].includes(dialect)) {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n    case 'bigint':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (['postgres', 'sqlite', 'mssql', 'snowflake', 'db2'].includes(dialect)) {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else if (dialect === 'oracle' && typeof val === 'string') {\n    if (val.startsWith('TO_TIMESTAMP') || val.startsWith('TO_DATE')) {\n      return val;\n    }\n    val = val.replace(/'/g, \"''\");\n  } else {\n\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}