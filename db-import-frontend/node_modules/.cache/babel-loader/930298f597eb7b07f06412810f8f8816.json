{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { StringUtils } from './StringUtils.js';\nimport { Constants } from './Constants.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\nvar ProtocolUtils = /** @class */function () {\n  function ProtocolUtils() {}\n  /**\r\n   * Appends user state with random guid, or returns random guid.\r\n   * @param userState\r\n   * @param randomGuid\r\n   */\n  ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\n    var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\n  };\n  /**\r\n   * Generates the state value used by the common library.\r\n   * @param randomGuid\r\n   * @param cryptoObj\r\n   */\n  ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n    }\n    // Create a state object containing a unique id and the timestamp of the request creation\n    var stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n    if (meta) {\n      stateObj.meta = meta;\n    }\n    var stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  };\n  /**\r\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n   * @param state\r\n   * @param cryptoObj\r\n   */\n  ProtocolUtils.parseRequestState = function (cryptoObj, state) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n    }\n    if (StringUtils.isEmpty(state)) {\n      throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n    }\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      var splitState = state.split(Constants.RESOURCE_DELIM);\n      var libraryState = splitState[0];\n      var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;\n      var libraryStateString = cryptoObj.base64Decode(libraryState);\n      var libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: !StringUtils.isEmpty(userState) ? userState : Constants.EMPTY_STRING,\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  return ProtocolUtils;\n}();\nexport { ProtocolUtils };","map":{"version":3,"names":["ProtocolUtils","setRequestState","cryptoObj","userState","meta","libraryState","generateLibraryState","StringUtils","isEmpty","Constants","RESOURCE_DELIM","ClientAuthError","createNoCryptoObjectError","stateObj","id","createNewGuid","stateString","JSON","stringify","base64Encode","parseRequestState","state","createInvalidStateError","splitState","split","length","slice","join","EMPTY_STRING","libraryStateString","base64Decode","libraryStateObj","parse","userRequestState","e"],"sources":["../../src/utils/ProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"./StringUtils\";\nimport { Constants } from \"./Constants\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * Type which defines the object that is stringified, encoded and sent in the state value.\n * Contains the following:\n * - id - unique identifier for this request\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\n * - platformState - string value sent from the platform.\n */\nexport type LibraryStateObject = {\n    id: string,\n    meta?: Record<string, string>\n};\n\n/**\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\n */\nexport type RequestStateObject = {\n    userRequestState: string,\n    libraryState: LibraryStateObject\n};\n\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nexport class ProtocolUtils {\n\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState \n     * @param randomGuid \n     */\n    static setRequestState(cryptoObj: ICrypto, userState?: string, meta?: Record<string, string>): string {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return !StringUtils.isEmpty(userState) ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid \n     * @param cryptoObj \n     */\n    static generateLibraryState(cryptoObj: ICrypto, meta?: Record<string, string>): string {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n        }\n\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj: LibraryStateObject = {\n            id: cryptoObj.createNewGuid()\n        };\n\n        if (meta) {\n            stateObj.meta = meta;\n        }\n\n        const stateString = JSON.stringify(stateObj);\n\n        return cryptoObj.base64Encode(stateString);\n    }\n\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state \n     * @param cryptoObj \n     */\n    static parseRequestState(cryptoObj: ICrypto, state: string): RequestStateObject {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n        }\n\n        if (StringUtils.isEmpty(state)) {\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n        }\n\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString) as LibraryStateObject;\n            return {\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : Constants.EMPTY_STRING,\n                libraryState: libraryStateObj\n            };\n        } catch(e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AA2BH;;AAEG;AACH,IAAAA,aAAA;EAAA,SAAAA,cAAA,G;EAEI;;;;AAIG;EACIA,aAAA,CAAAC,eAAe,GAAtB,UAAuBC,SAAkB,EAAEC,SAAkB,EAAEC,IAA6B;IACxF,IAAMC,YAAY,GAAGL,aAAa,CAACM,oBAAoB,CAACJ,SAAS,EAAEE,IAAI,CAAC;IACxE,OAAO,CAACG,WAAW,CAACC,OAAO,CAACL,SAAS,CAAC,GAAG,KAAGE,YAAY,GAAGI,SAAS,CAACC,cAAc,GAAGP,SAAW,GAAGE,YAAY;GACnH;EAED;;;;AAIG;EACIL,aAAA,CAAAM,oBAAoB,GAA3B,UAA4BJ,SAAkB,EAAEE,IAA6B;IACzE,IAAI,CAACF,SAAS,EAAE;MACZ,MAAMS,eAAe,CAACC,yBAAyB,CAAC,sBAAsB,CAAC;IAC1E;;IAGD,IAAMC,QAAQ,GAAuB;MACjCC,EAAE,EAAEZ,SAAS,CAACa,aAAa;KAC9B;IAED,IAAIX,IAAI,EAAE;MACNS,QAAQ,CAACT,IAAI,GAAGA,IAAI;IACvB;IAED,IAAMY,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC;IAE5C,OAAOX,SAAS,CAACiB,YAAY,CAACH,WAAW,CAAC;GAC7C;EAED;;;;AAIG;EACIhB,aAAA,CAAAoB,iBAAiB,GAAxB,UAAyBlB,SAAkB,EAAEmB,KAAa;IACtD,IAAI,CAACnB,SAAS,EAAE;MACZ,MAAMS,eAAe,CAACC,yBAAyB,CAAC,mBAAmB,CAAC;IACvE;IAED,IAAIL,WAAW,CAACC,OAAO,CAACa,KAAK,CAAC,EAAE;MAC5B,MAAMV,eAAe,CAACW,uBAAuB,CAACD,KAAK,EAAE,gCAAgC,CAAC;IACzF;IAED,IAAI;;MAEA,IAAME,UAAU,GAAGF,KAAK,CAACG,KAAK,CAACf,SAAS,CAACC,cAAc,CAAC;MACxD,IAAML,YAAY,GAAGkB,UAAU,CAAC,CAAC,CAAC;MAClC,IAAMpB,SAAS,GAAGoB,UAAU,CAACE,MAAM,GAAG,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAClB,SAAS,CAACC,cAAc,CAAC,GAAGD,SAAS,CAACmB,YAAY;MACrH,IAAMC,kBAAkB,GAAG3B,SAAS,CAAC4B,YAAY,CAACzB,YAAY,CAAC;MAC/D,IAAM0B,eAAe,GAAGd,IAAI,CAACe,KAAK,CAACH,kBAAkB,CAAuB;MAC5E,OAAO;QACHI,gBAAgB,EAAE,CAAC1B,WAAW,CAACC,OAAO,CAACL,SAAS,CAAC,GAAGA,SAAS,GAAGM,SAAS,CAACmB,YAAY;QACtFvB,YAAY,EAAE0B;OACjB;IACJ,EAAC,OAAMG,CAAC,EAAE;MACP,MAAMvB,eAAe,CAACW,uBAAuB,CAACD,KAAK,EAAEa,CAAC,CAAC;IAC1D;GACJ;EACL,OAAClC,aAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}