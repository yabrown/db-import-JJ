{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar AbstractDialect = require(\"../abstract\");\nvar ConnectionManager = require(\"./connection-manager\");\nvar Query = require(\"./query\");\nvar QueryGenerator = require(\"./query-generator\");\nvar DataTypes = require(\"../../data-types\").mysql;\nvar _require = require(\"./query-interface\"),\n  MySQLQueryInterface = _require.MySQLQueryInterface;\nvar MysqlDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(MysqlDialect, _AbstractDialect);\n  var _super = _createSuper(MysqlDialect);\n  function MysqlDialect(sequelize) {\n    var _this;\n    _classCallCheck(this, MysqlDialect);\n    _this = _super.call(this);\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_this),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new MySQLQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n  _createClass(MysqlDialect, [{\n    key: \"canBackslashEscape\",\n    value: function canBackslashEscape() {\n      return true;\n    }\n  }]);\n  return MysqlDialect;\n}(AbstractDialect);\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\nMysqlDialect.prototype.defaultVersion = \"5.7.0\";\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = \"mysql\";\nMysqlDialect.prototype.TICK_CHAR = \"`\";\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\nmodule.exports = MysqlDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","mysql","_require","MySQLQueryInterface","MysqlDialect","_AbstractDialect","_inherits","_super","_createSuper","sequelize","_this","_classCallCheck","call","connectionManager","_assertThisInitialized","queryGenerator","_dialect","queryInterface","_createClass","key","value","canBackslashEscape","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["../../../src/dialects/mysql/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySQLQueryInterface } = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n\n  canBackslashEscape() {\n    return true;\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMysqlDialect.prototype.defaultVersion = '5.7.0'; // minimum supported version\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"],"mappings":";;;;;;;AAEA,IAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,IAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,IAAME,iBAAA,GAAoBF,OAAA,CAAQ;AAClC,IAAMG,KAAA,GAAQH,OAAA,CAAQ;AACtB,IAAMI,cAAA,GAAiBJ,OAAA,CAAQ;AAC/B,IAAMK,SAAA,GAAYL,OAAA,CAAQ,oBAAoBM,KAAA;AAC9C,IAAAC,QAAA,GAAgCP,OAAA,CAAQ;EAAhCQ,mBAAA,GAAAD,QAAA,CAAAC,mBAAA;AAAgC,IAExCC,YAAA,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EACE,SAAAA,aAAYK,SAAA,EAAW;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,YAAA;IACrBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IACAF,KAAA,CAAKD,SAAA,GAAYA,SAAA;IACjBC,KAAA,CAAKG,iBAAA,GAAoB,IAAIhB,iBAAA,CAAAiB,sBAAA,CAAAJ,KAAA,GAAwBD,SAAA;IACrDC,KAAA,CAAKK,cAAA,GAAiB,IAAIhB,cAAA,CAAe;MACvCiB,QAAA,EAAAF,sBAAA,CAAAJ,KAAA,CAAU;MACVD,SAAA,EAAAA;IAAA;IAEFC,KAAA,CAAKO,cAAA,GAAiB,IAAId,mBAAA,CACxBM,SAAA,EACAC,KAAA,CAAKK,cAAA;IAAA,OAAAL,KAAA;EAAA;EAAAQ,YAAA,CAAAd,YAAA;IAAAe,GAAA;IAAAC,KAAA,EAIT,SAAAC,mBAAA,EAAqB;MACnB,OAAO;IAAA;EAAA;EAAA,OAAAjB,YAAA;AAAA,EAhBgBR,eAAA;AAoB3BQ,YAAA,CAAakB,SAAA,CAAUC,QAAA,GAAW7B,CAAA,CAAE8B,KAAA,CAClC9B,CAAA,CAAE+B,SAAA,CAAU7B,eAAA,CAAgB0B,SAAA,CAAUC,QAAA,GACtC;EACE,aAAa;EACb,mBAAmB;EACnBG,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,sCAAA,EAAwC;EACxCC,OAAA,EAAS;IACPC,gBAAA,EAAkB;IAClBC,iBAAA,EAAmB;EAAA;EAErBC,KAAA,EAAO;IACLC,OAAA,EAAS;IACTC,MAAA,EAAQ;IACRC,MAAA,EAAQ;IACRC,IAAA,EAAM;IACNC,KAAA,EAAO;EAAA;EAETC,WAAA,EAAa;IACXC,cAAA,EAAgB;IAChBC,KAAA,EAAO;EAAA;EAETC,aAAA,EAAe;EACfC,UAAA,EAAY;EACZC,OAAA,EAAS;EACTC,QAAA,EAAU;EACVC,IAAA,EAAM;EACNC,MAAA,EAAQ;AAAA;AAIZ1C,YAAA,CAAakB,SAAA,CAAUyB,cAAA,GAAiB;AACxC3C,YAAA,CAAakB,SAAA,CAAUxB,KAAA,GAAQA,KAAA;AAC/BM,YAAA,CAAakB,SAAA,CAAUvB,cAAA,GAAiBA,cAAA;AACxCK,YAAA,CAAakB,SAAA,CAAUtB,SAAA,GAAYA,SAAA;AACnCI,YAAA,CAAakB,SAAA,CAAU0B,IAAA,GAAO;AAC9B5C,YAAA,CAAakB,SAAA,CAAU2B,SAAA,GAAY;AACnC7C,YAAA,CAAakB,SAAA,CAAU4B,cAAA,GAAiB9C,YAAA,CAAakB,SAAA,CAAU2B,SAAA;AAC/D7C,YAAA,CAAakB,SAAA,CAAU6B,eAAA,GAAkB/C,YAAA,CAAakB,SAAA,CAAU2B,SAAA;AAEhEG,MAAA,CAAOC,OAAA,GAAUjD,YAAA"},"metadata":{},"sourceType":"script"}