{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar EventHandler = /** @class */function () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n  EventHandler.prototype.enableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  };\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n  EventHandler.prototype.disableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n  EventHandler.prototype.handleAccountCacheChange = function (e) {\n    try {\n      var cacheValue = e.newValue || e.oldValue;\n      if (!cacheValue) {\n        return;\n      }\n      var parsedValue = JSON.parse(cacheValue);\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n      var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      var accountInfo = accountEntity.getAccountInfo();\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n  return EventHandler;\n}();\nexport { EventHandler };","map":{"version":3,"names":["EventHandler","logger","browserCrypto","eventCallbacks","Map","listeningToStorageEvents","handleAccountCacheChange","bind","prototype","addEventCallback","callback","window","callbackId","createNewGuid","set","verbose","removeEventCallback","delete","enableAccountStorageEvents","addEventListener","disableAccountStorageEvents","removeEventListener","emitEvent","eventType","interactionType","payload","error","_this","message_1","timestamp","Date","now","info","forEach","apply","e","cacheValue","newValue","oldValue","parsedValue","JSON","parse","AccountEntity","isAccountEntity","accountEntity","CacheManager","toObject","accountInfo","getAccountInfo","EventType","ACCOUNT_ADDED","undefined","ACCOUNT_REMOVED"],"sources":["../../src/event/EventHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, Logger, AccountEntity, CacheManager } from \"@azure/msal-common\";\r\nimport { InteractionType } from \"../utils/BrowserConstants\";\r\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\r\nimport { EventType } from \"./EventType\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<string, EventCallbackFunction>;\r\n    private logger: Logger;\r\n    private browserCrypto: ICrypto;\r\n    private listeningToStorageEvents: boolean;\r\n\r\n    constructor(logger: Logger, browserCrypto: ICrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n        this.listeningToStorageEvents = false;\r\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\r\n    \r\n            return callbackId;\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (!this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Adding account storage listener.\");\r\n            this.listeningToStorageEvents = true;\r\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\r\n        } else {\r\n            this.logger.verbose(\"Account storage listener already registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Removing account storage listener.\");\r\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\r\n            this.listeningToStorageEvents = false;\r\n        } else {\r\n            this.logger.verbose(\"No account storage listener registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\r\n        if (typeof window !== \"undefined\") {\r\n            const message: EventMessage = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n\r\n            this.logger.info(`Emitting event: ${eventType}`);\r\n\r\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\r\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\r\n                callback.apply(null, [message]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */\r\n    private handleAccountCacheChange(e: StorageEvent): void {\r\n        try {\r\n            const cacheValue = e.newValue || e.oldValue;\r\n            if (!cacheValue) {\r\n                return;\r\n            }\r\n            const parsedValue = JSON.parse(cacheValue);\r\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\r\n                return;\r\n            }\r\n            const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedValue);\r\n            const accountInfo = accountEntity.getAccountInfo();\r\n            if (!e.oldValue && e.newValue) {\r\n                this.logger.info(\"Account was added to cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\r\n            } else if (!e.newValue && e.oldValue) {\r\n                this.logger.info(\"Account was removed from cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\r\n            }\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}