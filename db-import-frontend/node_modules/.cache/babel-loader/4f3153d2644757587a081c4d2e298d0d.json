{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __markAsModule = function __markAsModule(target) {\n  return __defProp(target, \"__esModule\", {\n    value: true\n  });\n};\nvar __export = function __export(target, all) {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n__export(exports, {\n  OracleQuery: function OracleQuery() {\n    return _OracleQuery;\n  }\n});\nvar AbstractQuery = require(\"../abstract/query\");\nvar SequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"oracle\");\nvar _ = require(\"lodash\");\nvar Utils = require(\"../../utils\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"sql:oracle\");\nvar _OracleQuery = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(_OracleQuery, _AbstractQuery);\n  var _super = _createSuper(_OracleQuery);\n  function _OracleQuery(connection, sequelize, options) {\n    var _this;\n    _classCallCheck(this, _OracleQuery);\n    _this = _super.call(this, connection, sequelize, options);\n    _this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n    _this.checkLoggingOption();\n    _this.outFormat = options.outFormat || _this.sequelize.connectionManager.lib.OBJECT;\n    return _this;\n  }\n  _createClass(_OracleQuery, [{\n    key: \"getInsertIdField\",\n    value: function getInsertIdField() {\n      return \"id\";\n    }\n  }, {\n    key: \"getExecOptions\",\n    value: function getExecOptions() {\n      var execOpts = {\n        outFormat: this.outFormat,\n        autoCommit: this.autoCommit\n      };\n      var oracledb = this.sequelize.connectionManager.lib;\n      if (this.model && this.isSelectQuery()) {\n        var fInfo = {};\n        var keys = Object.keys(this.model.tableAttributes);\n        for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n          var key = _keys[_i];\n          var keyValue = this.model.tableAttributes[key];\n          if (keyValue.type.key === \"DECIMAL\") {\n            fInfo[key] = {\n              type: oracledb.STRING\n            };\n          }\n          if (keyValue.type.key === \"BIGINT\") {\n            fInfo[key] = {\n              type: oracledb.STRING\n            };\n          }\n        }\n        if (fInfo) {\n          execOpts.fetchInfo = fInfo;\n        }\n      }\n      return execOpts;\n    }\n  }, {\n    key: \"_convertBindAttributes\",\n    value: function _convertBindAttributes(bindingDictionary, oracledb) {\n      if (this.model && this.options[bindingDictionary]) {\n        var keys = Object.keys(this.model.tableAttributes);\n        for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n          var key = _keys2[_i2];\n          var keyValue = this.model.tableAttributes[key];\n          if (keyValue.type.key === \"BIGINT\") {\n            var oldBinding = this.options[bindingDictionary][key];\n            if (oldBinding) {\n              this.options[bindingDictionary][key] = __spreadProps(__spreadValues({}, oldBinding), {\n                type: oracledb.STRING,\n                maxSize: 1e7\n              });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sql, parameters) {\n        var oracledb, complete, outParameters, bindParameters, bindDef, result, execOpts, executePromise, _result2;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              oracledb = this.sequelize.connectionManager.lib;\n              complete = this._logQuery(sql, debug, parameters);\n              outParameters = [];\n              bindParameters = [];\n              bindDef = [];\n              if (!sql.match(/END;$/)) {\n                this.sql = sql.replace(/; *$/, \"\");\n              } else {\n                this.sql = sql;\n              }\n              if (this.options.outBindAttributes && (Array.isArray(parameters) || _.isPlainObject(parameters))) {\n                this._convertBindAttributes(\"outBindAttributes\", oracledb);\n                outParameters.push.apply(outParameters, _toConsumableArray(Object.values(this.options.outBindAttributes)));\n                if (this.isUpsertQuery()) {\n                  outParameters.push({\n                    dir: oracledb.BIND_OUT\n                  });\n                }\n              }\n              this.bindParameters = outParameters;\n              if (Array.isArray(parameters) || _.isPlainObject(parameters)) {\n                if (this.options.executeMany) {\n                  this._convertBindAttributes(\"inbindAttributes\", oracledb);\n                  bindDef.push.apply(bindDef, _toConsumableArray(Object.values(this.options.inbindAttributes)));\n                  bindDef.push.apply(bindDef, outParameters);\n                  this.bindParameters = parameters;\n                } else if (this.isRawQuery()) {\n                  this.bindParameters = parameters;\n                } else {\n                  Object.values(parameters).forEach(function (value) {\n                    bindParameters.push(value);\n                  });\n                  bindParameters.push.apply(bindParameters, outParameters);\n                  Object.assign(this.bindParameters, bindParameters);\n                }\n              }\n              if (!this.sql.startsWith(\"BEGIN TRANSACTION\")) {\n                _context.next = 12;\n                break;\n              }\n              this.autocommit = false;\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 12:\n              if (!this.sql.startsWith(\"SET AUTOCOMMIT ON\")) {\n                _context.next = 15;\n                break;\n              }\n              this.autocommit = true;\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 15:\n              if (!this.sql.startsWith(\"SET AUTOCOMMIT OFF\")) {\n                _context.next = 18;\n                break;\n              }\n              this.autocommit = false;\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 18:\n              if (!this.sql.startsWith(\"DECLARE x NUMBER\")) {\n                _context.next = 32;\n                break;\n              }\n              if (this.autoCommit === void 0) {\n                if (this.connection.uuid) {\n                  this.autoCommit = false;\n                } else {\n                  this.autoCommit = true;\n                }\n              }\n              _context.prev = 20;\n              _context.next = 23;\n              return this.connection.execute(this.sql, this.bindParameters, {\n                autoCommit: this.autoCommit\n              });\n            case 23:\n              return _context.abrupt(\"return\", Object.create(null));\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](20);\n              throw this.formatError(_context.t0);\n            case 29:\n              _context.prev = 29;\n              complete();\n              return _context.finish(29);\n            case 32:\n              if (!this.sql.startsWith(\"BEGIN\")) {\n                _context.next = 49;\n                break;\n              }\n              if (this.autoCommit === void 0) {\n                if (this.connection.uuid) {\n                  this.autoCommit = false;\n                } else {\n                  this.autoCommit = true;\n                }\n              }\n              _context.prev = 34;\n              _context.next = 37;\n              return this.connection.execute(this.sql, this.bindParameters, {\n                outFormat: this.outFormat,\n                autoCommit: this.autoCommit\n              });\n            case 37:\n              result = _context.sent;\n              if (Array.isArray(result.outBinds)) {\n                _context.next = 40;\n                break;\n              }\n              return _context.abrupt(\"return\", [result.outBinds]);\n            case 40:\n              return _context.abrupt(\"return\", result.outBinds);\n            case 43:\n              _context.prev = 43;\n              _context.t1 = _context[\"catch\"](34);\n              throw this.formatError(_context.t1);\n            case 46:\n              _context.prev = 46;\n              complete();\n              return _context.finish(46);\n            case 49:\n              if (!this.sql.startsWith(\"COMMIT TRANSACTION\")) {\n                _context.next = 62;\n                break;\n              }\n              _context.prev = 50;\n              _context.next = 53;\n              return this.connection.commit();\n            case 53:\n              return _context.abrupt(\"return\", Object.create(null));\n            case 56:\n              _context.prev = 56;\n              _context.t2 = _context[\"catch\"](50);\n              throw this.formatError(_context.t2);\n            case 59:\n              _context.prev = 59;\n              complete();\n              return _context.finish(59);\n            case 62:\n              if (!this.sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n                _context.next = 75;\n                break;\n              }\n              _context.prev = 63;\n              _context.next = 66;\n              return this.connection.rollback();\n            case 66:\n              return _context.abrupt(\"return\", Object.create(null));\n            case 69:\n              _context.prev = 69;\n              _context.t3 = _context[\"catch\"](63);\n              throw this.formatError(_context.t3);\n            case 72:\n              _context.prev = 72;\n              complete();\n              return _context.finish(72);\n            case 75:\n              if (!this.sql.startsWith(\"SET TRANSACTION\")) {\n                _context.next = 88;\n                break;\n              }\n              _context.prev = 76;\n              _context.next = 79;\n              return this.connection.execute(this.sql, [], {\n                autoCommit: false\n              });\n            case 79:\n              return _context.abrupt(\"return\", Object.create(null));\n            case 82:\n              _context.prev = 82;\n              _context.t4 = _context[\"catch\"](76);\n              throw this.formatError(_context.t4);\n            case 85:\n              _context.prev = 85;\n              complete();\n              return _context.finish(85);\n            case 88:\n              if (this.autoCommit === void 0) {\n                if (this.connection.uuid) {\n                  this.autoCommit = false;\n                } else {\n                  this.autoCommit = true;\n                }\n              }\n              if (\"inputParameters\" in this.options && this.options.inputParameters !== null) {\n                Object.assign(this.bindParameters, this.options.inputParameters);\n              }\n              execOpts = this.getExecOptions();\n              if (this.options.executeMany && bindDef.length > 0) {\n                execOpts.bindDefs = bindDef;\n              }\n              executePromise = this.options.executeMany ? this.connection.executeMany(this.sql, this.bindParameters, execOpts) : this.connection.execute(this.sql, this.bindParameters, execOpts);\n              _context.prev = 93;\n              _context.next = 96;\n              return executePromise;\n            case 96:\n              _result2 = _context.sent;\n              return _context.abrupt(\"return\", this.formatResults(_result2));\n            case 100:\n              _context.prev = 100;\n              _context.t5 = _context[\"catch\"](93);\n              throw this.formatError(_context.t5);\n            case 103:\n              _context.prev = 103;\n              complete();\n              return _context.finish(103);\n            case 106:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[20, 26, 29, 32], [34, 43, 46, 49], [50, 56, 59, 62], [63, 69, 72, 75], [76, 82, 85, 88], [93, 100, 103, 106]]);\n      }));\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n  }, {\n    key: \"_getAttributeMap\",\n    value: function _getAttributeMap(attrsMap, rawAttributes) {\n      var _this2 = this;\n      attrsMap = Object.assign(attrsMap, _.reduce(rawAttributes, function (mp, _2, key) {\n        var catalogKey = _this2.sequelize.queryInterface.queryGenerator.getCatalogName(key);\n        mp[catalogKey] = key;\n        return mp;\n      }, {}));\n    }\n  }, {\n    key: \"_processRows\",\n    value: function _processRows(rows) {\n      var _this3 = this;\n      var result = rows;\n      var attrsMap = {};\n      if (this.sequelize.options.quoteIdentifiers === false) {\n        attrsMap = _.reduce(this.options.attributes, function (mp, v) {\n          if (typeof v === \"object\") {\n            v = v[1];\n          }\n          var catalogv = _this3.sequelize.queryInterface.queryGenerator.getCatalogName(v);\n          mp[catalogv] = v;\n          return mp;\n        }, {});\n        if (this.model) {\n          this._getAttributeMap(attrsMap, this.model.rawAttributes);\n        }\n        if (this.options.aliasesMapping) {\n          var obj = Object.fromEntries(this.options.aliasesMapping);\n          rows = rows.map(function (row) {\n            return _.toPairs(row).reduce(function (acc, _ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var mapping = Object.values(obj).find(function (element) {\n                var catalogElement = _this3.sequelize.queryInterface.queryGenerator.getCatalogName(element);\n                return catalogElement === key;\n              });\n              if (mapping) acc[mapping || key] = value;\n              return acc;\n            }, {});\n          });\n        }\n        result = rows.map(function (row) {\n          return _.mapKeys(row, function (value, key) {\n            var targetAttr = attrsMap[key];\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      if (this.model) {\n        result = result.map(function (row) {\n          return _.mapValues(row, function (value, key) {\n            if (_this3.model.rawAttributes[key] && _this3.model.rawAttributes[key].type) {\n              var typeid = _this3.model.rawAttributes[key].type.toLocaleString();\n              if (_this3.model.rawAttributes[key].type.key === \"JSON\") {\n                value = JSON.parse(value);\n              }\n              if (typeid.indexOf(\"(\") > -1 && _this3.model.rawAttributes[key].type.key !== \"BOOLEAN\") {\n                typeid = typeid.substr(0, typeid.indexOf(\"(\"));\n              }\n              var parse = parserStore.get(typeid);\n              if (value !== null & !!parse) {\n                value = parse(value);\n              }\n            }\n            return value;\n          });\n        });\n      }\n      return result;\n    }\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data) {\n      var result = this.instance;\n      if (this.isInsertQuery(data)) {\n        var insertData;\n        if (data.outBinds) {\n          var keys = Object.keys(this.options.outBindAttributes);\n          insertData = data.outBinds;\n          if (this.instance) {\n            insertData = [insertData];\n          }\n          var res = insertData.map(function (row) {\n            var obj = {};\n            row.forEach(function (element, index) {\n              obj[keys[index]] = element[0];\n            });\n            return obj;\n          });\n          insertData = res;\n          if (!this.instance) {\n            result = res;\n          }\n        }\n        this.handleInsertQuery(insertData);\n        return [result, data.rowsAffected];\n      }\n      if (this.isShowTablesQuery()) {\n        result = this.handleShowTablesQuery(data.rows);\n      } else if (this.isDescribeQuery()) {\n        result = {};\n        var table = Object.keys(this.sequelize.models);\n        var modelAttributes = {};\n        if (this.sequelize.models && table.length > 0) {\n          this._getAttributeMap(modelAttributes, this.sequelize.models[table[0]].rawAttributes);\n        }\n        data.rows.forEach(function (_result) {\n          if (_result.Default) {\n            _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n          }\n          if (!(modelAttributes[_result.COLUMN_NAME] in result)) {\n            var key = modelAttributes[_result.COLUMN_NAME];\n            if (!key) {\n              key = _result.COLUMN_NAME;\n            }\n            result[key] = {\n              type: _result.DATA_TYPE.toUpperCase(),\n              allowNull: _result.NULLABLE === \"N\" ? false : true,\n              defaultValue: void 0,\n              primaryKey: _result.CONSTRAINT_TYPE === \"P\"\n            };\n          }\n        });\n      } else if (this.isShowIndexesQuery()) {\n        result = this.handleShowIndexesQuery(data.rows);\n      } else if (this.isSelectQuery()) {\n        var rows = data.rows;\n        var result2 = this._processRows(rows);\n        return this.handleSelectQuery(result2);\n      } else if (this.isCallQuery()) {\n        result = data.rows[0];\n      } else if (this.isUpdateQuery()) {\n        result = [result, data.rowsAffected];\n      } else if (this.isBulkUpdateQuery()) {\n        result = data.rowsAffected;\n      } else if (this.isBulkDeleteQuery()) {\n        result = data.rowsAffected;\n      } else if (this.isVersionQuery()) {\n        var version = data.rows[0].VERSION_FULL;\n        if (version) {\n          var versions = version.split(\".\");\n          result = \"\".concat(versions[0], \".\").concat(versions[1], \".\").concat(versions[2]);\n        } else {\n          result = \"0.0.0\";\n        }\n      } else if (this.isForeignKeysQuery()) {\n        result = data.rows;\n      } else if (this.isUpsertQuery()) {\n        data = data.outBinds;\n        var _keys3 = Object.keys(this.options.outBindAttributes);\n        var obj = {};\n        for (var k in _keys3) {\n          obj[_keys3[k]] = data[k];\n        }\n        obj.isUpdate = data[data.length - 1];\n        data = obj;\n        result = [{\n          isNewRecord: data.isUpdate,\n          value: data\n        }, data.isUpdate == 0];\n      } else if (this.isShowConstraintsQuery()) {\n        result = this.handleShowConstraintsQuery(data);\n      } else if (this.isRawQuery()) {\n        if (data && data.rows) {\n          return [data.rows, data.metaData];\n        }\n        return [data, data];\n      }\n      return result;\n    }\n  }, {\n    key: \"handleShowConstraintsQuery\",\n    value: function handleShowConstraintsQuery(data) {\n      return data.rows.map(function (result) {\n        var constraint = {};\n        for (var key in result) {\n          constraint[_.camelCase(key)] = result[key].toLowerCase();\n        }\n        return constraint;\n      });\n    }\n  }, {\n    key: \"handleShowTablesQuery\",\n    value: function handleShowTablesQuery(results) {\n      return results.map(function (resultSet) {\n        return {\n          tableName: resultSet.TABLE_NAME,\n          schema: resultSet.TABLE_SCHEMA\n        };\n      });\n    }\n  }, {\n    key: \"formatError\",\n    value: function formatError(err) {\n      var _this4 = this;\n      var match;\n      match = err.message.match(/unique constraint ([\\s\\S]*) violated/);\n      if (match && match.length > 1) {\n        match[1] = match[1].replace(\"(\", \"\").replace(\")\", \"\").split(\".\")[1];\n        var errors = [];\n        var fields = [],\n          message = \"Validation error\",\n          uniqueKey = null;\n        if (this.model) {\n          var uniqueKeys = Object.keys(this.model.uniqueKeys);\n          var currKey = uniqueKeys.find(function (key) {\n            return key.toUpperCase() === match[1].toUpperCase() || key.toUpperCase() === \"\\\"\".concat(match[1].toUpperCase(), \"\\\"\");\n          });\n          if (currKey) {\n            uniqueKey = this.model.uniqueKeys[currKey];\n            fields = uniqueKey.fields;\n          }\n          if (uniqueKey && !!uniqueKey.msg) {\n            message = uniqueKey.msg;\n          }\n          fields.forEach(function (field) {\n            errors.push(new SequelizeErrors.ValidationErrorItem(_this4.getUniqueConstraintErrorMessage(field), \"unique violation\", field, null));\n          });\n        }\n        return new SequelizeErrors.UniqueConstraintError({\n          message: message,\n          errors: errors,\n          err: err,\n          fields: fields\n        });\n      }\n      match = err.message.match(/ORA-02291/) || err.message.match(/ORA-02292/);\n      if (match && match.length > 0) {\n        return new SequelizeErrors.ForeignKeyConstraintError({\n          fields: null,\n          index: match[1],\n          parent: err\n        });\n      }\n      match = err.message.match(/ORA-02443/);\n      if (match && match.length > 0) {\n        return new SequelizeErrors.UnknownConstraintError(match[1]);\n      }\n      return new SequelizeErrors.DatabaseError(err);\n    }\n  }, {\n    key: \"isShowIndexesQuery\",\n    value: function isShowIndexesQuery() {\n      return this.sql.indexOf(\"SELECT i.index_name,i.table_name, i.column_name, u.uniqueness\") > -1;\n    }\n  }, {\n    key: \"isSelectCountQuery\",\n    value: function isSelectCountQuery() {\n      return this.sql.toUpperCase().indexOf(\"SELECT COUNT(\") > -1;\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      var acc = [];\n      data.forEach(function (indexRecord) {\n        if (!acc[indexRecord.INDEX_NAME]) {\n          acc[indexRecord.INDEX_NAME] = {\n            unique: indexRecord.UNIQUENESS === \"UNIQUE\" ? true : false,\n            primary: indexRecord.CONSTRAINT_TYPE === \"P\",\n            name: indexRecord.INDEX_NAME.toLowerCase(),\n            tableName: indexRecord.TABLE_NAME.toLowerCase(),\n            type: void 0\n          };\n          acc[indexRecord.INDEX_NAME].fields = [];\n        }\n        acc[indexRecord.INDEX_NAME].fields.push({\n          attribute: indexRecord.COLUMN_NAME,\n          length: void 0,\n          order: indexRecord.DESCEND,\n          collate: void 0\n        });\n      });\n      var returnIndexes = [];\n      var accKeys = Object.keys(acc);\n      for (var _i3 = 0, _accKeys = accKeys; _i3 < _accKeys.length; _i3++) {\n        var accKey = _accKeys[_i3];\n        var columns = {};\n        columns.fields = acc[accKey].fields;\n        if (acc[accKey].name.match(/sys_c[0-9]*/)) {\n          acc[accKey].name = Utils.nameIndex(columns, acc[accKey].tableName).name;\n        }\n        returnIndexes.push(acc[accKey]);\n      }\n      return returnIndexes;\n    }\n  }, {\n    key: \"handleInsertQuery\",\n    value: function handleInsertQuery(results, metaData) {\n      if (this.instance && results.length > 0) {\n        if (\"pkReturnVal\" in results[0]) {\n          results[0][this.model.primaryKeyAttribute] = results[0].pkReturnVal;\n          delete results[0].pkReturnVal;\n        }\n        var autoIncrementField = this.model.autoIncrementAttribute;\n        var autoIncrementFieldAlias = null,\n          id = null;\n        if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementField) && this.model.rawAttributes[autoIncrementField].field !== void 0) autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field;\n        id = id || results && results[0][this.getInsertIdField()];\n        id = id || metaData && metaData[this.getInsertIdField()];\n        id = id || results && results[0][autoIncrementField];\n        id = id || autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias];\n        this.instance[autoIncrementField] = id;\n      }\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var replacementFunc = function replacementFunc(match, key, values2) {\n        if (values2[key] !== void 0) {\n          return \":\".concat(key);\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      return [sql, values];\n    }\n  }]);\n  return _OracleQuery;\n}(AbstractQuery);","map":{"version":3,"names":["__export","exports","OracleQuery","AbstractQuery","require","SequelizeErrors","parserStore","_","Utils","_require","logger","debug","debugContext","_AbstractQuery","_inherits","_OracleQuery","_super","_createSuper","connection","sequelize","options","_this","_classCallCheck","call","extend","logging","console","log","plain","raw","checkLoggingOption","outFormat","connectionManager","lib","OBJECT","_createClass","key","value","getInsertIdField","getExecOptions","execOpts","autoCommit","oracledb","model","isSelectQuery","fInfo","keys","Object","tableAttributes","_i","_keys","length","keyValue","type","STRING","fetchInfo","_convertBindAttributes","bindingDictionary","_i2","_keys2","oldBinding","__spreadProps","__spreadValues","maxSize","_run","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sql","parameters","complete","outParameters","bindParameters","bindDef","result","executePromise","_result2","wrap","_callee$","_context","prev","next","_logQuery","match","replace","outBindAttributes","Array","isArray","isPlainObject","push","apply","_toConsumableArray","values","isUpsertQuery","dir","BIND_OUT","executeMany","inbindAttributes","isRawQuery","forEach","assign","startsWith","autocommit","abrupt","Promise","resolve","uuid","execute","create","t0","formatError","finish","sent","outBinds","t1","commit","t2","rollback","t3","t4","inputParameters","bindDefs","formatResults","t5","stop","run","_x","_x2","arguments","_getAttributeMap","attrsMap","rawAttributes","_this2","reduce","mp","_2","catalogKey","queryInterface","queryGenerator","getCatalogName","_processRows","rows","_this3","quoteIdentifiers","attributes","v","catalogv","aliasesMapping","obj","fromEntries","map","row","toPairs","acc","_ref","_ref2","_slicedToArray","mapping","find","element","catalogElement","mapKeys","targetAttr","mapValues","typeid","toLocaleString","JSON","parse","indexOf","substr","get","data","instance","isInsertQuery","insertData","res","index","handleInsertQuery","rowsAffected","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","table","models","modelAttributes","_result","Default","COLUMN_NAME","DATA_TYPE","toUpperCase","allowNull","NULLABLE","defaultValue","primaryKey","CONSTRAINT_TYPE","isShowIndexesQuery","handleShowIndexesQuery","result2","handleSelectQuery","isCallQuery","isUpdateQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","VERSION_FULL","versions","split","concat","isForeignKeysQuery","k","isUpdate","isNewRecord","isShowConstraintsQuery","handleShowConstraintsQuery","metaData","constraint","camelCase","toLowerCase","results","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","err","_this4","message","errors","fields","uniqueKey","uniqueKeys","currKey","msg","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","ForeignKeyConstraintError","parent","UnknownConstraintError","DatabaseError","isSelectCountQuery","indexRecord","INDEX_NAME","unique","UNIQUENESS","primary","name","attribute","order","DESCEND","collate","returnIndexes","accKeys","_i3","_accKeys","accKey","columns","nameIndex","primaryKeyAttribute","pkReturnVal","autoIncrementField","autoIncrementAttribute","autoIncrementFieldAlias","id","prototype","hasOwnProperty","formatBindParameters","dialect","replacementFunc","values2"],"sources":["../../../src/dialects/oracle/query.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst SequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:oracle');\n\nexport class OracleQuery extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, options);\n    this.options = _.extend(\n      {\n        logging: console.log,\n        plain: false,\n        raw: false\n      },\n      options || {}\n    );\n\n    this.checkLoggingOption();\n    this.outFormat = options.outFormat || this.sequelize.connectionManager.lib.OBJECT;\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getExecOptions() {\n    const execOpts = { outFormat: this.outFormat, autoCommit: this.autoCommit };\n\n    // We set the oracledb\n    const oracledb = this.sequelize.connectionManager.lib;\n\n    if (this.model && this.isSelectQuery()) {\n      const fInfo = {};\n      const keys = Object.keys(this.model.tableAttributes);\n      for (const key of keys) {\n        const keyValue = this.model.tableAttributes[key];\n        if (keyValue.type.key === 'DECIMAL') {\n          fInfo[key] = { type: oracledb.STRING };\n        }\n        // Fetching BIGINT as string since, node-oracledb doesn't support JS BIGINT yet\n        if (keyValue.type.key === 'BIGINT') {\n          fInfo[key] = { type: oracledb.STRING };\n        }\n      }\n      if ( fInfo ) {\n        execOpts.fetchInfo = fInfo;\n      }\n    }\n    return execOpts;\n  }\n\n  /**\n   * convert binding values for unsupported\n   * types in connector library\n   *\n   * @param {string} bindingDictionary a string representing the key to scan\n   * @param {object} oracledb native oracle library\n   * @private\n   */\n  _convertBindAttributes(bindingDictionary, oracledb) {\n    if (this.model && this.options[bindingDictionary]) {\n      // check against model if we have some BIGINT\n      const keys = Object.keys(this.model.tableAttributes);\n      for (const key of keys) {\n        const keyValue = this.model.tableAttributes[key];\n        if (keyValue.type.key === 'BIGINT') {\n          const oldBinding = this.options[bindingDictionary][key];\n          if (oldBinding) {\n            this.options[bindingDictionary][key] = {\n              ...oldBinding,\n              type: oracledb.STRING,\n              maxSize: 10000000 //TOTALLY ARBITRARY Number to prevent query failure\n            };\n          }\n        }\n      }\n    }\n  }\n\n  async run(sql, parameters) {\n    // We set the oracledb\n    const oracledb = this.sequelize.connectionManager.lib;\n    const complete = this._logQuery(sql, debug, parameters);\n    const outParameters = [];\n    const bindParameters = [];\n    const bindDef = [];\n\n    if (!sql.match(/END;$/)) {\n      this.sql = sql.replace(/; *$/, '');\n    } else {\n      this.sql = sql;\n    }\n\n    // When this.options.bindAttributes exists then it is an insertQuery/upsertQuery\n    // So we insert the return bind direction and type\n    if (this.options.outBindAttributes && (Array.isArray(parameters) || _.isPlainObject(parameters))) {\n      this._convertBindAttributes('outBindAttributes', oracledb);\n      outParameters.push(...Object.values(this.options.outBindAttributes));\n      // For upsertQuery we need to push the bindDef for isUpdate\n      if (this.isUpsertQuery()) {\n        outParameters.push({ dir: oracledb.BIND_OUT });\n      }\n    }\n\n    this.bindParameters = outParameters;\n    // construct input binds from parameters for single row insert execute call\n    // ex: [3, 4,...]\n    if (Array.isArray(parameters) || _.isPlainObject(parameters)) {\n      if (this.options.executeMany) {\n        // Constructing BindDefs for ExecuteMany call\n        // Building the bindDef for in and out binds\n        this._convertBindAttributes('inbindAttributes', oracledb);\n        bindDef.push(...Object.values(this.options.inbindAttributes));\n        bindDef.push(...outParameters);\n        this.bindParameters = parameters;\n      } else if (this.isRawQuery()) {\n        this.bindParameters = parameters;\n      } else {\n        Object.values(parameters).forEach(value => {\n          bindParameters.push(value);\n        });\n        bindParameters.push(...outParameters);\n        Object.assign(this.bindParameters, bindParameters);\n      }\n    }\n\n    // TRANSACTION SUPPORT\n    if (this.sql.startsWith('BEGIN TRANSACTION')) {\n      this.autocommit = false;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('SET AUTOCOMMIT ON')) {\n      this.autocommit = true;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('SET AUTOCOMMIT OFF')) {\n      this.autocommit = false;\n      return Promise.resolve();\n    }\n    if (this.sql.startsWith('DECLARE x NUMBER')) {\n      // Calling a stored procedure for bulkInsert with NO attributes, returns nothing\n      if (this.autoCommit === undefined) {\n        if (this.connection.uuid) {\n          this.autoCommit = false;\n        } else {\n          this.autoCommit = true;\n        }\n      }\n\n      try {\n        await this.connection.execute(this.sql, this.bindParameters, { autoCommit: this.autoCommit });\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('BEGIN')) {\n      // Call to stored procedures - BEGIN TRANSACTION has been treated before\n      if (this.autoCommit === undefined) {\n        if (this.connection.uuid) {\n          this.autoCommit = false;\n        } else {\n          this.autoCommit = true;\n        }\n      }\n\n      try {\n        const result = await this.connection.execute(this.sql, this.bindParameters, {\n          outFormat: this.outFormat,\n          autoCommit: this.autoCommit\n        });\n        if (!Array.isArray(result.outBinds)) {\n          return [result.outBinds];\n        }\n        return result.outBinds;\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('COMMIT TRANSACTION')) {\n      try {\n        await this.connection.commit();\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('ROLLBACK TRANSACTION')) {\n      try {\n        await this.connection.rollback();\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    if (this.sql.startsWith('SET TRANSACTION')) {\n      try {\n        await this.connection.execute(this.sql, [], { autoCommit: false });\n        return Object.create(null);\n      } catch (error) {\n        throw this.formatError(error);\n      } finally {\n        complete();\n      }\n    }\n    // QUERY SUPPORT\n    // As Oracle does everything in transaction, if autoCommit is not defined, we set it to true\n    if (this.autoCommit === undefined) {\n      if (this.connection.uuid) {\n        this.autoCommit = false;\n      } else {\n        this.autoCommit = true;\n      }\n    }\n\n    // inbind parameters added byname. merge them\n    if ('inputParameters' in this.options && this.options.inputParameters !== null) {\n      Object.assign(this.bindParameters, this.options.inputParameters);\n    }\n    const execOpts = this.getExecOptions();\n    if (this.options.executeMany && bindDef.length > 0) {\n      execOpts.bindDefs = bindDef;\n    }\n    const executePromise = this.options.executeMany ? this.connection.executeMany(this.sql, this.bindParameters, execOpts) : this.connection.execute(this.sql, this.bindParameters, execOpts);\n    try {\n      const result = await executePromise;\n      return this.formatResults(result);\n    } catch (error) {\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n  }\n\n  /**\n * The parameters to query.run function are built here\n *\n * @param {string} sql\n * @param {Array} values\n * @param {string} dialect\n */\n  static formatBindParameters(sql, values, dialect) {\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        return `:${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, values];\n  }\n\n  /**\n   * Building the attribute map by matching the column names received\n   * from DB and the one in rawAttributes\n   * to sequelize format\n   *\n   * @param {object} attrsMap\n   * @param {object} rawAttributes\n   * @private\n   */\n  _getAttributeMap(attrsMap, rawAttributes) {\n    attrsMap = Object.assign(attrsMap, _.reduce(rawAttributes, (mp, _, key) => {\n      const catalogKey = this.sequelize.queryInterface.queryGenerator.getCatalogName(key);\n      mp[catalogKey] = key;\n      return mp;\n    }, {}));\n  }\n\n  /**\n   * Process rows received from the DB.\n   * Use parse function to parse the returned value\n   * to sequelize format\n   *\n   * @param {Array} rows\n   * @private\n   */\n  _processRows(rows) {\n    let result = rows;\n    let attrsMap = {};\n\n    // When quoteIdentifiers is false we need to map the DB column names\n    // To the one in attribute list\n    if (this.sequelize.options.quoteIdentifiers === false) {\n      // Building the attribute map from this.options.attributes\n      // Needed in case of an aggregate function\n      attrsMap = _.reduce(this.options.attributes, (mp, v) => {\n        // Aggregate function is of form\n        // Fn {fn: 'min', min}, so we have the name in index one of the object\n        if (typeof v === 'object') {\n          v = v[1];\n        }\n        const catalogv = this.sequelize.queryInterface.queryGenerator.getCatalogName(v);\n        mp[catalogv] = v;\n        return mp;\n      }, {});\n\n\n      // Building the attribute map by matching the column names received\n      // from DB and the one in model.rawAttributes\n      if (this.model) {\n        this._getAttributeMap(attrsMap, this.model.rawAttributes);\n      }\n\n      // If aliasesmapping exists we update the attribute map\n      if (this.options.aliasesMapping) {\n        const obj = Object.fromEntries(this.options.aliasesMapping);\n        rows = rows\n          .map(row => _.toPairs(row)\n            .reduce((acc, [key, value]) => {\n              const mapping = Object.values(obj).find(element => {\n                const catalogElement = this.sequelize.queryInterface.queryGenerator.getCatalogName(element);\n                return catalogElement === key;\n              });\n              if (mapping)\n                acc[mapping || key] = value;\n              return acc;\n            }, {})\n          );\n      }\n\n      // Modify the keys into the format that sequelize expects\n      result = rows.map(row => {\n        return _.mapKeys(row, (value, key) => {\n          const targetAttr = attrsMap[key];\n          if (typeof targetAttr === 'string' && targetAttr !== key) {\n            return targetAttr;\n          }\n          return key;\n        });\n      });\n    }\n\n    // We parse the value received from the DB based on its datatype\n    if (this.model) {\n      result = result.map(row => {\n        return _.mapValues(row, (value, key) => {\n          if (this.model.rawAttributes[key] && this.model.rawAttributes[key].type) {\n            let typeid = this.model.rawAttributes[key].type.toLocaleString();\n            if (this.model.rawAttributes[key].type.key === 'JSON') {\n              value = JSON.parse(value);\n            }\n            // For some types, the \"name\" of the type is returned with the length, we remove it\n            // For Boolean we skip this because BOOLEAN is mapped to CHAR(1) and we dont' want to\n            // remove the (1) for BOOLEAN\n            if (typeid.indexOf('(') > -1 && this.model.rawAttributes[key].type.key !== 'BOOLEAN') {\n              typeid = typeid.substr(0, typeid.indexOf('('));\n            }\n            const parse = parserStore.get(typeid);\n            if (value !== null & !!parse) {\n              value = parse(value);\n            }\n          }\n          return value;\n        });\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   * Example:\n   * Oracle format :\n   * { rows: //All rows\n     [ [ 'Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production' ],\n       [ 'PL/SQL Release 11.2.0.1.0 - Production' ],\n       [ 'CORE\\t11.2.0.1.0\\tProduction' ],\n       [ 'TNS for 64-bit Windows: Version 11.2.0.1.0 - Production' ],\n       [ 'NLSRTL Version 11.2.0.1.0 - Production' ] ],\n    resultSet: undefined,\n    outBinds: undefined, //Used for dbms_put.line\n    rowsAffected: undefined, //Number of rows affected\n    metaData: [ { name: 'BANNER' } ] }\n  *\n  * @param {Array} data - The result of the query execution.\n  */\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      let insertData;\n      if (data.outBinds) {\n        const keys = Object.keys(this.options.outBindAttributes);\n        insertData = data.outBinds;\n        // For one row insert out bind array is 1D array\n        // we convert it to 2D array for uniformity\n        if (this.instance) {\n          insertData = [insertData];\n        }\n        // Mapping the bind parameter to their values\n        const res = insertData.map(row =>{\n          const obj = {};\n          row.forEach((element, index) =>{\n            obj[keys[index]] = element[0];\n          });\n          return obj;\n        });\n        insertData = res;\n        // For bulk insert this.insert is undefined\n        // we map result to res, for one row insert\n        // result needs to be this.instance\n        if (!this.instance) {\n          result = res;\n        }\n      }\n      this.handleInsertQuery(insertData);\n      return [result, data.rowsAffected];\n    }\n    if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data.rows);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      // Getting the table name on which we are doing describe query\n      const table = Object.keys(this.sequelize.models);\n      const modelAttributes = {};\n      // Get the model raw attributes\n      if (this.sequelize.models && table.length > 0) {\n        this._getAttributeMap(modelAttributes, this.sequelize.models[table[0]].rawAttributes);\n      }\n      data.rows.forEach(_result => {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '')\n            .replace(\"')\", '')\n            .replace(/'/g, ''); /* jshint ignore: line */\n        }\n\n        if (!(modelAttributes[_result.COLUMN_NAME] in result)) {\n          let key = modelAttributes[_result.COLUMN_NAME];\n          if (!key) {\n            key = _result.COLUMN_NAME;\n          }\n\n          result[key] = {\n            type: _result.DATA_TYPE.toUpperCase(),\n            allowNull: _result.NULLABLE === 'N' ? false : true,\n            defaultValue: undefined,\n            primaryKey: _result.CONSTRAINT_TYPE === 'P'\n          };\n        }\n      });\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data.rows);\n    } else if (this.isSelectQuery()) {\n      const rows = data.rows;\n      const result = this._processRows(rows);\n      return this.handleSelectQuery(result);\n    } else if (this.isCallQuery()) {\n      result = data.rows[0];\n    } else if (this.isUpdateQuery()) {\n      result = [result, data.rowsAffected];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isBulkDeleteQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isVersionQuery()) {\n      const version = data.rows[0].VERSION_FULL;\n      if (version) {\n        const versions = version.split('.');\n        result = `${versions[0]}.${versions[1]}.${versions[2]}`;\n      } else {\n        result = '0.0.0';\n      }\n    } else if (this.isForeignKeysQuery()) {\n      result = data.rows;\n    } else if (this.isUpsertQuery()) {\n      // Upsert Query, will return nothing\n      data = data.outBinds;\n      const keys = Object.keys(this.options.outBindAttributes);\n      const obj = {};\n      for (const k in keys) {\n        obj[keys[k]] = data[k];\n      }\n      obj.isUpdate = data[data.length - 1];\n      data = obj;\n      result = [{ isNewRecord: data.isUpdate, value: data }, data.isUpdate == 0];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // If data.rows exists then it is a select query\n      // Hence we would have two components\n      // metaData and rows and we return them\n      // as [data.rows, data.metaData]\n      // Else it is result of update/upsert/insert query\n      // and it has no rows so we return [data, data]\n      if (data && data.rows) {\n        return [data.rows, data.metaData];\n      }\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Convert snake_case keys to camelCase as its generated by stored procedure\n    return data.rows.map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key].toLowerCase();\n      }\n      return constraint;\n    });\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  formatError(err) {\n    let match;\n    // ORA-00001: unique constraint (USER.XXXXXXX) violated\n    match = err.message.match(/unique constraint ([\\s\\S]*) violated/);\n    if (match && match.length > 1) {\n      match[1] = match[1].replace('(', '').replace(')', '').split('.')[1]; // As we get (SEQUELIZE.UNIQNAME), we replace to have UNIQNAME\n      const errors = [];\n      let fields = [],\n        message = 'Validation error',\n        uniqueKey = null;\n\n      if (this.model) {\n        const uniqueKeys = Object.keys(this.model.uniqueKeys);\n\n        const currKey = uniqueKeys.find(key => {\n          // We check directly AND with quotes -> \"a\"\" === a || \"a\" === \"a\"\n          return key.toUpperCase() === match[1].toUpperCase() || key.toUpperCase() === `\"${match[1].toUpperCase()}\"`;\n        });\n\n        if (currKey) {\n          uniqueKey = this.model.uniqueKeys[currKey];\n          fields = uniqueKey.fields;\n        }\n\n        if (uniqueKey && !!uniqueKey.msg) {\n          message = uniqueKey.msg;\n        }\n\n        fields.forEach(field => {\n          errors.push(\n            new SequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation',\n              field,\n              null\n            )\n          );\n        });\n      }\n\n      return new SequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        err,\n        fields\n      });\n    }\n\n    // ORA-02291: integrity constraint (string.string) violated - parent key not found / ORA-02292: integrity constraint (string.string) violated - child record found\n    match = err.message.match(/ORA-02291/) || err.message.match(/ORA-02292/);\n    if (match && match.length > 0) {\n      return new SequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    // ORA-02443: Cannot drop constraint  - nonexistent constraint\n    match = err.message.match(/ORA-02443/);\n    if (match && match.length > 0) {\n      return new SequelizeErrors.UnknownConstraintError(match[1]);\n    }\n\n    return new SequelizeErrors.DatabaseError(err);\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.indexOf('SELECT i.index_name,i.table_name, i.column_name, u.uniqueness') > -1;\n  }\n\n  isSelectCountQuery() {\n    return this.sql.toUpperCase().indexOf('SELECT COUNT(') > -1;\n  }\n\n  handleShowIndexesQuery(data) {\n    const acc = [];\n\n    // We first treat the datas\n    data.forEach(indexRecord => {\n      // We create the object\n      if (!acc[indexRecord.INDEX_NAME]) {\n        acc[indexRecord.INDEX_NAME] = {\n          unique: indexRecord.UNIQUENESS === 'UNIQUE' ? true : false,\n          primary: indexRecord.CONSTRAINT_TYPE === 'P',\n          name: indexRecord.INDEX_NAME.toLowerCase(),\n          tableName: indexRecord.TABLE_NAME.toLowerCase(),\n          type: undefined\n        };\n        acc[indexRecord.INDEX_NAME].fields = [];\n      }\n\n      // We create the fields\n      acc[indexRecord.INDEX_NAME].fields.push({\n        attribute: indexRecord.COLUMN_NAME,\n        length: undefined,\n        order: indexRecord.DESCEND,\n        collate: undefined\n      });\n    });\n\n    const returnIndexes = [];\n    const accKeys = Object.keys(acc);\n    for (const accKey of accKeys) {\n      const columns = {};\n      columns.fields = acc[accKey].fields;\n      // We are generating index field name in the format sequelize expects\n      // to avoid creating a unique index on auto-generated index name\n      if (acc[accKey].name.match(/sys_c[0-9]*/)) {\n        acc[accKey].name = Utils.nameIndex(columns, acc[accKey].tableName).name;\n      }\n      returnIndexes.push(acc[accKey]);\n    }\n    return returnIndexes;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance && results.length > 0) {\n      if ('pkReturnVal' in results[0]) {\n        // The PK of the table is a reserved word (ex : uuid), we have to change the name in the result for the model to find the value correctly\n        results[0][this.model.primaryKeyAttribute] = results[0].pkReturnVal;\n        delete results[0].pkReturnVal;\n      }\n      // add the inserted row id to the instance\n      const autoIncrementField = this.model.autoIncrementAttribute;\n      let autoIncrementFieldAlias = null,\n        id = null;\n\n      if (\n        Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementField) &&\n        this.model.rawAttributes[autoIncrementField].field !== undefined\n      )\n        autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementField];\n      id = id || autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias];\n\n      this.instance[autoIncrementField] = id;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,QAAA,CAAAC,OAAA;EAAAC,WAAA,WAAAA,YAAA;IAAA,OAAAA,YAAA;EAAA;AAAA;AAIA,IAAMC,aAAA,GAAgBC,OAAA,CAAQ;AAC9B,IAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,IAAME,WAAA,GAAcF,OAAA,CAAQ,kBAAkB;AAC9C,IAAMG,CAAA,GAAIH,OAAA,CAAQ;AAClB,IAAMI,KAAA,GAAQJ,OAAA,CAAQ;AACtB,IAAAK,QAAA,GAAmBL,OAAA,CAAQ;EAAnBM,MAAA,GAAAD,QAAA,CAAAC,MAAA;AAER,IAAMC,KAAA,GAAQD,MAAA,CAAOE,YAAA,CAAa;AAAA,IAE3BV,YAAA,0BAAAW,cAAA;EAAAC,SAAA,CAAAC,YAAA,EAAAF,cAAA;EAAA,IAAAG,MAAA,GAAAC,YAAA,CAAAF,YAAA;EACL,SAAAA,aAAYG,UAAA,EAAYC,SAAA,EAAWC,OAAA,EAAS;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,YAAA;IAC1CM,KAAA,GAAAL,MAAA,CAAAO,IAAA,OAAML,UAAA,EAAYC,SAAA,EAAWC,OAAA;IAC7BC,KAAA,CAAKD,OAAA,GAAUb,CAAA,CAAEiB,MAAA,CACf;MACEC,OAAA,EAASC,OAAA,CAAQC,GAAA;MACjBC,KAAA,EAAO;MACPC,GAAA,EAAK;IAAA,GAEPT,OAAA,IAAW;IAGbC,KAAA,CAAKS,kBAAA;IACLT,KAAA,CAAKU,SAAA,GAAYX,OAAA,CAAQW,SAAA,IAAaV,KAAA,CAAKF,SAAA,CAAUa,iBAAA,CAAkBC,GAAA,CAAIC,MAAA;IAAA,OAAAb,KAAA;EAAA;EAAAc,YAAA,CAAApB,YAAA;IAAAqB,GAAA;IAAAC,KAAA,EAG7E,SAAAC,iBAAA,EAAmB;MACjB,OAAO;IAAA;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAGT,SAAAE,eAAA,EAAiB;MACf,IAAMC,QAAA,GAAW;QAAET,SAAA,EAAW,KAAKA,SAAA;QAAWU,UAAA,EAAY,KAAKA;MAAA;MAG/D,IAAMC,QAAA,GAAW,KAAKvB,SAAA,CAAUa,iBAAA,CAAkBC,GAAA;MAElD,IAAI,KAAKU,KAAA,IAAS,KAAKC,aAAA,IAAiB;QACtC,IAAMC,KAAA,GAAQ;QACd,IAAMC,IAAA,GAAOC,MAAA,CAAOD,IAAA,CAAK,KAAKH,KAAA,CAAMK,eAAA;QACpC,SAAAC,EAAA,MAAAC,KAAA,GAAkBJ,IAAA,EAAAG,EAAA,GAAAC,KAAA,CAAAC,MAAA,EAAAF,EAAA,IAAM;UAAxB,IAAWb,GAAA,GAAAc,KAAA,CAAAD,EAAA;UACT,IAAMG,QAAA,GAAW,KAAKT,KAAA,CAAMK,eAAA,CAAgBZ,GAAA;UAC5C,IAAIgB,QAAA,CAASC,IAAA,CAAKjB,GAAA,KAAQ,WAAW;YACnCS,KAAA,CAAMT,GAAA,IAAO;cAAEiB,IAAA,EAAMX,QAAA,CAASY;YAAA;UAAA;UAGhC,IAAIF,QAAA,CAASC,IAAA,CAAKjB,GAAA,KAAQ,UAAU;YAClCS,KAAA,CAAMT,GAAA,IAAO;cAAEiB,IAAA,EAAMX,QAAA,CAASY;YAAA;UAAA;QAAA;QAGlC,IAAKT,KAAA,EAAQ;UACXL,QAAA,CAASe,SAAA,GAAYV,KAAA;QAAA;MAAA;MAGzB,OAAOL,QAAA;IAAA;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAWT,SAAAmB,uBAAuBC,iBAAA,EAAmBf,QAAA,EAAU;MAClD,IAAI,KAAKC,KAAA,IAAS,KAAKvB,OAAA,CAAQqC,iBAAA,GAAoB;QAEjD,IAAMX,IAAA,GAAOC,MAAA,CAAOD,IAAA,CAAK,KAAKH,KAAA,CAAMK,eAAA;QACpC,SAAAU,GAAA,MAAAC,MAAA,GAAkBb,IAAA,EAAAY,GAAA,GAAAC,MAAA,CAAAR,MAAA,EAAAO,GAAA,IAAM;UAAxB,IAAWtB,GAAA,GAAAuB,MAAA,CAAAD,GAAA;UACT,IAAMN,QAAA,GAAW,KAAKT,KAAA,CAAMK,eAAA,CAAgBZ,GAAA;UAC5C,IAAIgB,QAAA,CAASC,IAAA,CAAKjB,GAAA,KAAQ,UAAU;YAClC,IAAMwB,UAAA,GAAa,KAAKxC,OAAA,CAAQqC,iBAAA,EAAmBrB,GAAA;YACnD,IAAIwB,UAAA,EAAY;cACd,KAAKxC,OAAA,CAAQqC,iBAAA,EAAmBrB,GAAA,IAAOyB,aAAA,CAAAC,cAAA,KAClCF,UAAA,GADkC;gBAErCP,IAAA,EAAMX,QAAA,CAASY,MAAA;gBACfS,OAAA,EAAS;cAAA;YAAA;UAAA;QAAA;MAAA;IAAA;EAAA;IAAA3B,GAAA;IAAAC,KAAA;MAAA,IAAA2B,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAQXC,GAAA,EAAKC,UAAA;QAAA,IAAA5B,QAAA,EAAA6B,QAAA,EAAAC,aAAA,EAAAC,cAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAnC,QAAA,EAAAoC,cAAA,EAAAC,QAAA;QAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAEPxC,QAAA,GAAW,KAAKvB,SAAA,CAAUa,iBAAA,CAAkBC,GAAA;cAC5CsC,QAAA,GAAW,KAAKY,SAAA,CAAUd,GAAA,EAAK1D,KAAA,EAAO2D,UAAA;cACtCE,aAAA,GAAgB;cAChBC,cAAA,GAAiB;cACjBC,OAAA,GAAU;cAEhB,IAAI,CAACL,GAAA,CAAIe,KAAA,CAAM,UAAU;gBACvB,KAAKf,GAAA,GAAMA,GAAA,CAAIgB,OAAA,CAAQ,QAAQ;cAAA,OAC1B;gBACL,KAAKhB,GAAA,GAAMA,GAAA;cAAA;cAKb,IAAI,KAAKjD,OAAA,CAAQkE,iBAAA,KAAsBC,KAAA,CAAMC,OAAA,CAAQlB,UAAA,KAAe/D,CAAA,CAAEkF,aAAA,CAAcnB,UAAA,IAAc;gBAChG,KAAKd,sBAAA,CAAuB,qBAAqBd,QAAA;gBACjD8B,aAAA,CAAckB,IAAA,CAAAC,KAAA,CAAdnB,aAAA,EAAAoB,kBAAA,CAAsB7C,MAAA,CAAO8C,MAAA,CAAO,KAAKzE,OAAA,CAAQkE,iBAAA;gBAEjD,IAAI,KAAKQ,aAAA,IAAiB;kBACxBtB,aAAA,CAAckB,IAAA,CAAK;oBAAEK,GAAA,EAAKrD,QAAA,CAASsD;kBAAA;gBAAA;cAAA;cAIvC,KAAKvB,cAAA,GAAiBD,aAAA;cAGtB,IAAIe,KAAA,CAAMC,OAAA,CAAQlB,UAAA,KAAe/D,CAAA,CAAEkF,aAAA,CAAcnB,UAAA,GAAa;gBAC5D,IAAI,KAAKlD,OAAA,CAAQ6E,WAAA,EAAa;kBAG5B,KAAKzC,sBAAA,CAAuB,oBAAoBd,QAAA;kBAChDgC,OAAA,CAAQgB,IAAA,CAAAC,KAAA,CAARjB,OAAA,EAAAkB,kBAAA,CAAgB7C,MAAA,CAAO8C,MAAA,CAAO,KAAKzE,OAAA,CAAQ8E,gBAAA;kBAC3CxB,OAAA,CAAQgB,IAAA,CAAAC,KAAA,CAARjB,OAAA,EAAgBF,aAAA;kBAChB,KAAKC,cAAA,GAAiBH,UAAA;gBAAA,WACb,KAAK6B,UAAA,IAAc;kBAC5B,KAAK1B,cAAA,GAAiBH,UAAA;gBAAA,OACjB;kBACLvB,MAAA,CAAO8C,MAAA,CAAOvB,UAAA,EAAY8B,OAAA,CAAQ,UAAA/D,KAAA,EAAS;oBACzCoC,cAAA,CAAeiB,IAAA,CAAKrD,KAAA;kBAAA;kBAEtBoC,cAAA,CAAeiB,IAAA,CAAAC,KAAA,CAAflB,cAAA,EAAuBD,aAAA;kBACvBzB,MAAA,CAAOsD,MAAA,CAAO,KAAK5B,cAAA,EAAgBA,cAAA;gBAAA;cAAA;cAAA,KAKnC,KAAKJ,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACtB,KAAKqB,UAAA,GAAa;cAAA,OAAAvB,QAAA,CAAAwB,MAAA,WACXC,OAAA,CAAQC,OAAA;YAAA;cAAA,KAEb,KAAKrC,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACtB,KAAKqB,UAAA,GAAa;cAAA,OAAAvB,QAAA,CAAAwB,MAAA,WACXC,OAAA,CAAQC,OAAA;YAAA;cAAA,KAEb,KAAKrC,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACtB,KAAKqB,UAAA,GAAa;cAAA,OAAAvB,QAAA,CAAAwB,MAAA,WACXC,OAAA,CAAQC,OAAA;YAAA;cAAA,KAEb,KAAKrC,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAEtB,IAAI,KAAKzC,UAAA,KAAe,QAAW;gBACjC,IAAI,KAAKvB,UAAA,CAAWyF,IAAA,EAAM;kBACxB,KAAKlE,UAAA,GAAa;gBAAA,OACb;kBACL,KAAKA,UAAA,GAAa;gBAAA;cAAA;cAAAuC,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAKd,KAAKhE,UAAA,CAAW0F,OAAA,CAAQ,KAAKvC,GAAA,EAAK,KAAKI,cAAA,EAAgB;gBAAEhC,UAAA,EAAY,KAAKA;cAAA;YAAA;cAAA,OAAAuC,QAAA,CAAAwB,MAAA,WACzEzD,MAAA,CAAO8D,MAAA,CAAO;YAAA;cAAA7B,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAA8B,EAAA,GAAA9B,QAAA;cAAA,MAEf,KAAK+B,WAAA,CAAA/B,QAAA,CAAA8B,EAAY;YAAA;cAAA9B,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;cAAA,KAGA,KAAK3C,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAEtB,IAAI,KAAKzC,UAAA,KAAe,QAAW;gBACjC,IAAI,KAAKvB,UAAA,CAAWyF,IAAA,EAAM;kBACxB,KAAKlE,UAAA,GAAa;gBAAA,OACb;kBACL,KAAKA,UAAA,GAAa;gBAAA;cAAA;cAAAuC,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAKC,KAAKhE,UAAA,CAAW0F,OAAA,CAAQ,KAAKvC,GAAA,EAAK,KAAKI,cAAA,EAAgB;gBAC1E1C,SAAA,EAAW,KAAKA,SAAA;gBAChBU,UAAA,EAAY,KAAKA;cAAA;YAAA;cAFbkC,MAAA,GAAAK,QAAA,CAAAiC,IAAA;cAAA,IAID1B,KAAA,CAAMC,OAAA,CAAQb,MAAA,CAAOuC,QAAA;gBAAAlC,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAwB,MAAA,WACjB,CAAC7B,MAAA,CAAOuC,QAAA;YAAA;cAAA,OAAAlC,QAAA,CAAAwB,MAAA,WAEV7B,MAAA,CAAOuC,QAAA;YAAA;cAAAlC,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAmC,EAAA,GAAAnC,QAAA;cAAA,MAER,KAAK+B,WAAA,CAAA/B,QAAA,CAAAmC,EAAY;YAAA;cAAAnC,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;cAAA,KAGA,KAAK3C,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEd,KAAKhE,UAAA,CAAWkG,MAAA;YAAA;cAAA,OAAApC,QAAA,CAAAwB,MAAA,WACfzD,MAAA,CAAO8D,MAAA,CAAO;YAAA;cAAA7B,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAqC,EAAA,GAAArC,QAAA;cAAA,MAEf,KAAK+B,WAAA,CAAA/B,QAAA,CAAAqC,EAAY;YAAA;cAAArC,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;cAAA,KAGA,KAAK3C,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEd,KAAKhE,UAAA,CAAWoG,QAAA;YAAA;cAAA,OAAAtC,QAAA,CAAAwB,MAAA,WACfzD,MAAA,CAAO8D,MAAA,CAAO;YAAA;cAAA7B,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAuC,EAAA,GAAAvC,QAAA;cAAA,MAEf,KAAK+B,WAAA,CAAA/B,QAAA,CAAAuC,EAAY;YAAA;cAAAvC,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;cAAA,KAGA,KAAK3C,GAAA,CAAIiC,UAAA,CAAW;gBAAAtB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEd,KAAKhE,UAAA,CAAW0F,OAAA,CAAQ,KAAKvC,GAAA,EAAK,IAAI;gBAAE5B,UAAA,EAAY;cAAA;YAAA;cAAA,OAAAuC,QAAA,CAAAwB,MAAA,WACnDzD,MAAA,CAAO8D,MAAA,CAAO;YAAA;cAAA7B,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAwC,EAAA,GAAAxC,QAAA;cAAA,MAEf,KAAK+B,WAAA,CAAA/B,QAAA,CAAAwC,EAAY;YAAA;cAAAxC,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;cAKJ,IAAI,KAAKvE,UAAA,KAAe,QAAW;gBACjC,IAAI,KAAKvB,UAAA,CAAWyF,IAAA,EAAM;kBACxB,KAAKlE,UAAA,GAAa;gBAAA,OACb;kBACL,KAAKA,UAAA,GAAa;gBAAA;cAAA;cAKtB,IAAI,qBAAqB,KAAKrB,OAAA,IAAW,KAAKA,OAAA,CAAQqG,eAAA,KAAoB,MAAM;gBAC9E1E,MAAA,CAAOsD,MAAA,CAAO,KAAK5B,cAAA,EAAgB,KAAKrD,OAAA,CAAQqG,eAAA;cAAA;cAE5CjF,QAAA,GAAW,KAAKD,cAAA;cACtB,IAAI,KAAKnB,OAAA,CAAQ6E,WAAA,IAAevB,OAAA,CAAQvB,MAAA,GAAS,GAAG;gBAClDX,QAAA,CAASkF,QAAA,GAAWhD,OAAA;cAAA;cAEhBE,cAAA,GAAiB,KAAKxD,OAAA,CAAQ6E,WAAA,GAAc,KAAK/E,UAAA,CAAW+E,WAAA,CAAY,KAAK5B,GAAA,EAAK,KAAKI,cAAA,EAAgBjC,QAAA,IAAY,KAAKtB,UAAA,CAAW0F,OAAA,CAAQ,KAAKvC,GAAA,EAAK,KAAKI,cAAA,EAAgBjC,QAAA;cAAAwC,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEzJN,cAAA;YAAA;cAAfD,QAAA,GAAAK,QAAA,CAAAiC,IAAA;cAAA,OAAAjC,QAAA,CAAAwB,MAAA,WACC,KAAKmB,aAAA,CAAchD,QAAA;YAAA;cAAAK,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAA4C,EAAA,GAAA5C,QAAA;cAAA,MAEpB,KAAK+B,WAAA,CAAA/B,QAAA,CAAA4C,EAAY;YAAA;cAAA5C,QAAA,CAAAC,IAAA;cAEvBV,QAAA;cAAA,OAAAS,QAAA,CAAAgC,MAAA;YAAA;YAAA;cAAA,OAAAhC,QAAA,CAAA6C,IAAA;UAAA;QAAA,GAAAzD,OAAA;MAAA;MAAA,SAAA0D,IAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAhE,IAAA,CAAA2B,KAAA,OAAAsC,SAAA;MAAA;MAAA,OAAAH,GAAA;IAAA;EAAA;IAAA1F,GAAA;IAAAC,KAAA,EAiCJ,SAAA6F,iBAAiBC,QAAA,EAAUC,aAAA,EAAe;MAAA,IAAAC,MAAA;MACxCF,QAAA,GAAWpF,MAAA,CAAOsD,MAAA,CAAO8B,QAAA,EAAU5H,CAAA,CAAE+H,MAAA,CAAOF,aAAA,EAAe,UAACG,EAAA,EAAIC,EAAA,EAAGpG,GAAA,EAAQ;QACzE,IAAMqG,UAAA,GAAaJ,MAAA,CAAKlH,SAAA,CAAUuH,cAAA,CAAeC,cAAA,CAAeC,cAAA,CAAexG,GAAA;QAC/EmG,EAAA,CAAGE,UAAA,IAAcrG,GAAA;QACjB,OAAOmG,EAAA;MAAA,GACN;IAAA;EAAA;IAAAnG,GAAA;IAAAC,KAAA,EAWL,SAAAwG,aAAaC,IAAA,EAAM;MAAA,IAAAC,MAAA;MACjB,IAAIpE,MAAA,GAASmE,IAAA;MACb,IAAIX,QAAA,GAAW;MAIf,IAAI,KAAKhH,SAAA,CAAUC,OAAA,CAAQ4H,gBAAA,KAAqB,OAAO;QAGrDb,QAAA,GAAW5H,CAAA,CAAE+H,MAAA,CAAO,KAAKlH,OAAA,CAAQ6H,UAAA,EAAY,UAACV,EAAA,EAAIW,CAAA,EAAM;UAGtD,IAAI,OAAOA,CAAA,KAAM,UAAU;YACzBA,CAAA,GAAIA,CAAA,CAAE;UAAA;UAER,IAAMC,QAAA,GAAWJ,MAAA,CAAK5H,SAAA,CAAUuH,cAAA,CAAeC,cAAA,CAAeC,cAAA,CAAeM,CAAA;UAC7EX,EAAA,CAAGY,QAAA,IAAYD,CAAA;UACf,OAAOX,EAAA;QAAA,GACN;QAKH,IAAI,KAAK5F,KAAA,EAAO;UACd,KAAKuF,gBAAA,CAAiBC,QAAA,EAAU,KAAKxF,KAAA,CAAMyF,aAAA;QAAA;QAI7C,IAAI,KAAKhH,OAAA,CAAQgI,cAAA,EAAgB;UAC/B,IAAMC,GAAA,GAAMtG,MAAA,CAAOuG,WAAA,CAAY,KAAKlI,OAAA,CAAQgI,cAAA;UAC5CN,IAAA,GAAOA,IAAA,CACJS,GAAA,CAAI,UAAAC,GAAA;YAAA,OAAOjJ,CAAA,CAAEkJ,OAAA,CAAQD,GAAA,EACnBlB,MAAA,CAAO,UAACoB,GAAA,EAAAC,IAAA,EAAsB;cAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;gBAAhBvH,GAAA,GAAAwH,KAAA;gBAAKvH,KAAA,GAAAuH,KAAA;cAClB,IAAME,OAAA,GAAU/G,MAAA,CAAO8C,MAAA,CAAOwD,GAAA,EAAKU,IAAA,CAAK,UAAAC,OAAA,EAAW;gBACjD,IAAMC,cAAA,GAAiBlB,MAAA,CAAK5H,SAAA,CAAUuH,cAAA,CAAeC,cAAA,CAAeC,cAAA,CAAeoB,OAAA;gBACnF,OAAOC,cAAA,KAAmB7H,GAAA;cAAA;cAE5B,IAAI0H,OAAA,EACFJ,GAAA,CAAII,OAAA,IAAW1H,GAAA,IAAOC,KAAA;cACxB,OAAOqH,GAAA;YAAA,GACN;UAAA;QAAA;QAKT/E,MAAA,GAASmE,IAAA,CAAKS,GAAA,CAAI,UAAAC,GAAA,EAAO;UACvB,OAAOjJ,CAAA,CAAE2J,OAAA,CAAQV,GAAA,EAAK,UAACnH,KAAA,EAAOD,GAAA,EAAQ;YACpC,IAAM+H,UAAA,GAAahC,QAAA,CAAS/F,GAAA;YAC5B,IAAI,OAAO+H,UAAA,KAAe,YAAYA,UAAA,KAAe/H,GAAA,EAAK;cACxD,OAAO+H,UAAA;YAAA;YAET,OAAO/H,GAAA;UAAA;QAAA;MAAA;MAMb,IAAI,KAAKO,KAAA,EAAO;QACdgC,MAAA,GAASA,MAAA,CAAO4E,GAAA,CAAI,UAAAC,GAAA,EAAO;UACzB,OAAOjJ,CAAA,CAAE6J,SAAA,CAAUZ,GAAA,EAAK,UAACnH,KAAA,EAAOD,GAAA,EAAQ;YACtC,IAAI2G,MAAA,CAAKpG,KAAA,CAAMyF,aAAA,CAAchG,GAAA,KAAQ2G,MAAA,CAAKpG,KAAA,CAAMyF,aAAA,CAAchG,GAAA,EAAKiB,IAAA,EAAM;cACvE,IAAIgH,MAAA,GAAStB,MAAA,CAAKpG,KAAA,CAAMyF,aAAA,CAAchG,GAAA,EAAKiB,IAAA,CAAKiH,cAAA;cAChD,IAAIvB,MAAA,CAAKpG,KAAA,CAAMyF,aAAA,CAAchG,GAAA,EAAKiB,IAAA,CAAKjB,GAAA,KAAQ,QAAQ;gBACrDC,KAAA,GAAQkI,IAAA,CAAKC,KAAA,CAAMnI,KAAA;cAAA;cAKrB,IAAIgI,MAAA,CAAOI,OAAA,CAAQ,OAAO,MAAM1B,MAAA,CAAKpG,KAAA,CAAMyF,aAAA,CAAchG,GAAA,EAAKiB,IAAA,CAAKjB,GAAA,KAAQ,WAAW;gBACpFiI,MAAA,GAASA,MAAA,CAAOK,MAAA,CAAO,GAAGL,MAAA,CAAOI,OAAA,CAAQ;cAAA;cAE3C,IAAMD,KAAA,GAAQlK,WAAA,CAAYqK,GAAA,CAAIN,MAAA;cAC9B,IAAIhI,KAAA,KAAU,OAAO,CAAC,CAACmI,KAAA,EAAO;gBAC5BnI,KAAA,GAAQmI,KAAA,CAAMnI,KAAA;cAAA;YAAA;YAGlB,OAAOA,KAAA;UAAA;QAAA;MAAA;MAKb,OAAOsC,MAAA;IAAA;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAoBT,SAAAsF,cAAciD,IAAA,EAAM;MAClB,IAAIjG,MAAA,GAAS,KAAKkG,QAAA;MAClB,IAAI,KAAKC,aAAA,CAAcF,IAAA,GAAO;QAC5B,IAAIG,UAAA;QACJ,IAAIH,IAAA,CAAK1D,QAAA,EAAU;UACjB,IAAMpE,IAAA,GAAOC,MAAA,CAAOD,IAAA,CAAK,KAAK1B,OAAA,CAAQkE,iBAAA;UACtCyF,UAAA,GAAaH,IAAA,CAAK1D,QAAA;UAGlB,IAAI,KAAK2D,QAAA,EAAU;YACjBE,UAAA,GAAa,CAACA,UAAA;UAAA;UAGhB,IAAMC,GAAA,GAAMD,UAAA,CAAWxB,GAAA,CAAI,UAAAC,GAAA,EAAM;YAC/B,IAAMH,GAAA,GAAM;YACZG,GAAA,CAAIpD,OAAA,CAAQ,UAAC4D,OAAA,EAASiB,KAAA,EAAS;cAC7B5B,GAAA,CAAIvG,IAAA,CAAKmI,KAAA,KAAUjB,OAAA,CAAQ;YAAA;YAE7B,OAAOX,GAAA;UAAA;UAET0B,UAAA,GAAaC,GAAA;UAIb,IAAI,CAAC,KAAKH,QAAA,EAAU;YAClBlG,MAAA,GAASqG,GAAA;UAAA;QAAA;QAGb,KAAKE,iBAAA,CAAkBH,UAAA;QACvB,OAAO,CAACpG,MAAA,EAAQiG,IAAA,CAAKO,YAAA;MAAA;MAEvB,IAAI,KAAKC,iBAAA,IAAqB;QAC5BzG,MAAA,GAAS,KAAK0G,qBAAA,CAAsBT,IAAA,CAAK9B,IAAA;MAAA,WAChC,KAAKwC,eAAA,IAAmB;QACjC3G,MAAA,GAAS;QAET,IAAM4G,KAAA,GAAQxI,MAAA,CAAOD,IAAA,CAAK,KAAK3B,SAAA,CAAUqK,MAAA;QACzC,IAAMC,eAAA,GAAkB;QAExB,IAAI,KAAKtK,SAAA,CAAUqK,MAAA,IAAUD,KAAA,CAAMpI,MAAA,GAAS,GAAG;UAC7C,KAAK+E,gBAAA,CAAiBuD,eAAA,EAAiB,KAAKtK,SAAA,CAAUqK,MAAA,CAAOD,KAAA,CAAM,IAAInD,aAAA;QAAA;QAEzEwC,IAAA,CAAK9B,IAAA,CAAK1C,OAAA,CAAQ,UAAAsF,OAAA,EAAW;UAC3B,IAAIA,OAAA,CAAQC,OAAA,EAAS;YACnBD,OAAA,CAAQC,OAAA,GAAUD,OAAA,CAAQC,OAAA,CAAQtG,OAAA,CAAQ,MAAM,IAC7CA,OAAA,CAAQ,MAAM,IACdA,OAAA,CAAQ,MAAM;UAAA;UAGnB,IAAI,EAAEoG,eAAA,CAAgBC,OAAA,CAAQE,WAAA,KAAgBjH,MAAA,GAAS;YACrD,IAAIvC,GAAA,GAAMqJ,eAAA,CAAgBC,OAAA,CAAQE,WAAA;YAClC,IAAI,CAACxJ,GAAA,EAAK;cACRA,GAAA,GAAMsJ,OAAA,CAAQE,WAAA;YAAA;YAGhBjH,MAAA,CAAOvC,GAAA,IAAO;cACZiB,IAAA,EAAMqI,OAAA,CAAQG,SAAA,CAAUC,WAAA;cACxBC,SAAA,EAAWL,OAAA,CAAQM,QAAA,KAAa,MAAM,QAAQ;cAC9CC,YAAA,EAAc;cACdC,UAAA,EAAYR,OAAA,CAAQS,eAAA,KAAoB;YAAA;UAAA;QAAA;MAAA,WAIrC,KAAKC,kBAAA,IAAsB;QACpCzH,MAAA,GAAS,KAAK0H,sBAAA,CAAuBzB,IAAA,CAAK9B,IAAA;MAAA,WACjC,KAAKlG,aAAA,IAAiB;QAC/B,IAAMkG,IAAA,GAAO8B,IAAA,CAAK9B,IAAA;QAClB,IAAMwD,OAAA,GAAS,KAAKzD,YAAA,CAAaC,IAAA;QACjC,OAAO,KAAKyD,iBAAA,CAAkBD,OAAA;MAAA,WACrB,KAAKE,WAAA,IAAe;QAC7B7H,MAAA,GAASiG,IAAA,CAAK9B,IAAA,CAAK;MAAA,WACV,KAAK2D,aAAA,IAAiB;QAC/B9H,MAAA,GAAS,CAACA,MAAA,EAAQiG,IAAA,CAAKO,YAAA;MAAA,WACd,KAAKuB,iBAAA,IAAqB;QACnC/H,MAAA,GAASiG,IAAA,CAAKO,YAAA;MAAA,WACL,KAAKwB,iBAAA,IAAqB;QACnChI,MAAA,GAASiG,IAAA,CAAKO,YAAA;MAAA,WACL,KAAKyB,cAAA,IAAkB;QAChC,IAAMC,OAAA,GAAUjC,IAAA,CAAK9B,IAAA,CAAK,GAAGgE,YAAA;QAC7B,IAAID,OAAA,EAAS;UACX,IAAME,QAAA,GAAWF,OAAA,CAAQG,KAAA,CAAM;UAC/BrI,MAAA,MAAAsI,MAAA,CAAYF,QAAA,CAAS,SAAAE,MAAA,CAAMF,QAAA,CAAS,SAAAE,MAAA,CAAMF,QAAA,CAAS;QAAA,OAC9C;UACLpI,MAAA,GAAS;QAAA;MAAA,WAEF,KAAKuI,kBAAA,IAAsB;QACpCvI,MAAA,GAASiG,IAAA,CAAK9B,IAAA;MAAA,WACL,KAAKhD,aAAA,IAAiB;QAE/B8E,IAAA,GAAOA,IAAA,CAAK1D,QAAA;QACZ,IAAMpE,MAAA,GAAOC,MAAA,CAAOD,IAAA,CAAK,KAAK1B,OAAA,CAAQkE,iBAAA;QACtC,IAAM+D,GAAA,GAAM;QACZ,SAAW8D,CAAA,IAAKrK,MAAA,EAAM;UACpBuG,GAAA,CAAIvG,MAAA,CAAKqK,CAAA,KAAMvC,IAAA,CAAKuC,CAAA;QAAA;QAEtB9D,GAAA,CAAI+D,QAAA,GAAWxC,IAAA,CAAKA,IAAA,CAAKzH,MAAA,GAAS;QAClCyH,IAAA,GAAOvB,GAAA;QACP1E,MAAA,GAAS,CAAC;UAAE0I,WAAA,EAAazC,IAAA,CAAKwC,QAAA;UAAU/K,KAAA,EAAOuI;QAAA,GAAQA,IAAA,CAAKwC,QAAA,IAAY;MAAA,WAC/D,KAAKE,sBAAA,IAA0B;QACxC3I,MAAA,GAAS,KAAK4I,0BAAA,CAA2B3C,IAAA;MAAA,WAChC,KAAKzE,UAAA,IAAc;QAO5B,IAAIyE,IAAA,IAAQA,IAAA,CAAK9B,IAAA,EAAM;UACrB,OAAO,CAAC8B,IAAA,CAAK9B,IAAA,EAAM8B,IAAA,CAAK4C,QAAA;QAAA;QAE1B,OAAO,CAAC5C,IAAA,EAAMA,IAAA;MAAA;MAGhB,OAAOjG,MAAA;IAAA;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAGT,SAAAkL,2BAA2B3C,IAAA,EAAM;MAE/B,OAAOA,IAAA,CAAK9B,IAAA,CAAKS,GAAA,CAAI,UAAA5E,MAAA,EAAU;QAC7B,IAAM8I,UAAA,GAAa;QACnB,SAAWrL,GAAA,IAAOuC,MAAA,EAAQ;UACxB8I,UAAA,CAAWlN,CAAA,CAAEmN,SAAA,CAAUtL,GAAA,KAAQuC,MAAA,CAAOvC,GAAA,EAAKuL,WAAA;QAAA;QAE7C,OAAOF,UAAA;MAAA;IAAA;EAAA;IAAArL,GAAA;IAAAC,KAAA,EAIX,SAAAgJ,sBAAsBuC,OAAA,EAAS;MAC7B,OAAOA,OAAA,CAAQrE,GAAA,CAAI,UAAAsE,SAAA,EAAa;QAC9B,OAAO;UACLC,SAAA,EAAWD,SAAA,CAAUE,UAAA;UACrBC,MAAA,EAAQH,SAAA,CAAUI;QAAA;MAAA;IAAA;EAAA;IAAA7L,GAAA;IAAAC,KAAA,EAKxB,SAAA0E,YAAYmH,GAAA,EAAK;MAAA,IAAAC,MAAA;MACf,IAAI/I,KAAA;MAEJA,KAAA,GAAQ8I,GAAA,CAAIE,OAAA,CAAQhJ,KAAA,CAAM;MAC1B,IAAIA,KAAA,IAASA,KAAA,CAAMjC,MAAA,GAAS,GAAG;QAC7BiC,KAAA,CAAM,KAAKA,KAAA,CAAM,GAAGC,OAAA,CAAQ,KAAK,IAAIA,OAAA,CAAQ,KAAK,IAAI2H,KAAA,CAAM,KAAK;QACjE,IAAMqB,MAAA,GAAS;QACf,IAAIC,MAAA,GAAS;UACXF,OAAA,GAAU;UACVG,SAAA,GAAY;QAEd,IAAI,KAAK5L,KAAA,EAAO;UACd,IAAM6L,UAAA,GAAazL,MAAA,CAAOD,IAAA,CAAK,KAAKH,KAAA,CAAM6L,UAAA;UAE1C,IAAMC,OAAA,GAAUD,UAAA,CAAWzE,IAAA,CAAK,UAAA3H,GAAA,EAAO;YAErC,OAAOA,GAAA,CAAI0J,WAAA,OAAkB1G,KAAA,CAAM,GAAG0G,WAAA,MAAiB1J,GAAA,CAAI0J,WAAA,YAAAmB,MAAA,CAAsB7H,KAAA,CAAM,GAAG0G,WAAA;UAAA;UAG5F,IAAI2C,OAAA,EAAS;YACXF,SAAA,GAAY,KAAK5L,KAAA,CAAM6L,UAAA,CAAWC,OAAA;YAClCH,MAAA,GAASC,SAAA,CAAUD,MAAA;UAAA;UAGrB,IAAIC,SAAA,IAAa,CAAC,CAACA,SAAA,CAAUG,GAAA,EAAK;YAChCN,OAAA,GAAUG,SAAA,CAAUG,GAAA;UAAA;UAGtBJ,MAAA,CAAOlI,OAAA,CAAQ,UAAAuI,KAAA,EAAS;YACtBN,MAAA,CAAO3I,IAAA,CACL,IAAIrF,eAAA,CAAgBuO,mBAAA,CAClBT,MAAA,CAAKU,+BAAA,CAAgCF,KAAA,GACrC,oBACAA,KAAA,EACA;UAAA;QAAA;QAMR,OAAO,IAAItO,eAAA,CAAgByO,qBAAA,CAAsB;UAC/CV,OAAA,EAAAA,OAAA;UACAC,MAAA,EAAAA,MAAA;UACAH,GAAA,EAAAA,GAAA;UACAI,MAAA,EAAAA;QAAA;MAAA;MAKJlJ,KAAA,GAAQ8I,GAAA,CAAIE,OAAA,CAAQhJ,KAAA,CAAM,gBAAgB8I,GAAA,CAAIE,OAAA,CAAQhJ,KAAA,CAAM;MAC5D,IAAIA,KAAA,IAASA,KAAA,CAAMjC,MAAA,GAAS,GAAG;QAC7B,OAAO,IAAI9C,eAAA,CAAgB0O,yBAAA,CAA0B;UACnDT,MAAA,EAAQ;UACRrD,KAAA,EAAO7F,KAAA,CAAM;UACb4J,MAAA,EAAQd;QAAA;MAAA;MAKZ9I,KAAA,GAAQ8I,GAAA,CAAIE,OAAA,CAAQhJ,KAAA,CAAM;MAC1B,IAAIA,KAAA,IAASA,KAAA,CAAMjC,MAAA,GAAS,GAAG;QAC7B,OAAO,IAAI9C,eAAA,CAAgB4O,sBAAA,CAAuB7J,KAAA,CAAM;MAAA;MAG1D,OAAO,IAAI/E,eAAA,CAAgB6O,aAAA,CAAchB,GAAA;IAAA;EAAA;IAAA9L,GAAA;IAAAC,KAAA,EAG3C,SAAA+J,mBAAA,EAAqB;MACnB,OAAO,KAAK/H,GAAA,CAAIoG,OAAA,CAAQ,mEAAmE;IAAA;EAAA;IAAArI,GAAA;IAAAC,KAAA,EAG7F,SAAA8M,mBAAA,EAAqB;MACnB,OAAO,KAAK9K,GAAA,CAAIyH,WAAA,GAAcrB,OAAA,CAAQ,mBAAmB;IAAA;EAAA;IAAArI,GAAA;IAAAC,KAAA,EAG3D,SAAAgK,uBAAuBzB,IAAA,EAAM;MAC3B,IAAMlB,GAAA,GAAM;MAGZkB,IAAA,CAAKxE,OAAA,CAAQ,UAAAgJ,WAAA,EAAe;QAE1B,IAAI,CAAC1F,GAAA,CAAI0F,WAAA,CAAYC,UAAA,GAAa;UAChC3F,GAAA,CAAI0F,WAAA,CAAYC,UAAA,IAAc;YAC5BC,MAAA,EAAQF,WAAA,CAAYG,UAAA,KAAe,WAAW,OAAO;YACrDC,OAAA,EAASJ,WAAA,CAAYjD,eAAA,KAAoB;YACzCsD,IAAA,EAAML,WAAA,CAAYC,UAAA,CAAW1B,WAAA;YAC7BG,SAAA,EAAWsB,WAAA,CAAYrB,UAAA,CAAWJ,WAAA;YAClCtK,IAAA,EAAM;UAAA;UAERqG,GAAA,CAAI0F,WAAA,CAAYC,UAAA,EAAYf,MAAA,GAAS;QAAA;QAIvC5E,GAAA,CAAI0F,WAAA,CAAYC,UAAA,EAAYf,MAAA,CAAO5I,IAAA,CAAK;UACtCgK,SAAA,EAAWN,WAAA,CAAYxD,WAAA;UACvBzI,MAAA,EAAQ;UACRwM,KAAA,EAAOP,WAAA,CAAYQ,OAAA;UACnBC,OAAA,EAAS;QAAA;MAAA;MAIb,IAAMC,aAAA,GAAgB;MACtB,IAAMC,OAAA,GAAUhN,MAAA,CAAOD,IAAA,CAAK4G,GAAA;MAC5B,SAAAsG,GAAA,MAAAC,QAAA,GAAqBF,OAAA,EAAAC,GAAA,GAAAC,QAAA,CAAA9M,MAAA,EAAA6M,GAAA,IAAS;QAA9B,IAAWE,MAAA,GAAAD,QAAA,CAAAD,GAAA;QACT,IAAMG,OAAA,GAAU;QAChBA,OAAA,CAAQ7B,MAAA,GAAS5E,GAAA,CAAIwG,MAAA,EAAQ5B,MAAA;QAG7B,IAAI5E,GAAA,CAAIwG,MAAA,EAAQT,IAAA,CAAKrK,KAAA,CAAM,gBAAgB;UACzCsE,GAAA,CAAIwG,MAAA,EAAQT,IAAA,GAAOjP,KAAA,CAAM4P,SAAA,CAAUD,OAAA,EAASzG,GAAA,CAAIwG,MAAA,EAAQpC,SAAA,EAAW2B,IAAA;QAAA;QAErEK,aAAA,CAAcpK,IAAA,CAAKgE,GAAA,CAAIwG,MAAA;MAAA;MAEzB,OAAOJ,aAAA;IAAA;EAAA;IAAA1N,GAAA;IAAAC,KAAA,EAGT,SAAA6I,kBAAkB0C,OAAA,EAASJ,QAAA,EAAU;MACnC,IAAI,KAAK3C,QAAA,IAAY+C,OAAA,CAAQzK,MAAA,GAAS,GAAG;QACvC,IAAI,iBAAiByK,OAAA,CAAQ,IAAI;UAE/BA,OAAA,CAAQ,GAAG,KAAKjL,KAAA,CAAM0N,mBAAA,IAAuBzC,OAAA,CAAQ,GAAG0C,WAAA;UACxD,OAAO1C,OAAA,CAAQ,GAAG0C,WAAA;QAAA;QAGpB,IAAMC,kBAAA,GAAqB,KAAK5N,KAAA,CAAM6N,sBAAA;QACtC,IAAIC,uBAAA,GAA0B;UAC5BC,EAAA,GAAK;QAEP,IACE3N,MAAA,CAAO4N,SAAA,CAAUC,cAAA,CAAerP,IAAA,CAAK,KAAKoB,KAAA,CAAMyF,aAAA,EAAemI,kBAAA,KAC/D,KAAK5N,KAAA,CAAMyF,aAAA,CAAcmI,kBAAA,EAAoB5B,KAAA,KAAU,QAEvD8B,uBAAA,GAA0B,KAAK9N,KAAA,CAAMyF,aAAA,CAAcmI,kBAAA,EAAoB5B,KAAA;QAEzE+B,EAAA,GAAKA,EAAA,IAAM9C,OAAA,IAAWA,OAAA,CAAQ,GAAG,KAAKtL,gBAAA;QACtCoO,EAAA,GAAKA,EAAA,IAAMlD,QAAA,IAAYA,QAAA,CAAS,KAAKlL,gBAAA;QACrCoO,EAAA,GAAKA,EAAA,IAAM9C,OAAA,IAAWA,OAAA,CAAQ,GAAG2C,kBAAA;QACjCG,EAAA,GAAKA,EAAA,IAAMD,uBAAA,IAA2B7C,OAAA,IAAWA,OAAA,CAAQ,GAAG6C,uBAAA;QAE5D,KAAK5F,QAAA,CAAS0F,kBAAA,IAAsBG,EAAA;MAAA;IAAA;EAAA;IAAAtO,GAAA;IAAAC,KAAA,EAzapC,SAAAwO,qBAWwBxM,GAAA,EAAKwB,MAAA,EAAQiL,OAAA,EAAS;MAEhD,IAAMC,eAAA,GAAkB,SAAlBA,gBAAmB3L,KAAA,EAAOhD,GAAA,EAAK4O,OAAA,EAAW;QAC9C,IAAIA,OAAA,CAAO5O,GAAA,MAAS,QAAW;UAC7B,WAAA6K,MAAA,CAAW7K,GAAA;QAAA;QAEb,OAAO;MAAA;MAETiC,GAAA,GAAMlE,aAAA,CAAc0Q,oBAAA,CAAqBxM,GAAA,EAAKwB,MAAA,EAAQiL,OAAA,EAASC,eAAA,EAAiB;MAEhF,OAAO,CAAC1M,GAAA,EAAKwB,MAAA;IAAA;EAAA;EAAA,OAAA9E,YAAA;AAAA,EA9PgBZ,aAAA"},"metadata":{},"sourceType":"script"}