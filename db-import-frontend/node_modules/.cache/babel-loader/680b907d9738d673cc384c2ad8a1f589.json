{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nvar logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport var InteractiveBrowserCredential = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  function InteractiveBrowserCredential(options) {\n    _classCallCheck(this, InteractiveBrowserCredential);\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      var error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    var browserOptions = options;\n    var loginStyle = browserOptions.loginStyle || \"popup\";\n    var loginStyles = [\"redirect\", \"popup\"];\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      var _error = new Error(\"Invalid loginStyle: \".concat(browserOptions.loginStyle, \". Should be any of the following: \").concat(loginStyles.join(\", \"), \".\"));\n      logger.info(formatError(\"\", _error));\n      throw _error;\n    }\n    var msalOptions = Object.assign(Object.assign({}, options), {\n      logger: logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  _createClass(InteractiveBrowserCredential, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(scopes) {\n        var _this = this;\n        var options,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              return _context2.abrupt(\"return\", tracingClient.withSpan(\"\".concat(this.constructor.name, \".getToken\"), options, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(newOptions) {\n                  var arrayScopes;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n                        return _context.abrupt(\"return\", _this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n                          disableAutomaticAuthentication: _this.disableAutomaticAuthentication\n                        })));\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function (_x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getToken(_x) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n  }, {\n    key: \"authenticate\",\n    value: function () {\n      var _authenticate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(scopes) {\n        var _this2 = this;\n        var options,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              return _context4.abrupt(\"return\", tracingClient.withSpan(\"\".concat(this.constructor.name, \".authenticate\"), options, /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(newOptions) {\n                  var arrayScopes;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n                        _context3.next = 3;\n                        return _this2.msalFlow.getToken(arrayScopes, newOptions);\n                      case 3:\n                        return _context3.abrupt(\"return\", _this2.msalFlow.getActiveAccount());\n                      case 4:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n                return function (_x4) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function authenticate(_x3) {\n        return _authenticate.apply(this, arguments);\n      }\n      return authenticate;\n    }()\n  }]);\n  return InteractiveBrowserCredential;\n}();","map":{"version":3,"names":["credentialLogger","formatError","tracingClient","MSALAuthCode","logger","InteractiveBrowserCredential","options","_classCallCheck","clientId","error","Error","info","browserOptions","loginStyle","loginStyles","indexOf","concat","join","msalOptions","Object","assign","redirectUri","msalFlow","disableAutomaticAuthentication","_createClass","key","value","_getToken","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","scopes","_this","_args2","arguments","wrap","_callee2$","_context2","prev","next","length","undefined","abrupt","withSpan","constructor","name","_ref","_callee","newOptions","arrayScopes","_callee$","_context","Array","isArray","getToken","stop","_x2","apply","_x","_authenticate","_callee4","_this2","_args4","_callee4$","_context4","_ref2","_callee3","_callee3$","_context3","getActiveAccount","_x4","authenticate","_x3"],"sources":["../../../src/credentials/interactiveBrowserCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MsalFlow } from \"../msal/flows\";\nimport { AuthenticationRecord } from \"../msal/types\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { MsalBrowserFlowOptions } from \"../msal/browserFlows/msalBrowserCommon\";\nimport {\n  InteractiveBrowserCredentialInBrowserOptions,\n  InteractiveBrowserCredentialNodeOptions,\n} from \"./interactiveBrowserCredentialOptions\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private msalFlow: MsalFlow;\n  private disableAutomaticAuthentication?: boolean;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    options: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions\n  ) {\n    if (!options?.clientId) {\n      const error = new Error(\n        \"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\"\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const browserOptions = options as InteractiveBrowserCredentialInBrowserOptions;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(\n        `Invalid loginStyle: ${\n          browserOptions.loginStyle\n        }. Should be any of the following: ${loginStyles.join(\", \")}.`\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions: MsalBrowserFlowOptions = {\n      ...options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri:\n        typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri,\n    };\n\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        return this.msalFlow.getToken(arrayScopes, {\n          ...newOptions,\n          disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n        });\n      }\n    );\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AuthenticationRecord | undefined> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.authenticate`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        await this.msalFlow.getToken(arrayScopes, newOptions);\n        return this.msalFlow.getActiveAccount();\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}