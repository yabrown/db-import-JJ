{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __markAsModule = function __markAsModule(target) {\n  return __defProp(target, \"__esModule\", {\n    value: true\n  });\n};\nvar __export = function __export(target, all) {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n__export(exports, {\n  OracleConnectionManager: function OracleConnectionManager() {\n    return _OracleConnectionManager;\n  }\n});\nvar AbstractConnectionManager = require(\"../abstract/connection-manager\");\nvar SequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"oracle\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar semver = require(\"semver\");\nvar debug = logger.debugContext(\"connection:oracle\");\nvar DataTypes = require(\"../../data-types\").oracle;\nvar _require2 = require(\"util\"),\n  promisify = _require2.promisify;\nvar _OracleConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(_OracleConnectionManager, _AbstractConnectionMa);\n  var _super = _createSuper(_OracleConnectionManager);\n  function _OracleConnectionManager(dialect, sequelize) {\n    var _this;\n    _classCallCheck(this, _OracleConnectionManager);\n    _this = _super.call(this, dialect, sequelize);\n    _this.sequelize = sequelize;\n    _this.sequelize.config.port = _this.sequelize.config.port || 1521;\n    _this.lib = _this._loadDialectModule(\"oracledb\");\n    _this.extendLib();\n    _this.refreshTypeParser(DataTypes);\n    return _this;\n  }\n  _createClass(_OracleConnectionManager, [{\n    key: \"extendLib\",\n    value: function extendLib() {\n      if (this.sequelize.config && \"dialectOptions\" in this.sequelize.config) {\n        var dialectOptions = this.sequelize.config.dialectOptions;\n        if (dialectOptions && \"maxRows\" in dialectOptions) {\n          this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;\n        }\n        if (dialectOptions && \"fetchAsString\" in dialectOptions) {\n          this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;\n        } else {\n          this.lib.fetchAsString = [this.lib.CLOB];\n        }\n      }\n      this.lib.fetchAsBuffer = [this.lib.BLOB];\n    }\n  }, {\n    key: \"buildConnectString\",\n    value: function buildConnectString(config) {\n      if (!config.host || config.host.length === 0) return config.database;\n      var connectString = config.host;\n      if (config.port && config.port > 0) {\n        connectString += \":\".concat(config.port);\n      } else {\n        connectString += \":1521\";\n      }\n      if (config.database && config.database.length > 0) {\n        connectString += \"/\".concat(config.database);\n      }\n      return connectString;\n    }\n  }, {\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n        var _this2 = this;\n        var connectionConfig, connection, errorCode;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connectionConfig = __spreadValues({\n                user: config.username,\n                password: config.password,\n                externalAuth: config.externalAuth,\n                stmtCacheSize: 0,\n                connectString: this.buildConnectString(config)\n              }, config.dialectOptions);\n              _context.prev = 1;\n              _context.next = 4;\n              return this.lib.getConnection(connectionConfig);\n            case 4:\n              connection = _context.sent;\n              this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;\n              debug(\"connection acquired\");\n              connection.on(\"error\", function (error) {\n                switch (error.code) {\n                  case \"ESOCKET\":\n                  case \"ECONNRESET\":\n                  case \"EPIPE\":\n                  case \"PROTOCOL_CONNECTION_LOST\":\n                    _this2.pool.destroy(connection);\n                }\n              });\n              return _context.abrupt(\"return\", connection);\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              errorCode = _context.t0.message.split(\":\");\n              errorCode = errorCode[0];\n              _context.t1 = errorCode;\n              _context.next = _context.t1 === \"ORA-12560\" ? 18 : _context.t1 === \"ORA-12154\" ? 18 : _context.t1 === \"ORA-12505\" ? 18 : _context.t1 === \"ORA-12514\" ? 18 : _context.t1 === \"ORA-28000\" ? 19 : _context.t1 === \"ORA-28040\" ? 19 : _context.t1 === \"ORA-01017\" ? 19 : _context.t1 === \"ORA-12541\" ? 20 : _context.t1 === \"ORA-12170\" ? 21 : 22;\n              break;\n            case 18:\n              throw new SequelizeErrors.ConnectionRefusedError(_context.t0);\n            case 19:\n              throw new SequelizeErrors.AccessDeniedError(_context.t0);\n            case 20:\n              throw new SequelizeErrors.HostNotReachableError(_context.t0);\n            case 21:\n              throw new SequelizeErrors.ConnectionTimedOutError(_context.t0);\n            case 22:\n              throw new SequelizeErrors.ConnectionError(_context.t0);\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (connection.isHealthy()) {\n                _context2.next = 3;\n                break;\n              }\n              debug(\"connection tried to disconnect but was already at CLOSED state\");\n              return _context2.abrupt(\"return\");\n            case 3:\n              _context2.next = 5;\n              return promisify(function (callback) {\n                return connection.close(callback);\n              })();\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection && connection.isHealthy();\n    }\n  }]);\n  return _OracleConnectionManager;\n}(AbstractConnectionManager);","map":{"version":3,"names":["__export","exports","OracleConnectionManager","AbstractConnectionManager","require","SequelizeErrors","parserStore","_require","logger","semver","debug","debugContext","DataTypes","oracle","_require2","promisify","_AbstractConnectionMa","_inherits","_OracleConnectionManager","_super","_createSuper","dialect","sequelize","_this","_classCallCheck","call","config","port","lib","_loadDialectModule","extendLib","refreshTypeParser","_createClass","key","value","dialectOptions","maxRows","fetchAsString","CLOB","fetchAsBuffer","BLOB","buildConnectString","host","length","database","connectString","concat","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","connectionConfig","connection","errorCode","wrap","_callee$","_context","prev","next","__spreadValues","user","username","password","externalAuth","stmtCacheSize","getConnection","sent","options","databaseVersion","coerce","oracleServerVersionString","version","on","error","code","pool","destroy","abrupt","t0","message","split","t1","ConnectionRefusedError","AccessDeniedError","HostNotReachableError","ConnectionTimedOutError","ConnectionError","stop","connect","_x","apply","arguments","_disconnect","_callee2","_callee2$","_context2","isHealthy","callback","close","disconnect","_x2","validate"],"sources":["../../../src/dialects/oracle/connection-manager.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\nconst { logger } = require('../../utils/logger');\nconst semver = require('semver');\nconst debug = logger.debugContext('connection:oracle');\nconst DataTypes = require('../../data-types').oracle;\nconst { promisify } = require('util');\n/**\n * Oracle Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle Oracle specific connections\n * Use github.com/oracle/node-oracledb to connect with Oracle server\n *\n * @private\n */\nexport class OracleConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1521;\n    this.lib = this._loadDialectModule('oracledb');\n    this.extendLib();\n    this.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Method for initializing the lib\n   *\n   */\n  extendLib() {\n    if (this.sequelize.config && 'dialectOptions' in this.sequelize.config) {\n      const dialectOptions = this.sequelize.config.dialectOptions;\n      if (dialectOptions && 'maxRows' in dialectOptions) {\n        this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;\n      }\n      if (dialectOptions && 'fetchAsString' in dialectOptions) {\n        this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;\n      } else {\n        this.lib.fetchAsString = [this.lib.CLOB];\n      }\n    }\n    // Retrieve BLOB always as Buffer.\n    this.lib.fetchAsBuffer = [this.lib.BLOB];\n  }\n\n  /**\n   * Method for checking the config object passed and generate the full database if not fully passed\n   * With dbName, host and port, it generates a string like this : 'host:port/dbname'\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  buildConnectString(config) {\n    if (!config.host || config.host.length === 0)\n      return config.database;\n    let connectString = config.host;\n    if (config.port && config.port > 0) {\n      connectString += `:${config.port}`;\n    } else {\n      connectString += ':1521';\n    }\n    if (config.database && config.database.length > 0) {\n      connectString += `/${config.database}`;\n    }\n    return connectString;\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with Oracle database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      user: config.username,\n      password: config.password,\n      externalAuth: config.externalAuth,\n      stmtCacheSize: 0,\n      connectString: this.buildConnectString(config),\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await this.lib.getConnection(connectionConfig);\n      // Setting the sequelize database version to Oracle DB server version to remove the roundtrip for DB version query\n      this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      return connection;\n    } catch (err) {\n      // We split to get the error number; it comes as ORA-XXXXX:\n      let errorCode = err.message.split(':');\n      errorCode = errorCode[0];\n\n      switch (errorCode) {\n        case 'ORA-12560': // ORA-12560: TNS: Protocol Adapter Error\n        case 'ORA-12154': // ORA-12154: TNS: Could not resolve the connect identifier specified\n        case 'ORA-12505': // ORA-12505: TNS: Listener does not currently know of SID given in connect descriptor\n        case 'ORA-12514': // ORA-12514: TNS: Listener does not currently know of service requested in connect descriptor\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ORA-28000': // ORA-28000: Account locked\n        case 'ORA-28040': // ORA-28040: No matching authentication protocol\n        case 'ORA-01017': // ORA-01017: invalid username/password; logon denied\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ORA-12541': // ORA-12541: TNS: No listener\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'ORA-12170': // ORA-12170: TNS: Connect Timeout occurred\n          throw new SequelizeErrors.ConnectionTimedOutError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    if (!connection.isHealthy()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.close(callback))();\n  }\n\n  /**\n   * Checking if the connection object is valid and the connection is healthy\n   *\n   * @param {object} connection\n   * @private\n   */\n  validate(connection) {\n    return connection && connection.isHealthy();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}