{"ast":null,"code":"var _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _assertThisInitialized = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __markAsModule = function __markAsModule(target) {\n  return __defProp(target, \"__esModule\", {\n    value: true\n  });\n};\nvar __export = function __export(target, all) {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n__export(exports, {\n  JoinSQLFragmentsError: function JoinSQLFragmentsError() {\n    return _JoinSQLFragmentsError;\n  },\n  joinSQLFragments: function joinSQLFragments() {\n    return _joinSQLFragments;\n  }\n});\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(function (_ref, part) {\n    var skipNextLeadingSpace = _ref.skipNextLeadingSpace,\n      result = _ref.result;\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += \" \".concat(part.trim());\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result: result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: \"\"\n  }).result;\n}\nfunction _joinSQLFragments(array) {\n  if (array.length === 0) return \"\";\n  var truthyArray = array.filter(function (x) {\n    return !!x;\n  });\n  var flattenedArray = truthyArray.map(function (fragment) {\n    if (Array.isArray(fragment)) {\n      return _joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n  var _iterator = _createForOfIteratorHelper(flattenedArray),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var fragment = _step.value;\n      if (fragment && typeof fragment !== \"string\") {\n        throw new _JoinSQLFragmentsError(flattenedArray, fragment, \"Tried to construct a SQL string with a non-string, non-falsy fragment (\".concat(fragment, \").\"));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var trimmedArray = flattenedArray.map(function (x) {\n    return x.trim();\n  });\n  var nonEmptyStringArray = trimmedArray.filter(function (x) {\n    return x !== \"\";\n  });\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\nvar _JoinSQLFragmentsError = /*#__PURE__*/function (_TypeError) {\n  \"use strict\";\n\n  _inherits(_JoinSQLFragmentsError, _TypeError);\n  var _super = _createSuper(_JoinSQLFragmentsError);\n  function _JoinSQLFragmentsError(args, fragment, message) {\n    var _this;\n    _classCallCheck(this, _JoinSQLFragmentsError);\n    _this = _super.call(this, message);\n    __publicField(_assertThisInitialized(_this), \"args\");\n    __publicField(_assertThisInitialized(_this), \"fragment\");\n    _this.args = args;\n    _this.fragment = fragment;\n    _this.name = \"JoinSQLFragmentsError\";\n    return _this;\n  }\n  return _createClass(_JoinSQLFragmentsError);\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));","map":{"version":3,"names":["__export","exports","JoinSQLFragmentsError","joinSQLFragments","doesNotWantLeadingSpace","str","test","doesNotWantTrailingSpace","singleSpaceJoinHelper","parts","reduce","_ref","part","skipNextLeadingSpace","result","trim","concat","array","length","truthyArray","filter","x","flattenedArray","map","fragment","Array","isArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","trimmedArray","nonEmptyStringArray","_TypeError","_inherits","_JoinSQLFragmentsError","_super","_createSuper","args","message","_this","_classCallCheck","call","__publicField","_assertThisInitialized","name","_createClass","_wrapNativeSuper","TypeError"],"sources":["../../src/utils/join-sql-fragments.ts"],"sourcesContent":["import { SQLFragment, TruthySQLFragment } from '../generic/sql-fragment';\n\nfunction doesNotWantLeadingSpace(str: string): boolean {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str: string): boolean {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n *\n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n *\n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts: string[]): string {\n  return parts.reduce(\n    ({ skipNextLeadingSpace, result }, part) => {\n      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n        result += part.trim();\n      } else {\n        result += ` ${part.trim()}`;\n      }\n      return {\n        skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n        result\n      };\n    },\n    {\n      skipNextLeadingSpace: true,\n      result: ''\n    }\n  ).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n *\n * Certain elements do not get leading/trailing spaces.\n *\n * @param {SQLFragment[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n *\n * @returns {string} The joined string.\n *\n * @private\n */\nexport function joinSQLFragments(array: SQLFragment[]): string {\n  if (array.length === 0) return '';\n\n  const truthyArray: TruthySQLFragment[] = array.filter(\n    (x): x is string | SQLFragment[] => !!x\n  );\n  const flattenedArray: string[] = truthyArray.map(\n    (fragment: TruthySQLFragment) => {\n      if (Array.isArray(fragment)) {\n        return joinSQLFragments(fragment);\n      }\n\n      return fragment;\n    }\n  );\n\n  // Ensure strings\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== 'string') {\n      throw new JoinSQLFragmentsError(\n        flattenedArray,\n        fragment,\n        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`\n      );\n    }\n  }\n\n  // Trim fragments\n  const trimmedArray = flattenedArray.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nexport class JoinSQLFragmentsError extends TypeError {\n  args: SQLFragment[];\n  fragment: any; // iirc this error is only used when we get an invalid fragment.\n\n  constructor(args: SQLFragment[], fragment: any, message: string) {\n    super(message);\n    \n    this.args = args;\n    this.fragment = fragment;\n    this.name = 'JoinSQLFragmentsError';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}