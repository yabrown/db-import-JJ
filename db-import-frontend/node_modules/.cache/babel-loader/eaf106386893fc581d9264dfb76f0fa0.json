{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar AbstractConnectionManager = require(\"../abstract/connection-manager\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"connection:sqlite\");\nvar dataTypes = require(\"../../data-types\").sqlite;\nvar sequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"sqlite\");\nvar _require2 = require(\"util\"),\n  promisify = _require2.promisify;\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n  var _super = _createSuper(ConnectionManager);\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n    _classCallCheck(this, ConnectionManager);\n    _this = _super.call(this, dialect, sequelize);\n    if (_this.sequelize.options.host === \"localhost\") {\n      delete _this.sequelize.options.host;\n    }\n    _this.connections = {};\n    _this.lib = _this._loadDialectModule(\"sqlite3\");\n    _this.refreshTypeParser(dataTypes);\n    return _this;\n  }\n  _createClass(ConnectionManager, [{\n    key: \"_onProcessExit\",\n    value: function () {\n      var _onProcessExit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.all(Object.getOwnPropertyNames(this.connections).map(function (connection) {\n                return promisify(function (callback) {\n                  return _this2.connections[connection].close(callback);\n                })();\n              }));\n            case 2:\n              return _context.abrupt(\"return\", _get(_getPrototypeOf(ConnectionManager.prototype), \"_onProcessExit\", this).call(this));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _onProcessExit() {\n        return _onProcessExit2.apply(this, arguments);\n      }\n      return _onProcessExit;\n    }()\n  }, {\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"getConnection\",\n    value: function () {\n      var _getConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {\n        var _this3 = this;\n        var dialectOptions, defaultReadWriteMode, connection;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n              options.uuid = options.uuid || \"default\";\n              if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== void 0) {\n                options.storage = this.sequelize.options.storage;\n              } else {\n                options.storage = this.sequelize.options.host || \":memory:\";\n              }\n              options.inMemory = options.storage === \":memory:\" ? 1 : 0;\n              dialectOptions = this.sequelize.options.dialectOptions;\n              defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n              options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n              if (!this.connections[options.inMemory || options.uuid]) {\n                _context2.next = 9;\n                break;\n              }\n              return _context2.abrupt(\"return\", this.connections[options.inMemory || options.uuid]);\n            case 9:\n              if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n                fs.mkdirSync(path.dirname(options.storage), {\n                  recursive: true\n                });\n              }\n              _context2.next = 12;\n              return new Promise(function (resolve, reject) {\n                _this3.connections[options.inMemory || options.uuid] = new _this3.lib.Database(options.storage, options.readWriteMode, function (err) {\n                  if (err) return reject(new sequelizeErrors.ConnectionError(err));\n                  debug(\"connection acquired \".concat(options.uuid));\n                  resolve(_this3.connections[options.inMemory || options.uuid]);\n                });\n              });\n            case 12:\n              connection = _context2.sent;\n              if (this.sequelize.config.password) {\n                connection.run(\"PRAGMA KEY=\".concat(this.sequelize.escape(this.sequelize.config.password)));\n              }\n              if (this.sequelize.options.foreignKeys !== false) {\n                connection.run(\"PRAGMA FOREIGN_KEYS=ON\");\n              }\n              return _context2.abrupt(\"return\", connection);\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getConnection(_x) {\n        return _getConnection.apply(this, arguments);\n      }\n      return getConnection;\n    }()\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection(connection, force) {\n      if (connection.filename === \":memory:\" && force !== true) return;\n      if (connection.uuid) {\n        connection.close();\n        debug(\"connection released \".concat(connection.uuid));\n        delete this.connections[connection.uuid];\n      }\n    }\n  }]);\n  return ConnectionManager;\n}(AbstractConnectionManager);\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["fs","require","path","AbstractConnectionManager","_require","logger","debug","debugContext","dataTypes","sqlite","sequelizeErrors","parserStore","_require2","promisify","ConnectionManager","_AbstractConnectionMa","_inherits","_super","_createSuper","dialect","sequelize","_this","_classCallCheck","call","options","host","connections","lib","_loadDialectModule","refreshTypeParser","_createClass","key","value","_onProcessExit2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","wrap","_callee$","_context","prev","next","Promise","all","Object","getOwnPropertyNames","map","connection","callback","close","abrupt","_get","_getPrototypeOf","prototype","stop","_onProcessExit","apply","arguments","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_getConnection","_callee2","_this3","dialectOptions","defaultReadWriteMode","_callee2$","_context2","uuid","storage","inMemory","OPEN_READWRITE","OPEN_CREATE","readWriteMode","mode","mkdirSync","dirname","recursive","resolve","reject","Database","err","ConnectionError","concat","sent","config","password","run","escape","foreignKeys","getConnection","_x","releaseConnection","force","filename","module","exports","default"],"sources":["../../../src/dialects/sqlite/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3');\n    this.refreshTypeParser(dataTypes);\n  }\n\n  async _onProcessExit() {\n    await Promise.all(\n      Object.getOwnPropertyNames(this.connections)\n        .map(connection => promisify(callback => this.connections[connection].close(callback))())\n    );\n    return super._onProcessExit.call(this);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== undefined) {\n      // Check explicitely for the storage option to not be set since an empty string signals\n      // SQLite will create a temporary disk-based database in that case.\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || ':memory:';\n    }\n\n    options.inMemory = options.storage === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      // automatic path provision for `options.storage`\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        options.storage,\n        options.readWriteMode,\n        err => {\n          if (err) return reject(new sequelizeErrors.ConnectionError(err));\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    });\n\n    if (this.sequelize.config.password) {\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      // Make it possible to define and use foreign key constraints unless\n      // explicitly disallowed. It's still opt-in per relation\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\n    }\n\n    return connection;\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}