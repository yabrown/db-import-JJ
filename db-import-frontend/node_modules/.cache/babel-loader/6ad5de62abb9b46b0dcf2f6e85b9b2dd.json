{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __markAsModule = function __markAsModule(target) {\n  return __defProp(target, \"__esModule\", {\n    value: true\n  });\n};\nvar __export = function __export(target, all) {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n__export(exports, {\n  OracleQueryInterface: function OracleQueryInterface() {\n    return _OracleQueryInterface;\n  }\n});\nvar _require = require(\"../abstract/query-interface\"),\n  QueryInterface = _require.QueryInterface;\nvar QueryTypes = require(\"../../query-types\");\nvar _ = require(\"lodash\");\nvar _OracleQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(_OracleQueryInterface, _QueryInterface);\n  var _super = _createSuper(_OracleQueryInterface);\n  function _OracleQueryInterface() {\n    _classCallCheck(this, _OracleQueryInterface);\n    return _super.apply(this, arguments);\n  }\n  _createClass(_OracleQueryInterface, [{\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tableName, insertValues, updateValues, where, options) {\n        var model, primaryKeys, uniqueKeys, indexKeys, _iterator2, _step2, _loop, _ret, whereHasNull, sql;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = __spreadValues({}, options);\n              model = options.model;\n              primaryKeys = Object.values(model.primaryKeys).map(function (item) {\n                return item.field;\n              });\n              uniqueKeys = Object.values(model.uniqueKeys).filter(function (c) {\n                return c.fields.length > 0;\n              }).map(function (c) {\n                return c.fields;\n              });\n              indexKeys = Object.values(model._indexes).filter(function (c) {\n                return c.unique && c.fields.length > 0;\n              }).map(function (c) {\n                return c.fields;\n              });\n              options.type = QueryTypes.UPSERT;\n              options.updateOnDuplicate = Object.keys(updateValues);\n              options.upsertKeys = [];\n              _iterator2 = _createForOfIteratorHelper(options.updateOnDuplicate);\n              _context2.prev = 9;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var field, uniqueKey, indexKey;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      field = _step2.value;\n                      uniqueKey = uniqueKeys.find(function (fields) {\n                        return fields.includes(field);\n                      });\n                      if (!uniqueKey) {\n                        _context.next = 5;\n                        break;\n                      }\n                      options.upsertKeys = uniqueKey;\n                      return _context.abrupt(\"return\", \"break\");\n                    case 5:\n                      indexKey = indexKeys.find(function (fields) {\n                        return fields.includes(field);\n                      });\n                      if (!indexKey) {\n                        _context.next = 9;\n                        break;\n                      }\n                      options.upsertKeys = indexKey;\n                      return _context.abrupt(\"return\", \"break\");\n                    case 9:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop);\n              });\n              _iterator2.s();\n            case 12:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 19;\n                break;\n              }\n              return _context2.delegateYield(_loop(), \"t0\", 14);\n            case 14:\n              _ret = _context2.t0;\n              if (!(_ret === \"break\")) {\n                _context2.next = 17;\n                break;\n              }\n              return _context2.abrupt(\"break\", 19);\n            case 17:\n              _context2.next = 12;\n              break;\n            case 19:\n              _context2.next = 24;\n              break;\n            case 21:\n              _context2.prev = 21;\n              _context2.t1 = _context2[\"catch\"](9);\n              _iterator2.e(_context2.t1);\n            case 24:\n              _context2.prev = 24;\n              _iterator2.f();\n              return _context2.finish(24);\n            case 27:\n              if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {\n                options.upsertKeys = primaryKeys;\n              }\n              options.upsertKeys = _.uniq(options.upsertKeys);\n              whereHasNull = false;\n              primaryKeys.forEach(function (element) {\n                if (where[element] === null) {\n                  whereHasNull = true;\n                }\n              });\n              if (whereHasNull === true) {\n                where = options.upsertKeys.reduce(function (result, attribute) {\n                  result[attribute] = insertValues[attribute];\n                  return result;\n                }, {});\n              }\n              sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n              if (sql.bind) {\n                options.bind = void 0;\n              }\n              _context2.next = 36;\n              return this.sequelize.query(sql, options);\n            case 36:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee, this, [[9, 21, 24, 27]]);\n      }));\n      function upsert(_x, _x2, _x3, _x4, _x5) {\n        return _upsert.apply(this, arguments);\n      }\n      return upsert;\n    }()\n  }]);\n  return _OracleQueryInterface;\n}(QueryInterface);","map":{"version":3,"names":["__export","exports","OracleQueryInterface","_require","require","QueryInterface","QueryTypes","_","_QueryInterface","_inherits","_OracleQueryInterface","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_upsert","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tableName","insertValues","updateValues","where","options","model","primaryKeys","uniqueKeys","indexKeys","_iterator2","_step2","_loop","_ret","whereHasNull","sql","wrap","_callee$","_context2","prev","next","__spreadValues","Object","values","map","item","field","filter","c","fields","length","_indexes","unique","type","UPSERT","updateOnDuplicate","keys","upsertKeys","_createForOfIteratorHelper","uniqueKey","indexKey","_loop$","_context","find","includes","abrupt","stop","s","n","done","delegateYield","t0","t1","e","f","finish","intersection","uniq","forEach","element","reduce","result","attribute","queryGenerator","upsertQuery","bind","sequelize","query","sent","upsert","_x","_x2","_x3","_x4","_x5"],"sources":["../../../src/dialects/oracle/query-interface.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\nconst _ = require('lodash');\n/**\n * The interface that Sequelize uses to talk with Oracle database\n */\nexport class OracleQueryInterface extends QueryInterface {\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n    const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n    const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = [];\n\n    // For fields in updateValues, try to find a constraint or unique index\n    // that includes given field. Only first matching upsert key is used.\n    for (const field of options.updateOnDuplicate) {\n      const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n      if (uniqueKey) {\n        options.upsertKeys = uniqueKey;\n        break;\n      }\n\n      const indexKey = indexKeys.find(fields => fields.includes(field));\n      if (indexKey) {\n        options.upsertKeys = indexKey;\n        break;\n      }\n    }\n\n    // Always use PK, if no constraint available OR update data contains PK\n    if (\n      options.upsertKeys.length === 0\n      || _.intersection(options.updateOnDuplicate, primaryKeys).length\n    ) {\n      options.upsertKeys = primaryKeys;\n    }\n\n    options.upsertKeys = _.uniq(options.upsertKeys);\n\n    let whereHasNull = false;\n\n    primaryKeys.forEach(element => {\n      if (where[element] === null) {\n        whereHasNull = true;\n      }\n    });\n\n    if (whereHasNull === true) {\n      where = options.upsertKeys.reduce((result, attribute) => {\n        result[attribute] = insertValues[attribute];\n        return result;\n      }, {}); \n    }\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    // we need set this to undefined otherwise sequelize would raise an error\n    // Error: Both `sql.bind` and `options.bind` cannot be set at the same time\n    if (sql.bind) {\n      options.bind = undefined;\n    }\n    return await this.sequelize.query(sql, options);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}