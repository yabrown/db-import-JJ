{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Separators, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\nfunction buildClientInfo(rawClientInfo, crypto) {\n  if (StringUtils.isEmpty(rawClientInfo)) {\n    throw ClientAuthError.createClientInfoEmptyError();\n  }\n  try {\n    var decodedClientInfo = crypto.base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw ClientAuthError.createClientInfoDecodingError(e.message);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (StringUtils.isEmpty(homeAccountId)) {\n    throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n  }\n  var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"names":["buildClientInfo","rawClientInfo","crypto","StringUtils","isEmpty","ClientAuthError","createClientInfoEmptyError","decodedClientInfo","base64Decode","JSON","parse","e","createClientInfoDecodingError","message","buildClientInfoFromHomeAccountId","homeAccountId","clientInfoParts","split","Separators","CLIENT_INFO_SEPARATOR","uid","utid","length","Constants","EMPTY_STRING"],"sources":["../../src/account/ClientInfo.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Separators, Constants } from \"../utils/Constants\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string,\n    utid: string\n};\n\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(rawClientInfo: string, crypto: ICrypto): ClientInfo {\n    if (StringUtils.isEmpty(rawClientInfo)) {\n        throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    try {\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw ClientAuthError.createClientInfoDecodingError((e as ClientAuthError).message);\n    }\n}\n\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId \n */\nexport function buildClientInfoFromHomeAccountId(homeAccountId: string): ClientInfo {\n    if (StringUtils.isEmpty(homeAccountId)) {\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n    }\n    const clientInfoParts: string[] = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n    };\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAeH;;;;AAIG;AACa,SAAAA,eAAeA,CAACC,aAAqB,EAAEC,MAAe;EAClE,IAAIC,WAAW,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;IACpC,MAAMI,eAAe,CAACC,0BAA0B,EAAE;EACrD;EAED,IAAI;IACA,IAAMC,iBAAiB,GAAWL,MAAM,CAACM,YAAY,CAACP,aAAa,CAAC;IACpE,OAAOQ,IAAI,CAACC,KAAK,CAACH,iBAAiB,CAAe;EACrD,EAAC,OAAOI,CAAC,EAAE;IACR,MAAMN,eAAe,CAACO,6BAA6B,CAAED,CAAqB,CAACE,OAAO,CAAC;EACtF;AACL;AAEA;;;AAGG;AACG,SAAUC,gCAAgCA,CAACC,aAAqB;EAClE,IAAIZ,WAAW,CAACC,OAAO,CAACW,aAAa,CAAC,EAAE;IACpC,MAAMV,eAAe,CAACO,6BAA6B,CAAC,4BAA4B,CAAC;EACpF;EACD,IAAMI,eAAe,GAAaD,aAAa,CAACE,KAAK,CAACC,UAAU,CAACC,qBAAqB,EAAE,CAAC,CAAC;EAC1F,OAAO;IACHC,GAAG,EAAEJ,eAAe,CAAC,CAAC,CAAC;IACvBK,IAAI,EAAEL,eAAe,CAACM,MAAM,GAAG,CAAC,GAAGC,SAAS,CAACC,YAAY,GAAGR,eAAe,CAAC,CAAC;GAChF;AACL"},"metadata":{},"sourceType":"module"}