{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar util = require('util');\nvar fs = require('fs');\nvar fsm = require('fs-minipass');\nvar ssri = require('ssri');\nvar contentPath = require('./path');\nvar Pipeline = require('minipass-pipeline');\nvar lstat = util.promisify(fs.lstat);\nvar readFile = util.promisify(fs.readFile);\nmodule.exports = read;\nvar MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nfunction read(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    // get size\n    return lstat(cpath).then(function (stat) {\n      return {\n        stat: stat,\n        cpath: cpath,\n        sri: sri\n      };\n    });\n  }).then(function (_ref) {\n    var stat = _ref.stat,\n      cpath = _ref.cpath,\n      sri = _ref.sri;\n    if (typeof size === 'number' && stat.size !== size) throw sizeError(size, stat.size);\n    if (stat.size > MAX_SINGLE_READ_SIZE) return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    return readFile(cpath, null).then(function (data) {\n      if (!ssri.checkData(data, sri)) throw integrityError(sri, cpath);\n      return data;\n    });\n  });\n}\nvar readPipeline = function readPipeline(cpath, size, sri, stream) {\n  stream.push(new fsm.ReadStream(cpath, {\n    size: size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size: size\n  }));\n  return stream;\n};\nmodule.exports.sync = readSync;\nfunction readSync(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    var data = fs.readFileSync(cpath);\n    if (typeof size === 'number' && size !== data.length) throw sizeError(size, data.length);\n    if (ssri.checkData(data, sri)) return data;\n    throw integrityError(sri, cpath);\n  });\n}\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  var stream = new Pipeline();\n  withContentSri(cache, integrity, function (cpath, sri) {\n    // just lstat to ensure it exists\n    return lstat(cpath).then(function (stat) {\n      return {\n        stat: stat,\n        cpath: cpath,\n        sri: sri\n      };\n    });\n  }).then(function (_ref2) {\n    var stat = _ref2.stat,\n      cpath = _ref2.cpath,\n      sri = _ref2.sri;\n    if (typeof size === 'number' && size !== stat.size) return stream.emit('error', sizeError(size, stat.size));\n    readPipeline(cpath, stat.size, sri, stream);\n  }, function (er) {\n    return stream.emit('error', er);\n  });\n  return stream;\n}\nvar copyFile;\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFile = util.promisify(fs.copyFile);\n}\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return copyFile(cpath, dest);\n  });\n}\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(cache, integrity) {\n  if (!integrity) return Promise.resolve(false);\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return lstat(cpath).then(function (stat) {\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    });\n  }).catch(function (err) {\n    if (err.code === 'ENOENT') return false;\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') throw err;else return false;\n    }\n  });\n}\nmodule.exports.hasContent.sync = hasContentSync;\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) return false;\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    try {\n      var stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') return false;\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') throw err;else return false;\n      }\n    }\n  });\n}\nfunction withContentSri(cache, integrity, fn) {\n  var tryFn = function tryFn() {\n    var sri = ssri.parse(integrity);\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    var algo = sri.pickAlgorithm();\n    var digests = sri[algo];\n    if (digests.length <= 1) {\n      var cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise.all(digests.map(function (meta) {\n        return withContentSri(cache, meta, fn).catch(function (err) {\n          if (err.code === 'ENOENT') {\n            return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n              code: 'ENOENT'\n            });\n          }\n          return err;\n        });\n      })).then(function (results) {\n        // Return the first non error if it is found\n        var result = results.find(function (r) {\n          return !(r instanceof Error);\n        });\n        if (result) return result;\n\n        // Throw the No matching content found error\n        var enoentError = results.find(function (r) {\n          return r.code === 'ENOENT';\n        });\n        if (enoentError) throw enoentError;\n\n        // Throw generic error\n        throw results.find(function (r) {\n          return r instanceof Error;\n        });\n      });\n    }\n  };\n  return new Promise(function (resolve, reject) {\n    try {\n      tryFn().then(resolve).catch(reject);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nfunction withContentSriSync(cache, integrity, fn) {\n  var sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  var algo = sri.pickAlgorithm();\n  var digests = sri[algo];\n  if (digests.length <= 1) {\n    var cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    var lastErr = null;\n    var _iterator = _createForOfIteratorHelper(digests),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var meta = _step.value;\n        try {\n          return withContentSriSync(cache, meta, fn);\n        } catch (err) {\n          lastErr = err;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    throw lastErr;\n  }\n}\nfunction sizeError(expected, found) {\n  var err = new Error(\"Bad data size: expected inserted data to be \".concat(expected, \" bytes, but got \").concat(found, \" instead\"));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  var err = new Error(\"Integrity verification failed for \".concat(sri, \" (\").concat(path, \")\"));\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","util","fs","fsm","ssri","contentPath","Pipeline","lstat","promisify","readFile","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","arguments","length","undefined","size","withContentSri","cpath","sri","then","stat","_ref","sizeError","readPipeline","concat","data","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","readStream","_ref2","emit","er","copyFile","copy","copySync","dest","copyFileSync","hasContent","Promise","resolve","catch","err","code","process","platform","hasContentSync","lstatSync","fn","tryFn","parse","algo","pickAlgorithm","digests","all","map","meta","Object","assign","Error","toString","results","result","find","r","enoentError","reject","lastErr","_iterator","_step","s","n","done","value","e","f","expected","found","path"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nconst lstat = util.promisify(fs.lstat)\nconst readFile = util.promisify(fs.readFile)\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nfunction read (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && stat.size !== size)\n      throw sizeError(size, stat.size)\n\n    if (stat.size > MAX_SINGLE_READ_SIZE)\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n\n    return readFile(cpath, null).then((data) => {\n      if (!ssri.checkData(data, sri))\n        throw integrityError(sri, cpath)\n\n      return data\n    })\n  })\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof size === 'number' && size !== data.length)\n      throw sizeError(size, data.length)\n\n    if (ssri.checkData(data, sri))\n      return data\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then((stat) => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && size !== stat.size)\n      return stream.emit('error', sizeError(size, stat.size))\n\n    readPipeline(cpath, stat.size, sri, stream)\n  }, er => stream.emit('error', er))\n\n  return stream\n}\n\nlet copyFile\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFile = util.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nfunction hasContent (cache, integrity) {\n  if (!integrity)\n    return Promise.resolve(false)\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then((stat) => ({ size: stat.size, sri, stat }))\n  }).catch((err) => {\n    if (err.code === 'ENOENT')\n      return false\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32')\n        throw err\n      else\n        return false\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity)\n    return false\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT')\n        return false\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32')\n          throw err\n        else\n          return false\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise\n        .all(digests.map((meta) => {\n          return withContentSri(cache, meta, fn)\n            .catch((err) => {\n              if (err.code === 'ENOENT') {\n                return Object.assign(\n                  new Error('No matching content found for ' + sri.toString()),\n                  { code: 'ENOENT' }\n                )\n              }\n              return err\n            })\n        }))\n        .then((results) => {\n          // Return the first non error if it is found\n          const result = results.find((r) => !(r instanceof Error))\n          if (result)\n            return result\n\n          // Throw the No matching content found error\n          const enoentError = results.find((r) => r.code === 'ENOENT')\n          if (enoentError)\n            throw enoentError\n\n          // Throw generic error\n          throw results.find((r) => r instanceof Error)\n        })\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn()\n        .then(resolve)\n        .catch(reject)\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}