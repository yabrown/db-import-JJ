{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.readCollation = readCollation;\nvar _collation = require(\"./collation\");\nvar _dataType = require(\"./data-type\");\nvar _sprintfJs = require(\"sprintf-js\");\nfunction readCollation(parser, callback) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, function (collationData) {\n    callback(_collation.Collation.fromBuffer(collationData));\n  });\n}\nfunction readSchema(parser, callback) {\n  // s2.2.5.5.3\n  parser.readUInt8(function (schemaPresent) {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar(function (dbname) {\n        parser.readBVarChar(function (owningSchema) {\n          parser.readUsVarChar(function (xmlSchemaCollection) {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\nfunction readUDTInfo(parser, callback) {\n  parser.readUInt16LE(function (maxByteSize) {\n    parser.readBVarChar(function (dbname) {\n      parser.readBVarChar(function (owningSchema) {\n        parser.readBVarChar(function (typeName) {\n          parser.readUsVarChar(function (assemblyName) {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\nfunction metadataParse(parser, options, callback) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, function (userType) {\n    parser.readUInt16LE(function (flags) {\n      parser.readUInt8(function (typeNumber) {\n        var type = _dataType.TYPE[typeNumber];\n        if (!type) {\n          throw new Error((0, _sprintfJs.sprintf)('Unrecognised data type 0x%02X', typeNumber));\n        }\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n          case 'Variant':\n            return parser.readUInt32LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE(function (dataLength) {\n              readCollation(parser, function (collation) {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE(function (dataLength) {\n              readCollation(parser, function (collation) {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n          case 'Image':\n            return parser.readUInt32LE(function (dataLength) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n          case 'Xml':\n            return readSchema(parser, function (schema) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8(function (scale) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8(function (dataLength) {\n              parser.readUInt8(function (precision) {\n                parser.readUInt8(function (scale) {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n          case 'UDT':\n            return readUDTInfo(parser, function (udtInfo) {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n          default:\n            throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\n        }\n      });\n    });\n  });\n}\nvar _default = metadataParse;\nexports.default = _default;\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;","map":{"version":3,"names":["_collation","require","_dataType","_sprintfJs","readCollation","parser","callback","readBuffer","collationData","Collation","fromBuffer","readSchema","readUInt8","schemaPresent","readBVarChar","dbname","owningSchema","readUsVarChar","xmlSchemaCollection","undefined","readUDTInfo","readUInt16LE","maxByteSize","typeName","assemblyName","metadataParse","options","tdsVersion","readUInt32LE","call","userType","flags","typeNumber","type","TYPE","Error","sprintf","name","collation","precision","scale","dataLength","schema","udtInfo","module","exports"],"sources":["../src/metadata-parser.ts"],"sourcesContent":["import { Collation } from './collation';\nimport Parser, { ParserOptions } from './token/stream-parser';\nimport { TYPE, DataType } from './data-type';\nimport { CryptoMetadata } from './always-encrypted/types';\n\nimport { sprintf } from 'sprintf-js';\n\ninterface XmlSchema {\n  dbname: string;\n  owningSchema: string;\n  xmlSchemaCollection: string;\n}\n\ninterface UdtInfo {\n  maxByteSize: number;\n  dbname: string;\n  owningSchema: string;\n  typeName: string;\n  assemblyName: string;\n}\n\nexport type BaseMetadata = {\n  userType: number;\n\n  flags: number;\n  /**\n   * The column's type, such as VarChar, Int or Binary.\n   */\n  type: DataType;\n\n  collation: Collation | undefined;\n  /**\n   * The precision. Only applicable to numeric and decimal.\n   */\n  precision: number | undefined;\n\n  /**\n   * The scale. Only applicable to numeric, decimal, time, datetime2 and datetimeoffset.\n   */\n  scale: number | undefined;\n\n  /**\n   * The length, for char, varchar, nvarchar and varbinary.\n   */\n  dataLength: number | undefined;\n\n  schema: XmlSchema | undefined;\n\n  udtInfo: UdtInfo | undefined;\n}\n\nexport type Metadata = {\n  cryptoMetadata?: CryptoMetadata;\n} & BaseMetadata;\n\n\nfunction readCollation(parser: Parser, callback: (collation: Collation) => void) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, (collationData) => {\n    callback(Collation.fromBuffer(collationData));\n  });\n}\n\nfunction readSchema(parser: Parser, callback: (schema: XmlSchema | undefined) => void) {\n  // s2.2.5.5.3\n  parser.readUInt8((schemaPresent) => {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar((dbname) => {\n        parser.readBVarChar((owningSchema) => {\n          parser.readUsVarChar((xmlSchemaCollection) => {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\n\nfunction readUDTInfo(parser: Parser, callback: (udtInfo: UdtInfo | undefined) => void) {\n  parser.readUInt16LE((maxByteSize) => {\n    parser.readBVarChar((dbname) => {\n      parser.readBVarChar((owningSchema) => {\n        parser.readBVarChar((typeName) => {\n          parser.readUsVarChar((assemblyName) => {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction metadataParse(parser: Parser, options: ParserOptions, callback: (metadata: Metadata) => void) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, (userType) => {\n    parser.readUInt16LE((flags) => {\n      parser.readUInt8((typeNumber) => {\n        const type: DataType = TYPE[typeNumber];\n\n        if (!type) {\n          throw new Error(sprintf('Unrecognised data type 0x%02X', typeNumber));\n        }\n\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Variant':\n            return parser.readUInt32LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE((dataLength) => {\n              readCollation(parser, (collation) => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE((dataLength) => {\n              readCollation(parser, (collation) => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Image':\n            return parser.readUInt32LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Xml':\n            return readSchema(parser, (schema) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8((scale) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8((dataLength) => {\n              parser.readUInt8((precision) => {\n                parser.readUInt8((scale) => {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n\n          case 'UDT':\n            return readUDTInfo(parser, (udtInfo) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n\n          default:\n            throw new Error(sprintf('Unrecognised type %s', type.name));\n        }\n      });\n    });\n  });\n}\n\nexport default metadataParse;\nexport { readCollation };\n\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}