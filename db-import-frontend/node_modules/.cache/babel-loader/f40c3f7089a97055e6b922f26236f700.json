{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\nimport { generateUUID } from \"./uuidUtils.native\";\n// NOTE: This could be undefined if not used in a secure context\nvar uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : generateUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n  return uuidFunction();\n}","map":{"version":3,"names":["generateUUID","uuidFunction","_a","globalThis","crypto","randomUUID","bind"],"sources":["../../src/uuidUtils.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { generateUUID } from \"./uuidUtils.native\";\n\ninterface Crypto {\n  randomUUID(): string;\n}\n\ndeclare const globalThis: {\n  crypto: Crypto;\n};\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction =\n  typeof globalThis?.crypto?.randomUUID === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return uuidFunction();\n}\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,YAAY,QAAQ,oBAAoB;AAUjD;AACA,IAAMC,YAAY,GAChB,QAAO,CAAAC,EAAA,GAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEC,MAAM,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,UAAU,MAAK,UAAU,GAChDF,UAAU,CAACC,MAAM,CAACC,UAAU,CAACC,IAAI,CAACH,UAAU,CAACC,MAAM,CAAC,GACpDJ,YAAY;AAElB;;;;;AAKA,OAAM,SAAUK,UAAUA,CAAA;EACxB,OAAOJ,YAAY,EAAE;AACvB"},"metadata":{},"sourceType":"module"}