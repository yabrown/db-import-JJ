{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _defineProperty = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _ = require(\"lodash\");\nvar Utils = require(\"../../utils\");\nvar AbstractQuery = require(\"../abstract/query\");\nvar QueryTypes = require(\"../../query-types\");\nvar sequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"sqlite\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar debug = logger.debugContext(\"sql:sqlite\");\nfunction stringifyIfBigint(value) {\n  if (typeof value === \"bigint\") {\n    return value.toString();\n  }\n  return value;\n}\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n  var _super = _createSuper(Query);\n  function Query() {\n    _classCallCheck(this, Query);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Query, [{\n    key: \"getInsertIdField\",\n    value: function getInsertIdField() {\n      return \"lastID\";\n    }\n  }, {\n    key: \"_collectModels\",\n    value: function _collectModels(include, prefix) {\n      var ret = {};\n      if (include) {\n        var _iterator = _createForOfIteratorHelper(include),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _include = _step.value;\n            var key = void 0;\n            if (!prefix) {\n              key = _include.as;\n            } else {\n              key = \"\".concat(prefix, \".\").concat(_include.as);\n            }\n            ret[key] = _include.model;\n            if (_include.include) {\n              _.merge(ret, this._collectModels(_include.include, key));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return ret;\n    }\n  }, {\n    key: \"_handleQueryResponse\",\n    value: function _handleQueryResponse(metaData, columnTypes, err, results, errStack) {\n      var _this = this;\n      if (err) {\n        err.sql = this.sql;\n        throw this.formatError(err, errStack);\n      }\n      var result = this.instance;\n      if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {\n        this.handleInsertQuery(results, metaData);\n        if (!this.instance) {\n          if (metaData.constructor.name === \"Statement\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n            var startId = metaData[this.getInsertIdField()] - metaData.changes + 1;\n            result = [];\n            for (var i = startId; i < startId + metaData.changes; i++) {\n              result.push(_defineProperty({}, this.model.rawAttributes[this.model.primaryKeyAttribute].field, i));\n            }\n          } else {\n            result = metaData[this.getInsertIdField()];\n          }\n        }\n      }\n      if (this.isShowTablesQuery()) {\n        return results.map(function (row) {\n          return row.name;\n        });\n      }\n      if (this.isShowConstraintsQuery()) {\n        result = results;\n        if (results && results[0] && results[0].sql) {\n          result = this.parseConstraintsFromSql(results[0].sql);\n        }\n        return result;\n      }\n      if (this.isSelectQuery()) {\n        if (this.options.raw) {\n          return this.handleSelectQuery(results);\n        }\n        var prefixes = this._collectModels(this.options.include);\n        results = results.map(function (result2) {\n          return _.mapValues(result2, function (value, name) {\n            var model;\n            if (name.includes(\".\")) {\n              var lastind = name.lastIndexOf(\".\");\n              model = prefixes[name.substr(0, lastind)];\n              name = name.substr(lastind + 1);\n            } else {\n              model = _this.options.model;\n            }\n            var tableName = model.getTableName().toString().replace(/`/g, \"\");\n            var tableTypes = columnTypes[tableName] || {};\n            if (tableTypes && !(name in tableTypes)) {\n              _.forOwn(model.rawAttributes, function (attribute, key) {\n                if (name === key && attribute.field) {\n                  name = attribute.field;\n                  return false;\n                }\n              });\n            }\n            return Object.prototype.hasOwnProperty.call(tableTypes, name) ? _this.applyParsers(tableTypes[name], value) : value;\n          });\n        });\n        return this.handleSelectQuery(results);\n      }\n      if (this.isShowOrDescribeQuery()) {\n        return results;\n      }\n      if (this.sql.includes(\"PRAGMA INDEX_LIST\")) {\n        return this.handleShowIndexesQuery(results);\n      }\n      if (this.sql.includes(\"PRAGMA INDEX_INFO\")) {\n        return results;\n      }\n      if (this.sql.includes(\"PRAGMA TABLE_INFO\")) {\n        result = {};\n        var defaultValue;\n        var _iterator2 = _createForOfIteratorHelper(results),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _result = _step2.value;\n            if (_result.dflt_value === null) {\n              defaultValue = void 0;\n            } else if (_result.dflt_value === \"NULL\") {\n              defaultValue = null;\n            } else {\n              defaultValue = _result.dflt_value;\n            }\n            result[_result.name] = {\n              type: _result.type,\n              allowNull: _result.notnull === 0,\n              defaultValue: defaultValue,\n              primaryKey: _result.pk !== 0\n            };\n            if (result[_result.name].type === \"TINYINT(1)\") {\n              result[_result.name].defaultValue = {\n                \"0\": false,\n                \"1\": true\n              }[result[_result.name].defaultValue];\n            }\n            if (typeof result[_result.name].defaultValue === \"string\") {\n              result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, \"\");\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        return result;\n      }\n      if (this.sql.includes(\"PRAGMA foreign_keys;\")) {\n        return results[0];\n      }\n      if (this.sql.includes(\"PRAGMA foreign_keys\")) {\n        return results;\n      }\n      if (this.sql.includes(\"PRAGMA foreign_key_list\")) {\n        return results;\n      }\n      if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {\n        return metaData.changes;\n      }\n      if (this.options.type === QueryTypes.VERSION) {\n        return results[0].version;\n      }\n      if (this.options.type === QueryTypes.RAW) {\n        return [results, metaData];\n      }\n      if (this.isUpsertQuery()) {\n        return [result, null];\n      }\n      if (this.isUpdateQuery() || this.isInsertQuery()) {\n        return [result, metaData.changes];\n      }\n      return result;\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sql, parameters) {\n        var _this2 = this;\n        var conn, method, complete;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              conn = this.connection;\n              this.sql = sql;\n              method = this.getDatabaseMethod();\n              complete = this._logQuery(sql, debug, parameters);\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                return conn.serialize( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  var columnTypes, errForStack, executeSql, tableNames;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        columnTypes = {};\n                        errForStack = new Error();\n                        executeSql = function executeSql() {\n                          if (sql.startsWith(\"-- \")) {\n                            return resolve();\n                          }\n                          var query = _this2;\n                          function afterExecute(executionError, results) {\n                            try {\n                              complete();\n                              resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));\n                              return;\n                            } catch (error) {\n                              reject(error);\n                            }\n                          }\n                          if (!parameters) parameters = [];\n                          if (_.isPlainObject(parameters)) {\n                            var newParameters = Object.create(null);\n                            for (var _i = 0, _Object$keys = Object.keys(parameters); _i < _Object$keys.length; _i++) {\n                              var key = _Object$keys[_i];\n                              newParameters[\"\".concat(key)] = stringifyIfBigint(parameters[key]);\n                            }\n                            parameters = newParameters;\n                          } else {\n                            parameters = parameters.map(stringifyIfBigint);\n                          }\n                          conn[method](sql, parameters, afterExecute);\n                          return null;\n                        };\n                        if (!(_this2.getDatabaseMethod() === \"all\")) {\n                          _context.next = 11;\n                          break;\n                        }\n                        tableNames = [];\n                        if (_this2.options && _this2.options.tableNames) {\n                          tableNames = _this2.options.tableNames;\n                        } else if (/FROM `(.*?)`/i.exec(_this2.sql)) {\n                          tableNames.push(/FROM `(.*?)`/i.exec(_this2.sql)[1]);\n                        }\n                        tableNames = tableNames.filter(function (tableName) {\n                          return !(tableName in columnTypes) && tableName !== \"sqlite_master\";\n                        });\n                        if (tableNames.length) {\n                          _context.next = 9;\n                          break;\n                        }\n                        return _context.abrupt(\"return\", executeSql());\n                      case 9:\n                        _context.next = 11;\n                        return Promise.all(tableNames.map(function (tableName) {\n                          return new Promise(function (resolve2) {\n                            tableName = tableName.replace(/`/g, \"\");\n                            columnTypes[tableName] = {};\n                            conn.all(\"PRAGMA table_info(`\".concat(tableName, \"`)\"), function (err, results) {\n                              if (!err) {\n                                var _iterator3 = _createForOfIteratorHelper(results),\n                                  _step3;\n                                try {\n                                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                                    var result = _step3.value;\n                                    columnTypes[tableName][result.name] = result.type;\n                                  }\n                                } catch (err) {\n                                  _iterator3.e(err);\n                                } finally {\n                                  _iterator3.f();\n                                }\n                              }\n                              resolve2();\n                            });\n                          });\n                        }));\n                      case 11:\n                        return _context.abrupt(\"return\", executeSql());\n                      case 12:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                })));\n              }));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n  }, {\n    key: \"parseConstraintsFromSql\",\n    value: function parseConstraintsFromSql(sql) {\n      var constraints = sql.split(\"CONSTRAINT \");\n      var referenceTableName, referenceTableKeys, updateAction, deleteAction;\n      constraints.splice(0, 1);\n      constraints = constraints.map(function (constraintSql) {\n        if (constraintSql.includes(\"REFERENCES\")) {\n          updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n          deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n          if (updateAction) {\n            updateAction = updateAction[1];\n          }\n          if (deleteAction) {\n            deleteAction = deleteAction[1];\n          }\n          var referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n          var referenceConditions = constraintSql.match(referencesRegex)[0].split(\" \");\n          referenceTableName = Utils.removeTicks(referenceConditions[1]);\n          var columnNames = referenceConditions[2];\n          columnNames = columnNames.replace(/\\(|\\)/g, \"\").split(\", \");\n          referenceTableKeys = columnNames.map(function (column) {\n            return Utils.removeTicks(column);\n          });\n        }\n        var constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n        constraintSql = constraintSql.replace(/\\(.+\\)/, \"\");\n        var constraint = constraintSql.split(\" \");\n        if ([\"PRIMARY\", \"FOREIGN\"].includes(constraint[1])) {\n          constraint[1] += \" KEY\";\n        }\n        return {\n          constraintName: Utils.removeTicks(constraint[0]),\n          constraintType: constraint[1],\n          updateAction: updateAction,\n          deleteAction: deleteAction,\n          sql: sql.replace(/\"/g, \"`\"),\n          constraintCondition: constraintCondition,\n          referenceTableName: referenceTableName,\n          referenceTableKeys: referenceTableKeys\n        };\n      });\n      return constraints;\n    }\n  }, {\n    key: \"applyParsers\",\n    value: function applyParsers(type, value) {\n      if (type.includes(\"(\")) {\n        type = type.substr(0, type.indexOf(\"(\"));\n      }\n      type = type.replace(\"UNSIGNED\", \"\").replace(\"ZEROFILL\", \"\");\n      type = type.trim().toUpperCase();\n      var parse = parserStore.get(type);\n      if (value !== null && parse) {\n        return parse(value, {\n          timezone: this.sequelize.options.timezone\n        });\n      }\n      return value;\n    }\n  }, {\n    key: \"formatError\",\n    value: function formatError(err, errStack) {\n      switch (err.code) {\n        case \"SQLITE_CONSTRAINT_UNIQUE\":\n        case \"SQLITE_CONSTRAINT_PRIMARYKEY\":\n        case \"SQLITE_CONSTRAINT_TRIGGER\":\n        case \"SQLITE_CONSTRAINT_FOREIGNKEY\":\n        case \"SQLITE_CONSTRAINT\":\n          {\n            if (err.message.includes(\"FOREIGN KEY constraint failed\")) {\n              return new sequelizeErrors.ForeignKeyConstraintError({\n                parent: err,\n                stack: errStack\n              });\n            }\n            var fields = [];\n            var match = err.message.match(/columns (.*?) are/);\n            if (match !== null && match.length >= 2) {\n              fields = match[1].split(\", \");\n            } else {\n              match = err.message.match(/UNIQUE constraint failed: (.*)/);\n              if (match !== null && match.length >= 2) {\n                fields = match[1].split(\", \").map(function (columnWithTable) {\n                  return columnWithTable.split(\".\")[1];\n                });\n              }\n            }\n            var errors = [];\n            var message = \"Validation error\";\n            var _iterator4 = _createForOfIteratorHelper(fields),\n              _step4;\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var field = _step4.value;\n                errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, this.instance && this.instance[field], this.instance, \"not_unique\"));\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n            if (this.model) {\n              _.forOwn(this.model.uniqueKeys, function (constraint) {\n                if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n                  message = constraint.msg;\n                  return false;\n                }\n              });\n            }\n            return new sequelizeErrors.UniqueConstraintError({\n              message: message,\n              errors: errors,\n              parent: err,\n              fields: fields,\n              stack: errStack\n            });\n          }\n        case \"SQLITE_BUSY\":\n          return new sequelizeErrors.TimeoutError(err, {\n            stack: errStack\n          });\n        default:\n          return new sequelizeErrors.DatabaseError(err, {\n            stack: errStack\n          });\n      }\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function () {\n      var _handleShowIndexesQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {\n        var _this3 = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", Promise.all(data.reverse().map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(item) {\n                  var columns, _iterator5, _step5, column;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        item.fields = [];\n                        item.primary = false;\n                        item.unique = !!item.unique;\n                        item.constraintName = item.name;\n                        _context3.next = 6;\n                        return _this3.run(\"PRAGMA INDEX_INFO(`\".concat(item.name, \"`)\"));\n                      case 6:\n                        columns = _context3.sent;\n                        _iterator5 = _createForOfIteratorHelper(columns);\n                        try {\n                          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                            column = _step5.value;\n                            item.fields[column.seqno] = {\n                              attribute: column.name,\n                              length: void 0,\n                              order: void 0\n                            };\n                          }\n                        } catch (err) {\n                          _iterator5.e(err);\n                        } finally {\n                          _iterator5.f();\n                        }\n                        return _context3.abrupt(\"return\", item);\n                      case 10:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n                return function (_x4) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function handleShowIndexesQuery(_x3) {\n        return _handleShowIndexesQuery.apply(this, arguments);\n      }\n      return handleShowIndexesQuery;\n    }()\n  }, {\n    key: \"getDatabaseMethod\",\n    value: function getDatabaseMethod() {\n      if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes(\"CREATE TEMPORARY TABLE\".toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {\n        return \"run\";\n      }\n      return \"all\";\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam;\n      if (Array.isArray(values)) {\n        bindParam = {};\n        values.forEach(function (v, i) {\n          bindParam[\"$\".concat(i + 1)] = v;\n        });\n        sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n          skipValueReplace: true\n        })[0];\n      } else {\n        bindParam = {};\n        if (typeof values === \"object\") {\n          for (var _i2 = 0, _Object$keys2 = Object.keys(values); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            bindParam[\"$\".concat(k)] = values[k];\n          }\n        }\n        sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n          skipValueReplace: true\n        })[0];\n      }\n      return [sql, bindParam];\n    }\n  }]);\n  return Query;\n}(AbstractQuery);\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["_","require","Utils","AbstractQuery","QueryTypes","sequelizeErrors","parserStore","_require","logger","debug","debugContext","stringifyIfBigint","value","toString","Query","_AbstractQuery","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","getInsertIdField","_collectModels","include","prefix","ret","_iterator","_createForOfIteratorHelper","_step","s","n","done","_include","as","concat","model","merge","err","e","f","_handleQueryResponse","metaData","columnTypes","results","errStack","_this","sql","formatError","result","instance","isInsertQuery","isUpsertQuery","handleInsertQuery","constructor","name","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","changes","i","push","_defineProperty","field","isShowTablesQuery","map","row","isShowConstraintsQuery","parseConstraintsFromSql","isSelectQuery","options","raw","handleSelectQuery","prefixes","result2","mapValues","includes","lastind","lastIndexOf","substr","tableName","getTableName","replace","tableTypes","forOwn","attribute","Object","prototype","hasOwnProperty","call","applyParsers","isShowOrDescribeQuery","handleShowIndexesQuery","defaultValue","_iterator2","_step2","_result","dflt_value","type","allowNull","notnull","primaryKey","pk","BULKUPDATE","BULKDELETE","VERSION","version","RAW","isUpdateQuery","_run","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","parameters","_this2","conn","method","complete","wrap","_callee2$","_context2","prev","next","connection","getDatabaseMethod","_logQuery","abrupt","Promise","resolve","reject","serialize","_callee","errForStack","executeSql","tableNames","_callee$","_context","Error","startsWith","query","afterExecute","executionError","stack","error","isPlainObject","newParameters","create","_i","_Object$keys","keys","length","exec","filter","all","resolve2","_iterator3","_step3","stop","run","_x","_x2","constraints","split","referenceTableName","referenceTableKeys","updateAction","deleteAction","splice","constraintSql","match","referencesRegex","referenceConditions","removeTicks","columnNames","column","constraintCondition","constraint","constraintName","constraintType","indexOf","trim","toUpperCase","parse","get","timezone","sequelize","code","message","ForeignKeyConstraintError","parent","fields","columnWithTable","errors","_iterator4","_step4","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","isEqual","msg","UniqueConstraintError","TimeoutError","DatabaseError","_handleShowIndexesQuery","_callee4","data","_this3","_callee4$","_context4","reverse","_ref2","_callee3","item","columns","_iterator5","_step5","_callee3$","_context3","primary","unique","sent","seqno","order","_x4","_x3","isBulkUpdateQuery","toLowerCase","formatBindParameters","values","dialect","bindParam","Array","isArray","forEach","v","skipValueReplace","_i2","_Object$keys2","k","module","exports","default"],"sources":["../../../src/dialects/sqlite/query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:sqlite');\n\n// sqlite3 currently ignores bigint values, so we have to translate to string for now\n// There's a WIP here: https://github.com/TryGhost/node-sqlite3/pull/1501\nfunction stringifyIfBigint(value) {\n  if (typeof value === 'bigint') {\n    return value.toString();\n  }\n\n  return value;\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam[`$${i + 1}`] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam[`$${k}`] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = `${prefix}.${_include.as}`;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  _handleQueryResponse(metaData, columnTypes, err, results, errStack) {\n    if (err) {\n      err.sql = this.sql;\n      throw this.formatError(err, errStack);\n    }\n    let result = this.instance;\n\n    // add the inserted row id to the instance\n    if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {\n      this.handleInsertQuery(results, metaData);\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          metaData.constructor.name === 'Statement'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;\n          result = [];\n          for (let i = startId; i < startId + metaData.changes; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = metaData[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return results.map(row => row.name);\n    }\n    if (this.isShowConstraintsQuery()) {\n      result = results;\n      if (results && results[0] && results[0].sql) {\n        result = this.parseConstraintsFromSql(results[0].sql);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw) {\n        return this.handleSelectQuery(results);\n      }\n      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n      const prefixes = this._collectModels(this.options.include);\n\n      results = results.map(result => {\n        return _.mapValues(result, (value, name) => {\n          let model;\n          if (name.includes('.')) {\n            const lastind = name.lastIndexOf('.');\n\n            model = prefixes[name.substr(0, lastind)];\n\n            name = name.substr(lastind + 1);\n          } else {\n            model = this.options.model;\n          }\n\n          const tableName = model.getTableName().toString().replace(/`/g, '');\n          const tableTypes = columnTypes[tableName] || {};\n\n          if (tableTypes && !(name in tableTypes)) {\n            // The column is aliased\n            _.forOwn(model.rawAttributes, (attribute, key) => {\n              if (name === key && attribute.field) {\n                name = attribute.field;\n                return false;\n              }\n            });\n          }\n\n          return Object.prototype.hasOwnProperty.call(tableTypes, name)\n            ? this.applyParsers(tableTypes[name], value)\n            : value;\n        });\n      });\n\n      return this.handleSelectQuery(results);\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA INDEX_LIST')) {\n      return this.handleShowIndexesQuery(results);\n    }\n    if (this.sql.includes('PRAGMA INDEX_INFO')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA TABLE_INFO')) {\n      // this is the sqlite way of getting the metadata of a table\n      result = {};\n\n      let defaultValue;\n      for (const _result of results) {\n        if (_result.dflt_value === null) {\n          // Column schema omits any \"DEFAULT ...\"\n          defaultValue = undefined;\n        } else if (_result.dflt_value === 'NULL') {\n          // Column schema is a \"DEFAULT NULL\"\n          defaultValue = null;\n        } else {\n          defaultValue = _result.dflt_value;\n        }\n\n        result[_result.name] = {\n          type: _result.type,\n          allowNull: _result.notnull === 0,\n          defaultValue,\n          primaryKey: _result.pk !== 0\n        };\n\n        if (result[_result.name].type === 'TINYINT(1)') {\n          result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n        }\n\n        if (typeof result[_result.name].defaultValue === 'string') {\n          result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n        }\n      }\n      return result;\n    }\n    if (this.sql.includes('PRAGMA foreign_keys;')) {\n      return results[0];\n    }\n    if (this.sql.includes('PRAGMA foreign_keys')) {\n      return results;\n    }\n    if (this.sql.includes('PRAGMA foreign_key_list')) {\n      return results;\n    }\n    if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {\n      return metaData.changes;\n    }\n    if (this.options.type === QueryTypes.VERSION) {\n      return results[0].version;\n    }\n    if (this.options.type === QueryTypes.RAW) {\n      return [results, metaData];\n    }\n    if (this.isUpsertQuery()) {\n      return [result, null];\n    }\n    if (this.isUpdateQuery() || this.isInsertQuery()) {\n      return [result, metaData.changes];\n    }\n    return result;\n  }\n\n  async run(sql, parameters) {\n    const conn = this.connection;\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => conn.serialize(async () => {\n      const columnTypes = {};\n      const errForStack = new Error();\n      const executeSql = () => {\n        if (sql.startsWith('-- ')) {\n          return resolve();\n        }\n        const query = this;\n        // cannot use arrow function here because the function is bound to the statement\n        function afterExecute(executionError, results) {\n          try {\n            complete();\n            // `this` is passed from sqlite, we have no control over this.\n            // eslint-disable-next-line no-invalid-this\n            resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));\n            return;\n          } catch (error) {\n            reject(error);\n          }\n        }\n\n        if (!parameters) parameters = [];\n\n        if (_.isPlainObject(parameters)) {\n          const newParameters = Object.create(null);\n          for (const key of Object.keys(parameters)) {\n            newParameters[`${key}`] = stringifyIfBigint(parameters[key]);\n          }\n          parameters = newParameters;\n        } else {\n          parameters = parameters.map(stringifyIfBigint);\n        }\n\n        conn[method](sql, parameters, afterExecute);\n\n        return null;\n      };\n\n      if (this.getDatabaseMethod() === 'all') {\n        let tableNames = [];\n        if (this.options && this.options.tableNames) {\n          tableNames = this.options.tableNames;\n        } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n          tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n        }\n\n        // If we already have the metadata for the table, there's no need to ask for it again\n        tableNames = tableNames.filter(tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n        if (!tableNames.length) {\n          return executeSql();\n        }\n        await Promise.all(tableNames.map(tableName =>\n          new Promise(resolve => {\n            tableName = tableName.replace(/`/g, '');\n            columnTypes[tableName] = {};\n\n            conn.all(`PRAGMA table_info(\\`${tableName}\\`)`, (err, results) => {\n              if (!err) {\n                for (const result of results) {\n                  columnTypes[tableName][result.name] = result.type;\n                }\n              }\n              resolve();\n            });\n          })));\n      }\n      return executeSql();\n    }));\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.includes('REFERENCES')) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (['PRIMARY', 'FOREIGN'].includes(constraint[1])) {\n        constraint[1] += ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\"/g, '`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.includes('(')) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err, errStack) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT_UNIQUE':\n      case 'SQLITE_CONSTRAINT_PRIMARYKEY':\n      case 'SQLITE_CONSTRAINT_TRIGGER':\n      case 'SQLITE_CONSTRAINT_FOREIGNKEY':\n      case 'SQLITE_CONSTRAINT': {\n        if (err.message.includes('FOREIGN KEY constraint failed')) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err,\n            stack: errStack\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        let match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err, { stack: errStack });\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  async handleShowIndexesQuery(data) {\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return Promise.all(data.reverse().map(async item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      const columns = await this.run(`PRAGMA INDEX_INFO(\\`${item.name}\\`)`);\n      for (const column of columns) {\n        item.fields[column.seqno] = {\n          attribute: column.name,\n          length: undefined,\n          order: undefined\n        };\n      }\n\n      return item;\n    }));\n  }\n\n  getDatabaseMethod() {\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes('CREATE TEMPORARY TABLE'.toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    }\n    return 'all';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}