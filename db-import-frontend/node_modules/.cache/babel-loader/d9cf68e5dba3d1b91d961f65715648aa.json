{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar log = require('npmlog');\nvar semver = require('semver');\nvar cp = require('child_process');\nvar extend = require('util')._extend; // eslint-disable-line\nvar win = process.platform === 'win32';\nvar logWithPrefix = require('./util').logWithPrefix;\nvar systemDrive = process.env.SystemDrive || 'C:';\nvar username = process.env.USERNAME || process.env.USER || getOsUserInfo();\nvar localAppData = process.env.LOCALAPPDATA || \"\".concat(systemDrive, \"\\\\\").concat(username, \"\\\\AppData\\\\Local\");\nvar foundLocalAppData = process.env.LOCALAPPDATA || username;\nvar programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || \"\".concat(systemDrive, \"\\\\Program Files\");\nvar programFilesX86 = process.env['ProgramFiles(x86)'] || \"\".concat(programFiles, \" (x86)\");\nvar winDefaultLocationsArray = [];\nfor (var _i = 0, _arr = ['39', '38', '37', '36']; _i < _arr.length; _i++) {\n  var majorMinor = _arr[_i];\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(\"\".concat(localAppData, \"\\\\Programs\\\\Python\\\\Python\").concat(majorMinor, \"\\\\python.exe\"), \"\".concat(programFiles, \"\\\\Python\").concat(majorMinor, \"\\\\python.exe\"), \"\".concat(localAppData, \"\\\\Programs\\\\Python\\\\Python\").concat(majorMinor, \"-32\\\\python.exe\"), \"\".concat(programFiles, \"\\\\Python\").concat(majorMinor, \"-32\\\\python.exe\"), \"\".concat(programFilesX86, \"\\\\Python\").concat(majorMinor, \"-32\\\\python.exe\"));\n  } else {\n    winDefaultLocationsArray.push(\"\".concat(programFiles, \"\\\\Python\").concat(majorMinor, \"\\\\python.exe\"), \"\".concat(programFiles, \"\\\\Python\").concat(majorMinor, \"-32\\\\python.exe\"), \"\".concat(programFilesX86, \"\\\\Python\").concat(majorMinor, \"-32\\\\python.exe\"));\n  }\n}\nfunction getOsUserInfo() {\n  try {\n    return require('os').userInfo().username;\n  } catch (e) {}\n}\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    var SKIP = 0;\n    var FAIL = 1;\n    var toCheck = getChecks.apply(this);\n    function getChecks() {\n      var _this = this;\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: function before() {\n            _this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            _this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + \"\\\"\".concat(_this.env.NODE_GYP_FORCE_PYTHON, \"\\\"\"));\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n      var checks = [{\n        before: function before() {\n          if (!_this.configPython) {\n            _this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n          _this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          _this.addLog('- \"--python=\" or \"npm config get python\" is ' + \"\\\"\".concat(_this.configPython, \"\\\"\"));\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: function before() {\n          if (!_this.env.PYTHON) {\n            _this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n          _this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          _this.addLog(\"- process.env.PYTHON is \\\"\".concat(_this.env.PYTHON, \"\\\"\"));\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: function before() {\n          _this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: function before() {\n          _this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }];\n      if (this.win) {\n        var _loop = function _loop() {\n          var location = _this.winDefaultLocations[i];\n          checks.push({\n            before: function before() {\n              _this.addLog('checking if Python is ' + \"\".concat(location));\n            },\n            check: _this.checkExecPath,\n            arg: location\n          });\n        };\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          _loop();\n        }\n        checks.push({\n          before: function before() {\n            _this.addLog('checking if the py launcher can be used to find Python 3');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n      return checks;\n    }\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      var check = toCheck.shift();\n      if (!check) {\n        return this.fail();\n      }\n      var before = check.before.apply(this);\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n      if (before === FAIL) {\n        return this.fail();\n      }\n      var args = [runChecks.bind(this)];\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n      check.check.apply(this, args);\n    }\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = \"\\\"\".concat(exec, \"\\\"\");\n      args = args.map(function (a) {\n        return \"\\\"\".concat(a, \"\\\"\");\n      });\n      shell = true;\n    }\n    this.log.verbose(\"- executing \\\"\".concat(command, \"\\\" to get executable path\"));\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(\"- \\\"\".concat(command, \"\\\" is not in PATH or produced an error\"));\n        return errorCallback(err);\n      }\n      this.addLog(\"- executable path is \\\"\".concat(execPath, \"\\\"\"));\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(\"- executing \\\"\".concat(this.pyLauncher, \"\\\" to get Python 3 executable path\"));\n    this.run(this.pyLauncher, ['-3'].concat(_toConsumableArray(this.argsExecutable)), false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(\"- \\\"\".concat(this.pyLauncher, \"\\\" is not in PATH or produced an error\"));\n        return errorCallback(err);\n      }\n      this.addLog(\"- executable path is \\\"\".concat(execPath, \"\\\"\"));\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(\"- executing \\\"\".concat(execPath, \"\\\" to get version\"));\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(\"- \\\"\".concat(execPath, \"\\\" could not be run\"));\n        return errorCallback(err);\n      }\n      this.addLog(\"- version is \\\"\".concat(version, \"\\\"\"));\n      var range = new semver.Range(this.semverRange);\n      var valid = false;\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(\"- \\\"\".concat(execPath, \"\\\" does not have a valid version\"));\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n      if (!valid) {\n        this.addLog(\"- version is \".concat(version, \" - should be \").concat(this.semverRange));\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(\"Found unsupported Python version \".concat(version)));\n      }\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    var opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n      if (err) {\n        return callback(err);\n      }\n      var execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(\"using Python version \".concat(version, \" found at \\\"\").concat(execPath, \"\\\"\"));\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    var errorLog = this.errorLog.join('\\n');\n    var pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable';\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    var info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', \"- Use the switch --python=\\\"\".concat(pathExample, \"\\\"\"), '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', \"  npm config set python \\\"\".concat(pathExample, \"\\\"\"), 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(\"\\n\".concat(errorLog, \"\\n\\n\").concat(info, \"\\n\"));\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":{"version":3,"names":["_toConsumableArray","require","default","log","semver","cp","extend","_extend","win","process","platform","logWithPrefix","systemDrive","env","SystemDrive","username","USERNAME","USER","getOsUserInfo","localAppData","LOCALAPPDATA","concat","foundLocalAppData","programFiles","ProgramW6432","ProgramFiles","programFilesX86","winDefaultLocationsArray","_i","_arr","length","majorMinor","push","userInfo","e","PythonFinder","configPython","callback","errorLog","prototype","argsExecutable","argsVersion","semverRange","execFile","pyLauncher","winDefaultLocations","addLog","message","verbose","findPython","SKIP","FAIL","toCheck","getChecks","apply","_this","NODE_GYP_FORCE_PYTHON","before","check","checkCommand","arg","checks","PYTHON","_loop","location","i","checkExecPath","checkPyLauncher","runChecks","err","silly","stack","shift","fail","args","bind","unshift","command","errorCallback","exec","shell","map","a","run","execPath","version","range","Range","valid","test","Error","succeed","TERM","opts","execFileCallback","stdout","stderr","trim","info","nextTick","join","pathExample","error","finder","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/node-gyp/lib/find-python.js"],"sourcesContent":["'use strict'\n\nconst log = require('npmlog')\nconst semver = require('semver')\nconst cp = require('child_process')\nconst extend = require('util')._extend // eslint-disable-line\nconst win = process.platform === 'win32'\nconst logWithPrefix = require('./util').logWithPrefix\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  } else {\n    winDefaultLocationsArray.push(\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  }\n}\n\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch (e) {}\n}\n\nfunction PythonFinder (configPython, callback) {\n  this.callback = callback\n  this.configPython = configPython\n  this.errorLog = []\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython () {\n    const SKIP = 0; const FAIL = 1\n    var toCheck = getChecks.apply(this)\n\n    function getChecks () {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }]\n      }\n\n      var checks = [\n        {\n          before: () => {\n            if (!this.configPython) {\n              this.addLog(\n                'Python is not set from command line or npm configuration')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from command line or ' +\n              'npm configuration')\n            this.addLog('- \"--python=\" or \"npm config get python\" is ' +\n              `\"${this.configPython}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.configPython\n        },\n        {\n          before: () => {\n            if (!this.env.PYTHON) {\n              this.addLog('Python is not set from environment variable ' +\n                'PYTHON')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.PYTHON\n        },\n        {\n          before: () => { this.addLog('checking if \"python3\" can be used') },\n          check: this.checkCommand,\n          arg: 'python3'\n        },\n        {\n          before: () => { this.addLog('checking if \"python\" can be used') },\n          check: this.checkCommand,\n          arg: 'python'\n        }\n      ]\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i]\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' +\n                `${location}`)\n            },\n            check: this.checkExecPath,\n            arg: location\n          })\n        }\n        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: this.checkPyLauncher\n        })\n      }\n\n      return checks\n    }\n\n    function runChecks (err) {\n      this.log.silly('runChecks: err = %j', (err && err.stack) || err)\n\n      const check = toCheck.shift()\n      if (!check) {\n        return this.fail()\n      }\n\n      const before = check.before.apply(this)\n      if (before === SKIP) {\n        return runChecks.apply(this)\n      }\n      if (before === FAIL) {\n        return this.fail()\n      }\n\n      const args = [runChecks.bind(this)]\n      if (check.arg) {\n        args.unshift(check.arg)\n      }\n      check.check.apply(this, args)\n    }\n\n    runChecks.apply(this)\n  },\n\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand (command, errorCallback) {\n    var exec = command\n    var args = this.argsExecutable\n    var shell = false\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`\n      args = args.map(a => `\"${a}\"`)\n      shell = true\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`)\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`)\n        return errorCallback(err)\n      }\n      this.addLog(`- executable path is \"${execPath}\"`)\n      this.checkExecPath(execPath, errorCallback)\n    }.bind(this))\n  },\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher (errorCallback) {\n    this.log.verbose(\n      `- executing \"${this.pyLauncher}\" to get Python 3 executable path`)\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false,\n      function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n        if (err) {\n          this.addLog(\n            `- \"${this.pyLauncher}\" is not in PATH or produced an error`)\n          return errorCallback(err)\n        }\n        this.addLog(`- executable path is \"${execPath}\"`)\n        this.checkExecPath(execPath, errorCallback)\n      }.bind(this))\n  },\n\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath (execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`)\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`)\n        return errorCallback(err)\n      }\n      this.addLog(`- version is \"${version}\"`)\n\n      const range = new semver.Range(this.semverRange)\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack)\n        this.addLog(`- \"${execPath}\" does not have a valid version`)\n        this.addLog('- is it a Python executable?')\n        return errorCallback(err)\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`)\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED')\n        return errorCallback(new Error(\n          `Found unsupported Python version ${version}`))\n      }\n      this.succeed(execPath, version)\n    }.bind(this))\n  },\n\n  // Run an executable or shell command, trimming the output.\n  run: function run (exec, args, shell, callback) {\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env: env, shell: shell }\n\n    this.log.silly('execFile: exec = %j', exec)\n    this.log.silly('execFile: args = %j', args)\n    this.log.silly('execFile: opts = %j', opts)\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this))\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack)\n      return callback(err)\n    }\n\n    function execFileCallback (err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', (err && err.stack) || err)\n      this.log.silly('execFile result: stdout = %j', stdout)\n      this.log.silly('execFile result: stderr = %j', stderr)\n      if (err) {\n        return callback(err)\n      }\n      const execPath = stdout.trim()\n      callback(null, execPath)\n    }\n  },\n\n  succeed: function succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    process.nextTick(this.callback.bind(null, null, execPath))\n  },\n\n  fail: function fail () {\n    const errorLog = this.errorLog.join('\\n')\n\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe'\n      : '/path/to/pythonexecutable'\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n      '- Set the environment variable PYTHON',\n      '- Set the npm configuration variable python:',\n      `  npm config set python \"${pathExample}\"`,\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#installation',\n      '**********************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Python installation to use')))\n  }\n}\n\nfunction findPython (configPython, callback) {\n  var finder = new PythonFinder(configPython, callback)\n  finder.findPython()\n}\n\nmodule.exports = findPython\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}