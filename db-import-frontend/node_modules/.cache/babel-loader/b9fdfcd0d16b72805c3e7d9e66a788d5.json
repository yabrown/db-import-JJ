{"ast":null,"code":"var _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar ANY = Symbol('SemVer ANY');\n// hoisted class for cyclic dependency\nvar Comparator = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Comparator(comp, options) {\n    _classCallCheck(this, Comparator);\n    options = parseOptions(options);\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp;\n      } else {\n        comp = comp.value;\n      }\n    }\n    debug('comparator', comp, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.parse(comp);\n    if (this.semver === ANY) {\n      this.value = '';\n    } else {\n      this.value = this.operator + this.semver.version;\n    }\n    debug('comp', this);\n  }\n  _createClass(Comparator, [{\n    key: \"parse\",\n    value: function parse(comp) {\n      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var m = comp.match(r);\n      if (!m) {\n        throw new TypeError(\"Invalid comparator: \".concat(comp));\n      }\n      this.operator = m[1] !== undefined ? m[1] : '';\n      if (this.operator === '=') {\n        this.operator = '';\n      }\n\n      // if it literally is just '>' or '' then allow anything.\n      if (!m[2]) {\n        this.semver = ANY;\n      } else {\n        this.semver = new SemVer(m[2], this.options.loose);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      debug('Comparator.test', version, this.options.loose);\n      if (this.semver === ANY || version === ANY) {\n        return true;\n      }\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n      return cmp(version, this.operator, this.semver, this.options);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(comp, options) {\n      if (!(comp instanceof Comparator)) {\n        throw new TypeError('a Comparator is required');\n      }\n      if (this.operator === '') {\n        if (this.value === '') {\n          return true;\n        }\n        return new Range(comp.value, options).test(this.value);\n      } else if (comp.operator === '') {\n        if (comp.value === '') {\n          return true;\n        }\n        return new Range(this.value, options).test(comp.semver);\n      }\n      options = parseOptions(options);\n\n      // Special cases where nothing can possibly be lower\n      if (options.includePrerelease && (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n        return false;\n      }\n      if (!options.includePrerelease && (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n        return false;\n      }\n\n      // Same direction increasing (> or >=)\n      if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n        return true;\n      }\n      // Same direction decreasing (< or <=)\n      if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n        return true;\n      }\n      // same SemVer and both sides are inclusive (<= or >=)\n      if (this.semver.version === comp.semver.version && this.operator.includes('=') && comp.operator.includes('=')) {\n        return true;\n      }\n      // opposite directions less than\n      if (cmp(this.semver, '<', comp.semver, options) && this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n        return true;\n      }\n      // opposite directions greater than\n      if (cmp(this.semver, '>', comp.semver, options) && this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n        return true;\n      }\n      return false;\n    }\n  }], [{\n    key: \"ANY\",\n    get: function get() {\n      return ANY;\n    }\n  }]);\n  return Comparator;\n}();\nmodule.exports = Comparator;\nvar parseOptions = require('../internal/parse-options');\nvar _require = require('../internal/re'),\n  re = _require.re,\n  t = _require.t;\nvar cmp = require('../functions/cmp');\nvar debug = require('../internal/debug');\nvar SemVer = require('./semver');\nvar Range = require('./range');","map":{"version":3,"names":["ANY","Symbol","Comparator","comp","options","_classCallCheck","parseOptions","loose","value","debug","parse","semver","operator","version","_createClass","key","r","re","t","COMPARATORLOOSE","COMPARATOR","m","match","TypeError","concat","undefined","SemVer","toString","test","er","cmp","intersects","Range","includePrerelease","startsWith","includes","get","module","exports","require","_require"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/semver/classes/comparator.js"],"sourcesContent":["const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}