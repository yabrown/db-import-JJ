{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants, StringUtils, PromptValue, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentIframeClient = /** @class */function (_super) {\n  __extends(SilentIframeClient, _super);\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.apiId = apiId;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"acquireTokenByIframe called\");\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n            // Check that we have some SSO data\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            }\n            // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n            if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n              acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            }\n            // Create silent request\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: request.prompt || PromptValue.NONE\n            }), InteractionType.Silent)];\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 5,, 6]);\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\n            return [4 /*yield*/, this.silentTokenHelper(authClient, silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: false,\n                requestId: result.requestId\n              });\n              return result;\n            })];\n          case 4:\n            return [2 /*return*/, _a.sent()];\n          case 5:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,\n              subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,\n              success: false\n            });\n            throw e_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n  SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\n            // Create auth code request and generate PKCE params\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];\n          case 1:\n            authCodeRequest = _a.sent();\n            // Create authorize request url\n            this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, silentRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n            }))];\n          case 2:\n            navigateUrl = _a.sent();\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\n            // Get the frame handle for the silent request\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\n            return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];\n          case 3:\n            msalFrame = _a.sent();\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\n            return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n          case 4:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, silentRequest), {\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n            // Handle response from hash string\n            this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\n            return [2 /*return*/, silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n  return SilentIframeClient;\n}(StandardInteractionClient);\nexport { SilentIframeClient };","map":{"version":3,"names":["__extends","SilentIframeClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","nativeStorage","prototype","acquireToken","request","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","verbose","acquireTokenMeasurement","startMeasurement","StringUtils","isEmpty","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","NO_SESSION","endMeasurement","success","BrowserAuthError","createSilentPromptValueError","setPreQueueTime","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","__assign","InteractionType","Silent","silentRequest","_a","sent","browserStorage","updateCacheEntries","state","nonce","authority","Constants","EMPTY_STRING","serverTelemetryManager","initializeServerTelemetryManager","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","SilentIframeClientTokenHelper","silentTokenHelper","then","result","fromCache","requestId","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","errorCode","undefined","subErrorCode","subError","logout","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","GetAuthCodeUrl","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","silentHandler","SilentHandler","system","SilentHandlerInitiateAuthRequest","initiateAuthRequest","msalFrame","SilentHandlerMonitorIframeForHash","monitorIframeForHash","iframeHashTimeout","hash","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","accountId","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","finally","HandleCodeResponseFromHash","handleCodeResponseFromHash","networkClient","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentIframeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError, Constants, UrlString, ServerAuthorizationCodeResponse, ProtocolUtils, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\n\r\nexport class SilentIframeClient extends StandardInteractionClient {\r\n    protected apiId: ApiId;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */\r\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        this.logger.verbose(\"acquireTokenByIframe called\");\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        // Check that we have some SSO data\r\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\r\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\r\n        }\r\n\r\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\r\n        if (request.prompt && (request.prompt !== PromptValue.NONE) && (request.prompt !== PromptValue.NO_SESSION)) {\r\n            acquireTokenMeasurement.endMeasurement({\r\n                success: false\r\n            });\r\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\r\n            ...request,\r\n            prompt: request.prompt || PromptValue.NONE\r\n        }, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\r\n            return await this.silentTokenHelper(authClient, silentRequest).then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: false,\r\n                    requestId: result.requestId\r\n                });\r\n                return result;\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            acquireTokenMeasurement.endMeasurement({\r\n                errorCode: e instanceof AuthError && e.errorCode || undefined,\r\n                subErrorCode: e instanceof AuthError && e.subError || undefined,\r\n                success: false\r\n            });\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */\r\n    protected async silentTokenHelper(authClient: AuthorizationCodeClient, silentRequest: AuthorizationUrlRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\r\n\r\n        // Create auth code request and generate PKCE params\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\r\n        const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\r\n        // Create authorize request url\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\r\n        const navigateUrl = await authClient.getAuthCodeUrl({\r\n            ...silentRequest,\r\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\r\n        });\r\n\r\n        // Create silent handler\r\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n        // Get the frame handle for the silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\r\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\r\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\r\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...silentRequest,\r\n                state: userRequestState,\r\n                prompt: silentRequest.prompt || PromptValue.NONE\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Handle response from hash string\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\r\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}