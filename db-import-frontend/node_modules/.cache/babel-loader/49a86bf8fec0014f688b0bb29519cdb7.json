{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentAuthCodeClient = /** @class */function (_super) {\n  __extends(SilentAuthCodeClient, _super);\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n            // Auth code payload is required\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n            // Create silent request\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\n            // Handle auth code parameters from request\n            return [2 /*return*/, silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n          case 4:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\nexport { SilentAuthCodeClient };","map":{"version":3,"names":["__extends","SilentAuthCodeClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeMessageHandler","correlationId","_this","call","prototype","acquireToken","request","trace","code","BrowserAuthError","createAuthCodeRequiredError","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","InteractionType","Silent","silentRequest","_a","sent","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","__assign","StandardInteractionClientGetClientConfiguration","getClientConfiguration","clientConfig","authClient","HybridSpaAuthorizationCodeClient","verbose","silentHandler","SilentHandler","system","handleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","networkClient","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","logout","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentAuthCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError, Constants, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\n\r\nexport class SilentAuthCodeClient extends StandardInteractionClient {\r\n    private apiId: ApiId;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */\r\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\r\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\r\n\r\n        // Auth code payload is required\r\n        if (!request.code) {\r\n            throw BrowserAuthError.createAuthCodeRequiredError();\r\n\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n\r\n            // Create auth code request (PKCE not needed)\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n                ...silentRequest,\r\n                code: request.code\r\n            };\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\r\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\r\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create silent handler\r\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n\r\n            // Handle auth code parameters from request\r\n            return silentHandler.handleCodeResponseFromServer(\r\n                {\r\n                    code: request.code,\r\n                    msgraph_host: request.msGraphHost,\r\n                    cloud_graph_host_name: request.cloudGraphHostName,\r\n                    cloud_instance_host_name: request.cloudInstanceHostName\r\n                },\r\n                silentRequest.state,\r\n                authClient.authority,\r\n                this.networkClient,\r\n                false\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}