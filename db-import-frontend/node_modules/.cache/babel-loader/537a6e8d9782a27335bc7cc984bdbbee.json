{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utils_1 = require(\"./utils\");\n// The default Buffer size if one is not provided.\nvar DEFAULT_SMARTBUFFER_SIZE = 4096;\n// The default string encoding to use for reading/writing strings.\nvar DEFAULT_SMARTBUFFER_ENCODING = 'utf8';\nvar SmartBuffer = /*#__PURE__*/function () {\n  /**\n   * Creates a new SmartBuffer instance.\n   *\n   * @param options { SmartBufferOptions } The SmartBufferOptions to apply to this instance.\n   */\n  function SmartBuffer(options) {\n    _classCallCheck(this, SmartBuffer);\n    this.length = 0;\n    this._encoding = DEFAULT_SMARTBUFFER_ENCODING;\n    this._writeOffset = 0;\n    this._readOffset = 0;\n    if (SmartBuffer.isSmartBufferOptions(options)) {\n      // Checks for encoding\n      if (options.encoding) {\n        utils_1.checkEncoding(options.encoding);\n        this._encoding = options.encoding;\n      }\n      // Checks for initial size length\n      if (options.size) {\n        if (utils_1.isFiniteInteger(options.size) && options.size > 0) {\n          this._buff = Buffer.allocUnsafe(options.size);\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_SIZE);\n        }\n        // Check for initial Buffer\n      } else if (options.buff) {\n        if (Buffer.isBuffer(options.buff)) {\n          this._buff = options.buff;\n          this.length = options.buff.length;\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_BUFFER);\n        }\n      } else {\n        this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n      }\n    } else {\n      // If something was passed but it's not a SmartBufferOptions object\n      if (typeof options !== 'undefined') {\n        throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_OBJECT);\n      }\n      // Otherwise default to sane options\n      this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n    }\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided internal Buffer size and optional encoding.\n   *\n   * @param size { Number } The size of the internal Buffer.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n  _createClass(SmartBuffer, [{\n    key: \"readInt8\",\n    value:\n    // Signed integers\n    /**\n     * Reads an Int8 value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n    function readInt8(offset) {\n      return this._readNumberValue(Buffer.prototype.readInt8, 1, offset);\n    }\n    /**\n     * Reads an Int16BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readInt16BE\",\n    value: function readInt16BE(offset) {\n      return this._readNumberValue(Buffer.prototype.readInt16BE, 2, offset);\n    }\n    /**\n     * Reads an Int16LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readInt16LE\",\n    value: function readInt16LE(offset) {\n      return this._readNumberValue(Buffer.prototype.readInt16LE, 2, offset);\n    }\n    /**\n     * Reads an Int32BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readInt32BE\",\n    value: function readInt32BE(offset) {\n      return this._readNumberValue(Buffer.prototype.readInt32BE, 4, offset);\n    }\n    /**\n     * Reads an Int32LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readInt32LE\",\n    value: function readInt32LE(offset) {\n      return this._readNumberValue(Buffer.prototype.readInt32LE, 4, offset);\n    }\n    /**\n     * Reads a BigInt64BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { BigInt }\n     */\n  }, {\n    key: \"readBigInt64BE\",\n    value: function readBigInt64BE(offset) {\n      utils_1.bigIntAndBufferInt64Check('readBigInt64BE');\n      return this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, offset);\n    }\n    /**\n     * Reads a BigInt64LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { BigInt }\n     */\n  }, {\n    key: \"readBigInt64LE\",\n    value: function readBigInt64LE(offset) {\n      utils_1.bigIntAndBufferInt64Check('readBigInt64LE');\n      return this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, offset);\n    }\n    /**\n     * Writes an Int8 value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(value, offset) {\n      this._writeNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n      return this;\n    }\n    /**\n     * Inserts an Int8 value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertInt8\",\n    value: function insertInt8(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n    }\n    /**\n     * Writes an Int16BE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeInt16BE\",\n    value: function writeInt16BE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n    }\n    /**\n     * Inserts an Int16BE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertInt16BE\",\n    value: function insertInt16BE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n    }\n    /**\n     * Writes an Int16LE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeInt16LE\",\n    value: function writeInt16LE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n    }\n    /**\n     * Inserts an Int16LE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertInt16LE\",\n    value: function insertInt16LE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n    }\n    /**\n     * Writes an Int32BE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeInt32BE\",\n    value: function writeInt32BE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n    }\n    /**\n     * Inserts an Int32BE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertInt32BE\",\n    value: function insertInt32BE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n    }\n    /**\n     * Writes an Int32LE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeInt32LE\",\n    value: function writeInt32LE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n    }\n    /**\n     * Inserts an Int32LE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertInt32LE\",\n    value: function insertInt32LE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n    }\n    /**\n     * Writes a BigInt64BE value to the current write position (or at optional offset).\n     *\n     * @param value { BigInt } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBigInt64BE\",\n    value: function writeBigInt64BE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n      return this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n    }\n    /**\n     * Inserts a BigInt64BE value at the given offset value.\n     *\n     * @param value { BigInt } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBigInt64BE\",\n    value: function insertBigInt64BE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n      return this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n    }\n    /**\n     * Writes a BigInt64LE value to the current write position (or at optional offset).\n     *\n     * @param value { BigInt } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBigInt64LE\",\n    value: function writeBigInt64LE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n      return this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n    }\n    /**\n     * Inserts a Int64LE value at the given offset value.\n     *\n     * @param value { BigInt } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBigInt64LE\",\n    value: function insertBigInt64LE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n      return this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n    }\n    // Unsigned Integers\n    /**\n     * Reads an UInt8 value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readUInt8\",\n    value: function readUInt8(offset) {\n      return this._readNumberValue(Buffer.prototype.readUInt8, 1, offset);\n    }\n    /**\n     * Reads an UInt16BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readUInt16BE\",\n    value: function readUInt16BE(offset) {\n      return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, offset);\n    }\n    /**\n     * Reads an UInt16LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readUInt16LE\",\n    value: function readUInt16LE(offset) {\n      return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, offset);\n    }\n    /**\n     * Reads an UInt32BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readUInt32BE\",\n    value: function readUInt32BE(offset) {\n      return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, offset);\n    }\n    /**\n     * Reads an UInt32LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readUInt32LE\",\n    value: function readUInt32LE(offset) {\n      return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, offset);\n    }\n    /**\n     * Reads a BigUInt64BE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { BigInt }\n     */\n  }, {\n    key: \"readBigUInt64BE\",\n    value: function readBigUInt64BE(offset) {\n      utils_1.bigIntAndBufferInt64Check('readBigUInt64BE');\n      return this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, offset);\n    }\n    /**\n     * Reads a BigUInt64LE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { BigInt }\n     */\n  }, {\n    key: \"readBigUInt64LE\",\n    value: function readBigUInt64LE(offset) {\n      utils_1.bigIntAndBufferInt64Check('readBigUInt64LE');\n      return this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, offset);\n    }\n    /**\n     * Writes an UInt8 value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeUInt8\",\n    value: function writeUInt8(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n    }\n    /**\n     * Inserts an UInt8 value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertUInt8\",\n    value: function insertUInt8(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n    }\n    /**\n     * Writes an UInt16BE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeUInt16BE\",\n    value: function writeUInt16BE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n    }\n    /**\n     * Inserts an UInt16BE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertUInt16BE\",\n    value: function insertUInt16BE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n    }\n    /**\n     * Writes an UInt16LE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeUInt16LE\",\n    value: function writeUInt16LE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n    }\n    /**\n     * Inserts an UInt16LE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertUInt16LE\",\n    value: function insertUInt16LE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n    }\n    /**\n     * Writes an UInt32BE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeUInt32BE\",\n    value: function writeUInt32BE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n    }\n    /**\n     * Inserts an UInt32BE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertUInt32BE\",\n    value: function insertUInt32BE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n    }\n    /**\n     * Writes an UInt32LE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeUInt32LE\",\n    value: function writeUInt32LE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n    }\n    /**\n     * Inserts an UInt32LE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertUInt32LE\",\n    value: function insertUInt32LE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n    }\n    /**\n     * Writes a BigUInt64BE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBigUInt64BE\",\n    value: function writeBigUInt64BE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n      return this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n    }\n    /**\n     * Inserts a BigUInt64BE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBigUInt64BE\",\n    value: function insertBigUInt64BE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n      return this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n    }\n    /**\n     * Writes a BigUInt64LE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBigUInt64LE\",\n    value: function writeBigUInt64LE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n      return this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n    }\n    /**\n     * Inserts a BigUInt64LE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBigUInt64LE\",\n    value: function insertBigUInt64LE(value, offset) {\n      utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n      return this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n    }\n    // Floating Point\n    /**\n     * Reads an FloatBE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readFloatBE\",\n    value: function readFloatBE(offset) {\n      return this._readNumberValue(Buffer.prototype.readFloatBE, 4, offset);\n    }\n    /**\n     * Reads an FloatLE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readFloatLE\",\n    value: function readFloatLE(offset) {\n      return this._readNumberValue(Buffer.prototype.readFloatLE, 4, offset);\n    }\n    /**\n     * Writes a FloatBE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeFloatBE\",\n    value: function writeFloatBE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n    }\n    /**\n     * Inserts a FloatBE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertFloatBE\",\n    value: function insertFloatBE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n    }\n    /**\n     * Writes a FloatLE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeFloatLE\",\n    value: function writeFloatLE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n    }\n    /**\n     * Inserts a FloatLE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertFloatLE\",\n    value: function insertFloatLE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n    }\n    // Double Floating Point\n    /**\n     * Reads an DoublEBE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readDoubleBE\",\n    value: function readDoubleBE(offset) {\n      return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, offset);\n    }\n    /**\n     * Reads an DoubleLE value from the current read position or an optionally provided offset.\n     *\n     * @param offset { Number } The offset to read data from (optional)\n     * @return { Number }\n     */\n  }, {\n    key: \"readDoubleLE\",\n    value: function readDoubleLE(offset) {\n      return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, offset);\n    }\n    /**\n     * Writes a DoubleBE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeDoubleBE\",\n    value: function writeDoubleBE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n    }\n    /**\n     * Inserts a DoubleBE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertDoubleBE\",\n    value: function insertDoubleBE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n    }\n    /**\n     * Writes a DoubleLE value to the current write position (or at optional offset).\n     *\n     * @param value { Number } The value to write.\n     * @param offset { Number } The offset to write the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeDoubleLE\",\n    value: function writeDoubleLE(value, offset) {\n      return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n    }\n    /**\n     * Inserts a DoubleLE value at the given offset value.\n     *\n     * @param value { Number } The value to insert.\n     * @param offset { Number } The offset to insert the value at.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertDoubleLE\",\n    value: function insertDoubleLE(value, offset) {\n      return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n    }\n    // Strings\n    /**\n     * Reads a String from the current read position.\n     *\n     * @param arg1 { Number | String } The number of bytes to read as a String, or the BufferEncoding to use for\n     *             the string (Defaults to instance level encoding).\n     * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n     *\n     * @return { String }\n     */\n  }, {\n    key: \"readString\",\n    value: function readString(arg1, encoding) {\n      var lengthVal;\n      // Length provided\n      if (typeof arg1 === 'number') {\n        utils_1.checkLengthValue(arg1);\n        lengthVal = Math.min(arg1, this.length - this._readOffset);\n      } else {\n        encoding = arg1;\n        lengthVal = this.length - this._readOffset;\n      }\n      // Check encoding\n      if (typeof encoding !== 'undefined') {\n        utils_1.checkEncoding(encoding);\n      }\n      var value = this._buff.slice(this._readOffset, this._readOffset + lengthVal).toString(encoding || this._encoding);\n      this._readOffset += lengthVal;\n      return value;\n    }\n    /**\n     * Inserts a String\n     *\n     * @param value { String } The String value to insert.\n     * @param offset { Number } The offset to insert the string at.\n     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertString\",\n    value: function insertString(value, offset, encoding) {\n      utils_1.checkOffsetValue(offset);\n      return this._handleString(value, true, offset, encoding);\n    }\n    /**\n     * Writes a String\n     *\n     * @param value { String } The String value to write.\n     * @param arg2 { Number | String } The offset to write the string at, or the BufferEncoding to use.\n     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeString\",\n    value: function writeString(value, arg2, encoding) {\n      return this._handleString(value, false, arg2, encoding);\n    }\n    /**\n     * Reads a null-terminated String from the current read position.\n     *\n     * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n     *\n     * @return { String }\n     */\n  }, {\n    key: \"readStringNT\",\n    value: function readStringNT(encoding) {\n      if (typeof encoding !== 'undefined') {\n        utils_1.checkEncoding(encoding);\n      }\n      // Set null character position to the end SmartBuffer instance.\n      var nullPos = this.length;\n      // Find next null character (if one is not found, default from above is used)\n      for (var i = this._readOffset; i < this.length; i++) {\n        if (this._buff[i] === 0x00) {\n          nullPos = i;\n          break;\n        }\n      }\n      // Read string value\n      var value = this._buff.slice(this._readOffset, nullPos);\n      // Increment internal Buffer read offset\n      this._readOffset = nullPos + 1;\n      return value.toString(encoding || this._encoding);\n    }\n    /**\n     * Inserts a null-terminated String.\n     *\n     * @param value { String } The String value to write.\n     * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertStringNT\",\n    value: function insertStringNT(value, offset, encoding) {\n      utils_1.checkOffsetValue(offset);\n      // Write Values\n      this.insertString(value, offset, encoding);\n      this.insertUInt8(0x00, offset + value.length);\n      return this;\n    }\n    /**\n     * Writes a null-terminated String.\n     *\n     * @param value { String } The String value to write.\n     * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeStringNT\",\n    value: function writeStringNT(value, arg2, encoding) {\n      // Write Values\n      this.writeString(value, arg2, encoding);\n      this.writeUInt8(0x00, typeof arg2 === 'number' ? arg2 + value.length : this.writeOffset);\n      return this;\n    }\n    // Buffers\n    /**\n     * Reads a Buffer from the internal read position.\n     *\n     * @param length { Number } The length of data to read as a Buffer.\n     *\n     * @return { Buffer }\n     */\n  }, {\n    key: \"readBuffer\",\n    value: function readBuffer(length) {\n      if (typeof length !== 'undefined') {\n        utils_1.checkLengthValue(length);\n      }\n      var lengthVal = typeof length === 'number' ? length : this.length;\n      var endPoint = Math.min(this.length, this._readOffset + lengthVal);\n      // Read buffer value\n      var value = this._buff.slice(this._readOffset, endPoint);\n      // Increment internal Buffer read offset\n      this._readOffset = endPoint;\n      return value;\n    }\n    /**\n     * Writes a Buffer to the current write position.\n     *\n     * @param value { Buffer } The Buffer to write.\n     * @param offset { Number } The offset to write the Buffer to.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBuffer\",\n    value: function insertBuffer(value, offset) {\n      utils_1.checkOffsetValue(offset);\n      return this._handleBuffer(value, true, offset);\n    }\n    /**\n     * Writes a Buffer to the current write position.\n     *\n     * @param value { Buffer } The Buffer to write.\n     * @param offset { Number } The offset to write the Buffer to.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBuffer\",\n    value: function writeBuffer(value, offset) {\n      return this._handleBuffer(value, false, offset);\n    }\n    /**\n     * Reads a null-terminated Buffer from the current read poisiton.\n     *\n     * @return { Buffer }\n     */\n  }, {\n    key: \"readBufferNT\",\n    value: function readBufferNT() {\n      // Set null character position to the end SmartBuffer instance.\n      var nullPos = this.length;\n      // Find next null character (if one is not found, default from above is used)\n      for (var i = this._readOffset; i < this.length; i++) {\n        if (this._buff[i] === 0x00) {\n          nullPos = i;\n          break;\n        }\n      }\n      // Read value\n      var value = this._buff.slice(this._readOffset, nullPos);\n      // Increment internal Buffer read offset\n      this._readOffset = nullPos + 1;\n      return value;\n    }\n    /**\n     * Inserts a null-terminated Buffer.\n     *\n     * @param value { Buffer } The Buffer to write.\n     * @param offset { Number } The offset to write the Buffer to.\n     *\n     * @return this\n     */\n  }, {\n    key: \"insertBufferNT\",\n    value: function insertBufferNT(value, offset) {\n      utils_1.checkOffsetValue(offset);\n      // Write Values\n      this.insertBuffer(value, offset);\n      this.insertUInt8(0x00, offset + value.length);\n      return this;\n    }\n    /**\n     * Writes a null-terminated Buffer.\n     *\n     * @param value { Buffer } The Buffer to write.\n     * @param offset { Number } The offset to write the Buffer to.\n     *\n     * @return this\n     */\n  }, {\n    key: \"writeBufferNT\",\n    value: function writeBufferNT(value, offset) {\n      // Checks for valid numberic value;\n      if (typeof offset !== 'undefined') {\n        utils_1.checkOffsetValue(offset);\n      }\n      // Write Values\n      this.writeBuffer(value, offset);\n      this.writeUInt8(0x00, typeof offset === 'number' ? offset + value.length : this._writeOffset);\n      return this;\n    }\n    /**\n     * Clears the SmartBuffer instance to its original empty state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._writeOffset = 0;\n      this._readOffset = 0;\n      this.length = 0;\n      return this;\n    }\n    /**\n     * Gets the remaining data left to be read from the SmartBuffer instance.\n     *\n     * @return { Number }\n     */\n  }, {\n    key: \"remaining\",\n    value: function remaining() {\n      return this.length - this._readOffset;\n    }\n    /**\n     * Gets the current read offset value of the SmartBuffer instance.\n     *\n     * @return { Number }\n     */\n  }, {\n    key: \"readOffset\",\n    get: function get() {\n      return this._readOffset;\n    }\n    /**\n     * Sets the read offset value of the SmartBuffer instance.\n     *\n     * @param offset { Number } - The offset value to set.\n     */,\n    set: function set(offset) {\n      utils_1.checkOffsetValue(offset);\n      // Check for bounds.\n      utils_1.checkTargetOffset(offset, this);\n      this._readOffset = offset;\n    }\n    /**\n     * Gets the current write offset value of the SmartBuffer instance.\n     *\n     * @return { Number }\n     */\n  }, {\n    key: \"writeOffset\",\n    get: function get() {\n      return this._writeOffset;\n    }\n    /**\n     * Sets the write offset value of the SmartBuffer instance.\n     *\n     * @param offset { Number } - The offset value to set.\n     */,\n    set: function set(offset) {\n      utils_1.checkOffsetValue(offset);\n      // Check for bounds.\n      utils_1.checkTargetOffset(offset, this);\n      this._writeOffset = offset;\n    }\n    /**\n     * Gets the currently set string encoding of the SmartBuffer instance.\n     *\n     * @return { BufferEncoding } The string Buffer encoding currently set.\n     */\n  }, {\n    key: \"encoding\",\n    get: function get() {\n      return this._encoding;\n    }\n    /**\n     * Sets the string encoding of the SmartBuffer instance.\n     *\n     * @param encoding { BufferEncoding } The string Buffer encoding to set.\n     */,\n    set: function set(encoding) {\n      utils_1.checkEncoding(encoding);\n      this._encoding = encoding;\n    }\n    /**\n     * Gets the underlying internal Buffer. (This includes unmanaged data in the Buffer)\n     *\n     * @return { Buffer } The Buffer value.\n     */\n  }, {\n    key: \"internalBuffer\",\n    get: function get() {\n      return this._buff;\n    }\n    /**\n     * Gets the value of the internal managed Buffer (Includes managed data only)\n     *\n     * @param { Buffer }\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this._buff.slice(0, this.length);\n    }\n    /**\n     * Gets the String value of the internal managed Buffer\n     *\n     * @param encoding { String } The BufferEncoding to display the Buffer as (defaults to instance level encoding).\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      var encodingVal = typeof encoding === 'string' ? encoding : this._encoding;\n      // Check for invalid encoding.\n      utils_1.checkEncoding(encodingVal);\n      return this._buff.toString(encodingVal, 0, this.length);\n    }\n    /**\n     * Destroys the SmartBuffer instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clear();\n      return this;\n    }\n    /**\n     * Handles inserting and writing strings.\n     *\n     * @param value { String } The String value to insert.\n     * @param isInsert { Boolean } True if inserting a string, false if writing.\n     * @param arg2 { Number | String } The offset to insert the string at, or the BufferEncoding to use.\n     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n     */\n  }, {\n    key: \"_handleString\",\n    value: function _handleString(value, isInsert, arg3, encoding) {\n      var offsetVal = this._writeOffset;\n      var encodingVal = this._encoding;\n      // Check for offset\n      if (typeof arg3 === 'number') {\n        offsetVal = arg3;\n        // Check for encoding\n      } else if (typeof arg3 === 'string') {\n        utils_1.checkEncoding(arg3);\n        encodingVal = arg3;\n      }\n      // Check for encoding (third param)\n      if (typeof encoding === 'string') {\n        utils_1.checkEncoding(encoding);\n        encodingVal = encoding;\n      }\n      // Calculate bytelength of string.\n      var byteLength = Buffer.byteLength(value, encodingVal);\n      // Ensure there is enough internal Buffer capacity.\n      if (isInsert) {\n        this.ensureInsertable(byteLength, offsetVal);\n      } else {\n        this._ensureWriteable(byteLength, offsetVal);\n      }\n      // Write value\n      this._buff.write(value, offsetVal, byteLength, encodingVal);\n      // Increment internal Buffer write offset;\n      if (isInsert) {\n        this._writeOffset += byteLength;\n      } else {\n        // If an offset was given, check to see if we wrote beyond the current writeOffset.\n        if (typeof arg3 === 'number') {\n          this._writeOffset = Math.max(this._writeOffset, offsetVal + byteLength);\n        } else {\n          // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n          this._writeOffset += byteLength;\n        }\n      }\n      return this;\n    }\n    /**\n     * Handles writing or insert of a Buffer.\n     *\n     * @param value { Buffer } The Buffer to write.\n     * @param offset { Number } The offset to write the Buffer to.\n     */\n  }, {\n    key: \"_handleBuffer\",\n    value: function _handleBuffer(value, isInsert, offset) {\n      var offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n      // Ensure there is enough internal Buffer capacity.\n      if (isInsert) {\n        this.ensureInsertable(value.length, offsetVal);\n      } else {\n        this._ensureWriteable(value.length, offsetVal);\n      }\n      // Write buffer value\n      value.copy(this._buff, offsetVal);\n      // Increment internal Buffer write offset;\n      if (isInsert) {\n        this._writeOffset += value.length;\n      } else {\n        // If an offset was given, check to see if we wrote beyond the current writeOffset.\n        if (typeof offset === 'number') {\n          this._writeOffset = Math.max(this._writeOffset, offsetVal + value.length);\n        } else {\n          // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n          this._writeOffset += value.length;\n        }\n      }\n      return this;\n    }\n    /**\n     * Ensures that the internal Buffer is large enough to read data.\n     *\n     * @param length { Number } The length of the data that needs to be read.\n     * @param offset { Number } The offset of the data that needs to be read.\n     */\n  }, {\n    key: \"ensureReadable\",\n    value: function ensureReadable(length, offset) {\n      // Offset value defaults to managed read offset.\n      var offsetVal = this._readOffset;\n      // If an offset was provided, use it.\n      if (typeof offset !== 'undefined') {\n        // Checks for valid numberic value;\n        utils_1.checkOffsetValue(offset);\n        // Overide with custom offset.\n        offsetVal = offset;\n      }\n      // Checks if offset is below zero, or the offset+length offset is beyond the total length of the managed data.\n      if (offsetVal < 0 || offsetVal + length > this.length) {\n        throw new Error(utils_1.ERRORS.INVALID_READ_BEYOND_BOUNDS);\n      }\n    }\n    /**\n     * Ensures that the internal Buffer is large enough to insert data.\n     *\n     * @param dataLength { Number } The length of the data that needs to be written.\n     * @param offset { Number } The offset of the data to be written.\n     */\n  }, {\n    key: \"ensureInsertable\",\n    value: function ensureInsertable(dataLength, offset) {\n      // Checks for valid numberic value;\n      utils_1.checkOffsetValue(offset);\n      // Ensure there is enough internal Buffer capacity.\n      this._ensureCapacity(this.length + dataLength);\n      // If an offset was provided and its not the very end of the buffer, copy data into appropriate location in regards to the offset.\n      if (offset < this.length) {\n        this._buff.copy(this._buff, offset + dataLength, offset, this._buff.length);\n      }\n      // Adjust tracked smart buffer length\n      if (offset + dataLength > this.length) {\n        this.length = offset + dataLength;\n      } else {\n        this.length += dataLength;\n      }\n    }\n    /**\n     * Ensures that the internal Buffer is large enough to write data.\n     *\n     * @param dataLength { Number } The length of the data that needs to be written.\n     * @param offset { Number } The offset of the data to be written (defaults to writeOffset).\n     */\n  }, {\n    key: \"_ensureWriteable\",\n    value: function _ensureWriteable(dataLength, offset) {\n      var offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n      // Ensure enough capacity to write data.\n      this._ensureCapacity(offsetVal + dataLength);\n      // Adjust SmartBuffer length (if offset + length is larger than managed length, adjust length)\n      if (offsetVal + dataLength > this.length) {\n        this.length = offsetVal + dataLength;\n      }\n    }\n    /**\n     * Ensures that the internal Buffer is large enough to write at least the given amount of data.\n     *\n     * @param minLength { Number } The minimum length of the data needs to be written.\n     */\n  }, {\n    key: \"_ensureCapacity\",\n    value: function _ensureCapacity(minLength) {\n      var oldLength = this._buff.length;\n      if (minLength > oldLength) {\n        var data = this._buff;\n        var newLength = oldLength * 3 / 2 + 1;\n        if (newLength < minLength) {\n          newLength = minLength;\n        }\n        this._buff = Buffer.allocUnsafe(newLength);\n        data.copy(this._buff, 0, 0, oldLength);\n      }\n    }\n    /**\n     * Reads a numeric number value using the provided function.\n     *\n     * @typeparam T { number | bigint } The type of the value to be read\n     *\n     * @param func { Function(offset: number) => number } The function to read data on the internal Buffer with.\n     * @param byteSize { Number } The number of bytes read.\n     * @param offset { Number } The offset to read from (optional). When this is not provided, the managed readOffset is used instead.\n     *\n     * @returns { T } the number value\n     */\n  }, {\n    key: \"_readNumberValue\",\n    value: function _readNumberValue(func, byteSize, offset) {\n      this.ensureReadable(byteSize, offset);\n      // Call Buffer.readXXXX();\n      var value = func.call(this._buff, typeof offset === 'number' ? offset : this._readOffset);\n      // Adjust internal read offset if an optional read offset was not provided.\n      if (typeof offset === 'undefined') {\n        this._readOffset += byteSize;\n      }\n      return value;\n    }\n    /**\n     * Inserts a numeric number value based on the given offset and value.\n     *\n     * @typeparam T { number | bigint } The type of the value to be written\n     *\n     * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n     * @param byteSize { Number } The number of bytes written.\n     * @param value { T } The number value to write.\n     * @param offset { Number } the offset to write the number at (REQUIRED).\n     *\n     * @returns SmartBuffer this buffer\n     */\n  }, {\n    key: \"_insertNumberValue\",\n    value: function _insertNumberValue(func, byteSize, value, offset) {\n      // Check for invalid offset values.\n      utils_1.checkOffsetValue(offset);\n      // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n      this.ensureInsertable(byteSize, offset);\n      // Call buffer.writeXXXX();\n      func.call(this._buff, value, offset);\n      // Adjusts internally managed write offset.\n      this._writeOffset += byteSize;\n      return this;\n    }\n    /**\n     * Writes a numeric number value based on the given offset and value.\n     *\n     * @typeparam T { number | bigint } The type of the value to be written\n     *\n     * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n     * @param byteSize { Number } The number of bytes written.\n     * @param value { T } The number value to write.\n     * @param offset { Number } the offset to write the number at (REQUIRED).\n     *\n     * @returns SmartBuffer this buffer\n     */\n  }, {\n    key: \"_writeNumberValue\",\n    value: function _writeNumberValue(func, byteSize, value, offset) {\n      // If an offset was provided, validate it.\n      if (typeof offset === 'number') {\n        // Check if we're writing beyond the bounds of the managed data.\n        if (offset < 0) {\n          throw new Error(utils_1.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);\n        }\n        utils_1.checkOffsetValue(offset);\n      }\n      // Default to writeOffset if no offset value was given.\n      var offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n      // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n      this._ensureWriteable(byteSize, offsetVal);\n      func.call(this._buff, value, offsetVal);\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof offset === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + byteSize);\n      } else {\n        // If no numeric offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += byteSize;\n      }\n      return this;\n    }\n  }], [{\n    key: \"fromSize\",\n    value: function fromSize(size, encoding) {\n      return new this({\n        size: size,\n        encoding: encoding\n      });\n    }\n    /**\n     * Creates a new SmartBuffer instance with the provided Buffer and optional encoding.\n     *\n     * @param buffer { Buffer } The Buffer to use as the internal Buffer value.\n     * @param encoding { String } The BufferEncoding to use for strings.\n     *\n     * @return { SmartBuffer }\n     */\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buff, encoding) {\n      return new this({\n        buff: buff,\n        encoding: encoding\n      });\n    }\n    /**\n     * Creates a new SmartBuffer instance with the provided SmartBufferOptions options.\n     *\n     * @param options { SmartBufferOptions } The options to use when creating the SmartBuffer instance.\n     */\n  }, {\n    key: \"fromOptions\",\n    value: function fromOptions(options) {\n      return new this(options);\n    }\n    /**\n     * Type checking function that determines if an object is a SmartBufferOptions object.\n     */\n  }, {\n    key: \"isSmartBufferOptions\",\n    value: function isSmartBufferOptions(options) {\n      var castOptions = options;\n      return castOptions && (castOptions.encoding !== undefined || castOptions.size !== undefined || castOptions.buff !== undefined);\n    }\n  }]);\n  return SmartBuffer;\n}();\nexports.SmartBuffer = SmartBuffer;","map":{"version":3,"names":["utils_1","require","DEFAULT_SMARTBUFFER_SIZE","DEFAULT_SMARTBUFFER_ENCODING","SmartBuffer","options","_classCallCheck","length","_encoding","_writeOffset","_readOffset","isSmartBufferOptions","encoding","checkEncoding","size","isFiniteInteger","_buff","Buffer","allocUnsafe","Error","ERRORS","INVALID_SMARTBUFFER_SIZE","buff","isBuffer","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","_createClass","key","value","readInt8","offset","_readNumberValue","prototype","readInt16BE","readInt16LE","readInt32BE","readInt32LE","readBigInt64BE","bigIntAndBufferInt64Check","readBigInt64LE","writeInt8","_writeNumberValue","insertInt8","_insertNumberValue","writeInt16BE","insertInt16BE","writeInt16LE","insertInt16LE","writeInt32BE","insertInt32BE","writeInt32LE","insertInt32LE","writeBigInt64BE","insertBigInt64BE","writeBigInt64LE","insertBigInt64LE","readUInt8","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","readBigUInt64BE","readBigUInt64LE","writeUInt8","insertUInt8","writeUInt16BE","insertUInt16BE","writeUInt16LE","insertUInt16LE","writeUInt32BE","insertUInt32BE","writeUInt32LE","insertUInt32LE","writeBigUInt64BE","insertBigUInt64BE","writeBigUInt64LE","insertBigUInt64LE","readFloatBE","readFloatLE","writeFloatBE","insertFloatBE","writeFloatLE","insertFloatLE","readDoubleBE","readDoubleLE","writeDoubleBE","insertDoubleBE","writeDoubleLE","insertDoubleLE","readString","arg1","lengthVal","checkLengthValue","Math","min","slice","toString","insertString","checkOffsetValue","_handleString","writeString","arg2","readStringNT","nullPos","i","insertStringNT","writeStringNT","writeOffset","readBuffer","endPoint","insertBuffer","_handleBuffer","writeBuffer","readBufferNT","insertBufferNT","writeBufferNT","clear","remaining","get","set","checkTargetOffset","toBuffer","encodingVal","destroy","isInsert","arg3","offsetVal","byteLength","ensureInsertable","_ensureWriteable","write","max","copy","ensureReadable","INVALID_READ_BEYOND_BOUNDS","dataLength","_ensureCapacity","minLength","oldLength","data","newLength","func","byteSize","call","INVALID_WRITE_BEYOND_BOUNDS","fromSize","fromBuffer","fromOptions","castOptions","undefined","exports"],"sources":["../src/smartbuffer.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}