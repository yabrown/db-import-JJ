{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __assign, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { Logger, LogLevel } from '../logger/Logger.js';\nimport { Constants } from '../utils/Constants.js';\nimport { version } from '../packageMetadata.js';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.js';\nimport { DefaultStorageClass } from '../cache/CacheManager.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Token renewal offset default in seconds\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nvar DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: function loggerCallback() {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\n  sendGetRequestAsync: function sendGetRequestAsync() {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  },\n  sendPostRequestAsync: function sendPostRequestAsync() {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  }\n};\nvar DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nvar DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nvar DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: \"\" + Constants.DEFAULT_COMMON_TENANT\n};\nvar DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\nfunction buildClientConfiguration(_a) {\n  var userAuthOptions = _a.authOptions,\n    userSystemOptions = _a.systemOptions,\n    userLoggerOption = _a.loggerOptions,\n    storageImplementation = _a.storageInterface,\n    networkImplementation = _a.networkInterface,\n    cryptoImplementation = _a.cryptoInterface,\n    clientCredentials = _a.clientCredentials,\n    libraryInfo = _a.libraryInfo,\n    telemetry = _a.telemetry,\n    serverTelemetryManager = _a.serverTelemetryManager,\n    persistencePlugin = _a.persistencePlugin,\n    serializableCache = _a.serializableCache;\n  var loggerOptions = __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),\n    loggerOptions: loggerOptions,\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),\n    telemetry: __assign(__assign({}, DEFAULT_TELEMETRY_OPTIONS), telemetry),\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\nfunction buildAuthOptions(authOptions) {\n  return __assign({\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false\n  }, authOptions);\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration };","map":{"version":3,"names":["DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","DEFAULT_SYSTEM_OPTIONS","tokenRenewalOffsetSeconds","preventCorsPreflight","DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","correlationId","Constants","EMPTY_STRING","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","notImplErr","AuthError","createUnexpectedError","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","version","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","buildClientConfiguration","_a","userAuthOptions","authOptions","userSystemOptions","systemOptions","userLoggerOption","loggerOptions","storageImplementation","storageInterface","networkImplementation","networkInterface","cryptoImplementation","cryptoInterface","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","__assign","buildAuthOptions","DefaultStorageClass","clientId","DEFAULT_CRYPTO_IMPLEMENTATION","Logger","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache"],"sources":["../../src/config/ClientConfiguration.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger\";\nimport { Constants } from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { ClientCredentials } from \"../account/ClientCredentials\";\n\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - telemetry                  - Telemetry options and data\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions,\n    systemOptions?: SystemOptions,\n    loggerOptions?: LoggerOptions,\n    storageInterface?: CacheManager,\n    networkInterface?: INetworkModule,\n    cryptoInterface?: ICrypto,\n    clientCredentials?: ClientCredentials,\n    libraryInfo?: LibraryInfo\n    telemetry?: TelemetryOptions,\n    serverTelemetryManager?: ServerTelemetryManager | null,\n    persistencePlugin?: ICachePlugin | null,\n    serializableCache?: ISerializableTokenCache | null,   \n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>,\n    systemOptions: Required<SystemOptions>,\n    loggerOptions : Required<LoggerOptions>,\n    storageInterface: CacheManager,\n    networkInterface : INetworkModule,\n    cryptoInterface : Required<ICrypto>,\n    libraryInfo : LibraryInfo,\n    telemetry: Required<TelemetryOptions>,\n    serverTelemetryManager: ServerTelemetryManager | null,\n    clientCredentials: ClientCredentials,\n    persistencePlugin: ICachePlugin | null,\n    serializableCache: ISerializableTokenCache | null,    \n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * - skipAuthorityMetadataCache      - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n    skipAuthorityMetadataCache?: boolean;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback,\n    piiLoggingEnabled?: boolean,\n    logLevel?: LogLevel,\n    correlationId?: string\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string,\n    version: string,\n    cpu: string,\n    os: string\n};\n\n/**\n * AzureCloudInstance specific options\n *\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\n * - tenant                         - provision to provide the tenant info\n */\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string,\n};\n\nexport type TelemetryOptions = {\n    application: ApplicationTelemetry;\n};\n\n/**\n * Telemetry information sent on request\n * - appName: Unique string name of an application\n * - appVersion: Version of the application using MSAL\n */\nexport type ApplicationTelemetry = {\n    appName: string;\n    appVersion: string;\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined\n};\n\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\n\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\n    application: {\n        appName: \"\",\n        appVersion: \"\"\n    }\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration(\n    {\n        authOptions: userAuthOptions,\n        systemOptions: userSystemOptions,\n        loggerOptions: userLoggerOption,\n        storageInterface: storageImplementation,\n        networkInterface: networkImplementation,\n        cryptoInterface: cryptoImplementation,\n        clientCredentials: clientCredentials,\n        libraryInfo: libraryInfo,\n        telemetry: telemetry,\n        serverTelemetryManager: serverTelemetryManager,\n        persistencePlugin: persistencePlugin,\n        serializableCache: serializableCache,             \n    }: ClientConfiguration): CommonClientConfiguration {\n\n    const loggerOptions = { ...DEFAULT_LOGGER_IMPLEMENTATION, ...userLoggerOption };\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,             \n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        ...authOptions\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}