{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\nvar ScopeSet = /** @class */function () {\n  function ScopeSet(inputScopes) {\n    var _this = this;\n    // Filter empty string and null/undefined array items\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || Constants.EMPTY_STRING;\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n  return ScopeSet;\n}();\nexport { ScopeSet };","map":{"version":3,"names":["ScopeSet","inputScopes","_this","scopeArr","StringUtils","trimArrayEntries","__spreadArrays","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","Constants","EMPTY_STRING","split","prototype","length","ClientConfigurationError","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","containsScopeSet","scopeSet","size","asArray","every","containsOnlyOIDCScopes","defaultScopeCount","OIDC_SCOPES","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","ClientAuthError","createAppendScopeSetError","removeScope","createRemoveEmptyScopeFromSetError","delete","removeOIDCScopes","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"sources":["../../src/request/ScopeSet.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach(scope => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (!StringUtils.isEmpty(newScope)) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach(newScope => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (StringUtils.isEmpty(scope)) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        \n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach(val => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}