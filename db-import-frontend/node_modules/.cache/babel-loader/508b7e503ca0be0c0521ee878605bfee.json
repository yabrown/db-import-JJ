{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\nvar AccountEntity = /** @class */function () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {\n    var _a, _b, _c, _d, _e, _f;\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    account.nativeAccountId = nativeAccountId;\n    var env = environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;\n    if (idToken) {\n      account.idTokenClaims = idToken.claims;\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n       * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n       * policy is configured to return more than 1 email.\r\n       */\n      var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;\n      var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;\n      account.username = preferredUsername || email || Constants.EMPTY_STRING;\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n  AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {\n    var _a, _b, _c, _d;\n    var account = new AccountEntity();\n    account.authorityType = authority && authority.authorityType === AuthorityType.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId;\n    // non AAD scenarios can have empty realm\n    account.realm = Constants.EMPTY_STRING;\n    var env = environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING;\n      // upn claim for most ADFS scenarios\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  };\n  return AccountEntity;\n}();\nexport { AccountEntity };","map":{"version":3,"names":["AccountEntity","prototype","generateAccountId","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","generateType","authorityType","CacheAccountType","ADFS_ACCOUNT_TYPE","CacheType","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","ClientAuthError","createUnexpectedAccountTypeError","getAccountInfo","name","idTokenClaims","nativeAccountId","accountInterface","accountKey","Constants","EMPTY_STRING","createAccount","clientInfo","idToken","authority","cloudGraphHostName","msGraphHost","account","env","getPreferredCache","createInvalidCacheEnvironmentError","_a","claims","tid","_b","oid","_c","sub","preferredUsername","_d","preferred_username","email","_e","emails","_f","createGenericAccount","AuthorityType","Adfs","upn","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","buildClientInfo","StringUtils","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["../../../src/cache/entities/AccountEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Separators,\n    CacheAccountType,\n    CacheType,\n    Constants,\n} from \"../../utils/Constants\";\nimport { Authority } from \"../../authority/Authority\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { buildClientInfo } from \"../../account/ClientInfo\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { AccountInfo } from \"../../account/AccountInfo\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\nimport { AuthorityType } from \"../../authority/AuthorityType\";\nimport { Logger } from \"../../logger/Logger\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      clientInfo: Full base64 encoded client info received from ESTS\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      idTokenClaims: Object containing claims parsed from ID token\n *      nativeAccountId: Account identifier on the native device\n * }\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    name?: string;\n    clientInfo?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string;\n    idTokenClaims?: TokenClaims;\n    nativeAccountId?: string;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n\n    /**\n     * returns the type of the cache (in this case account)\n     */\n    generateType(): number {\n        switch (this.authorityType) {\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\n                return CacheType.ADFS;\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n                return CacheType.MSA;\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n                return CacheType.MSSTS;\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n                return CacheType.GENERIC;\n            default: {\n                throw ClientAuthError.createUnexpectedAccountTypeError();\n            }\n        }\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims,\n            nativeAccountId: this.nativeAccountId\n        };\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || Constants.EMPTY_STRING,\n            accountInterface.tenantId || Constants.EMPTY_STRING,\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param clientInfo\n     * @param authority\n     * @param idToken\n     * @param policy\n     */\n    static createAccount(\n        clientInfo: string,\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string,\n        nativeAccountId?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        account.clientInfo = clientInfo;\n        account.homeAccountId = homeAccountId;\n        account.nativeAccountId = nativeAccountId;\n\n        const env = environment || (authority && authority.getPreferredCache());\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = idToken?.claims?.tid || Constants.EMPTY_STRING;\n\n        if (idToken) {\n            account.idTokenClaims = idToken.claims;\n\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || Constants.EMPTY_STRING;\n\n            /*\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n             * In most cases it will contain a single email. This field should not be relied upon if a custom \n             * policy is configured to return more than 1 email.\n             */\n            const preferredUsername = idToken?.claims?.preferred_username;\n            const email = (idToken?.claims?.emails) ? idToken.claims.emails[0] : null;\n            \n            account.username = preferredUsername || email || Constants.EMPTY_STRING;\n            account.name = idToken?.claims?.name;\n        }\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        return account;\n    }\n\n    /**\n     * Builds non-AAD/ADFS account.\n     * @param authority\n     * @param idToken\n     */\n    static createGenericAccount(\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = (\n            authority &&\n            authority.authorityType === AuthorityType.Adfs\n        ) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        \n        account.homeAccountId = homeAccountId;\n        // non AAD scenarios can have empty realm\n        account.realm = Constants.EMPTY_STRING;\n\n        const env = environment || authority && authority.getPreferredCache();\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        if (idToken) {\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || Constants.EMPTY_STRING;\n            // upn claim for most ADFS scenarios\n            account.username = idToken?.claims?.upn || Constants.EMPTY_STRING;\n            account.name = idToken?.claims?.name || Constants.EMPTY_STRING;\n            account.idTokenClaims = idToken?.claims;\n        }\n\n        account.environment = env;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        /*\n         * add uniqueName to claims\n         * account.name = idToken.claims.uniqueName;\n         */\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(\n        serverClientInfo: string,\n        authType: AuthorityType,\n        logger: Logger,\n        cryptoObj: ICrypto,\n        idToken?: AuthToken\n    ): string {\n\n        const accountId = idToken?.claims?.sub ? idToken.claims.sub : Constants.EMPTY_STRING;\n\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n            return accountId;\n        }\n\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            try {\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n                }\n            } catch (e) {}\n        }\n\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA\n     * @param accountB\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\n            (accountAClaims.nonce === accountBClaims.nonce);\n        }\n\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\n            (accountA.localAccountId === accountB.localAccountId) &&\n            (accountA.username === accountB.username) &&\n            (accountA.tenantId === accountB.tenantId) &&\n            (accountA.environment === accountB.environment) &&\n            (accountA.nativeAccountId === accountB.nativeAccountId) &&\n            claimsMatch;\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAmBH;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACH,IAAAA,aAAA;EAAA,SAAAA,cAAA,G;EAgBI;;AAEG;EACHA,aAAA,CAAAC,SAAA,CAAAC,iBAAiB,GAAjB;IACI,IAAMC,SAAS,GAAkB,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,WAAW,CAAC;IACvE,OAAOF,SAAS,CAACG,IAAI,CAACC,UAAU,CAACC,mBAAmB,CAAC,CAACC,WAAW,EAAE;GACtE;EAED;;AAEG;EACHT,aAAA,CAAAC,SAAA,CAAAS,kBAAkB,GAAlB;IACI,OAAOV,aAAa,CAACW,uBAAuB,CAAC;MACzCP,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA;IACxB,EAAC;GACL;EAED;;AAEG;EACHf,aAAA,CAAAC,SAAA,CAAAe,YAAY,GAAZ;IACI,QAAQ,IAAI,CAACC,aAAa;MACtB,KAAKC,gBAAgB,CAACC,iBAAiB;QACnC,OAAOC,SAAS,CAACC,IAAI;MACzB,KAAKH,gBAAgB,CAACI,kBAAkB;QACpC,OAAOF,SAAS,CAACG,GAAG;MACxB,KAAKL,gBAAgB,CAACM,kBAAkB;QACpC,OAAOJ,SAAS,CAACK,KAAK;MAC1B,KAAKP,gBAAgB,CAACQ,oBAAoB;QACtC,OAAON,SAAS,CAACO,OAAO;MAC5B;QAAS;UACL,MAAMC,eAAe,CAACC,gCAAgC,EAAE;QAC3D;IACJ;GACJ;EAED;;AAEG;EACH7B,aAAA,CAAAC,SAAA,CAAA6B,cAAc,GAAd;IACI,OAAO;MACH1B,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCgB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,eAAe,EAAE,IAAI,CAACA;KACzB;GACJ;EAED;;;AAGG;EACIjC,aAAuB,CAAAW,uBAAA,GAA9B,UAA+BuB,gBAA6B;IACxD,IAAMC,UAAU,GAAG,CACfD,gBAAgB,CAAC9B,aAAa,EAC9B8B,gBAAgB,CAAC7B,WAAW,IAAI+B,SAAS,CAACC,YAAY,EACtDH,gBAAgB,CAACtB,QAAQ,IAAIwB,SAAS,CAACC,YAAY,CACtD;IAED,OAAOF,UAAU,CAAC7B,IAAI,CAACC,UAAU,CAACC,mBAAmB,CAAC,CAACC,WAAW,EAAE;GACvE;EAED;;;;;;AAMG;EACIT,aAAA,CAAAsC,aAAa,GAApB,UACIC,UAAkB,EAClBnC,aAAqB,EACrBoC,OAAkB,EAClBC,SAAqB,EACrBC,kBAA2B,EAC3BC,WAAoB,EACpBtC,WAAoB,EACpB4B,eAAwB;;IAExB,IAAMW,OAAO,GAAkB,IAAI5C,aAAa,EAAE;IAElD4C,OAAO,CAAC3B,aAAa,GAAGC,gBAAgB,CAACM,kBAAkB;IAC3DoB,OAAO,CAACL,UAAU,GAAGA,UAAU;IAC/BK,OAAO,CAACxC,aAAa,GAAGA,aAAa;IACrCwC,OAAO,CAACX,eAAe,GAAGA,eAAe;IAEzC,IAAMY,GAAG,GAAGxC,WAAW,IAAKoC,SAAS,IAAIA,SAAS,CAACK,iBAAiB,EAAG;IAEvE,IAAI,CAACD,GAAG,EAAE;MACN,MAAMjB,eAAe,CAACmB,kCAAkC,EAAE;IAC7D;IAEDH,OAAO,CAACvC,WAAW,GAAGwC,GAAG;;IAEzBD,OAAO,CAAC/B,KAAK,GAAG,EAAAmC,EAAA,GAAAR,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,MAAE,QAAAD,EAAA,uBAAAA,EAAA,CAAAE,GAAG,KAAId,SAAS,CAACC,YAAY;IAE9D,IAAIG,OAAO,EAAE;MACTI,OAAO,CAACZ,aAAa,GAAGQ,OAAO,CAACS,MAAM;;MAGtCL,OAAO,CAAC7B,cAAc,GAAG,EAAAoC,EAAA,GAAAX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,cAAAE,EAAA,uBAAAA,EAAA,CAAEC,GAAG,OAAAC,EAAA,GAAIb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,cAAAI,EAAA,uBAAAA,EAAA,CAAEC,GAAG,KAAIlB,SAAS,CAACC,YAAY;MAE/F;;;;AAIG;MACH,IAAMkB,iBAAiB,GAAG,CAAAC,EAAA,GAAAhB,OAAO,KAAP,QAAAA,OAAO,KAAP,kBAAAA,OAAO,CAAES,MAAM,MAAE,QAAAO,EAAA,uBAAAA,EAAA,CAAAC,kBAAkB;MAC7D,IAAMC,KAAK,GAAG,CAAC,CAAAC,EAAA,GAAAnB,OAAO,KAAP,QAAAA,OAAO,KAAP,kBAAAA,OAAO,CAAES,MAAM,MAAE,QAAAU,EAAA,uBAAAA,EAAA,CAAAC,MAAM,IAAIpB,OAAO,CAACS,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;MAEzEhB,OAAO,CAAC9B,QAAQ,GAAGyC,iBAAiB,IAAIG,KAAK,IAAItB,SAAS,CAACC,YAAY;MACvEO,OAAO,CAACb,IAAI,GAAG,CAAA8B,EAAA,GAAArB,OAAO,KAAP,QAAAA,OAAO,KAAP,kBAAAA,OAAO,CAAES,MAAM,MAAE,QAAAY,EAAA,uBAAAA,EAAA,CAAA9B,IAAI;IACvC;IAEDa,OAAO,CAACF,kBAAkB,GAAGA,kBAAkB;IAC/CE,OAAO,CAACD,WAAW,GAAGA,WAAW;IAEjC,OAAOC,OAAO;GACjB;EAED;;;;AAIG;EACI5C,aAAA,CAAA8D,oBAAoB,GAA3B,UACI1D,aAAqB,EACrBoC,OAAkB,EAClBC,SAAqB,EACrBC,kBAA2B,EAC3BC,WAAoB,EACpBtC,WAAoB;;IAEpB,IAAMuC,OAAO,GAAkB,IAAI5C,aAAa,EAAE;IAElD4C,OAAO,CAAC3B,aAAa,GACjBwB,SAAS,IACTA,SAAS,CAACxB,aAAa,KAAK8C,aAAa,CAACC,IAAI,GAC9C9C,gBAAgB,CAACC,iBAAiB,GAAGD,gBAAgB,CAACQ,oBAAoB;IAE9EkB,OAAO,CAACxC,aAAa,GAAGA,aAAa;;IAErCwC,OAAO,CAAC/B,KAAK,GAAGuB,SAAS,CAACC,YAAY;IAEtC,IAAMQ,GAAG,GAAGxC,WAAW,IAAIoC,SAAS,IAAIA,SAAS,CAACK,iBAAiB,EAAE;IAErE,IAAI,CAACD,GAAG,EAAE;MACN,MAAMjB,eAAe,CAACmB,kCAAkC,EAAE;IAC7D;IAED,IAAIP,OAAO,EAAE;;MAETI,OAAO,CAAC7B,cAAc,GAAG,EAAAiC,EAAA,GAAAR,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEI,GAAG,OAAAD,EAAA,GAAIX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,cAAAE,EAAA,uBAAAA,EAAA,CAAEG,GAAG,KAAIlB,SAAS,CAACC,YAAY;;MAE/FO,OAAO,CAAC9B,QAAQ,GAAG,EAAAuC,EAAA,GAAAb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,MAAE,QAAAI,EAAA,uBAAAA,EAAA,CAAAY,GAAG,KAAI7B,SAAS,CAACC,YAAY;MACjEO,OAAO,CAACb,IAAI,GAAG,EAAAyB,EAAA,GAAAhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,MAAE,QAAAO,EAAA,uBAAAA,EAAA,CAAAzB,IAAI,KAAIK,SAAS,CAACC,YAAY;MAC9DO,OAAO,CAACZ,aAAa,GAAGQ,OAAO,aAAPA,OAAO,KAAP,kBAAAA,OAAO,CAAES,MAAM;IAC1C;IAEDL,OAAO,CAACvC,WAAW,GAAGwC,GAAG;IAEzBD,OAAO,CAACF,kBAAkB,GAAGA,kBAAkB;IAC/CE,OAAO,CAACD,WAAW,GAAGA,WAAW;IAEjC;;;AAGG;IAEH,OAAOC,OAAO;GACjB;EAED;;;;AAIG;EACI5C,aAAqB,CAAAkE,qBAAA,GAA5B,UACIC,gBAAwB,EACxBC,QAAuB,EACvBC,MAAc,EACdC,SAAkB,EAClB9B,OAAmB;;IAGnB,IAAMrC,SAAS,GAAG,EAAA6C,EAAA,GAAAR,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEM,GAAG,IAAGd,OAAO,CAACS,MAAM,CAACK,GAAG,GAAGlB,SAAS,CAACC,YAAY;;IAGpF,IAAI+B,QAAQ,KAAKL,aAAa,CAACC,IAAI,IAAII,QAAQ,KAAKL,aAAa,CAACQ,IAAI,EAAE;MACpE,OAAOpE,SAAS;IACnB;;IAGD,IAAIgE,gBAAgB,EAAE;MAClB,IAAI;QACA,IAAM5B,UAAU,GAAGiC,eAAe,CAACL,gBAAgB,EAAEG,SAAS,CAAC;QAC/D,IAAI,CAACG,WAAW,CAACC,OAAO,CAACnC,UAAU,CAACoC,GAAG,CAAC,IAAI,CAACF,WAAW,CAACC,OAAO,CAACnC,UAAU,CAACqC,IAAI,CAAC,EAAE;UAC/E,OAAO,EAAG,GAAArC,UAAU,CAACoC,GAAG,GAAGpE,UAAU,CAACsE,qBAAqB,GAAGtC,UAAU,CAACqC,IAAM;QAClF;MACJ,EAAC,OAAOE,CAAC,EAAE;IACf;;IAGDT,MAAM,CAACU,OAAO,CAAC,4BAA4B,CAAC;IAC5C,OAAO5E,SAAS;GACnB;EAED;;;AAGG;EACIH,aAAe,CAAAgF,eAAA,GAAtB,UAAuBC,MAAc;IAEjC,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IACf;IAED,OACIA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IACtCD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,OAAO,CAAC,IAC9BD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC;GAE7C;EAED;;;;;AAKG;EACIlF,aAAA,CAAAmF,kBAAkB,GAAzB,UAA0BC,QAA4B,EAAEC,QAA4B,EAAEC,aAAuB;IACzG,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;MACxB,OAAO,KAAK;IACf;IAED,IAAIE,WAAW,GAAG,IAAI,CAAC;IACvB,IAAID,aAAa,EAAE;MACf,IAAME,cAAc,GAAIJ,QAAQ,CAACpD,aAAa,IAAI,EAAkB;MACpE,IAAMyD,cAAc,GAAIJ,QAAQ,CAACrD,aAAa,IAAI,EAAkB;;MAGpEuD,WAAW,GAAIC,cAAc,CAACE,GAAG,KAAKD,cAAc,CAACC,GAAG,IACvDF,cAAc,CAACG,KAAK,KAAKF,cAAc,CAACE,KAAM;IAClD;IAED,OAAQP,QAAQ,CAAChF,aAAa,KAAKiF,QAAQ,CAACjF,aAAa,IACpDgF,QAAQ,CAACrE,cAAc,KAAKsE,QAAQ,CAACtE,cAAe,IACpDqE,QAAQ,CAACtE,QAAQ,KAAKuE,QAAQ,CAACvE,QAAS,IACxCsE,QAAQ,CAACxE,QAAQ,KAAKyE,QAAQ,CAACzE,QAAS,IACxCwE,QAAQ,CAAC/E,WAAW,KAAKgF,QAAQ,CAAChF,WAAY,IAC9C+E,QAAQ,CAACnD,eAAe,KAAKoD,QAAQ,CAACpD,eAAgB,IACvDsD,WAAW;GAClB;EACL,OAACvF,aAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}