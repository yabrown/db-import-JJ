{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 refresh token client\r\n */\nvar RefreshTokenClient = /** @class */function (_super) {\n  __extends(RefreshTokenClient, _super);\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, responseHandler;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            response = _c.sent();\n            requestId = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              var _a;\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true,\n                refreshTokenSize: ((_a = response.body.refresh_token) === null || _a === void 0 ? void 0 : _a.length) || 0\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n                refreshTokenSize: undefined\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n          try {\n            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n              // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        }\n        // fall back to application refresh token acquisition\n        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_b) {\n        atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _b.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  return RefreshTokenClient;\n}(BaseClient);\nexport { RefreshTokenClient };","map":{"version":3,"names":["RefreshTokenClient","_super","__extends","configuration","performanceClient","call","prototype","acquireToken","request","atsMeasurement","_a","startMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","logger","verbose","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_c","sent","requestId","_b","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","forceCache","then","result","endMeasurement","success","refreshTokenSize","refresh_token","length","catch","error","_this","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","RefreshTokenClientAcquireTokenWithCachedRefreshToken","refreshToken","readRefreshTokenFromCache","discardMeasurement","createNoTokensFoundError","refreshTokenRequest","__assign","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireTokenMeasurement","RefreshTokenClientExecuteTokenRequest","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","BaseClientCreateTokenRequestHeaders","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","BaseClient"],"sources":["../../src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors, HeaderNames } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        super(configuration, performanceClient);\n\n    }\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache,\n            requestId\n        ).then((result: AuthenticationResult) => {\n            atsMeasurement?.endMeasurement({\n                success: true,\n                refreshTokenSize: response.body.refresh_token?.length || 0\n            });\n            return result;\n        })\n            .catch((error) => {\n                this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n                atsMeasurement?.endMeasurement({\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    success: false,\n                    refreshTokenSize: undefined\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        if (!refreshToken) {\n            atsMeasurement?.discardMeasurement();\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement?.endMeasurement({\n            success: true\n        });\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\n            .then((result) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: true\n                });\n                return result;\n            })\n            .catch((error) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const correlationId = request.correlationId;\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        acquireTokenMeasurement?.endMeasurement({\n            success: true\n        });\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}