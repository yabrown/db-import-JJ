{"ast":null,"code":"var _require = require('url'),\n  URL = _require.URL,\n  format = _require.format;\n\n// options passed to url.format() when generating a key\nvar formatOptions = {\n  auth: false,\n  fragment: false,\n  search: true,\n  unicode: false\n};\n\n// returns a string to be used as the cache key for the Request\nvar cacheKey = function cacheKey(request) {\n  var parsed = new URL(request.url);\n  return \"make-fetch-happen:request-cache:\".concat(format(parsed, formatOptions));\n};\nmodule.exports = cacheKey;","map":{"version":3,"names":["_require","require","URL","format","formatOptions","auth","fragment","search","unicode","cacheKey","request","parsed","url","concat","module","exports"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/make-fetch-happen/lib/cache/key.js"],"sourcesContent":["const { URL, format } = require('url')\n\n// options passed to url.format() when generating a key\nconst formatOptions = {\n  auth: false,\n  fragment: false,\n  search: true,\n  unicode: false,\n}\n\n// returns a string to be used as the cache key for the Request\nconst cacheKey = (request) => {\n  const parsed = new URL(request.url)\n  return `make-fetch-happen:request-cache:${format(parsed, formatOptions)}`\n}\n\nmodule.exports = cacheKey\n"],"mappings":"AAAA,IAAAA,QAAA,GAAwBC,OAAO,CAAC,KAAK,CAAC;EAA9BC,GAAG,GAAAF,QAAA,CAAHE,GAAG;EAAEC,MAAM,GAAAH,QAAA,CAANG,MAAM;;AAEnB;AACA,IAAMC,aAAa,GAAG;EACpBC,IAAI,EAAE,KAAK;EACXC,QAAQ,EAAE,KAAK;EACfC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,OAAO,EAAK;EAC5B,IAAMC,MAAM,GAAG,IAAIT,GAAG,CAACQ,OAAO,CAACE,GAAG,CAAC;EACnC,0CAAAC,MAAA,CAA0CV,MAAM,CAACQ,MAAM,EAAEP,aAAa,CAAC;AACzE,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAGN,QAAQ"},"metadata":{},"sourceType":"script"}