{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\nvar FetchClient = /** @class */function () {\n  function FetchClient() {}\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  FetchClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, fetch(url, {\n              method: HTTP_REQUEST_TYPE.GET,\n              headers: this.getFetchHeaders(options)\n            })];\n          case 1:\n            response = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _b.sent();\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createGetRequestFailedError(e_1, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4 /*yield*/, response.json()];\n          case 4:\n            return [2 /*return*/, (_a.body = _b.sent(), _a.status = response.status, _a)];\n          case 5:\n            _b.sent();\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  FetchClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqBody, response, e_3, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reqBody = options && options.body || Constants.EMPTY_STRING;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, fetch(url, {\n              method: HTTP_REQUEST_TYPE.POST,\n              headers: this.getFetchHeaders(options),\n              body: reqBody\n            })];\n          case 2:\n            response = _b.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_3 = _b.sent();\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createPostRequestFailedError(e_3, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4 /*yield*/, response.json()];\n          case 5:\n            return [2 /*return*/, (_a.body = _b.sent(), _a.status = response.status, _a)];\n          case 6:\n            _b.sent();\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n  FetchClient.prototype.getFetchHeaders = function (options) {\n    var headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    var optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(function (key) {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  };\n  FetchClient.prototype.getHeaderDict = function (headers) {\n    var headerDict = {};\n    headers.forEach(function (value, key) {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  };\n  return FetchClient;\n}();\nexport { FetchClient };","map":{"version":3,"names":["FetchClient","prototype","sendGetRequestAsync","url","options","fetch","method","HTTP_REQUEST_TYPE","GET","headers","getFetchHeaders","response","_b","sent","window","navigator","onLine","BrowserAuthError","createGetRequestFailedError","e_1","createNoNetworkConnectivityError","getHeaderDict","json","_a","body","status","createFailedToParseNetworkResponseError","sendPostRequestAsync","reqBody","Constants","EMPTY_STRING","POST","createPostRequestFailedError","e_3","Headers","optionsHeaders","Object","keys","forEach","key","append","headerDict","value"],"sources":["../../src/network/FetchClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\r\nexport class FetchClient implements INetworkModule {\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        let response;\r\n        try {\r\n            response = await fetch(url, {\r\n                method: HTTP_REQUEST_TYPE.GET,\r\n                headers: this.getFetchHeaders(options)\r\n            });\r\n        } catch (e) {\r\n            if (window.navigator.onLine) {\r\n                throw BrowserAuthError.createGetRequestFailedError(e, url);\r\n            } else {\r\n                throw BrowserAuthError.createNoNetworkConnectivityError();\r\n            }\r\n        }\r\n\r\n        try {\r\n            return {\r\n                headers: this.getHeaderDict(response.headers),\r\n                body: await response.json() as T,\r\n                status: response.status\r\n            };\r\n        } catch (e) {\r\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        const reqBody = (options && options.body) || Constants.EMPTY_STRING;\r\n\r\n        let response;\r\n        try {\r\n            response = await fetch(url, {\r\n                method: HTTP_REQUEST_TYPE.POST,\r\n                headers: this.getFetchHeaders(options),\r\n                body: reqBody\r\n            });\r\n        } catch (e) {\r\n            if (window.navigator.onLine) {\r\n                throw BrowserAuthError.createPostRequestFailedError(e, url);\r\n            } else {\r\n                throw BrowserAuthError.createNoNetworkConnectivityError();\r\n            }\r\n        }\r\n\r\n        try {\r\n            return {\r\n                headers: this.getHeaderDict(response.headers),\r\n                body: await response.json() as T,\r\n                status: response.status\r\n            };\r\n        } catch (e) {\r\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Fetch API Headers object from string map\r\n     * @param inputHeaders \r\n     */\r\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\r\n        const headers = new Headers();\r\n        if (!(options && options.headers)) {\r\n            return headers;\r\n        }\r\n        const optionsHeaders = options.headers;\r\n        Object.keys(optionsHeaders).forEach((key) => {\r\n            headers.append(key, optionsHeaders[key]);\r\n        });\r\n        return headers;\r\n    }\r\n\r\n    private getHeaderDict(headers: Headers): Record<string, string> {\r\n        const headerDict: Record<string, string> = {};\r\n        headers.forEach((value: string, key: string) => {\r\n            headerDict[key] = value;\r\n        });\r\n        return headerDict;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}