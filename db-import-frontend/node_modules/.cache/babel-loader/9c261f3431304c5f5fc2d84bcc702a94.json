{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n  var parameterPath = parameter.parameterPath;\n  var parameterMapper = parameter.mapper;\n  var value;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n        var useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n    for (var propertyName in parameterPath) {\n      var propertyMapper = parameterMapper.type.modelProperties[propertyName];\n      var propertyPath = parameterPath[propertyName];\n      var propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n        parameterPath: propertyPath,\n        mapper: propertyMapper\n      }, fallbackObject);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n  var result = {\n    propertyFound: false\n  };\n  var i = 0;\n  for (; i < parameterPath.length; ++i) {\n    var parameterPathPart = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\nvar operationRequestMap = new WeakMap();\nvar originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n  return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n  var info = operationRequestMap.get(request);\n  if (!info) {\n    info = {};\n    operationRequestMap.set(request, info);\n  }\n  return info;\n}","map":{"version":3,"names":["getOperationArgumentValueFromParameter","operationArguments","parameter","fallbackObject","parameterPath","parameterMapper","mapper","value","Array","isArray","length","isConstant","defaultValue","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","required","propertyValue","propertyName","propertyMapper","type","modelProperties","propertyPath","undefined","parent","result","i","parameterPathPart","operationRequestMap","WeakMap","originalRequestSymbol","Symbol","for","hasOriginalRequest","request","getOperationRequestInfo","info","get","set"],"sources":["../../src/operationHelpers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CompositeMapper,\n  Mapper,\n  OperationArguments,\n  OperationParameter,\n  OperationRequest,\n  OperationRequestInfo,\n  ParameterPath,\n} from \"./interfaces\";\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  fallbackObject?: { [parameterName: string]: any }\n): any {\n  let parameterPath = parameter.parameterPath;\n  const parameterMapper = parameter.mapper;\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameter(\n        operationArguments,\n        {\n          parameterPath: propertyPath,\n          mapper: propertyMapper,\n        },\n        fallbackObject\n      );\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[]\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nconst operationRequestMap = new WeakMap<OperationRequest, OperationRequestInfo>();\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\n\nfunction hasOriginalRequest(\n  request: OperationRequest\n): request is OperationRequest & { [originalRequestSymbol]: OperationRequest } {\n  return originalRequestSymbol in request;\n}\n\nexport function getOperationRequestInfo(request: OperationRequest): OperationRequestInfo {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n  let info = operationRequestMap.get(request);\n\n  if (!info) {\n    info = {};\n    operationRequestMap.set(request, info);\n  }\n  return info;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}