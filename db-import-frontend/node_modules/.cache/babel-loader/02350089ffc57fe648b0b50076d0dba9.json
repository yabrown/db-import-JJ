{"ast":null,"code":"module.exports = MultiPoint;\nvar util = require('util');\nvar Types = require('./types');\nvar Geometry = require('./geometry');\nvar Point = require('./point');\nvar BinaryWriter = require('./binarywriter');\nfunction MultiPoint(points, srid) {\n  Geometry.call(this);\n  this.points = points || [];\n  this.srid = srid;\n  if (this.points.length > 0) {\n    this.hasZ = this.points[0].hasZ;\n    this.hasM = this.points[0].hasM;\n  }\n}\nutil.inherits(MultiPoint, Geometry);\nMultiPoint.Z = function (points, srid) {\n  var multiPoint = new MultiPoint(points, srid);\n  multiPoint.hasZ = true;\n  return multiPoint;\n};\nMultiPoint.M = function (points, srid) {\n  var multiPoint = new MultiPoint(points, srid);\n  multiPoint.hasM = true;\n  return multiPoint;\n};\nMultiPoint.ZM = function (points, srid) {\n  var multiPoint = new MultiPoint(points, srid);\n  multiPoint.hasZ = true;\n  multiPoint.hasM = true;\n  return multiPoint;\n};\nMultiPoint._parseWkt = function (value, options) {\n  var multiPoint = new MultiPoint();\n  multiPoint.srid = options.srid;\n  multiPoint.hasZ = options.hasZ;\n  multiPoint.hasM = options.hasM;\n  if (value.isMatch(['EMPTY'])) return multiPoint;\n  value.expectGroupStart();\n  multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));\n  value.expectGroupEnd();\n  return multiPoint;\n};\nMultiPoint._parseWkb = function (value, options) {\n  var multiPoint = new MultiPoint();\n  multiPoint.srid = options.srid;\n  multiPoint.hasZ = options.hasZ;\n  multiPoint.hasM = options.hasM;\n  var pointCount = value.readUInt32();\n  for (var i = 0; i < pointCount; i++) multiPoint.points.push(Geometry.parse(value, options));\n  return multiPoint;\n};\nMultiPoint._parseTwkb = function (value, options) {\n  var multiPoint = new MultiPoint();\n  multiPoint.hasZ = options.hasZ;\n  multiPoint.hasM = options.hasM;\n  if (options.isEmpty) return multiPoint;\n  var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n  var pointCount = value.readVarInt();\n  for (var i = 0; i < pointCount; i++) multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));\n  return multiPoint;\n};\nMultiPoint._parseGeoJSON = function (value) {\n  var multiPoint = new MultiPoint();\n  if (value.coordinates.length > 0) multiPoint.hasZ = value.coordinates[0].length > 2;\n  for (var i = 0; i < value.coordinates.length; i++) multiPoint.points.push(Point._parseGeoJSON({\n    coordinates: value.coordinates[i]\n  }));\n  return multiPoint;\n};\nMultiPoint.prototype.toWkt = function () {\n  if (this.points.length === 0) return this._getWktType(Types.wkt.MultiPoint, true);\n  var wkt = this._getWktType(Types.wkt.MultiPoint, false) + '(';\n  for (var i = 0; i < this.points.length; i++) wkt += this._getWktCoordinate(this.points[i]) + ',';\n  wkt = wkt.slice(0, -1);\n  wkt += ')';\n  return wkt;\n};\nMultiPoint.prototype.toWkb = function () {\n  var wkb = new BinaryWriter(this._getWkbSize());\n  wkb.writeInt8(1);\n  this._writeWkbType(wkb, Types.wkb.MultiPoint);\n  wkb.writeUInt32LE(this.points.length);\n  for (var i = 0; i < this.points.length; i++) wkb.writeBuffer(this.points[i].toWkb({\n    srid: this.srid\n  }));\n  return wkb.buffer;\n};\nMultiPoint.prototype.toTwkb = function () {\n  var twkb = new BinaryWriter(0, true);\n  var precision = Geometry.getTwkbPrecision(5, 0, 0);\n  var isEmpty = this.points.length === 0;\n  this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);\n  if (this.points.length > 0) {\n    twkb.writeVarInt(this.points.length);\n    var previousPoint = new Point(0, 0, 0, 0);\n    for (var i = 0; i < this.points.length; i++) this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);\n  }\n  return twkb.buffer;\n};\nMultiPoint.prototype._getWkbSize = function () {\n  var coordinateSize = 16;\n  if (this.hasZ) coordinateSize += 8;\n  if (this.hasM) coordinateSize += 8;\n  coordinateSize += 5;\n  return 1 + 4 + 4 + this.points.length * coordinateSize;\n};\nMultiPoint.prototype.toGeoJSON = function (options) {\n  var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n  geoJSON.type = Types.geoJSON.MultiPoint;\n  geoJSON.coordinates = [];\n  for (var i = 0; i < this.points.length; i++) geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);\n  return geoJSON;\n};","map":{"version":3,"names":["module","exports","MultiPoint","util","require","Types","Geometry","Point","BinaryWriter","points","srid","call","length","hasZ","hasM","inherits","Z","multiPoint","M","ZM","_parseWkt","value","options","isMatch","expectGroupStart","push","apply","matchCoordinates","expectGroupEnd","_parseWkb","pointCount","readUInt32","i","parse","_parseTwkb","isEmpty","previousPoint","undefined","readVarInt","_readTwkbPoint","_parseGeoJSON","coordinates","prototype","toWkt","_getWktType","wkt","_getWktCoordinate","slice","toWkb","wkb","_getWkbSize","writeInt8","_writeWkbType","writeUInt32LE","writeBuffer","buffer","toTwkb","twkb","precision","getTwkbPrecision","_writeTwkbHeader","writeVarInt","_writeTwkbPoint","coordinateSize","toGeoJSON","geoJSON","type"],"sources":["/Users/aribraun/Desktop/db-import/node_modules/wkx/lib/multipoint.js"],"sourcesContent":["module.exports = MultiPoint;\r\n\r\nvar util = require('util');\r\n\r\nvar Types = require('./types');\r\nvar Geometry = require('./geometry');\r\nvar Point = require('./point');\r\nvar BinaryWriter = require('./binarywriter');\r\n\r\nfunction MultiPoint(points, srid) {\r\n    Geometry.call(this);\r\n\r\n    this.points = points || [];\r\n\tthis.srid = srid;\r\n\t\r\n    if (this.points.length > 0) {\r\n        this.hasZ = this.points[0].hasZ;\r\n        this.hasM = this.points[0].hasM;\r\n    }\r\n}\r\n\r\nutil.inherits(MultiPoint, Geometry);\r\n\r\nMultiPoint.Z = function (points, srid) {\r\n    var multiPoint = new MultiPoint(points, srid);\r\n    multiPoint.hasZ = true;\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint.M = function (points, srid) {\r\n    var multiPoint = new MultiPoint(points, srid);\r\n    multiPoint.hasM = true;\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint.ZM = function (points, srid) {\r\n    var multiPoint = new MultiPoint(points, srid);\r\n    multiPoint.hasZ = true;\r\n    multiPoint.hasM = true;\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint._parseWkt = function (value, options) {\r\n    var multiPoint = new MultiPoint();\r\n    multiPoint.srid = options.srid;\r\n    multiPoint.hasZ = options.hasZ;\r\n    multiPoint.hasM = options.hasM;\r\n\r\n    if (value.isMatch(['EMPTY']))\r\n        return multiPoint;\r\n\r\n    value.expectGroupStart();\r\n    multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));\r\n    value.expectGroupEnd();\r\n\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint._parseWkb = function (value, options) {\r\n    var multiPoint = new MultiPoint();\r\n    multiPoint.srid = options.srid;\r\n    multiPoint.hasZ = options.hasZ;\r\n    multiPoint.hasM = options.hasM;\r\n\r\n    var pointCount = value.readUInt32();\r\n\r\n    for (var i = 0; i < pointCount; i++)\r\n        multiPoint.points.push(Geometry.parse(value, options));\r\n\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint._parseTwkb = function (value, options) {\r\n    var multiPoint = new MultiPoint();\r\n    multiPoint.hasZ = options.hasZ;\r\n    multiPoint.hasM = options.hasM;\r\n\r\n    if (options.isEmpty)\r\n        return multiPoint;\r\n\r\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\r\n    var pointCount = value.readVarInt();\r\n\r\n    for (var i = 0; i < pointCount; i++)\r\n        multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));\r\n\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint._parseGeoJSON = function (value) {\r\n    var multiPoint = new MultiPoint();\r\n\r\n    if (value.coordinates.length > 0)\r\n        multiPoint.hasZ = value.coordinates[0].length > 2;\r\n\r\n    for (var i = 0; i < value.coordinates.length; i++)\r\n        multiPoint.points.push(Point._parseGeoJSON({ coordinates: value.coordinates[i] }));\r\n\r\n    return multiPoint;\r\n};\r\n\r\nMultiPoint.prototype.toWkt = function () {\r\n    if (this.points.length === 0)\r\n        return this._getWktType(Types.wkt.MultiPoint, true);\r\n\r\n    var wkt = this._getWktType(Types.wkt.MultiPoint, false) + '(';\r\n\r\n    for (var i = 0; i < this.points.length; i++)\r\n        wkt += this._getWktCoordinate(this.points[i]) + ',';\r\n\r\n    wkt = wkt.slice(0, -1);\r\n    wkt += ')';\r\n\r\n    return wkt;\r\n};\r\n\r\nMultiPoint.prototype.toWkb = function () {\r\n    var wkb = new BinaryWriter(this._getWkbSize());\r\n\r\n    wkb.writeInt8(1);\r\n\r\n    this._writeWkbType(wkb, Types.wkb.MultiPoint);\r\n    wkb.writeUInt32LE(this.points.length);\r\n\r\n    for (var i = 0; i < this.points.length; i++)\r\n        wkb.writeBuffer(this.points[i].toWkb({ srid: this.srid }));\r\n\r\n    return wkb.buffer;\r\n};\r\n\r\nMultiPoint.prototype.toTwkb = function () {\r\n    var twkb = new BinaryWriter(0, true);\r\n\r\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\r\n    var isEmpty = this.points.length === 0;\r\n\r\n    this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);\r\n\r\n    if (this.points.length > 0) {\r\n        twkb.writeVarInt(this.points.length);\r\n\r\n        var previousPoint = new Point(0, 0, 0, 0);\r\n        for (var i = 0; i < this.points.length; i++)\r\n            this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);\r\n    }\r\n\r\n    return twkb.buffer;\r\n};\r\n\r\nMultiPoint.prototype._getWkbSize = function () {\r\n    var coordinateSize = 16;\r\n\r\n    if (this.hasZ)\r\n        coordinateSize += 8;\r\n    if (this.hasM)\r\n        coordinateSize += 8;\r\n\r\n    coordinateSize += 5;\r\n\r\n    return 1 + 4 + 4 + (this.points.length * coordinateSize);\r\n};\r\n\r\nMultiPoint.prototype.toGeoJSON = function (options) {\r\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\r\n    geoJSON.type = Types.geoJSON.MultiPoint;\r\n    geoJSON.coordinates = [];\r\n\r\n    for (var i = 0; i < this.points.length; i++)\r\n        geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);\r\n\r\n    return geoJSON;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}