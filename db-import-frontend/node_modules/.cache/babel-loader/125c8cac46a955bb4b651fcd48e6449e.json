{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneInProcParser = doneInProcParser;\nexports.doneParser = doneParser;\nexports.doneProcParser = doneProcParser;\nvar _token = require(\"./token\");\n\n// s2.2.7.5/6/7\nvar STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\nfunction parseToken(parser, options, callback) {\n  parser.readUInt16LE(function (status) {\n    var more = !!(status & STATUS.MORE);\n    var sqlError = !!(status & STATUS.ERROR);\n    var rowCountValid = !!(status & STATUS.COUNT);\n    var attention = !!(status & STATUS.ATTN);\n    var serverError = !!(status & STATUS.SRVERROR);\n    parser.readUInt16LE(function (curCmd) {\n      var next = function next(rowCount) {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE(function (rowCount) {\n          next(Number(rowCount));\n        });\n      }\n    });\n  });\n}\nfunction doneParser(parser, options, callback) {\n  parseToken(parser, options, function (data) {\n    callback(new _token.DoneToken(data));\n  });\n}\nfunction doneInProcParser(parser, options, callback) {\n  parseToken(parser, options, function (data) {\n    callback(new _token.DoneInProcToken(data));\n  });\n}\nfunction doneProcParser(parser, options, callback) {\n  parseToken(parser, options, function (data) {\n    callback(new _token.DoneProcToken(data));\n  });\n}","map":{"version":3,"names":["_token","require","STATUS","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","parseToken","parser","options","callback","readUInt16LE","status","more","sqlError","rowCountValid","attention","serverError","curCmd","next","rowCount","undefined","tdsVersion","readUInt32LE","readBigUInt64LE","Number","doneParser","data","DoneToken","doneInProcParser","DoneInProcToken","doneProcParser","DoneProcToken"],"sources":["../../src/token/done-token-parser.ts"],"sourcesContent":["import Parser, { ParserOptions } from './stream-parser';\nimport { DoneToken, DoneInProcToken, DoneProcToken } from './token';\n\n// s2.2.7.5/6/7\n\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\n\ninterface TokenData {\n  more: boolean;\n  sqlError: boolean;\n  attention: boolean;\n  serverError: boolean;\n  rowCount: number | undefined;\n  curCmd: number;\n}\n\nfunction parseToken(parser: Parser, options: ParserOptions, callback: (data: TokenData) => void) {\n  parser.readUInt16LE((status) => {\n    const more = !!(status & STATUS.MORE);\n    const sqlError = !!(status & STATUS.ERROR);\n    const rowCountValid = !!(status & STATUS.COUNT);\n    const attention = !!(status & STATUS.ATTN);\n    const serverError = !!(status & STATUS.SRVERROR);\n\n    parser.readUInt16LE((curCmd) => {\n      const next = (rowCount: number) => {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE((rowCount) => {\n          next(Number(rowCount));\n        });\n      }\n    });\n  });\n}\n\nexport function doneParser(parser: Parser, options: ParserOptions, callback: (token: DoneToken) => void) {\n  parseToken(parser, options, (data) => {\n    callback(new DoneToken(data));\n  });\n}\n\nexport function doneInProcParser(parser: Parser, options: ParserOptions, callback: (token: DoneInProcToken) => void) {\n  parseToken(parser, options, (data) => {\n    callback(new DoneInProcToken(data));\n  });\n}\n\nexport function doneProcParser(parser: Parser, options: ParserOptions, callback: (token: DoneProcToken) => void) {\n  parseToken(parser, options, (data) => {\n    callback(new DoneProcToken(data));\n  });\n}\n"],"mappings":";;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;;AAEA;AAEA,IAAMC,MAAM,GAAG;EACbC,IAAI,EAAE,MADO;EAEbC,KAAK,EAAE,MAFM;EAGb;EACAC,MAAM,EAAE,MAJK;EAKbC,KAAK,EAAE,MALM;EAMbC,IAAI,EAAE,MANO;EAObC,QAAQ,EAAE;AAPG,CAAf;AAmBA,SAASC,UAATA,CAAoBC,MAApB,EAAoCC,OAApC,EAA4DC,QAA5D,EAAiG;EAC/FF,MAAM,CAACG,YAAP,CAAqB,UAAAC,MAAD,EAAY;IAC9B,IAAMC,IAAI,GAAG,CAAC,EAAED,MAAM,GAAGZ,MAAM,CAACC,IAAlB,CAAd;IACA,IAAMa,QAAQ,GAAG,CAAC,EAAEF,MAAM,GAAGZ,MAAM,CAACE,KAAlB,CAAlB;IACA,IAAMa,aAAa,GAAG,CAAC,EAAEH,MAAM,GAAGZ,MAAM,CAACI,KAAlB,CAAvB;IACA,IAAMY,SAAS,GAAG,CAAC,EAAEJ,MAAM,GAAGZ,MAAM,CAACK,IAAlB,CAAnB;IACA,IAAMY,WAAW,GAAG,CAAC,EAAEL,MAAM,GAAGZ,MAAM,CAACM,QAAlB,CAArB;IAEAE,MAAM,CAACG,YAAP,CAAqB,UAAAO,MAAD,EAAY;MAC9B,IAAMC,IAAI,GAAI,SAARA,IAAIA,CAAIC,QAAD,EAAsB;QACjCV,QAAQ,CAAC;UACPG,IAAI,EAAEA,IADC;UAEPC,QAAQ,EAAEA,QAFH;UAGPE,SAAS,EAAEA,SAHJ;UAIPC,WAAW,EAAEA,WAJN;UAKPG,QAAQ,EAAEL,aAAa,GAAGK,QAAH,GAAcC,SAL9B;UAMPH,MAAM,EAAEA;QAND,CAAD,CAAR;MAQD,CATD;MAWA,IAAIT,OAAO,CAACa,UAAR,GAAqB,KAAzB,EAAgC;QAC9Bd,MAAM,CAACe,YAAP,CAAoBJ,IAApB;MACD,CAFD,MAEO;QACLX,MAAM,CAACgB,eAAP,CAAwB,UAAAJ,QAAD,EAAc;UACnCD,IAAI,CAACM,MAAM,CAACL,QAAD,CAAP,CAAJ;QACD,CAFD;MAGD;IACF,CAnBD;EAoBD,CA3BD;AA4BD;AAEM,SAASM,UAATA,CAAoBlB,MAApB,EAAoCC,OAApC,EAA4DC,QAA5D,EAAkG;EACvGH,UAAU,CAACC,MAAD,EAASC,OAAT,EAAmB,UAAAkB,IAAD,EAAU;IACpCjB,QAAQ,CAAC,IAAIZ,MAAA,CAAA8B,SAAJ,CAAcD,IAAd,CAAD,CAAR;EACD,CAFS,CAAV;AAGD;AAEM,SAASE,gBAATA,CAA0BrB,MAA1B,EAA0CC,OAA1C,EAAkEC,QAAlE,EAA8G;EACnHH,UAAU,CAACC,MAAD,EAASC,OAAT,EAAmB,UAAAkB,IAAD,EAAU;IACpCjB,QAAQ,CAAC,IAAIZ,MAAA,CAAAgC,eAAJ,CAAoBH,IAApB,CAAD,CAAR;EACD,CAFS,CAAV;AAGD;AAEM,SAASI,cAATA,CAAwBvB,MAAxB,EAAwCC,OAAxC,EAAgEC,QAAhE,EAA0G;EAC/GH,UAAU,CAACC,MAAD,EAASC,OAAT,EAAmB,UAAAkB,IAAD,EAAU;IACpCjB,QAAQ,CAAC,IAAIZ,MAAA,CAAAkC,aAAJ,CAAkBL,IAAlB,CAAD,CAAR;EACD,CAFS,CAAV;AAGD"},"metadata":{},"sourceType":"script"}