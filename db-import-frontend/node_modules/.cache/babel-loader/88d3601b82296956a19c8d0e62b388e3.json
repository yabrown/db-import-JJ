{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar util = require(\"util\");\nvar _ = require(\"lodash\");\nvar wkx = require(\"wkx\");\nvar sequelizeErrors = require(\"./errors\");\nvar Validator = require(\"./utils/validator-extras\").validator;\nvar momentTz = require(\"moment-timezone\");\nvar moment = require(\"moment\");\nvar _require = require(\"./utils/logger\"),\n  logger = _require.logger;\nvar warnings = {};\nvar _require2 = require(\"./utils/class-to-invokable\"),\n  classToInvokable = _require2.classToInvokable;\nvar _require3 = require(\"./utils/join-sql-fragments\"),\n  joinSQLFragments = _require3.joinSQLFragments;\nvar ABSTRACT = /*#__PURE__*/function () {\n  function ABSTRACT() {\n    _classCallCheck(this, ABSTRACT);\n  }\n  _createClass(ABSTRACT, [{\n    key: \"toString\",\n    value: function toString(options) {\n      return this.toSql(options);\n    }\n  }, {\n    key: \"toSql\",\n    value: function toSql() {\n      return this.key;\n    }\n  }, {\n    key: \"stringify\",\n    value: function stringify(value, options) {\n      if (this._stringify) {\n        return this._stringify(value, options);\n      }\n      return value;\n    }\n  }, {\n    key: \"bindParam\",\n    value: function bindParam(value, options) {\n      if (this._bindParam) {\n        return this._bindParam(value, options);\n      }\n      return options.bindParam(this.stringify(value, options));\n    }\n  }], [{\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(link, text) {\n      if (!warnings[text]) {\n        warnings[text] = true;\n        logger.warn(\"\".concat(text, \" \\n>> Check: \").concat(link));\n      }\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(oldType) {\n      return new this(oldType.options);\n    }\n  }]);\n  return ABSTRACT;\n}();\nABSTRACT.prototype.dialectTypes = \"\";\nvar STRING = /*#__PURE__*/function (_ABSTRACT) {\n  _inherits(STRING, _ABSTRACT);\n  var _super = _createSuper(STRING);\n  function STRING(length, binary) {\n    var _this;\n    _classCallCheck(this, STRING);\n    _this = _super.call(this);\n    var options = typeof length === \"object\" && length || {\n      length: length,\n      binary: binary\n    };\n    _this.options = options;\n    _this._binary = options.binary;\n    _this._length = options.length || 255;\n    return _this;\n  }\n  _createClass(STRING, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return joinSQLFragments([\"VARCHAR(\".concat(this._length, \")\"), this._binary && \"BINARY\"]);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (Object.prototype.toString.call(value) !== \"[object String]\") {\n        if (this.options.binary && Buffer.isBuffer(value) || typeof value === \"number\") {\n          return true;\n        }\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n      }\n      return true;\n    }\n  }, {\n    key: \"BINARY\",\n    get: function get() {\n      this._binary = true;\n      this.options.binary = true;\n      return this;\n    }\n  }], [{\n    key: \"BINARY\",\n    get: function get() {\n      return new this().BINARY;\n    }\n  }]);\n  return STRING;\n}(ABSTRACT);\nvar CHAR = /*#__PURE__*/function (_STRING) {\n  _inherits(CHAR, _STRING);\n  var _super2 = _createSuper(CHAR);\n  function CHAR(length, binary) {\n    _classCallCheck(this, CHAR);\n    return _super2.call(this, typeof length === \"object\" && length || {\n      length: length,\n      binary: binary\n    });\n  }\n  _createClass(CHAR, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return joinSQLFragments([\"CHAR(\".concat(this._length, \")\"), this._binary && \"BINARY\"]);\n    }\n  }]);\n  return CHAR;\n}(STRING);\nvar TEXT = /*#__PURE__*/function (_ABSTRACT2) {\n  _inherits(TEXT, _ABSTRACT2);\n  var _super3 = _createSuper(TEXT);\n  function TEXT(length) {\n    var _this2;\n    _classCallCheck(this, TEXT);\n    _this2 = _super3.call(this);\n    var options = typeof length === \"object\" && length || {\n      length: length\n    };\n    _this2.options = options;\n    _this2._length = options.length || \"\";\n    return _this2;\n  }\n  _createClass(TEXT, [{\n    key: \"toSql\",\n    value: function toSql() {\n      switch (this._length.toLowerCase()) {\n        case \"tiny\":\n          return \"TINYTEXT\";\n        case \"medium\":\n          return \"MEDIUMTEXT\";\n        case \"long\":\n          return \"LONGTEXT\";\n        default:\n          return this.key;\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\") {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n      }\n      return true;\n    }\n  }]);\n  return TEXT;\n}(ABSTRACT);\nvar CITEXT = /*#__PURE__*/function (_ABSTRACT3) {\n  _inherits(CITEXT, _ABSTRACT3);\n  var _super4 = _createSuper(CITEXT);\n  function CITEXT() {\n    _classCallCheck(this, CITEXT);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(CITEXT, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"CITEXT\";\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\") {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n      }\n      return true;\n    }\n  }]);\n  return CITEXT;\n}(ABSTRACT);\nvar NUMBER = /*#__PURE__*/function (_ABSTRACT4) {\n  _inherits(NUMBER, _ABSTRACT4);\n  var _super5 = _createSuper(NUMBER);\n  function NUMBER() {\n    var _this3;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, NUMBER);\n    _this3 = _super5.call(this);\n    if (typeof options === \"number\") {\n      options = {\n        length: options\n      };\n    }\n    _this3.options = options;\n    _this3._length = options.length;\n    _this3._zerofill = options.zerofill;\n    _this3._decimals = options.decimals;\n    _this3._precision = options.precision;\n    _this3._scale = options.scale;\n    _this3._unsigned = options.unsigned;\n    return _this3;\n  }\n  _createClass(NUMBER, [{\n    key: \"toSql\",\n    value: function toSql() {\n      var result = this.key;\n      if (this._length) {\n        result += \"(\".concat(this._length);\n        if (typeof this._decimals === \"number\") {\n          result += \",\".concat(this._decimals);\n        }\n        result += \")\";\n      }\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n      return result;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isFloat(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid \".concat(this.key.toLowerCase()), value));\n      }\n      return true;\n    }\n  }, {\n    key: \"_stringify\",\n    value: function _stringify(number) {\n      if (typeof number === \"number\" || typeof number === \"bigint\" || typeof number === \"boolean\" || number === null || number === void 0) {\n        return number;\n      }\n      if (typeof number.toString === \"function\") {\n        return number.toString();\n      }\n      return number;\n    }\n  }, {\n    key: \"UNSIGNED\",\n    get: function get() {\n      this._unsigned = true;\n      this.options.unsigned = true;\n      return this;\n    }\n  }, {\n    key: \"ZEROFILL\",\n    get: function get() {\n      this._zerofill = true;\n      this.options.zerofill = true;\n      return this;\n    }\n  }], [{\n    key: \"UNSIGNED\",\n    get: function get() {\n      return new this().UNSIGNED;\n    }\n  }, {\n    key: \"ZEROFILL\",\n    get: function get() {\n      return new this().ZEROFILL;\n    }\n  }]);\n  return NUMBER;\n}(ABSTRACT);\nvar INTEGER = /*#__PURE__*/function (_NUMBER) {\n  _inherits(INTEGER, _NUMBER);\n  var _super6 = _createSuper(INTEGER);\n  function INTEGER() {\n    _classCallCheck(this, INTEGER);\n    return _super6.apply(this, arguments);\n  }\n  _createClass(INTEGER, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isInt(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid \".concat(this.key.toLowerCase()), value));\n      }\n      return true;\n    }\n  }]);\n  return INTEGER;\n}(NUMBER);\nvar TINYINT = /*#__PURE__*/function (_INTEGER) {\n  _inherits(TINYINT, _INTEGER);\n  var _super7 = _createSuper(TINYINT);\n  function TINYINT() {\n    _classCallCheck(this, TINYINT);\n    return _super7.apply(this, arguments);\n  }\n  return _createClass(TINYINT);\n}(INTEGER);\nvar SMALLINT = /*#__PURE__*/function (_INTEGER2) {\n  _inherits(SMALLINT, _INTEGER2);\n  var _super8 = _createSuper(SMALLINT);\n  function SMALLINT() {\n    _classCallCheck(this, SMALLINT);\n    return _super8.apply(this, arguments);\n  }\n  return _createClass(SMALLINT);\n}(INTEGER);\nvar MEDIUMINT = /*#__PURE__*/function (_INTEGER3) {\n  _inherits(MEDIUMINT, _INTEGER3);\n  var _super9 = _createSuper(MEDIUMINT);\n  function MEDIUMINT() {\n    _classCallCheck(this, MEDIUMINT);\n    return _super9.apply(this, arguments);\n  }\n  return _createClass(MEDIUMINT);\n}(INTEGER);\nvar BIGINT = /*#__PURE__*/function (_INTEGER4) {\n  _inherits(BIGINT, _INTEGER4);\n  var _super10 = _createSuper(BIGINT);\n  function BIGINT() {\n    _classCallCheck(this, BIGINT);\n    return _super10.apply(this, arguments);\n  }\n  return _createClass(BIGINT);\n}(INTEGER);\nvar FLOAT = /*#__PURE__*/function (_NUMBER2) {\n  _inherits(FLOAT, _NUMBER2);\n  var _super11 = _createSuper(FLOAT);\n  function FLOAT(length, decimals) {\n    _classCallCheck(this, FLOAT);\n    return _super11.call(this, typeof length === \"object\" && length || {\n      length: length,\n      decimals: decimals\n    });\n  }\n  _createClass(FLOAT, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isFloat(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid float\", value));\n      }\n      return true;\n    }\n  }]);\n  return FLOAT;\n}(NUMBER);\nvar REAL = /*#__PURE__*/function (_NUMBER3) {\n  _inherits(REAL, _NUMBER3);\n  var _super12 = _createSuper(REAL);\n  function REAL(length, decimals) {\n    _classCallCheck(this, REAL);\n    return _super12.call(this, typeof length === \"object\" && length || {\n      length: length,\n      decimals: decimals\n    });\n  }\n  return _createClass(REAL);\n}(NUMBER);\nvar DOUBLE = /*#__PURE__*/function (_NUMBER4) {\n  _inherits(DOUBLE, _NUMBER4);\n  var _super13 = _createSuper(DOUBLE);\n  function DOUBLE(length, decimals) {\n    _classCallCheck(this, DOUBLE);\n    return _super13.call(this, typeof length === \"object\" && length || {\n      length: length,\n      decimals: decimals\n    });\n  }\n  return _createClass(DOUBLE);\n}(NUMBER);\nvar DECIMAL = /*#__PURE__*/function (_NUMBER5) {\n  _inherits(DECIMAL, _NUMBER5);\n  var _super14 = _createSuper(DECIMAL);\n  function DECIMAL(precision, scale) {\n    _classCallCheck(this, DECIMAL);\n    return _super14.call(this, typeof precision === \"object\" && precision || {\n      precision: precision,\n      scale: scale\n    });\n  }\n  _createClass(DECIMAL, [{\n    key: \"toSql\",\n    value: function toSql() {\n      if (this._precision || this._scale) {\n        return \"DECIMAL(\".concat([this._precision, this._scale].filter(_.identity).join(\",\"), \")\");\n      }\n      return \"DECIMAL\";\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isDecimal(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid decimal\", value));\n      }\n      return true;\n    }\n  }]);\n  return DECIMAL;\n}(NUMBER);\nvar protoExtensions = {\n  escape: false,\n  _value: function _value(value) {\n    if (isNaN(value)) {\n      return \"NaN\";\n    }\n    if (!isFinite(value)) {\n      var sign = value < 0 ? \"-\" : \"\";\n      return \"\".concat(sign, \"Infinity\");\n    }\n    return value;\n  },\n  _stringify: function _stringify(value) {\n    return \"'\".concat(this._value(value), \"'\");\n  },\n  _bindParam: function _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\nfor (var _i = 0, _arr = [FLOAT, DOUBLE, REAL]; _i < _arr.length; _i++) {\n  var floating = _arr[_i];\n  Object.assign(floating.prototype, protoExtensions);\n}\nvar BOOLEAN = /*#__PURE__*/function (_ABSTRACT5) {\n  _inherits(BOOLEAN, _ABSTRACT5);\n  var _super15 = _createSuper(BOOLEAN);\n  function BOOLEAN() {\n    _classCallCheck(this, BOOLEAN);\n    return _super15.apply(this, arguments);\n  }\n  _createClass(BOOLEAN, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"TINYINT(1)\";\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isBoolean(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid boolean\", value));\n      }\n      return true;\n    }\n  }, {\n    key: \"_sanitize\",\n    value: function _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n        var type = typeof value;\n        if (type === \"string\") {\n          return value === \"true\" ? true : value === \"false\" ? false : value;\n        }\n        if (type === \"number\") {\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }]);\n  return BOOLEAN;\n}(ABSTRACT);\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\nvar TIME = /*#__PURE__*/function (_ABSTRACT6) {\n  _inherits(TIME, _ABSTRACT6);\n  var _super16 = _createSuper(TIME);\n  function TIME() {\n    _classCallCheck(this, TIME);\n    return _super16.apply(this, arguments);\n  }\n  _createClass(TIME, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"TIME\";\n    }\n  }]);\n  return TIME;\n}(ABSTRACT);\nvar DATE = /*#__PURE__*/function (_ABSTRACT7) {\n  _inherits(DATE, _ABSTRACT7);\n  var _super17 = _createSuper(DATE);\n  function DATE(length) {\n    var _this4;\n    _classCallCheck(this, DATE);\n    _this4 = _super17.call(this);\n    var options = typeof length === \"object\" && length || {\n      length: length\n    };\n    _this4.options = options;\n    _this4._length = options.length || \"\";\n    return _this4;\n  }\n  _createClass(DATE, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"DATETIME\";\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Validator.isDate(String(value))) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid date\", value));\n      }\n      return true;\n    }\n  }, {\n    key: \"_sanitize\",\n    value: function _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n        return new Date(value);\n      }\n      return value;\n    }\n  }, {\n    key: \"_isChanged\",\n    value: function _isChanged(value, originalValue) {\n      if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n        return false;\n      }\n      if (!originalValue && !value && originalValue === value) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_applyTimezone\",\n    value: function _applyTimezone(date, options) {\n      if (options.timezone) {\n        if (momentTz.tz.zone(options.timezone)) {\n          return momentTz(date).tz(options.timezone);\n        }\n        return date = moment(date).utcOffset(options.timezone);\n      }\n      return momentTz(date);\n    }\n  }, {\n    key: \"_stringify\",\n    value: function _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss.SSS Z\");\n    }\n  }]);\n  return DATE;\n}(ABSTRACT);\nvar DATEONLY = /*#__PURE__*/function (_ABSTRACT8) {\n  _inherits(DATEONLY, _ABSTRACT8);\n  var _super18 = _createSuper(DATEONLY);\n  function DATEONLY() {\n    _classCallCheck(this, DATEONLY);\n    return _super18.apply(this, arguments);\n  }\n  _createClass(DATEONLY, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"DATE\";\n    }\n  }, {\n    key: \"_stringify\",\n    value: function _stringify(date) {\n      return moment(date).format(\"YYYY-MM-DD\");\n    }\n  }, {\n    key: \"_sanitize\",\n    value: function _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !!value) {\n        return moment(value).format(\"YYYY-MM-DD\");\n      }\n      return value;\n    }\n  }, {\n    key: \"_isChanged\",\n    value: function _isChanged(value, originalValue) {\n      if (originalValue && !!value && originalValue === value) {\n        return false;\n      }\n      if (!originalValue && !value && originalValue === value) {\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return DATEONLY;\n}(ABSTRACT);\nvar HSTORE = /*#__PURE__*/function (_ABSTRACT9) {\n  _inherits(HSTORE, _ABSTRACT9);\n  var _super19 = _createSuper(HSTORE);\n  function HSTORE() {\n    _classCallCheck(this, HSTORE);\n    return _super19.apply(this, arguments);\n  }\n  _createClass(HSTORE, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (!_.isPlainObject(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid hstore\", value));\n      }\n      return true;\n    }\n  }]);\n  return HSTORE;\n}(ABSTRACT);\nvar JSONTYPE = /*#__PURE__*/function (_ABSTRACT10) {\n  _inherits(JSONTYPE, _ABSTRACT10);\n  var _super20 = _createSuper(JSONTYPE);\n  function JSONTYPE() {\n    _classCallCheck(this, JSONTYPE);\n    return _super20.apply(this, arguments);\n  }\n  _createClass(JSONTYPE, [{\n    key: \"validate\",\n    value: function validate() {\n      return true;\n    }\n  }, {\n    key: \"_stringify\",\n    value: function _stringify(value) {\n      return JSON.stringify(value);\n    }\n  }]);\n  return JSONTYPE;\n}(ABSTRACT);\nvar JSONB = /*#__PURE__*/function (_JSONTYPE) {\n  _inherits(JSONB, _JSONTYPE);\n  var _super21 = _createSuper(JSONB);\n  function JSONB() {\n    _classCallCheck(this, JSONB);\n    return _super21.apply(this, arguments);\n  }\n  return _createClass(JSONB);\n}(JSONTYPE);\nvar NOW = /*#__PURE__*/function (_ABSTRACT11) {\n  _inherits(NOW, _ABSTRACT11);\n  var _super22 = _createSuper(NOW);\n  function NOW() {\n    _classCallCheck(this, NOW);\n    return _super22.apply(this, arguments);\n  }\n  return _createClass(NOW);\n}(ABSTRACT);\nvar BLOB = /*#__PURE__*/function (_ABSTRACT12) {\n  _inherits(BLOB, _ABSTRACT12);\n  var _super23 = _createSuper(BLOB);\n  function BLOB(length) {\n    var _this5;\n    _classCallCheck(this, BLOB);\n    _this5 = _super23.call(this);\n    var options = typeof length === \"object\" && length || {\n      length: length\n    };\n    _this5.options = options;\n    _this5._length = options.length || \"\";\n    return _this5;\n  }\n  _createClass(BLOB, [{\n    key: \"toSql\",\n    value: function toSql() {\n      switch (this._length.toLowerCase()) {\n        case \"tiny\":\n          return \"TINYBLOB\";\n        case \"medium\":\n          return \"MEDIUMBLOB\";\n        case \"long\":\n          return \"LONGBLOB\";\n        default:\n          return this.key;\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\" && !Buffer.isBuffer(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid blob\", value));\n      }\n      return true;\n    }\n  }, {\n    key: \"_stringify\",\n    value: function _stringify(value) {\n      if (!Buffer.isBuffer(value)) {\n        if (Array.isArray(value)) {\n          value = Buffer.from(value);\n        } else {\n          value = Buffer.from(value.toString());\n        }\n      }\n      var hex = value.toString(\"hex\");\n      return this._hexify(hex);\n    }\n  }, {\n    key: \"_hexify\",\n    value: function _hexify(hex) {\n      return \"X'\".concat(hex, \"'\");\n    }\n  }, {\n    key: \"_bindParam\",\n    value: function _bindParam(value, options) {\n      if (!Buffer.isBuffer(value)) {\n        if (Array.isArray(value)) {\n          value = Buffer.from(value);\n        } else {\n          value = Buffer.from(value.toString());\n        }\n      }\n      return options.bindParam(value);\n    }\n  }]);\n  return BLOB;\n}(ABSTRACT);\nBLOB.prototype.escape = false;\nvar RANGE = /*#__PURE__*/function (_ABSTRACT13) {\n  _inherits(RANGE, _ABSTRACT13);\n  var _super24 = _createSuper(RANGE);\n  function RANGE(subtype) {\n    var _this6;\n    _classCallCheck(this, RANGE);\n    _this6 = _super24.call(this);\n    var options = _.isPlainObject(subtype) ? subtype : {\n      subtype: subtype\n    };\n    if (!options.subtype) options.subtype = new INTEGER();\n    if (typeof options.subtype === \"function\") {\n      options.subtype = new options.subtype();\n    }\n    _this6._subtype = options.subtype.key;\n    _this6.options = options;\n    return _this6;\n  }\n  _createClass(RANGE, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Array.isArray(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid range\", value));\n      }\n      if (value.length !== 2) {\n        throw new sequelizeErrors.ValidationError(\"A range must be an array with two elements\");\n      }\n      return true;\n    }\n  }]);\n  return RANGE;\n}(ABSTRACT);\nvar UUID = /*#__PURE__*/function (_ABSTRACT14) {\n  _inherits(UUID, _ABSTRACT14);\n  var _super25 = _createSuper(UUID);\n  function UUID() {\n    _classCallCheck(this, UUID);\n    return _super25.apply(this, arguments);\n  }\n  _createClass(UUID, [{\n    key: \"validate\",\n    value: function validate(value, options) {\n      if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n      }\n      return true;\n    }\n  }]);\n  return UUID;\n}(ABSTRACT);\nvar UUIDV1 = /*#__PURE__*/function (_ABSTRACT15) {\n  _inherits(UUIDV1, _ABSTRACT15);\n  var _super26 = _createSuper(UUIDV1);\n  function UUIDV1() {\n    _classCallCheck(this, UUIDV1);\n    return _super26.apply(this, arguments);\n  }\n  _createClass(UUIDV1, [{\n    key: \"validate\",\n    value: function validate(value, options) {\n      if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n      }\n      return true;\n    }\n  }]);\n  return UUIDV1;\n}(ABSTRACT);\nvar UUIDV4 = /*#__PURE__*/function (_ABSTRACT16) {\n  _inherits(UUIDV4, _ABSTRACT16);\n  var _super27 = _createSuper(UUIDV4);\n  function UUIDV4() {\n    _classCallCheck(this, UUIDV4);\n    return _super27.apply(this, arguments);\n  }\n  _createClass(UUIDV4, [{\n    key: \"validate\",\n    value: function validate(value, options) {\n      if (typeof value !== \"string\" || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuidv4\", value));\n      }\n      return true;\n    }\n  }]);\n  return UUIDV4;\n}(ABSTRACT);\nvar VIRTUAL = /*#__PURE__*/function (_ABSTRACT17) {\n  _inherits(VIRTUAL, _ABSTRACT17);\n  var _super28 = _createSuper(VIRTUAL);\n  function VIRTUAL(ReturnType, fields) {\n    var _this7;\n    _classCallCheck(this, VIRTUAL);\n    _this7 = _super28.call(this);\n    if (typeof ReturnType === \"function\") ReturnType = new ReturnType();\n    _this7.returnType = ReturnType;\n    _this7.fields = fields;\n    return _this7;\n  }\n  return _createClass(VIRTUAL);\n}(ABSTRACT);\nvar ENUM = /*#__PURE__*/function (_ABSTRACT18) {\n  _inherits(ENUM, _ABSTRACT18);\n  var _super29 = _createSuper(ENUM);\n  function ENUM() {\n    var _this8;\n    _classCallCheck(this, ENUM);\n    _this8 = _super29.call(this);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var value = args[0];\n    var options = typeof value === \"object\" && !Array.isArray(value) && value || {\n      values: args.reduce(function (result, element) {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    _this8.values = options.values;\n    _this8.options = options;\n    return _this8;\n  }\n  _createClass(ENUM, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (!this.values.includes(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid choice in %j\", value, this.values));\n      }\n      return true;\n    }\n  }]);\n  return ENUM;\n}(ABSTRACT);\nvar ARRAY = /*#__PURE__*/function (_ABSTRACT19) {\n  _inherits(ARRAY, _ABSTRACT19);\n  var _super30 = _createSuper(ARRAY);\n  function ARRAY(type) {\n    var _this9;\n    _classCallCheck(this, ARRAY);\n    _this9 = _super30.call(this);\n    var options = _.isPlainObject(type) ? type : {\n      type: type\n    };\n    _this9.options = options;\n    _this9.type = typeof options.type === \"function\" ? new options.type() : options.type;\n    return _this9;\n  }\n  _createClass(ARRAY, [{\n    key: \"toSql\",\n    value: function toSql() {\n      return \"\".concat(this.type.toSql(), \"[]\");\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      if (!Array.isArray(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid array\", value));\n      }\n      return true;\n    }\n  }], [{\n    key: \"is\",\n    value: function is(obj, type) {\n      return obj instanceof ARRAY && obj.type instanceof type;\n    }\n  }]);\n  return ARRAY;\n}(ABSTRACT);\nvar GEOMETRY = /*#__PURE__*/function (_ABSTRACT20) {\n  _inherits(GEOMETRY, _ABSTRACT20);\n  var _super31 = _createSuper(GEOMETRY);\n  function GEOMETRY(type, srid) {\n    var _this10;\n    _classCallCheck(this, GEOMETRY);\n    _this10 = _super31.call(this);\n    var options = _.isPlainObject(type) ? type : {\n      type: type,\n      srid: srid\n    };\n    _this10.options = options;\n    _this10.type = options.type;\n    _this10.srid = options.srid;\n    return _this10;\n  }\n  _createClass(GEOMETRY, [{\n    key: \"_stringify\",\n    value: function _stringify(value, options) {\n      return \"ST_GeomFromText(\".concat(options.escape(wkx.Geometry.parseGeoJSON(value).toWkt()), \")\");\n    }\n  }, {\n    key: \"_bindParam\",\n    value: function _bindParam(value, options) {\n      return \"ST_GeomFromText(\".concat(options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt()), \")\");\n    }\n  }]);\n  return GEOMETRY;\n}(ABSTRACT);\nGEOMETRY.prototype.escape = false;\nvar GEOGRAPHY = /*#__PURE__*/function (_ABSTRACT21) {\n  _inherits(GEOGRAPHY, _ABSTRACT21);\n  var _super32 = _createSuper(GEOGRAPHY);\n  function GEOGRAPHY(type, srid) {\n    var _this11;\n    _classCallCheck(this, GEOGRAPHY);\n    _this11 = _super32.call(this);\n    var options = _.isPlainObject(type) ? type : {\n      type: type,\n      srid: srid\n    };\n    _this11.options = options;\n    _this11.type = options.type;\n    _this11.srid = options.srid;\n    return _this11;\n  }\n  _createClass(GEOGRAPHY, [{\n    key: \"_stringify\",\n    value: function _stringify(value, options) {\n      return \"ST_GeomFromText(\".concat(options.escape(wkx.Geometry.parseGeoJSON(value).toWkt()), \")\");\n    }\n  }, {\n    key: \"_bindParam\",\n    value: function _bindParam(value, options) {\n      return \"ST_GeomFromText(\".concat(options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt()), \")\");\n    }\n  }]);\n  return GEOGRAPHY;\n}(ABSTRACT);\nGEOGRAPHY.prototype.escape = false;\nvar CIDR = /*#__PURE__*/function (_ABSTRACT22) {\n  _inherits(CIDR, _ABSTRACT22);\n  var _super33 = _createSuper(CIDR);\n  function CIDR() {\n    _classCallCheck(this, CIDR);\n    return _super33.apply(this, arguments);\n  }\n  _createClass(CIDR, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\" || !Validator.isIPRange(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid CIDR\", value));\n      }\n      return true;\n    }\n  }]);\n  return CIDR;\n}(ABSTRACT);\nvar INET = /*#__PURE__*/function (_ABSTRACT23) {\n  _inherits(INET, _ABSTRACT23);\n  var _super34 = _createSuper(INET);\n  function INET() {\n    _classCallCheck(this, INET);\n    return _super34.apply(this, arguments);\n  }\n  _createClass(INET, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\" || !Validator.isIP(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid INET\", value));\n      }\n      return true;\n    }\n  }]);\n  return INET;\n}(ABSTRACT);\nvar MACADDR = /*#__PURE__*/function (_ABSTRACT24) {\n  _inherits(MACADDR, _ABSTRACT24);\n  var _super35 = _createSuper(MACADDR);\n  function MACADDR() {\n    _classCallCheck(this, MACADDR);\n    return _super35.apply(this, arguments);\n  }\n  _createClass(MACADDR, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\" || !Validator.isMACAddress(value)) {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid MACADDR\", value));\n      }\n      return true;\n    }\n  }]);\n  return MACADDR;\n}(ABSTRACT);\nvar TSVECTOR = /*#__PURE__*/function (_ABSTRACT25) {\n  _inherits(TSVECTOR, _ABSTRACT25);\n  var _super36 = _createSuper(TSVECTOR);\n  function TSVECTOR() {\n    _classCallCheck(this, TSVECTOR);\n    return _super36.apply(this, arguments);\n  }\n  _createClass(TSVECTOR, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (typeof value !== \"string\") {\n        throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n      }\n      return true;\n    }\n  }]);\n  return TSVECTOR;\n}(ABSTRACT);\nvar DataTypes = module.exports = {\n  ABSTRACT: ABSTRACT,\n  STRING: STRING,\n  CHAR: CHAR,\n  TEXT: TEXT,\n  NUMBER: NUMBER,\n  TINYINT: TINYINT,\n  SMALLINT: SMALLINT,\n  MEDIUMINT: MEDIUMINT,\n  INTEGER: INTEGER,\n  BIGINT: BIGINT,\n  FLOAT: FLOAT,\n  TIME: TIME,\n  DATE: DATE,\n  DATEONLY: DATEONLY,\n  BOOLEAN: BOOLEAN,\n  NOW: NOW,\n  BLOB: BLOB,\n  DECIMAL: DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID: UUID,\n  UUIDV1: UUIDV1,\n  UUIDV4: UUIDV4,\n  HSTORE: HSTORE,\n  JSON: JSONTYPE,\n  JSONB: JSONB,\n  VIRTUAL: VIRTUAL,\n  ARRAY: ARRAY,\n  ENUM: ENUM,\n  RANGE: RANGE,\n  REAL: REAL,\n  \"DOUBLE PRECISION\": DOUBLE,\n  DOUBLE: DOUBLE,\n  GEOMETRY: GEOMETRY,\n  GEOGRAPHY: GEOGRAPHY,\n  CIDR: CIDR,\n  INET: INET,\n  MACADDR: MACADDR,\n  CITEXT: CITEXT,\n  TSVECTOR: TSVECTOR\n};\n_.each(DataTypes, function (dataType, name) {\n  if (!Object.prototype.hasOwnProperty.call(dataType, \"key\")) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\nvar dialectMap = {};\ndialectMap.postgres = require(\"./dialects/postgres/data-types\")(DataTypes);\ndialectMap.mysql = require(\"./dialects/mysql/data-types\")(DataTypes);\ndialectMap.mariadb = require(\"./dialects/mariadb/data-types\")(DataTypes);\ndialectMap.sqlite = require(\"./dialects/sqlite/data-types\")(DataTypes);\ndialectMap.mssql = require(\"./dialects/mssql/data-types\")(DataTypes);\ndialectMap.db2 = require(\"./dialects/db2/data-types\")(DataTypes);\ndialectMap.snowflake = require(\"./dialects/snowflake/data-types\")(DataTypes);\ndialectMap.oracle = require(\"./dialects/oracle/data-types\")(DataTypes);\nvar dialectList = Object.values(dialectMap);\nfor (var _i2 = 0, _dialectList = dialectList; _i2 < _dialectList.length; _i2++) {\n  var dataTypes = _dialectList[_i2];\n  _.each(dataTypes, function (DataType, key) {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\nvar _loop = function _loop() {\n  var dataTypes = _arr2[_i3];\n  _.each(dataTypes, function (DataType, key) {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n};\nfor (var _i3 = 0, _arr2 = [DataTypes].concat(dialectList); _i3 < _arr2.length; _i3++) {\n  _loop();\n}\nObject.assign(DataTypes, dialectMap);","map":{"version":3,"names":["util","require","_","wkx","sequelizeErrors","Validator","validator","momentTz","moment","_require","logger","warnings","_require2","classToInvokable","_require3","joinSQLFragments","ABSTRACT","_classCallCheck","_createClass","key","value","toString","options","toSql","stringify","_stringify","bindParam","_bindParam","name","warn","link","text","concat","extend","oldType","prototype","dialectTypes","STRING","_ABSTRACT","_inherits","_super","_createSuper","length","binary","_this","call","_binary","_length","validate","Object","Buffer","isBuffer","ValidationError","format","get","BINARY","CHAR","_STRING","_super2","TEXT","_ABSTRACT2","_super3","_this2","toLowerCase","CITEXT","_ABSTRACT3","_super4","apply","arguments","NUMBER","_ABSTRACT4","_super5","_this3","undefined","_zerofill","zerofill","_decimals","decimals","_precision","precision","_scale","scale","_unsigned","unsigned","result","isFloat","String","number","UNSIGNED","ZEROFILL","INTEGER","_NUMBER","_super6","isInt","TINYINT","_INTEGER","_super7","SMALLINT","_INTEGER2","_super8","MEDIUMINT","_INTEGER3","_super9","BIGINT","_INTEGER4","_super10","FLOAT","_NUMBER2","_super11","REAL","_NUMBER3","_super12","DOUBLE","_NUMBER4","_super13","DECIMAL","_NUMBER5","_super14","filter","identity","join","isDecimal","protoExtensions","escape","_value","isNaN","isFinite","sign","_i","_arr","floating","assign","BOOLEAN","_ABSTRACT5","_super15","isBoolean","_sanitize","type","parse","TIME","_ABSTRACT6","_super16","DATE","_ABSTRACT7","_super17","_this4","isDate","raw","Date","_isChanged","originalValue","getTime","_applyTimezone","date","timezone","tz","zone","utcOffset","isMoment","DATEONLY","_ABSTRACT8","_super18","HSTORE","_ABSTRACT9","_super19","isPlainObject","JSONTYPE","_ABSTRACT10","_super20","JSON","JSONB","_JSONTYPE","_super21","NOW","_ABSTRACT11","_super22","BLOB","_ABSTRACT12","_super23","_this5","Array","isArray","from","hex","_hexify","RANGE","_ABSTRACT13","_super24","subtype","_this6","_subtype","UUID","_ABSTRACT14","_super25","isUUID","acceptStrings","UUIDV1","_ABSTRACT15","_super26","UUIDV4","_ABSTRACT16","_super27","VIRTUAL","_ABSTRACT17","_super28","ReturnType","fields","_this7","returnType","ENUM","_ABSTRACT18","_super29","_this8","_len","args","_key","values","reduce","element","includes","ARRAY","_ABSTRACT19","_super30","_this9","is","obj","GEOMETRY","_ABSTRACT20","_super31","srid","_this10","Geometry","parseGeoJSON","toWkt","GEOGRAPHY","_ABSTRACT21","_super32","_this11","CIDR","_ABSTRACT22","_super33","isIPRange","INET","_ABSTRACT23","_super34","isIP","MACADDR","_ABSTRACT24","_super35","isMACAddress","TSVECTOR","_ABSTRACT25","_super36","DataTypes","module","exports","NUMERIC","each","dataType","hasOwnProperty","types","dialectMap","postgres","mysql","mariadb","sqlite","mssql","db2","snowflake","oracle","dialectList","_i2","_dialectList","dataTypes","DataType","_loop","_arr2","_i3"],"sources":["../src/data-types.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst sequelizeErrors = require('./errors');\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst { logger } = require('./utils/logger');\nconst warnings = {};\nconst { classToInvokable } = require('./utils/class-to-invokable');\nconst { joinSQLFragments } = require('./utils/join-sql-fragments');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\n\nABSTRACT.prototype.dialectTypes = '';\n\n/**\n * STRING A variable length string\n */\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([\n      `VARCHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\n\n/**\n * CHAR A fixed length string\n */\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || { length, binary });\n  }\n  toSql() {\n    return joinSQLFragments([\n      `CHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n}\n\n/**\n * Unlimited length TEXT column\n */\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n      case 'medium':\n        return 'MEDIUMTEXT';\n      case 'long':\n        return 'LONGTEXT';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Base number type which is used to build other types\n */\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor(options = {}) {\n    super();\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n      result += ')';\n    }\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'bigint' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\n\n/**\n * A 32 bit integer\n */\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\n\n/**\n * A 8 bit integer\n */\nclass TINYINT extends INTEGER {\n}\n\n/**\n * A 16 bit integer\n */\nclass SMALLINT extends INTEGER {\n}\n\n/**\n * A 24 bit integer\n */\nclass MEDIUMINT extends INTEGER {\n}\n\n/**\n * A 64 bit integer\n */\nclass BIGINT extends INTEGER {\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Floating point number (8-byte precision).\n */\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Decimal type, variable precision, take length as specified by user\n */\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n    return 'DECIMAL';\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n    return true;\n  }\n}\n\n// TODO: Create intermediate class\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\n/**\n * A boolean / tinyint column, depending on dialect\n */\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\n\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n/**\n * A time column\n *\n */\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n}\n\n/**\n * Date column with timezone, default is UTC\n */\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    return 'DATETIME';\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value &&\n      (value === originalValue ||\n        value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    // Z here means current timezone, _not_ UTC\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n}\n\n/**\n * A date only column (no timestamp)\n */\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\n\n/**\n * A key / value store column. Only available in Postgres.\n */\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\n\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\nclass JSONB extends JSONTYPE {\n}\n\n/**\n * A default value of the current timestamp\n */\nclass NOW extends ABSTRACT {\n}\n\n/**\n * Binary storage\n */\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n      case 'medium':\n        return 'MEDIUMBLOB';\n      case 'long':\n        return 'LONGBLOB';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\n\n\nBLOB.prototype.escape = false;\n\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype)\n      options.subtype = new INTEGER();\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n    return true;\n  }\n}\n\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function')\n      ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\n\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n    return true;\n  }\n}\n\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\n\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `ST_GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\nGEOMETRY.prototype.escape = false;\n\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\n\nGEOGRAPHY.prototype.escape = false;\n\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The TSVECTOR type stores text search vectors.\n *\n * Only available for Postgres\n *\n */\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\ndialectMap.db2 = require('./dialects/db2/data-types')(DataTypes);\ndialectMap.snowflake = require('./dialects/snowflake/data-types')(DataTypes);\ndialectMap.oracle = require('./dialects/oracle/data-types')(DataTypes);\n\nconst dialectList = Object.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\n// Wrap all data types to not require `new`\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}