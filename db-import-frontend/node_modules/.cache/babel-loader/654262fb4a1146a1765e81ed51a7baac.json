{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { ClientAuthError } from './ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\nvar ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  },\n  invalidAzureCloudInstance: {\n    code: \"invalid_azure_cloud_instance\",\n    desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n  },\n  missingSshJwk: {\n    code: \"missing_ssh_jwk\",\n    desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n  },\n  missingSshKid: {\n    code: \"missing_ssh_kid\",\n    desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n  },\n  missingNonceAuthenticationHeader: {\n    code: \"missing_nonce_authentication_header\",\n    desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n  },\n  invalidAuthenticationHeader: {\n    code: \"invalid_authentication_header\",\n    desc: \"Invalid authentication header provided\"\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\nvar ClientConfigurationError = /** @class */function (_super) {\n  __extends(ClientConfigurationError, _super);\n  function ClientConfigurationError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n    _this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n   */\n  ClientConfigurationError.createRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n   */\n  ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the claims request could not be successfully parsed\r\n   */\n  ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\n  };\n  /**\r\n   * Creates an error thrown if authority uri is given an insecure protocol.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\n  };\n  /**\r\n   * Creates an error thrown if URL string does not parse into separate segments.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createUrlParseError = function (urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\n  };\n  /**\r\n   * Creates an error thrown if URL string is empty or null.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createUrlEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  };\n  /**\r\n   * Error thrown when scopes are empty.\r\n   * @param scopesValue\r\n   */\n  ClientConfigurationError.createEmptyScopesArrayError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\n  };\n  /**\r\n   * Error thrown when client id scope is not provided as single scope.\r\n   * @param inputScopes\r\n   */\n  ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\n  };\n  /**\r\n   * Error thrown when prompt is not an allowed type.\r\n   * @param promptValue\r\n   */\n  ClientConfigurationError.createInvalidPromptError = function (promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\n  };\n  /**\r\n   * Creates error thrown when claims parameter is not a stringified JSON object\r\n   */\n  ClientConfigurationError.createInvalidClaimsRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n  ClientConfigurationError.createEmptyLogoutRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n  ClientConfigurationError.createEmptyTokenRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when an invalid code_challenge_method is passed by the user\r\n   */\n  ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  };\n  /**\r\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n   */\n  ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n  ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n  ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  };\n  /**\r\n   * Throws error when provided authority is not a member of the trusted host list\r\n   */\n  ClientConfigurationError.createUntrustedAuthorityError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  };\n  /**\r\n   * Throws error when the AzureCloudInstance is set to an invalid value\r\n   */\n  ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\r\n   */\n  ClientConfigurationError.createMissingSshJwkError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\r\n   */\n  ClientConfigurationError.createMissingSshKidError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n  };\n  /**\r\n   * Throws error when provided headers don't contain a header that a server nonce can be extracted from\r\n   */\n  ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n  };\n  /**\r\n   * Throws error when a provided header is invalid in any way\r\n   */\n  ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + \". Invalid header: \" + invalidHeaderName + \". Details: \" + details);\n  };\n  return ClientConfigurationError;\n}(ClientAuthError);\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"names":["ClientConfigurationErrorMessage","redirectUriNotSet","code","desc","postLogoutUriNotSet","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyScopesError","nonArrayScopesError","clientIdSingleScopeError","invalidPrompt","invalidClaimsRequest","tokenRequestEmptyError","logoutRequestEmptyError","invalidCodeChallengeMethod","invalidCodeChallengeParams","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","invalidAzureCloudInstance","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","ClientConfigurationError","_super","__extends","errorCode","errorMessage","_this","call","name","Object","setPrototypeOf","prototype","createRedirectUriEmptyError","createPostLogoutRedirectUriEmptyError","createClaimsRequestParsingError","claimsRequestParseError","createInsecureAuthorityUriError","urlString","createUrlParseError","createUrlEmptyError","createEmptyScopesArrayError","createClientIdSingleScopeError","inputScopes","createInvalidPromptError","promptValue","createInvalidClaimsRequestError","createEmptyLogoutRequestError","createEmptyTokenRequestError","createInvalidCodeChallengeMethodError","createInvalidCodeChallengeParamsError","createInvalidCloudDiscoveryMetadataError","createInvalidAuthorityMetadataError","createUntrustedAuthorityError","createInvalidAzureCloudInstanceError","createMissingSshJwkError","createMissingSshKidError","createMissingNonceAuthenticationHeadersError","createInvalidAuthenticationHeaderError","invalidHeaderName","details","ClientAuthError"],"sources":["../../src/error/ClientConfigurationError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"./ClientAuthError\";\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\"\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\"\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\"\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\"\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\"\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\"\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\"\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\"\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\"\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n    },\n    invalidAzureCloudInstance: {\n        code: \"invalid_azure_cloud_instance\",\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n    },\n    missingSshJwk: {\n        code: \"missing_ssh_jwk\",\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n    },\n    missingSshKid: {\n        code: \"missing_ssh_kid\",\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n    },\n    missingNonceAuthenticationHeader: {\n        code: \"missing_nonce_authentication_header\",\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n    },\n    invalidAuthenticationHeader: {\n        code: \"invalid_authentication_header\",\n        desc: \"Invalid authentication header provided\"\n    }\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends ClientAuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code,\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(urlString: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code,\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(urlParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code,\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code,\n            ClientConfigurationErrorMessage.urlEmptyError.desc);\n    }\n\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code,\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n    }\n\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(promptValue: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n    }\n\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code,\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\n        );\n    }\n\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n    }\n\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\n    }\n\n    /**\n     * Throws error when the AzureCloudInstance is set to an invalid value\n     */\n    static createInvalidAzureCloudInstanceError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code,\n            ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n     */\n    static createMissingSshJwkError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code,\n            ClientConfigurationErrorMessage.missingSshJwk.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n     */\n    static createMissingSshKidError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code,\n            ClientConfigurationErrorMessage.missingSshKid.desc);\n    }\n\n    /**\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n     */\n    static createMissingNonceAuthenticationHeadersError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code,\n            ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n    }\n\n    /**\n     * Throws error when a provided header is invalid in any way\n     */\n    static createInvalidAuthenticationHeaderError(invalidHeaderName: string, details: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code,\n            `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}