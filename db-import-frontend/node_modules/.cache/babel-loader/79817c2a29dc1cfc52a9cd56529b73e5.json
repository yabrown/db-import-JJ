{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar KeyLocation;\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\nvar PopTokenGenerator = /** @class */function () {\n  function PopTokenGenerator(cryptoUtils) {\n    this.cryptoUtils = cryptoUtils;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqCnf, reqCnfString, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.generateKid(request)];\n          case 1:\n            reqCnf = _b.sent();\n            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n            _a = {\n              kid: reqCnf.kid,\n              reqCnfString: reqCnfString\n            };\n            return [4 /*yield*/, this.cryptoUtils.hashString(reqCnfString)];\n          case 2:\n            return [2 /*return*/, (_a.reqCnfHash = _b.sent(), _a)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.generateKid = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];\n          case 1:\n            kidThumbprint = _a.sent();\n            return [2 /*return*/, {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.signPayload(accessToken, keyId, request)];\n      });\n    });\n  };\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            return [4 /*yield*/, this.cryptoUtils.signJwt(__assign({\n              at: payload,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, claims), keyId, request.correlationId)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return PopTokenGenerator;\n}();\nexport { PopTokenGenerator };","map":{"version":3,"names":["KeyLocation","PopTokenGenerator","cryptoUtils","prototype","generateCnf","request","generateKid","reqCnf","_b","sent","reqCnfString","base64Encode","JSON","stringify","kid","hashString","_a","reqCnfHash","getPublicKeyThumbprint","kidThumbprint","xms_ksl","SW","signPopToken","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","__assign","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims","correlationId"],"sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n    reqCnfHash: string;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n\n    constructor(cryptoUtils: ICrypto) {\n        this.cryptoUtils = cryptoUtils;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\n        const reqCnf = await this.generateKid(request);\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString, \n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, request.correlationId);\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAwBH,IAAKA,WAGJ;AAHD,WAAKA,WAAW;EACZA,WAAA,aAAS;EACTA,WAAA,eAAW;AACf,CAAC,EAHIA,WAAW,KAAXA,WAAW,GAGf;AAED,IAAAC,iBAAA;EAII,SAAAA,kBAAYC,WAAoB;IAC5B,IAAI,CAACA,WAAW,GAAGA,WAAW;;EAGlC;;;;;AAKG;EACGD,iBAAW,CAAAE,SAAA,CAAAC,WAAA,GAAjB,UAAkBC,OAAoC;;;;;UACnC;YAAA,qBAAM,IAAI,CAACC,WAAW,CAACD,OAAO,CAAC;;YAAxCE,MAAM,GAAGC,EAA+B,CAAAC,IAAA;YACxCC,YAAY,GAAW,IAAI,CAACR,WAAW,CAACS,YAAY,CAACC,IAAI,CAACC,SAAS,CAACN,MAAM,CAAC,CAAC;;cAG9EO,GAAG,EAAEP,MAAM,CAACO,GAAG;cACfJ,YAAY,EAAAA;;YACA,OAAM,kBAAI,CAACR,WAAW,CAACa,UAAU,CAACL,YAAY,CAAC;;YAH/D,OAGI,gBAAAM,EAAA,CAAAC,UAAU,GAAET,EAA+C,CAAAC,IAAA,IAC7DO,EAAA;;;;EACL;EAED;;;;AAIG;EACGf,iBAAW,CAAAE,SAAA,CAAAG,WAAA,GAAjB,UAAkBD,OAAoC;;;;;;YAC5B,OAAM,kBAAI,CAACH,WAAW,CAACgB,sBAAsB,CAACb,OAAO,CAAC;;YAAtEc,aAAa,GAAGH,EAAsD,CAAAP,IAAA;YAE5E,OAAO;cACHK,GAAG,EAAEK,aAAa;cAClBC,OAAO,EAAEpB,WAAW,CAACqB;aACxB,CAAC;;;;EACL;EAED;;;;;AAKG;EACGpB,iBAAA,CAAAE,SAAA,CAAAmB,YAAY,GAAlB,UAAmBC,WAAmB,EAAEC,KAAa,EAAEnB,OAAoC;;;QACvF,OAAO,mBAAI,CAACoB,WAAW,CAACF,WAAW,EAAEC,KAAK,EAAEnB,OAAO,CAAC,CAAC;;;EACxD;EAED;;;;;;;AAOG;EACGJ,iBAAW,CAAAE,SAAA,CAAAsB,WAAA,GAAjB,UAAkBC,OAAe,EAAEF,KAAa,EAAEnB,OAAoC,EAAEsB,MAAe;;;;;;YAG3FC,qBAAqB,GAA8CvB,OAAO,CAAAuB,qBAArD,EAAEC,kBAAkB,GAA0BxB,OAAO,CAAjCwB,kBAAA,EAAEC,SAAS,GAAezB,OAAO,CAAtByB,SAAA,EAAEC,QAAQ,GAAK1B,OAAO,CAAA0B,QAAZ;YAEhEC,iBAAiB,GAAIH,kBAAkB,GAAI,IAAII,SAAS,CAACJ,kBAAkB,CAAC,GAAGK,SAAS;YACxFC,qBAAqB,GAAGH,iBAAiB,KAAjB,QAAAA,iBAAiB,uBAAjBA,iBAAiB,CAAEI,gBAAgB,EAAE;YAC5D,OAAM,kBAAI,CAAClC,WAAW,CAACmC,OAAO,CACjCC,QAAA;cAAAC,EAAE,EAAEb,OAAO;cACXc,EAAE,EAAEC,SAAS,CAACC,UAAU,EAAE;cAC1BC,CAAC,EAAEf,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEgB,WAAW;cACrCC,CAAC,EAAEV,qBAAqB,KAArB,QAAAA,qBAAqB,KAArB,kBAAAA,qBAAqB,CAAEW,eAAe;cACzCC,KAAK,EAAEhB,QAAQ,IAAI,IAAI,CAAC7B,WAAW,CAAC8C,aAAa,EAAE;cACnDC,CAAC,EAAEd,qBAAqB,aAArBA,qBAAqB,KAArB,kBAAAA,qBAAqB,CAAEe,YAAY;cACtCC,CAAC,EAAE,CAAChB,qBAAqB,KAArB,QAAAA,qBAAqB,uBAArBA,qBAAqB,CAAEiB,WAAW,IAAI,CAAC,EAAE,EAAEjB,qBAAqB,CAACiB,WAAW,CAAC,GAAGlB,SAAS;cAC7FmB,aAAa,EAAEvB,SAAS,IAAII;YAAS,GAClCP,MAAM,CACV,EAAAH,KAAK,EAAEnB,OAAO,CAACiD,aAAa,CAAC;UAVhC;YAAA,sBAAOtC,EAAA,CAAAP,IAAA,EAUyB,CAAC;;;;EACpC;EACL,OAACR,iBAAA;AAAD,CAAC"},"metadata":{},"sourceType":"module"}