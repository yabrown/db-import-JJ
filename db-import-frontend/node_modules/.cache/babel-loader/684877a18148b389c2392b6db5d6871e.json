{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 Device code client\r\n */\nvar DeviceCodeClient = /** @class */function (_super) {\n  __extends(DeviceCodeClient, _super);\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDeviceCode(request)];\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createExtraQueryParameters(request);\n        endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the device code request\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2 /*return*/, {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3 /*break*/, 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2 /*return*/, response.body];\n          case 7:\n            return [3 /*break*/, 1];\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return requestParameters.createQueryString();\n  };\n  return DeviceCodeClient;\n}(BaseClient);\nexport { DeviceCodeClient };","map":{"version":3,"names":["DeviceCodeClient","_super","__extends","configuration","call","prototype","acquireToken","request","getDeviceCode","deviceCodeResponse","_a","sent","deviceCodeCallback","reqTimestamp","TimeUtils","nowSeconds","acquireTokenWithDeviceCode","response","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryParametersString","createExtraQueryParameters","endpoint","UrlString","appendQueryString","deviceCodeEndpoint","queryString","createQueryString","headers","createTokenRequestHeaders","thumbprint","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostRequestToDeviceCodeEndpoint","parameterBuilder","RequestParameterBuilder","extraQueryParameters","addExtraQueryParameters","networkManager","sendPostRequest","body","_b","userCode","user_code","deviceCode","device_code","verificationUri","verification_uri","expiresIn","expires_in","interval","message","addScopes","addClientId","StringUtils","isEmpty","clientCapabilities","length","addClaims","continuePolling","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","ClientAuthError","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","createTokenQueryParameters","tokenEndpoint","requestBody","createTokenRequestBody","timeout","undefined","pollingIntervalMilli","cancel","executePostToTokenEndpoint","Constants","AUTHORIZATION_PENDING","info","delay","ServerError","createPostRequestFailed","createDeviceCodeUnknownError","requestParameters","addGrantType","GrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj","BaseClient"],"sources":["../../src/client/DeviceCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { Constants, GrantType } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { ServerError } from \"../error/ServerError\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * OAuth2.0 Device code client\n */\nexport class DeviceCodeClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Gets device code from device code endpoint, calls back to with device code response, and\n     * polls token endpoint to exchange device code for tokens\n     * @param request\n     */\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\n        request.deviceCodeCallback(deviceCodeResponse);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\n            request,\n            deviceCodeResponse);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response);\n        return await responseHandler.handleServerTokenResponse(\n            response,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n    }\n\n    /**\n     * Creates device code request and executes http GET\n     * @param request\n     */\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\n        const queryParametersString = this.createExtraQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        const queryString = this.createQueryString(request);\n        const headers = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        return this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the device code request\n     * @param request\n     */\n    createExtraQueryParameters(request: CommonDeviceCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Executes POST request to device code endpoint\n     * @param deviceCodeEndpoint\n     * @param queryString\n     * @param headers\n     */\n    private async executePostRequestToDeviceCodeEndpoint(\n        deviceCodeEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\n\n        const {\n            body: {\n                user_code: userCode,\n                device_code: deviceCode,\n                verification_uri: verificationUri,\n                expires_in: expiresIn,\n                interval,\n                message\n            }\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\n            thumbprint,\n            deviceCodeEndpoint,\n            {\n                body: queryString,\n                headers: headers\n            });\n\n        return {\n            userCode,\n            deviceCode,\n            verificationUri,\n            expiresIn,\n            interval,\n            message\n        };\n    }\n\n    /**\n     * Create device code endpoint query parameters and returns string\n     */\n    private createQueryString(request: CommonDeviceCodeRequest): string {\n\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Breaks the polling with specific conditions.\n     * @param request CommonDeviceCodeRequest\n     * @param deviceCodeResponse DeviceCodeResponse\n     */\n    private continuePolling(\n        deviceCodeExpirationTime: number,\n        userSpecifiedTimeout?: number,\n        userSpecifiedCancelFlag?: boolean,\n    ): boolean {\n        if (userSpecifiedCancelFlag) {\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n            throw ClientAuthError.createDeviceCodeCancelledError();\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\n            throw ClientAuthError.createUserTimeoutReachedError();\n        } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n            if (userSpecifiedTimeout) {\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\n            }\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\n            throw ClientAuthError.createDeviceCodeExpiredError();\n        }\n        return true;\n    }\n\n    /**\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\n     * response\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private async acquireTokenWithDeviceCode(\n        request: CommonDeviceCodeRequest,\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n\n        /*\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\n         */\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\n            const thumbprint: RequestThumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes,\n                claims: request.claims,\n                authenticationScheme: request.authenticationScheme,\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                sshKid: request.sshKid\n            };\n            const response = await this.executePostToTokenEndpoint(\n                endpoint,\n                requestBody,\n                headers,\n                thumbprint);\n\n            if (response.body && response.body.error) {\n                // user authorization is pending. Sleep for polling interval and try again\n                if(response.body.error === Constants.AUTHORIZATION_PENDING) {\n                    this.logger.info(\"Authorization pending. Continue polling.\");\n                    await TimeUtils.delay(pollingIntervalMilli);\n                } else {\n                    // for any other error, throw\n                    this.logger.info(\"Unexpected error in polling from the server\");\n                    throw ServerError.createPostRequestFailed(response.body.error);\n                }\n            } else {\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n                return response.body;\n            }\n        }\n\n        /*\n         * The above code should've thrown by this point, but to satisfy TypeScript,\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\n         */\n        this.logger.error(\"Polling stopped for unknown reasons.\");\n        throw ClientAuthError.createDeviceCodeUnknownError();\n    }\n\n    /**\n     * Creates query parameters and converts to string.\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\n\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\n\n        requestParameters.addScopes(request.scopes);\n        requestParameters.addClientId(this.config.authOptions.clientId);\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        requestParameters.addCorrelationId(correlationId);\n        requestParameters.addClientInfo();\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n        requestParameters.addThrottling();\n        if (this.serverTelemetryManager) {\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return requestParameters.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}