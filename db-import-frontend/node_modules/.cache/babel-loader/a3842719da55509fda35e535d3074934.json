{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\";\n// Default options for the cycler if none are provided\nexport var DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    var tryGetAccessToken, _tryGetAccessToken, token;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _tryGetAccessToken = function _tryGetAccessToken3() {\n            _tryGetAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n              var finalToken;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!(Date.now() < refreshTimeout)) {\n                      _context2.next = 12;\n                      break;\n                    }\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return getAccessToken();\n                  case 4:\n                    return _context2.abrupt(\"return\", _context2.sent);\n                  case 7:\n                    _context2.prev = 7;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    return _context2.abrupt(\"return\", null);\n                  case 10:\n                    _context2.next = 18;\n                    break;\n                  case 12:\n                    _context2.next = 14;\n                    return getAccessToken();\n                  case 14:\n                    finalToken = _context2.sent;\n                    if (!(finalToken === null)) {\n                      _context2.next = 17;\n                      break;\n                    }\n                    throw new Error(\"Failed to refresh access token.\");\n                  case 17:\n                    return _context2.abrupt(\"return\", finalToken);\n                  case 18:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2, null, [[1, 7]]);\n            }));\n            return _tryGetAccessToken.apply(this, arguments);\n          };\n          tryGetAccessToken = function _tryGetAccessToken2() {\n            return _tryGetAccessToken.apply(this, arguments);\n          }; // This wrapper handles exceptions gracefully as long as we haven't exceeded\n          // the timeout.\n          _context3.next = 4;\n          return tryGetAccessToken();\n        case 4:\n          token = _context3.sent;\n        case 5:\n          if (!(token === null)) {\n            _context3.next = 13;\n            break;\n          }\n          _context3.next = 8;\n          return delay(retryIntervalInMs);\n        case 8:\n          _context3.next = 10;\n          return tryGetAccessToken();\n        case 10:\n          token = _context3.sent;\n          _context3.next = 5;\n          break;\n        case 13:\n          return _context3.abrupt(\"return\", token);\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _beginRefresh.apply(this, arguments);\n}\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n  var refreshWorker = null;\n  var token = null;\n  var tenantId;\n  var options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  var cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(scopes, getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      var tryGetAccessToken = function tryGetAccessToken() {\n        return credential.getToken(scopes, getTokenOptions);\n      };\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {\n        refreshWorker = null;\n        token = _token;\n        tenantId = getTokenOptions.tenantId;\n        return token;\n      }).catch(function (reason) {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        tenantId = undefined;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scopes, tokenOptions) {\n      var mustRefresh;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            //\n            // Simple rules:\n            // - If we MUST refresh, then return the refresh task, blocking\n            //   the pipeline until a token is available.\n            // - If we SHOULD refresh, then run refresh but don't return it\n            //   (we can still use the cached token).\n            // - Return the token, since it's fine if we didn't return in\n            //   step 1.\n            //\n            // If the tenantId passed in token options is different to the one we have\n            // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n            // refresh the token with the new tenantId or token.\n            mustRefresh = tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n            if (!mustRefresh) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\", refresh(scopes, tokenOptions));\n          case 3:\n            if (cycler.shouldRefresh) {\n              refresh(scopes, tokenOptions);\n            }\n            return _context.abrupt(\"return\", token);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","_x","_x2","_x3","_beginRefresh","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","getAccessToken","refreshTimeout","tryGetAccessToken","_tryGetAccessToken","token","wrap","_callee3$","_context3","prev","next","_tryGetAccessToken3","_callee2","finalToken","_callee2$","_context2","Date","now","abrupt","sent","t0","Error","stop","_tryGetAccessToken2","createTokenCycler","credential","tokenCyclerOptions","refreshWorker","tenantId","options","Object","assign","cycler","isRefreshing","shouldRefresh","_a","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getToken","then","_token","catch","reason","undefined","_ref","_callee","tokenOptions","_callee$","_context","Boolean","claims","_x4","_x5"],"sources":["../../../src/util/tokenCycler.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh =\n      tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}