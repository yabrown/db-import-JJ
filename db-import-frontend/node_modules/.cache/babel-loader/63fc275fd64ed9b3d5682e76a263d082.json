{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar util = require(\"util\");\nvar AbstractQuery = require(\"../abstract/query\");\nvar sequelizeErrors = require(\"../../errors\");\nvar parserStore = require(\"../parserStore\")(\"db2\");\nvar _ = require(\"lodash\");\nvar _require = require(\"../../utils/logger\"),\n  logger = _require.logger;\nvar moment = require(\"moment\");\nvar debug = logger.debugContext(\"sql:db2\");\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n  var _super = _createSuper(Query);\n  function Query() {\n    _classCallCheck(this, Query);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Query, [{\n    key: \"getInsertIdField\",\n    value: function getInsertIdField() {\n      return \"id\";\n    }\n  }, {\n    key: \"getSQLTypeFromJsType\",\n    value: function getSQLTypeFromJsType(value) {\n      if (Buffer.isBuffer(value)) {\n        return {\n          ParamType: \"INPUT\",\n          DataType: \"BLOB\",\n          Data: value\n        };\n      }\n      if (typeof value === \"bigint\") {\n        return value.toString();\n      }\n      return value;\n    }\n  }, {\n    key: \"_run\",\n    value: function () {\n      var _run2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, sql, parameters) {\n        var _this = this;\n        var benchmark, queryBegin, errStack;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.sql = sql;\n              benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n              if (benchmark) {\n                queryBegin = Date.now();\n              } else {\n                this.sequelize.log(\"Executing (\".concat(this.connection.uuid || \"default\", \"): \").concat(this.sql), this.options);\n              }\n              errStack = new Error().stack;\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                if (_.startsWith(_this.sql, \"BEGIN TRANSACTION\")) {\n                  connection.beginTransaction(function (err) {\n                    if (err) {\n                      reject(_this.formatError(err, errStack));\n                    } else {\n                      resolve(_this.formatResults());\n                    }\n                  });\n                } else if (_.startsWith(_this.sql, \"COMMIT TRANSACTION\")) {\n                  connection.commitTransaction(function (err) {\n                    if (err) {\n                      reject(_this.formatError(err, errStack));\n                    } else {\n                      resolve(_this.formatResults());\n                    }\n                  });\n                } else if (_.startsWith(_this.sql, \"ROLLBACK TRANSACTION\")) {\n                  connection.rollbackTransaction(function (err) {\n                    if (err) {\n                      reject(_this.formatError(err, errStack));\n                    } else {\n                      resolve(_this.formatResults());\n                    }\n                  });\n                } else if (_.startsWith(_this.sql, \"SAVE TRANSACTION\")) {\n                  connection.commitTransaction(function (err) {\n                    if (err) {\n                      reject(_this.formatError(err, errStack));\n                    } else {\n                      connection.beginTransaction(function (err2) {\n                        if (err2) {\n                          reject(_this.formatError(err2, errStack));\n                        } else {\n                          resolve(_this.formatResults());\n                        }\n                      });\n                    }\n                  }, _this.options.transaction.name);\n                } else {\n                  var params = [];\n                  if (parameters) {\n                    _.forOwn(parameters, function (value, key) {\n                      var param = _this.getSQLTypeFromJsType(value, key);\n                      params.push(param);\n                    });\n                  }\n                  var SQL = _this.sql.toUpperCase();\n                  var newSql = _this.sql;\n                  if ((_this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n                    if (_this.sql.charAt(_this.sql.length - 1) === \";\") {\n                      newSql = _this.sql.slice(0, _this.sql.length - 1);\n                    }\n                    newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n                  }\n                  connection.prepare(newSql, function (err, stmt) {\n                    if (err) {\n                      reject(_this.formatError(err, errStack));\n                    }\n                    stmt.execute(params, function (err2, result, outparams) {\n                      debug(\"executed(\".concat(_this.connection.uuid || \"default\", \"):\").concat(newSql, \" \").concat(parameters ? util.inspect(parameters, {\n                        compact: true,\n                        breakLength: Infinity\n                      }) : \"\"));\n                      if (benchmark) {\n                        _this.sequelize.log(\"Executed (\".concat(_this.connection.uuid || \"default\", \"): \").concat(newSql, \" \").concat(parameters ? util.inspect(parameters, {\n                          compact: true,\n                          breakLength: Infinity\n                        }) : \"\"), Date.now() - queryBegin, _this.options);\n                      }\n                      if (err2 && err2.message) {\n                        err2 = _this.filterSQLError(err2, _this.sql, connection);\n                        if (err2 === null) {\n                          stmt.closeSync();\n                          resolve(_this.formatResults([], 0));\n                        }\n                      }\n                      if (err2) {\n                        err2.sql = sql;\n                        stmt.closeSync();\n                        reject(_this.formatError(err2, errStack, connection, parameters));\n                      } else {\n                        var data = [];\n                        var metadata = [];\n                        var affectedRows = 0;\n                        if (typeof result === \"object\") {\n                          if (_.startsWith(_this.sql, \"DELETE FROM \")) {\n                            affectedRows = result.getAffectedRowsSync();\n                          } else {\n                            data = result.fetchAllSync();\n                            metadata = result.getColumnMetadataSync();\n                          }\n                          result.closeSync();\n                        }\n                        stmt.closeSync();\n                        var datalen = data.length;\n                        if (datalen > 0) {\n                          var coltypes = {};\n                          for (var i = 0; i < metadata.length; i++) {\n                            coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                          }\n                          for (var _i = 0; _i < datalen; _i++) {\n                            for (var column in data[_i]) {\n                              var parse = parserStore.get(coltypes[column]);\n                              var value = data[_i][column];\n                              if (value !== null) {\n                                if (parse) {\n                                  data[_i][column] = parse(value);\n                                } else if (coltypes[column] === \"TIMESTAMP\") {\n                                  data[_i][column] = new Date(moment.utc(value));\n                                } else if (coltypes[column] === \"BLOB\") {\n                                  data[_i][column] = new Buffer.from(value);\n                                } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                                  data[_i][column] = new Buffer.from(value, \"hex\");\n                                }\n                              }\n                            }\n                          }\n                          if (outparams && outparams.length) {\n                            data.unshift(outparams);\n                          }\n                          resolve(_this.formatResults(data, datalen, metadata, connection));\n                        } else {\n                          resolve(_this.formatResults(data, affectedRows));\n                        }\n                      }\n                    });\n                  });\n                }\n              }));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _run(_x, _x2, _x3) {\n        return _run2.apply(this, arguments);\n      }\n      return _run;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sql, parameters) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._run(this.connection, sql, parameters);\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function run(_x4, _x5) {\n        return _run3.apply(this, arguments);\n      }\n      return run;\n    }()\n  }, {\n    key: \"filterSQLError\",\n    value: function filterSQLError(err, sql, connection) {\n      if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n        err = null;\n      } else if (err.message.search(\"SQL0443N\") != -1) {\n        if (this.isDropSchemaQuery()) {\n          connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n          connection.querySync(this.sql);\n        }\n        err = null;\n      } else if (err.message.search(\"SQL0601N\") != -1) {\n        var match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n        if (match && match.length > 1 && match[2] === \"TABLE\") {\n          var table;\n          var mtarray = match[1].split(\".\");\n          if (mtarray[1]) {\n            table = \"\\\"\".concat(mtarray[0], \"\\\".\\\"\").concat(mtarray[1], \"\\\"\");\n          } else {\n            table = \"\\\"\".concat(mtarray[0], \"\\\"\");\n          }\n          if (connection.dropTable !== false) {\n            connection.querySync(\"DROP TABLE \".concat(table));\n            err = connection.querySync(sql);\n          } else {\n            err = null;\n          }\n        } else {\n          err = null;\n        }\n      } else if (err.message.search(\"SQL0911N\") != -1) {\n        if (err.message.search('Reason code \"2\"') != -1) {\n          err = null;\n        }\n      } else if (err.message.search(\"SQL0605W\") != -1) {\n        err = null;\n      } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n        connection.querySync(\"CALL SYSPROC.ADMIN_CMD('REORG TABLE \".concat(sql.substring(12).split(\" \")[0], \"')\"));\n        err = connection.querySync(sql);\n      }\n      if (err && err.length === 0) {\n        err = null;\n      }\n      return err;\n    }\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data, rowCount, metadata, conn) {\n      var result = this.instance;\n      if (this.isInsertQuery(data, metadata)) {\n        this.handleInsertQuery(data, metadata);\n        if (!this.instance) {\n          if (this.options.plain) {\n            var record = data[0];\n            result = record[Object.keys(record)[0]];\n          } else {\n            result = data;\n          }\n        }\n      }\n      if (this.isShowTablesQuery()) {\n        result = data;\n      } else if (this.isDescribeQuery()) {\n        result = {};\n        var _iterator = _createForOfIteratorHelper(data),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _result = _step.value;\n            if (_result.Default) {\n              _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n            }\n            result[_result.Name] = {\n              type: _result.Type.toUpperCase(),\n              allowNull: _result.IsNull === \"Y\" ? true : false,\n              defaultValue: _result.Default,\n              primaryKey: _result.KeySeq > 0,\n              autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n              comment: _result.Comment\n            };\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (this.isShowIndexesQuery()) {\n        result = this.handleShowIndexesQuery(data);\n      } else if (this.isSelectQuery()) {\n        result = this.handleSelectQuery(data);\n      } else if (this.isUpsertQuery()) {\n        result = data;\n      } else if (this.isDropSchemaQuery()) {\n        result = data[0];\n        if (conn) {\n          var query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n          conn.querySync(query);\n        }\n      } else if (this.isCallQuery()) {\n        result = data;\n      } else if (this.isBulkUpdateQuery()) {\n        result = data.length;\n      } else if (this.isBulkDeleteQuery()) {\n        result = rowCount;\n      } else if (this.isVersionQuery()) {\n        result = data[0].VERSION;\n      } else if (this.isForeignKeysQuery()) {\n        result = data;\n      } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n        result = [result, rowCount];\n      } else if (this.isShowConstraintsQuery()) {\n        result = this.handleShowConstraintsQuery(data);\n      } else if (this.isRawQuery()) {\n        result = [data, metadata];\n      } else {\n        result = data;\n      }\n      return result;\n    }\n  }, {\n    key: \"handleShowTablesQuery\",\n    value: function handleShowTablesQuery(results) {\n      return results.map(function (resultSet) {\n        return {\n          tableName: resultSet.TABLE_NAME,\n          schema: resultSet.TABLE_SCHEMA\n        };\n      });\n    }\n  }, {\n    key: \"handleShowConstraintsQuery\",\n    value: function handleShowConstraintsQuery(data) {\n      return _.remove(data, function (constraint) {\n        return !_.startsWith(constraint.constraintName, \"SQL\");\n      });\n    }\n  }, {\n    key: \"formatError\",\n    value: function formatError(err, errStack, conn, parameters) {\n      var _this2 = this;\n      var match;\n      if (!(err && err.message)) {\n        err[\"message\"] = \"No error message found.\";\n      }\n      match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n      if (match && match.length > 0) {\n        var uniqueIndexName = \"\";\n        var uniqueKey = \"\";\n        var fields = {};\n        var message = err.message;\n        var query = \"SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = \".concat(match[1], \" AND TABSCHEMA = '\").concat(match[2], \"' AND TABNAME = '\").concat(match[3], \"'\");\n        if (!!conn && match.length > 3) {\n          uniqueIndexName = conn.querySync(query);\n          uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n        }\n        if (this.model && !!uniqueIndexName) {\n          uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n        }\n        if (!uniqueKey && this.options.fields) {\n          uniqueKey = this.options.fields[match[1] - 1];\n        }\n        if (uniqueKey) {\n          if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n            fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n          } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n            fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n          } else if (parameters) {\n            fields[uniqueKey.column] = parameters[\"0\"];\n          }\n        }\n        if (uniqueKey && !!uniqueKey.msg) {\n          message = uniqueKey.msg;\n        }\n        var errors = [];\n        _.forOwn(fields, function (value, field) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(_this2.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, _this2.instance, \"not_unique\"));\n        });\n        return new sequelizeErrors.UniqueConstraintError({\n          message: message,\n          errors: errors,\n          parent: err,\n          fields: fields,\n          stack: errStack\n        });\n      }\n      match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n      if (match && match.length > 0) {\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          fields: null,\n          index: match[1],\n          parent: err,\n          stack: errStack\n        });\n      }\n      match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n      if (match && match.length > 1) {\n        var constraint = match[1];\n        var table = err.sql.match(/table \"(.+?)\"/i);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.UnknownConstraintError({\n          message: match[0],\n          constraint: constraint,\n          table: table,\n          parent: err,\n          stack: errStack\n        });\n      }\n      return new sequelizeErrors.DatabaseError(err, {\n        stack: errStack\n      });\n    }\n  }, {\n    key: \"isDropSchemaQuery\",\n    value: function isDropSchemaQuery() {\n      var result = false;\n      if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n        result = true;\n      }\n      return result;\n    }\n  }, {\n    key: \"isShowOrDescribeQuery\",\n    value: function isShowOrDescribeQuery() {\n      var result = false;\n      result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n      result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n      result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n      return result;\n    }\n  }, {\n    key: \"isShowIndexesQuery\",\n    value: function isShowIndexesQuery() {\n      var result = false;\n      result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n      result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n      return result;\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      var currItem;\n      var result = [];\n      data.forEach(function (item) {\n        if (!currItem || currItem.name !== item.Key_name) {\n          currItem = {\n            primary: item.keyType === \"P\",\n            fields: [],\n            name: item.name,\n            tableName: item.tableName,\n            unique: item.keyType === \"U\",\n            type: item.type\n          };\n          _.forEach(item.COLNAMES.replace(/\\+|-/g, function (x) {\n            return \" \".concat(x);\n          }).split(\" \"), function (column) {\n            var columnName = column.trim();\n            if (columnName) {\n              columnName = columnName.replace(/\\+|-/, \"\");\n              currItem.fields.push({\n                attribute: columnName,\n                length: void 0,\n                order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n                collate: void 0\n              });\n            }\n          });\n          result.push(currItem);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"handleInsertQuery\",\n    value: function handleInsertQuery(results, metaData) {\n      if (this.instance) {\n        var autoIncrementAttribute = this.model.autoIncrementAttribute;\n        var id = null;\n        var autoIncrementAttributeAlias = null;\n        if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n        id = id || results && results[0][this.getInsertIdField()];\n        id = id || metaData && metaData[this.getInsertIdField()];\n        id = id || results && results[0][autoIncrementAttribute];\n        id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n        this.instance[autoIncrementAttribute] = id;\n      }\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam = {};\n      var replacementFunc = function replacementFunc(match, key, values2) {\n        if (values2[key] !== void 0) {\n          bindParam[key] = values2[key];\n          return \"?\";\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      if (Array.isArray(values) && typeof values[0] === \"object\") {\n        bindParam = values;\n      }\n      return [sql, bindParam];\n    }\n  }]);\n  return Query;\n}(AbstractQuery);\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["util","require","AbstractQuery","sequelizeErrors","parserStore","_","_require","logger","moment","debug","debugContext","Query","_AbstractQuery","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","getInsertIdField","getSQLTypeFromJsType","Buffer","isBuffer","ParamType","DataType","Data","toString","_run2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","connection","sql","parameters","_this","benchmark","queryBegin","errStack","wrap","_callee$","_context","prev","next","sequelize","options","Date","now","log","concat","uuid","Error","stack","abrupt","Promise","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","commitTransaction","rollbackTransaction","err2","transaction","name","params","forOwn","param","push","SQL","toUpperCase","newSql","isSelectQuery","indexOf","charAt","length","slice","prepare","stmt","execute","result","outparams","inspect","compact","breakLength","Infinity","message","filterSQLError","closeSync","data","metadata","affectedRows","getAffectedRowsSync","fetchAllSync","getColumnMetadataSync","datalen","coltypes","i","SQL_DESC_NAME","SQL_DESC_TYPE_NAME","column","parse","get","utc","from","unshift","stop","_run","_x","_x2","_x3","_run3","_callee2","_callee2$","_context2","sent","run","_x4","_x5","search","isDropSchemaQuery","querySync","match","table","mtarray","split","dropTable","substring","rowCount","conn","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","isDescribeQuery","_iterator","_createForOfIteratorHelper","_step","s","n","done","_result","Default","replace","Name","type","Type","allowNull","IsNull","defaultValue","primaryKey","KeySeq","autoIncrement","IsIdentity","comment","Comment","e","f","isShowIndexesQuery","handleShowIndexesQuery","handleSelectQuery","isUpsertQuery","query","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","VERSION","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","handleShowTablesQuery","results","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","remove","constraint","constraintName","_this2","uniqueIndexName","uniqueKey","fields","model","uniqueKeys","where","dataValues","msg","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","currItem","forEach","item","Key_name","primary","keyType","unique","COLNAMES","x","columnName","trim","attribute","order","collate","metaData","autoIncrementAttribute","id","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","formatBindParameters","values","dialect","bindParam","replacementFunc","values2","Array","isArray","module","exports","default"],"sources":["../../../src/dialects/db2/query.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}