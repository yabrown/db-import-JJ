{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aribraun/Desktop/db-import/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar MAX = (1 << 16) - 1;\nvar UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nvar PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nvar NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nvar MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nvar VarChar = {\n  id: 0xA7,\n  type: 'BIGVARCHR',\n  name: 'VarChar',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    var value = parameter.value;\n    var length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n    if (length <= this.maximumLength) {\n      return 'varchar(' + length + ')';\n    } else {\n      return 'varchar(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    var value = parameter.value;\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo: function generateTypeInfo(parameter) {\n    var buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n    return buffer;\n  },\n  generateParameterLength: function generateParameterLength(parameter, options) {\n    var value = parameter.value;\n    if (value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n    if (parameter.length <= this.maximumLength) {\n      var buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(value.length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n  generateParameterData: /*#__PURE__*/_regeneratorRuntime().mark(function generateParameterData(parameter, options) {\n    var value, buffer;\n    return _regeneratorRuntime().wrap(function generateParameterData$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          value = parameter.value;\n          if (!(value == null)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 3:\n          if (!(parameter.length <= this.maximumLength)) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 6;\n          return value;\n        case 6:\n          _context.next = 17;\n          break;\n        case 8:\n          if (!(value.length > 0)) {\n            _context.next = 15;\n            break;\n          }\n          buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(value.length, 0);\n          _context.next = 13;\n          return buffer;\n        case 13:\n          _context.next = 15;\n          return value;\n        case 15:\n          _context.next = 17;\n          return PLP_TERMINATOR;\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, generateParameterData, this);\n  }),\n  validate: function validate(value, collation) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n    return _iconvLite.default.encode(value, collation.codepage);\n  }\n};\nvar _default = VarChar;\nexports.default = _default;\nmodule.exports = VarChar;","map":{"version":3,"names":["_iconvLite","_interopRequireDefault","require","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NULL_LENGTH","MAX_NULL_LENGTH","VarChar","id","type","name","maximumLength","declaration","parameter","value","length","output","resolveLength","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","collation","toBuffer","copy","generateParameterLength","options","generateParameterData","_regeneratorRuntime","mark","wrap","generateParameterData$","_context","prev","next","abrupt","writeUInt32LE","stop","validate","TypeError","Error","codepage","default","encode","module","exports"],"sources":["../../src/data-types/varchar.ts"],"sourcesContent":["import iconv from 'iconv-lite';\n\nimport { DataType } from '../data-type';\n\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst VarChar: { maximumLength: number } & DataType = {\n  id: 0xA7,\n  type: 'BIGVARCHR',\n  name: 'VarChar',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varchar(' + length + ')';\n    } else {\n      return 'varchar(max)';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length! <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length!, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      if (parameter.length! <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    if (parameter.length! <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(value.length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return;\n    }\n\n    if (parameter.length! <= this.maximumLength) {\n      yield value;\n    } else {\n      if (value.length > 0) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32LE(value.length, 0);\n        yield buffer;\n\n        yield value;\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function(value, collation): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n\n    return iconv.encode(value, collation.codepage);\n  }\n};\n\nexport default VarChar;\nmodule.exports = VarChar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}