{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aribraun/Desktop/db-import/db-import-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nvar debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\nvar debugObj = Object.assign(function (namespace) {\n  return createDebugger(namespace);\n}, {\n  enable: enable,\n  enabled: enabled,\n  disable: disable,\n  log: log\n});\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  var wildcard = /\\*/g;\n  var namespaceList = namespaces.split(\",\").map(function (ns) {\n    return ns.trim().replace(wildcard, \".*?\");\n  });\n  var _iterator = _createForOfIteratorHelper(namespaceList),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ns = _step.value;\n      if (ns.startsWith(\"-\")) {\n        skippedNamespaces.push(new RegExp(\"^\".concat(ns.substr(1), \"$\")));\n      } else {\n        enabledNamespaces.push(new RegExp(\"^\".concat(ns, \"$\")));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(debuggers),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var instance = _step2.value;\n      instance.enabled = enabled(instance.namespace);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n  var _iterator3 = _createForOfIteratorHelper(skippedNamespaces),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var skipped = _step3.value;\n      if (skipped.test(namespace)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var _iterator4 = _createForOfIteratorHelper(enabledNamespaces),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var enabledNamespace = _step4.value;\n      if (enabledNamespace.test(namespace)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return false;\n}\nfunction disable() {\n  var result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\nfunction createDebugger(namespace) {\n  var newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy: destroy,\n    log: debugObj.log,\n    namespace: namespace,\n    extend: extend\n  });\n  function debug() {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length > 0) {\n      args[0] = \"\".concat(namespace, \" \").concat(args[0]);\n    }\n    newDebugger.log.apply(newDebugger, args);\n  }\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\nfunction destroy() {\n  var index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction extend(namespace) {\n  var newDebugger = createDebugger(\"\".concat(this.namespace, \":\").concat(namespace));\n  newDebugger.log = this.log;\n  return newDebugger;\n}\nexport default debugObj;","map":{"version":3,"names":["log","debugEnvVariable","process","env","DEBUG","undefined","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","Object","assign","namespace","createDebugger","enabled","disable","namespaces","wildcard","namespaceList","split","map","ns","trim","replace","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","startsWith","push","RegExp","concat","substr","err","e","f","_iterator2","_step2","instance","endsWith","_iterator3","_step3","skipped","test","_iterator4","_step4","enabledNamespace","result","newDebugger","debug","destroy","extend","_len","arguments","length","args","Array","_key","apply","index","indexOf","splice"],"sources":["../../src/debug.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n"],"mappings":";AAAA;AACA;AAEA,SAASA,GAAG,QAAQ,OAAO;AAgE3B,IAAMC,gBAAgB,GACnB,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACC,GAAG,IAAID,OAAO,CAACC,GAAG,CAACC,KAAK,IAAKC,SAAS;AAEnF,IAAIC,aAAiC;AACrC,IAAIC,iBAAiB,GAAa,EAAE;AACpC,IAAIC,iBAAiB,GAAa,EAAE;AACpC,IAAMC,SAAS,GAAe,EAAE;AAEhC,IAAIR,gBAAgB,EAAE;EACpBS,MAAM,CAACT,gBAAgB,CAAC;;AAG1B,IAAMU,QAAQ,GAAUC,MAAM,CAACC,MAAM,CACnC,UAACC,SAAiB,EAAc;EAC9B,OAAOC,cAAc,CAACD,SAAS,CAAC;AAClC,CAAC,EACD;EACEJ,MAAM,EAANA,MAAM;EACNM,OAAO,EAAPA,OAAO;EACPC,OAAO,EAAPA,OAAO;EACPjB,GAAG,EAAHA;CACD,CACF;AAED,SAASU,MAAMA,CAACQ,UAAkB;EAChCZ,aAAa,GAAGY,UAAU;EAC1BX,iBAAiB,GAAG,EAAE;EACtBC,iBAAiB,GAAG,EAAE;EACtB,IAAMW,QAAQ,GAAG,KAAK;EACtB,IAAMC,aAAa,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAACC,EAAE;IAAA,OAAKA,EAAE,CAACC,IAAI,EAAE,CAACC,OAAO,CAACN,QAAQ,EAAE,KAAK,CAAC;EAAA,EAAC;EAAC,IAAAO,SAAA,GAAAC,0BAAA,CAC3EP,aAAa;IAAAQ,KAAA;EAAA;IAA9B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAArBR,EAAE,GAAAK,KAAA,CAAAI,KAAA;MACX,IAAIT,EAAE,CAACU,UAAU,CAAC,GAAG,CAAC,EAAE;QACtBzB,iBAAiB,CAAC0B,IAAI,CAAC,IAAIC,MAAM,KAAAC,MAAA,CAAKb,EAAE,CAACc,MAAM,CAAC,CAAC,CAAC,MAAG,CAAC,CAAC;OACxD,MAAM;QACL9B,iBAAiB,CAAC2B,IAAI,CAAC,IAAIC,MAAM,KAAAC,MAAA,CAAKb,EAAE,MAAG,CAAC,CAAC;;;EAEhD,SAAAe,GAAA;IAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;EAAA;IAAAZ,SAAA,CAAAc,CAAA;EAAA;EAAA,IAAAC,UAAA,GAAAd,0BAAA,CACsBlB,SAAS;IAAAiC,MAAA;EAAA;IAAhC,KAAAD,UAAA,CAAAZ,CAAA,MAAAa,MAAA,GAAAD,UAAA,CAAAX,CAAA,IAAAC,IAAA,GAAkC;MAAA,IAAvBY,QAAQ,GAAAD,MAAA,CAAAV,KAAA;MACjBW,QAAQ,CAAC3B,OAAO,GAAGA,OAAO,CAAC2B,QAAQ,CAAC7B,SAAS,CAAC;;EAC/C,SAAAwB,GAAA;IAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;EAAA;IAAAG,UAAA,CAAAD,CAAA;EAAA;AACH;AAEA,SAASxB,OAAOA,CAACF,SAAiB;EAChC,IAAIA,SAAS,CAAC8B,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B,OAAO,IAAI;;EACZ,IAAAC,UAAA,GAAAlB,0BAAA,CAEqBnB,iBAAiB;IAAAsC,MAAA;EAAA;IAAvC,KAAAD,UAAA,CAAAhB,CAAA,MAAAiB,MAAA,GAAAD,UAAA,CAAAf,CAAA,IAAAC,IAAA,GAAyC;MAAA,IAA9BgB,OAAO,GAAAD,MAAA,CAAAd,KAAA;MAChB,IAAIe,OAAO,CAACC,IAAI,CAAClC,SAAS,CAAC,EAAE;QAC3B,OAAO,KAAK;;;EAEf,SAAAwB,GAAA;IAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;EAAA;IAAAO,UAAA,CAAAL,CAAA;EAAA;EAAA,IAAAS,UAAA,GAAAtB,0BAAA,CAC8BpB,iBAAiB;IAAA2C,MAAA;EAAA;IAAhD,KAAAD,UAAA,CAAApB,CAAA,MAAAqB,MAAA,GAAAD,UAAA,CAAAnB,CAAA,IAAAC,IAAA,GAAkD;MAAA,IAAvCoB,gBAAgB,GAAAD,MAAA,CAAAlB,KAAA;MACzB,IAAImB,gBAAgB,CAACH,IAAI,CAAClC,SAAS,CAAC,EAAE;QACpC,OAAO,IAAI;;;EAEd,SAAAwB,GAAA;IAAAW,UAAA,CAAAV,CAAA,CAAAD,GAAA;EAAA;IAAAW,UAAA,CAAAT,CAAA;EAAA;EACD,OAAO,KAAK;AACd;AAEA,SAASvB,OAAOA,CAAA;EACd,IAAMmC,MAAM,GAAG9C,aAAa,IAAI,EAAE;EAClCI,MAAM,CAAC,EAAE,CAAC;EACV,OAAO0C,MAAM;AACf;AAEA,SAASrC,cAAcA,CAACD,SAAiB;EACvC,IAAMuC,WAAW,GAAazC,MAAM,CAACC,MAAM,CAACyC,KAAK,EAAE;IACjDtC,OAAO,EAAEA,OAAO,CAACF,SAAS,CAAC;IAC3ByC,OAAO,EAAPA,OAAO;IACPvD,GAAG,EAAEW,QAAQ,CAACX,GAAG;IACjBc,SAAS,EAATA,SAAS;IACT0C,MAAM,EAANA;GACD,CAAC;EAEF,SAASF,KAAKA,CAAA,EAAe;IAC3B,IAAI,CAACD,WAAW,CAACrC,OAAO,EAAE;MACxB;;IACD,SAAAyC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHeC,IAAW,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAXF,IAAW,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAI3B,IAAIF,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE;MACnBC,IAAI,CAAC,CAAC,CAAC,MAAAxB,MAAA,CAAMtB,SAAS,OAAAsB,MAAA,CAAIwB,IAAI,CAAC,CAAC,CAAC,CAAE;;IAErCP,WAAW,CAACrD,GAAG,CAAA+D,KAAA,CAAfV,WAAW,EAAQO,IAAI,CAAC;EAC1B;EAEAnD,SAAS,CAACyB,IAAI,CAACmB,WAAW,CAAC;EAE3B,OAAOA,WAAW;AACpB;AAEA,SAASE,OAAOA,CAAA;EACd,IAAMS,KAAK,GAAGvD,SAAS,CAACwD,OAAO,CAAC,IAAI,CAAC;EACrC,IAAID,KAAK,IAAI,CAAC,EAAE;IACdvD,SAAS,CAACyD,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC1B,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd;AAEA,SAASR,MAAMA,CAAiB1C,SAAiB;EAC/C,IAAMuC,WAAW,GAAGtC,cAAc,IAAAqB,MAAA,CAAI,IAAI,CAACtB,SAAS,OAAAsB,MAAA,CAAItB,SAAS,CAAE,CAAC;EACpEuC,WAAW,CAACrD,GAAG,GAAG,IAAI,CAACA,GAAG;EAC1B,OAAOqD,WAAW;AACpB;AAEA,eAAe1C,QAAQ"},"metadata":{},"sourceType":"module"}