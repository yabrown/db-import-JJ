{"version":3,"sources":["../node_modules/sequelize/lib/dialects/abstract sync","logo.svg","backend.js","Components/ImportForm.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PORT","basicGet","_x","_x2","_x3","_basicGet","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","link","DBName","force","res","body","wrap","_context","prev","next","fetch","method","headers","JSON","stringify","sent","json","console","log","abrupt","message","stop","ImportForm","_useState","useState","_useState2","_slicedToArray","setLink","_useState3","_useState4","setDBName","_useState5","_useState6","setMessage","_useState7","_useState8","messageColor","setMessageColor","_useState9","_useState10","popup","setPopup","handleChange","event","setter","target","value","handleSubmit","_ref","_yield$basicGet","_yield$basicGet2","preventDefault","status","_jsxs","onSubmit","children","_jsx","type","onChange","style","color","className","onClick","App","count","setCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.45af5d93.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 183;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport { Sequelize, Model, DataTypes } from 'sequelize';\n\nconst PORT = 'https://jj-table-importer.onrender.com/'\nconst SOCKETPORT = 'ws://localhost:3000'\n\n\n\nasync function basicGet(link, DBName, force){\n    const res = await fetch(PORT, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n          },\n        body: JSON.stringify({link: link, DBName: DBName, force: force})\n    }\n    );\n    const body = await res.json()\n    console.log(res);\n    return [res, body.message];\n}\n\n\nasync function basicSocket(link, DBName){\n    const socket = new WebSocket(SOCKETPORT);\n\n    socket.onopen = () => {\n        console.log('WebSocket connection established');\n\n        const payload = { link, DBName};\n\n        socket.send(JSON.stringify(payload));\n    };\n\n    socket.onmessage = (event) => {\n        const text = JSON.parse(event.data);\n        console.log(text);\n        console.log('word');\n    };\n\n    socket.onclose = () => {\n        console.log('WebSocket connection closed');\n    };\n}\n\n\nexport {\n    basicGet,\n    basicSocket\n};\n","\nimport React, {useState} from 'react';\nimport '../backend'\nimport { basicGet, basicSocket } from '../backend';\nimport {ConfirmationPopup} from './Modal'\n\nconst ImportForm = () => {\n  const [link, setLink] = useState('https://data.cityofnewyork.us/api/views/xubg-57si/rows.json');\n  const[DBName, setDBName] = useState('table');\n  const [message, setMessage] = useState('');\n  const [messageColor, setMessageColor] = useState('white');\n  const [popup, setPopup] = useState(false);\n\n  const handleChange = (event, setter) => {\n    setter(event.target.value);\n  };\n\n  const handlePopupConfirm = (event) => {\n    setPopup(false);\n    handleSubmit(event, true);\n  };\n\n  const handlePopupCancel = (event) => {\n    setPopup(false);\n  };\n\n  const handleSubmit = async(event, force) => {\n    event.preventDefault();\n\n    setMessageColor('#55FFFF')\n    setMessage('Loading...')\n    let [res, message] = await basicGet(link, DBName, force);\n    if(res.status==302) setPopup(true)\n    setMessage(message)\n    setMessageColor(res.status==200? '#55FF55':'#FF5555')\n  };\n\n  return (\n    <form onSubmit={(event)=>handleSubmit(event, false)}>\n      Enter link to dataset: \n      <input type=\"text\" value={link} onChange={(event)=>handleChange(event, setLink)} /> <br/>\n      Enter desired table name:\n      <input type=\"text\" value={DBName} onChange={(event)=>handleChange(event, setDBName)} /><br/>\n      {!popup && <button type=\"submit\">Submit</button>}\n      {message && <p style={{ color: messageColor }}>{message}</p>}\n      {popup && (\n        <div>\n          <p>Are you sure you want to proceed?</p>\n          <div className=\"popup-actions\">\n            <button onClick={handlePopupConfirm}>Yes</button>\n            <button onClick={handlePopupCancel}>No</button>\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport {ImportForm};","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport {ImportForm} from './Components/ImportForm'\nimport {createTable, basicGet} from './backend'\n\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Use this incrementer to check the reactivity of the site-- if the counter doesn't update, the site crashed.<br/>\n        {count}\n        <button onClick={()=>setCount(count+1)}>Update counter</button>\n        <br/><br/><br/>\n        <ImportForm/>\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}